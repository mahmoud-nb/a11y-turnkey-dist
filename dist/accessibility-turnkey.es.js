var UR = Object.defineProperty;
var jR = (_, C, b) => C in _ ? UR(_, C, { enumerable: true, configurable: true, writable: true, value: b }) : _[C] = b;
var Jl = (_, C, b) => (jR(_, typeof C != "symbol" ? C + "" : C, b), b);
function BC(_) {
  return _ && _.__esModule && Object.prototype.hasOwnProperty.call(_, "default") ? _.default : _;
}
var L0 = { exports: {} }, Gh = {};
/**
 * @license React
 * react-jsx-dev-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var gC;
function FR() {
  if (gC)
    return Gh;
  gC = 1;
  var _ = Symbol.for("react.fragment");
  return Gh.Fragment = _, Gh.jsxDEV = void 0, Gh;
}
var qh = {}, Xh = { exports: {} }, Dt = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var SC;
function HR() {
  if (SC)
    return Dt;
  SC = 1;
  var _ = Symbol.for("react.element"), C = Symbol.for("react.portal"), b = Symbol.for("react.fragment"), T = Symbol.for("react.strict_mode"), X = Symbol.for("react.profiler"), P = Symbol.for("react.provider"), g = Symbol.for("react.context"), ge = Symbol.for("react.forward_ref"), J = Symbol.for("react.suspense"), Q = Symbol.for("react.memo"), ve = Symbol.for("react.lazy"), W = Symbol.iterator;
  function Z(R) {
    return R === null || typeof R != "object" ? null : (R = W && R[W] || R["@@iterator"], typeof R == "function" ? R : null);
  }
  var q = { isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, fe = Object.assign, ee = {};
  function ie(R, K, Ce) {
    this.props = R, this.context = K, this.refs = ee, this.updater = Ce || q;
  }
  ie.prototype.isReactComponent = {}, ie.prototype.setState = function(R, K) {
    if (typeof R != "object" && typeof R != "function" && R != null)
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, R, K, "setState");
  }, ie.prototype.forceUpdate = function(R) {
    this.updater.enqueueForceUpdate(this, R, "forceUpdate");
  };
  function Xe() {
  }
  Xe.prototype = ie.prototype;
  function de(R, K, Ce) {
    this.props = R, this.context = K, this.refs = ee, this.updater = Ce || q;
  }
  var oe = de.prototype = new Xe();
  oe.constructor = de, fe(oe, ie.prototype), oe.isPureReactComponent = true;
  var xe = Array.isArray, be = Object.prototype.hasOwnProperty, Te = { current: null }, De = { key: true, ref: true, __self: true, __source: true };
  function St(R, K, Ce) {
    var it, Ze = {}, Rt = null, ct = null;
    if (K != null)
      for (it in K.ref !== void 0 && (ct = K.ref), K.key !== void 0 && (Rt = "" + K.key), K)
        be.call(K, it) && !De.hasOwnProperty(it) && (Ze[it] = K[it]);
    var bt = arguments.length - 2;
    if (bt === 1)
      Ze.children = Ce;
    else if (1 < bt) {
      for (var ft = Array(bt), It = 0; It < bt; It++)
        ft[It] = arguments[It + 2];
      Ze.children = ft;
    }
    if (R && R.defaultProps)
      for (it in bt = R.defaultProps, bt)
        Ze[it] === void 0 && (Ze[it] = bt[it]);
    return { $$typeof: _, type: R, key: Rt, ref: ct, props: Ze, _owner: Te.current };
  }
  function xt(R, K) {
    return { $$typeof: _, type: R.type, key: K, ref: R.ref, props: R.props, _owner: R._owner };
  }
  function Lt(R) {
    return typeof R == "object" && R !== null && R.$$typeof === _;
  }
  function Et(R) {
    var K = { "=": "=0", ":": "=2" };
    return "$" + R.replace(/[=:]/g, function(Ce) {
      return K[Ce];
    });
  }
  var en = /\/+/g;
  function Be(R, K) {
    return typeof R == "object" && R !== null && R.key != null ? Et("" + R.key) : K.toString(36);
  }
  function rt(R, K, Ce, it, Ze) {
    var Rt = typeof R;
    (Rt === "undefined" || Rt === "boolean") && (R = null);
    var ct = false;
    if (R === null)
      ct = true;
    else
      switch (Rt) {
        case "string":
        case "number":
          ct = true;
          break;
        case "object":
          switch (R.$$typeof) {
            case _:
            case C:
              ct = true;
          }
      }
    if (ct)
      return ct = R, Ze = Ze(ct), R = it === "" ? "." + Be(ct, 0) : it, xe(Ze) ? (Ce = "", R != null && (Ce = R.replace(en, "$&/") + "/"), rt(Ze, K, Ce, "", function(It) {
        return It;
      })) : Ze != null && (Lt(Ze) && (Ze = xt(Ze, Ce + (!Ze.key || ct && ct.key === Ze.key ? "" : ("" + Ze.key).replace(en, "$&/") + "/") + R)), K.push(Ze)), 1;
    if (ct = 0, it = it === "" ? "." : it + ":", xe(R))
      for (var bt = 0; bt < R.length; bt++) {
        Rt = R[bt];
        var ft = it + Be(Rt, bt);
        ct += rt(Rt, K, Ce, ft, Ze);
      }
    else if (ft = Z(R), typeof ft == "function")
      for (R = ft.call(R), bt = 0; !(Rt = R.next()).done; )
        Rt = Rt.value, ft = it + Be(Rt, bt++), ct += rt(Rt, K, Ce, ft, Ze);
    else if (Rt === "object")
      throw K = String(R), Error("Objects are not valid as a React child (found: " + (K === "[object Object]" ? "object with keys {" + Object.keys(R).join(", ") + "}" : K) + "). If you meant to render a collection of children, use an array instead.");
    return ct;
  }
  function Ut(R, K, Ce) {
    if (R == null)
      return R;
    var it = [], Ze = 0;
    return rt(R, it, "", "", function(Rt) {
      return K.call(Ce, Rt, Ze++);
    }), it;
  }
  function ht(R) {
    if (R._status === -1) {
      var K = R._result;
      K = K(), K.then(function(Ce) {
        (R._status === 0 || R._status === -1) && (R._status = 1, R._result = Ce);
      }, function(Ce) {
        (R._status === 0 || R._status === -1) && (R._status = 2, R._result = Ce);
      }), R._status === -1 && (R._status = 0, R._result = K);
    }
    if (R._status === 1)
      return R._result.default;
    throw R._result;
  }
  var Ne = { current: null }, ce = { transition: null }, je = { ReactCurrentDispatcher: Ne, ReactCurrentBatchConfig: ce, ReactCurrentOwner: Te };
  return Dt.Children = { map: Ut, forEach: function(R, K, Ce) {
    Ut(R, function() {
      K.apply(this, arguments);
    }, Ce);
  }, count: function(R) {
    var K = 0;
    return Ut(R, function() {
      K++;
    }), K;
  }, toArray: function(R) {
    return Ut(R, function(K) {
      return K;
    }) || [];
  }, only: function(R) {
    if (!Lt(R))
      throw Error("React.Children.only expected to receive a single React element child.");
    return R;
  } }, Dt.Component = ie, Dt.Fragment = b, Dt.Profiler = X, Dt.PureComponent = de, Dt.StrictMode = T, Dt.Suspense = J, Dt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = je, Dt.cloneElement = function(R, K, Ce) {
    if (R == null)
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + R + ".");
    var it = fe({}, R.props), Ze = R.key, Rt = R.ref, ct = R._owner;
    if (K != null) {
      if (K.ref !== void 0 && (Rt = K.ref, ct = Te.current), K.key !== void 0 && (Ze = "" + K.key), R.type && R.type.defaultProps)
        var bt = R.type.defaultProps;
      for (ft in K)
        be.call(K, ft) && !De.hasOwnProperty(ft) && (it[ft] = K[ft] === void 0 && bt !== void 0 ? bt[ft] : K[ft]);
    }
    var ft = arguments.length - 2;
    if (ft === 1)
      it.children = Ce;
    else if (1 < ft) {
      bt = Array(ft);
      for (var It = 0; It < ft; It++)
        bt[It] = arguments[It + 2];
      it.children = bt;
    }
    return { $$typeof: _, type: R.type, key: Ze, ref: Rt, props: it, _owner: ct };
  }, Dt.createContext = function(R) {
    return R = { $$typeof: g, _currentValue: R, _currentValue2: R, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, R.Provider = { $$typeof: P, _context: R }, R.Consumer = R;
  }, Dt.createElement = St, Dt.createFactory = function(R) {
    var K = St.bind(null, R);
    return K.type = R, K;
  }, Dt.createRef = function() {
    return { current: null };
  }, Dt.forwardRef = function(R) {
    return { $$typeof: ge, render: R };
  }, Dt.isValidElement = Lt, Dt.lazy = function(R) {
    return { $$typeof: ve, _payload: { _status: -1, _result: R }, _init: ht };
  }, Dt.memo = function(R, K) {
    return { $$typeof: Q, type: R, compare: K === void 0 ? null : K };
  }, Dt.startTransition = function(R) {
    var K = ce.transition;
    ce.transition = {};
    try {
      R();
    } finally {
      ce.transition = K;
    }
  }, Dt.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
  }, Dt.useCallback = function(R, K) {
    return Ne.current.useCallback(R, K);
  }, Dt.useContext = function(R) {
    return Ne.current.useContext(R);
  }, Dt.useDebugValue = function() {
  }, Dt.useDeferredValue = function(R) {
    return Ne.current.useDeferredValue(R);
  }, Dt.useEffect = function(R, K) {
    return Ne.current.useEffect(R, K);
  }, Dt.useId = function() {
    return Ne.current.useId();
  }, Dt.useImperativeHandle = function(R, K, Ce) {
    return Ne.current.useImperativeHandle(R, K, Ce);
  }, Dt.useInsertionEffect = function(R, K) {
    return Ne.current.useInsertionEffect(R, K);
  }, Dt.useLayoutEffect = function(R, K) {
    return Ne.current.useLayoutEffect(R, K);
  }, Dt.useMemo = function(R, K) {
    return Ne.current.useMemo(R, K);
  }, Dt.useReducer = function(R, K, Ce) {
    return Ne.current.useReducer(R, K, Ce);
  }, Dt.useRef = function(R) {
    return Ne.current.useRef(R);
  }, Dt.useState = function(R) {
    return Ne.current.useState(R);
  }, Dt.useSyncExternalStore = function(R, K, Ce) {
    return Ne.current.useSyncExternalStore(R, K, Ce);
  }, Dt.useTransition = function() {
    return Ne.current.useTransition();
  }, Dt.version = "18.2.0", Dt;
}
var iv = { exports: {} };
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
iv.exports;
var bC;
function PR() {
  return bC || (bC = 1, function(_, C) {
    (function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var b = "18.2.0", T = Symbol.for("react.element"), X = Symbol.for("react.portal"), P = Symbol.for("react.fragment"), g = Symbol.for("react.strict_mode"), ge = Symbol.for("react.profiler"), J = Symbol.for("react.provider"), Q = Symbol.for("react.context"), ve = Symbol.for("react.forward_ref"), W = Symbol.for("react.suspense"), Z = Symbol.for("react.suspense_list"), q = Symbol.for("react.memo"), fe = Symbol.for("react.lazy"), ee = Symbol.for("react.offscreen"), ie = Symbol.iterator, Xe = "@@iterator";
      function de(m) {
        if (m === null || typeof m != "object")
          return null;
        var k = ie && m[ie] || m[Xe];
        return typeof k == "function" ? k : null;
      }
      var oe = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, xe = {
        transition: null
      }, be = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      }, Te = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, De = {}, St = null;
      function xt(m) {
        St = m;
      }
      De.setExtraStackFrame = function(m) {
        St = m;
      }, De.getCurrentStack = null, De.getStackAddendum = function() {
        var m = "";
        St && (m += St);
        var k = De.getCurrentStack;
        return k && (m += k() || ""), m;
      };
      var Lt = false, Et = false, en = false, Be = false, rt = false, Ut = {
        ReactCurrentDispatcher: oe,
        ReactCurrentBatchConfig: xe,
        ReactCurrentOwner: Te
      };
      Ut.ReactDebugCurrentFrame = De, Ut.ReactCurrentActQueue = be;
      function ht(m) {
        {
          for (var k = arguments.length, j = new Array(k > 1 ? k - 1 : 0), B = 1; B < k; B++)
            j[B - 1] = arguments[B];
          ce("warn", m, j);
        }
      }
      function Ne(m) {
        {
          for (var k = arguments.length, j = new Array(k > 1 ? k - 1 : 0), B = 1; B < k; B++)
            j[B - 1] = arguments[B];
          ce("error", m, j);
        }
      }
      function ce(m, k, j) {
        {
          var B = Ut.ReactDebugCurrentFrame, ue = B.getStackAddendum();
          ue !== "" && (k += "%s", j = j.concat([ue]));
          var Ge = j.map(function(Se) {
            return String(Se);
          });
          Ge.unshift("Warning: " + k), Function.prototype.apply.call(console[m], console, Ge);
        }
      }
      var je = {};
      function R(m, k) {
        {
          var j = m.constructor, B = j && (j.displayName || j.name) || "ReactClass", ue = B + "." + k;
          if (je[ue])
            return;
          Ne("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", k, B), je[ue] = true;
        }
      }
      var K = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(m) {
          return false;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(m, k, j) {
          R(m, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(m, k, j, B) {
          R(m, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(m, k, j, B) {
          R(m, "setState");
        }
      }, Ce = Object.assign, it = {};
      Object.freeze(it);
      function Ze(m, k, j) {
        this.props = m, this.context = k, this.refs = it, this.updater = j || K;
      }
      Ze.prototype.isReactComponent = {}, Ze.prototype.setState = function(m, k) {
        if (typeof m != "object" && typeof m != "function" && m != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, m, k, "setState");
      }, Ze.prototype.forceUpdate = function(m) {
        this.updater.enqueueForceUpdate(this, m, "forceUpdate");
      };
      {
        var Rt = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, ct = function(m, k) {
          Object.defineProperty(Ze.prototype, m, {
            get: function() {
              ht("%s(...) is deprecated in plain JavaScript React classes. %s", k[0], k[1]);
            }
          });
        };
        for (var bt in Rt)
          Rt.hasOwnProperty(bt) && ct(bt, Rt[bt]);
      }
      function ft() {
      }
      ft.prototype = Ze.prototype;
      function It(m, k, j) {
        this.props = m, this.context = k, this.refs = it, this.updater = j || K;
      }
      var Br = It.prototype = new ft();
      Br.constructor = It, Ce(Br, Ze.prototype), Br.isPureReactComponent = true;
      function hr() {
        var m = {
          current: null
        };
        return Object.seal(m), m;
      }
      var Ir = Array.isArray;
      function yn(m) {
        return Ir(m);
      }
      function Qn(m) {
        {
          var k = typeof Symbol == "function" && Symbol.toStringTag, j = k && m[Symbol.toStringTag] || m.constructor.name || "Object";
          return j;
        }
      }
      function Fn(m) {
        try {
          return Hn(m), false;
        } catch {
          return true;
        }
      }
      function Hn(m) {
        return "" + m;
      }
      function Dn(m) {
        if (Fn(m))
          return Ne("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Qn(m)), Hn(m);
      }
      function $r(m, k, j) {
        var B = m.displayName;
        if (B)
          return B;
        var ue = k.displayName || k.name || "";
        return ue !== "" ? j + "(" + ue + ")" : j;
      }
      function Yr(m) {
        return m.displayName || "Context";
      }
      function Gn(m) {
        if (m == null)
          return null;
        if (typeof m.tag == "number" && Ne("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof m == "function")
          return m.displayName || m.name || null;
        if (typeof m == "string")
          return m;
        switch (m) {
          case P:
            return "Fragment";
          case X:
            return "Portal";
          case ge:
            return "Profiler";
          case g:
            return "StrictMode";
          case W:
            return "Suspense";
          case Z:
            return "SuspenseList";
        }
        if (typeof m == "object")
          switch (m.$$typeof) {
            case Q:
              var k = m;
              return Yr(k) + ".Consumer";
            case J:
              var j = m;
              return Yr(j._context) + ".Provider";
            case ve:
              return $r(m, m.render, "ForwardRef");
            case q:
              var B = m.displayName || null;
              return B !== null ? B : Gn(m.type) || "Memo";
            case fe: {
              var ue = m, Ge = ue._payload, Se = ue._init;
              try {
                return Gn(Se(Ge));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var yr = Object.prototype.hasOwnProperty, Wr = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      }, gr, pi, rr;
      rr = {};
      function Qr(m) {
        if (yr.call(m, "ref")) {
          var k = Object.getOwnPropertyDescriptor(m, "ref").get;
          if (k && k.isReactWarning)
            return false;
        }
        return m.ref !== void 0;
      }
      function gn(m) {
        if (yr.call(m, "key")) {
          var k = Object.getOwnPropertyDescriptor(m, "key").get;
          if (k && k.isReactWarning)
            return false;
        }
        return m.key !== void 0;
      }
      function wr(m, k) {
        var j = function() {
          gr || (gr = true, Ne("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", k));
        };
        j.isReactWarning = true, Object.defineProperty(m, "key", {
          get: j,
          configurable: true
        });
      }
      function da(m, k) {
        var j = function() {
          pi || (pi = true, Ne("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", k));
        };
        j.isReactWarning = true, Object.defineProperty(m, "ref", {
          get: j,
          configurable: true
        });
      }
      function vi(m) {
        if (typeof m.ref == "string" && Te.current && m.__self && Te.current.stateNode !== m.__self) {
          var k = Gn(Te.current.type);
          rr[k] || (Ne('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', k, m.ref), rr[k] = true);
        }
      }
      var pe = function(m, k, j, B, ue, Ge, Se) {
        var We = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: T,
          // Built-in properties that belong on the element
          type: m,
          key: k,
          ref: j,
          props: Se,
          // Record the component responsible for creating this element.
          _owner: Ge
        };
        return We._store = {}, Object.defineProperty(We._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }), Object.defineProperty(We, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: B
        }), Object.defineProperty(We, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: ue
        }), Object.freeze && (Object.freeze(We.props), Object.freeze(We)), We;
      };
      function Fe(m, k, j) {
        var B, ue = {}, Ge = null, Se = null, We = null, vt = null;
        if (k != null) {
          Qr(k) && (Se = k.ref, vi(k)), gn(k) && (Dn(k.key), Ge = "" + k.key), We = k.__self === void 0 ? null : k.__self, vt = k.__source === void 0 ? null : k.__source;
          for (B in k)
            yr.call(k, B) && !Wr.hasOwnProperty(B) && (ue[B] = k[B]);
        }
        var At = arguments.length - 2;
        if (At === 1)
          ue.children = j;
        else if (At > 1) {
          for (var rn = Array(At), Jt = 0; Jt < At; Jt++)
            rn[Jt] = arguments[Jt + 2];
          Object.freeze && Object.freeze(rn), ue.children = rn;
        }
        if (m && m.defaultProps) {
          var an = m.defaultProps;
          for (B in an)
            ue[B] === void 0 && (ue[B] = an[B]);
        }
        if (Ge || Se) {
          var un = typeof m == "function" ? m.displayName || m.name || "Unknown" : m;
          Ge && wr(ue, un), Se && da(ue, un);
        }
        return pe(m, Ge, Se, We, vt, Te.current, ue);
      }
      function dt(m, k) {
        var j = pe(m.type, k, m.ref, m._self, m._source, m._owner, m.props);
        return j;
      }
      function Pt(m, k, j) {
        if (m == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + m + ".");
        var B, ue = Ce({}, m.props), Ge = m.key, Se = m.ref, We = m._self, vt = m._source, At = m._owner;
        if (k != null) {
          Qr(k) && (Se = k.ref, At = Te.current), gn(k) && (Dn(k.key), Ge = "" + k.key);
          var rn;
          m.type && m.type.defaultProps && (rn = m.type.defaultProps);
          for (B in k)
            yr.call(k, B) && !Wr.hasOwnProperty(B) && (k[B] === void 0 && rn !== void 0 ? ue[B] = rn[B] : ue[B] = k[B]);
        }
        var Jt = arguments.length - 2;
        if (Jt === 1)
          ue.children = j;
        else if (Jt > 1) {
          for (var an = Array(Jt), un = 0; un < Jt; un++)
            an[un] = arguments[un + 2];
          ue.children = an;
        }
        return pe(m.type, Ge, Se, We, vt, At, ue);
      }
      function $t(m) {
        return typeof m == "object" && m !== null && m.$$typeof === T;
      }
      var On = ".", Sn = ":";
      function Sr(m) {
        var k = /[=:]/g, j = {
          "=": "=0",
          ":": "=2"
        }, B = m.replace(k, function(ue) {
          return j[ue];
        });
        return "$" + B;
      }
      var Zt = false, Tr = /\/+/g;
      function Yt(m) {
        return m.replace(Tr, "$&/");
      }
      function Wt(m, k) {
        return typeof m == "object" && m !== null && m.key != null ? (Dn(m.key), Sr("" + m.key)) : k.toString(36);
      }
      function Zi(m, k, j, B, ue) {
        var Ge = typeof m;
        (Ge === "undefined" || Ge === "boolean") && (m = null);
        var Se = false;
        if (m === null)
          Se = true;
        else
          switch (Ge) {
            case "string":
            case "number":
              Se = true;
              break;
            case "object":
              switch (m.$$typeof) {
                case T:
                case X:
                  Se = true;
              }
          }
        if (Se) {
          var We = m, vt = ue(We), At = B === "" ? On + Wt(We, 0) : B;
          if (yn(vt)) {
            var rn = "";
            At != null && (rn = Yt(At) + "/"), Zi(vt, k, rn, "", function(Kf) {
              return Kf;
            });
          } else
            vt != null && ($t(vt) && (vt.key && (!We || We.key !== vt.key) && Dn(vt.key), vt = dt(
              vt,
              // Keep both the (mapped) and old keys if they differ, just as
              // traverseAllChildren used to do for objects as children
              j + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              (vt.key && (!We || We.key !== vt.key) ? (
                // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                // eslint-disable-next-line react-internal/safe-string-coercion
                Yt("" + vt.key) + "/"
              ) : "") + At
            )), k.push(vt));
          return 1;
        }
        var Jt, an, un = 0, kt = B === "" ? On : B + Sn;
        if (yn(m))
          for (var za = 0; za < m.length; za++)
            Jt = m[za], an = kt + Wt(Jt, za), un += Zi(Jt, k, j, an, ue);
        else {
          var iu = de(m);
          if (typeof iu == "function") {
            var rs = m;
            iu === rs.entries && (Zt || ht("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), Zt = true);
            for (var Xf = iu.call(rs), ra, is = 0; !(ra = Xf.next()).done; )
              Jt = ra.value, an = kt + Wt(Jt, is++), un += Zi(Jt, k, j, an, ue);
          } else if (Ge === "object") {
            var as = String(m);
            throw new Error("Objects are not valid as a React child (found: " + (as === "[object Object]" ? "object with keys {" + Object.keys(m).join(", ") + "}" : as) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return un;
      }
      function wi(m, k, j) {
        if (m == null)
          return m;
        var B = [], ue = 0;
        return Zi(m, B, "", "", function(Ge) {
          return k.call(j, Ge, ue++);
        }), B;
      }
      function ul(m) {
        var k = 0;
        return wi(m, function() {
          k++;
        }), k;
      }
      function to(m, k, j) {
        wi(m, function() {
          k.apply(this, arguments);
        }, j);
      }
      function Qo(m) {
        return wi(m, function(k) {
          return k;
        }) || [];
      }
      function La(m) {
        if (!$t(m))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return m;
      }
      function sl(m) {
        var k = {
          $$typeof: Q,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: m,
          _currentValue2: m,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        k.Provider = {
          $$typeof: J,
          _context: k
        };
        var j = false, B = false, ue = false;
        {
          var Ge = {
            $$typeof: Q,
            _context: k
          };
          Object.defineProperties(Ge, {
            Provider: {
              get: function() {
                return B || (B = true, Ne("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), k.Provider;
              },
              set: function(Se) {
                k.Provider = Se;
              }
            },
            _currentValue: {
              get: function() {
                return k._currentValue;
              },
              set: function(Se) {
                k._currentValue = Se;
              }
            },
            _currentValue2: {
              get: function() {
                return k._currentValue2;
              },
              set: function(Se) {
                k._currentValue2 = Se;
              }
            },
            _threadCount: {
              get: function() {
                return k._threadCount;
              },
              set: function(Se) {
                k._threadCount = Se;
              }
            },
            Consumer: {
              get: function() {
                return j || (j = true, Ne("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), k.Consumer;
              }
            },
            displayName: {
              get: function() {
                return k.displayName;
              },
              set: function(Se) {
                ue || (ht("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", Se), ue = true);
              }
            }
          }), k.Consumer = Ge;
        }
        return k._currentRenderer = null, k._currentRenderer2 = null, k;
      }
      var mi = -1, pa = 0, Ti = 1, va = 2;
      function x(m) {
        if (m._status === mi) {
          var k = m._result, j = k();
          if (j.then(function(Ge) {
            if (m._status === pa || m._status === mi) {
              var Se = m;
              Se._status = Ti, Se._result = Ge;
            }
          }, function(Ge) {
            if (m._status === pa || m._status === mi) {
              var Se = m;
              Se._status = va, Se._result = Ge;
            }
          }), m._status === mi) {
            var B = m;
            B._status = pa, B._result = j;
          }
        }
        if (m._status === Ti) {
          var ue = m._result;
          return ue === void 0 && Ne(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, ue), "default" in ue || Ne(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, ue), ue.default;
        } else
          throw m._result;
      }
      function te(m) {
        var k = {
          // We use these fields to store the result.
          _status: mi,
          _result: m
        }, j = {
          $$typeof: fe,
          _payload: k,
          _init: x
        };
        {
          var B, ue;
          Object.defineProperties(j, {
            defaultProps: {
              configurable: true,
              get: function() {
                return B;
              },
              set: function(Ge) {
                Ne("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), B = Ge, Object.defineProperty(j, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return ue;
              },
              set: function(Ge) {
                Ne("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), ue = Ge, Object.defineProperty(j, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return j;
      }
      function me(m) {
        m != null && m.$$typeof === q ? Ne("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof m != "function" ? Ne("forwardRef requires a render function but was given %s.", m === null ? "null" : typeof m) : m.length !== 0 && m.length !== 2 && Ne("forwardRef render functions accept exactly two parameters: props and ref. %s", m.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), m != null && (m.defaultProps != null || m.propTypes != null) && Ne("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var k = {
          $$typeof: ve,
          render: m
        };
        {
          var j;
          Object.defineProperty(k, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return j;
            },
            set: function(B) {
              j = B, !m.name && !m.displayName && (m.displayName = B);
            }
          });
        }
        return k;
      }
      var Ie;
      Ie = Symbol.for("react.module.reference");
      function yt(m) {
        return !!(typeof m == "string" || typeof m == "function" || m === P || m === ge || rt || m === g || m === W || m === Z || Be || m === ee || Lt || Et || en || typeof m == "object" && m !== null && (m.$$typeof === fe || m.$$typeof === q || m.$$typeof === J || m.$$typeof === Q || m.$$typeof === ve || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        m.$$typeof === Ie || m.getModuleId !== void 0));
      }
      function zt(m, k) {
        yt(m) || Ne("memo: The first argument must be a component. Instead received: %s", m === null ? "null" : typeof m);
        var j = {
          $$typeof: q,
          type: m,
          compare: k === void 0 ? null : k
        };
        {
          var B;
          Object.defineProperty(j, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return B;
            },
            set: function(ue) {
              B = ue, !m.name && !m.displayName && (m.displayName = ue);
            }
          });
        }
        return j;
      }
      function He() {
        var m = oe.current;
        return m === null && Ne(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), m;
      }
      function Je(m) {
        var k = He();
        if (m._context !== void 0) {
          var j = m._context;
          j.Consumer === m ? Ne("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : j.Provider === m && Ne("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return k.useContext(m);
      }
      function bn(m) {
        var k = He();
        return k.useState(m);
      }
      function Qt(m, k, j) {
        var B = He();
        return B.useReducer(m, k, j);
      }
      function gt(m) {
        var k = He();
        return k.useRef(m);
      }
      function ir(m, k) {
        var j = He();
        return j.useEffect(m, k);
      }
      function Ji(m, k) {
        var j = He();
        return j.useInsertionEffect(m, k);
      }
      function cl(m, k) {
        var j = He();
        return j.useLayoutEffect(m, k);
      }
      function Gr(m, k) {
        var j = He();
        return j.useCallback(m, k);
      }
      function Wf(m, k) {
        var j = He();
        return j.useMemo(m, k);
      }
      function Qf(m, k, j) {
        var B = He();
        return B.useImperativeHandle(m, k, j);
      }
      function vn(m, k) {
        {
          var j = He();
          return j.useDebugValue(m, k);
        }
      }
      function Gf() {
        var m = He();
        return m.useTransition();
      }
      function ea(m) {
        var k = He();
        return k.useDeferredValue(m);
      }
      function pt() {
        var m = He();
        return m.useId();
      }
      function ma(m, k, j) {
        var B = He();
        return B.useSyncExternalStore(m, k, j);
      }
      var fl = 0, Go, dl, qr, Ju, Nr, es, ts;
      function ic() {
      }
      ic.__reactDisabledLog = true;
      function qo() {
        {
          if (fl === 0) {
            Go = console.log, dl = console.info, qr = console.warn, Ju = console.error, Nr = console.group, es = console.groupCollapsed, ts = console.groupEnd;
            var m = {
              configurable: true,
              enumerable: true,
              value: ic,
              writable: true
            };
            Object.defineProperties(console, {
              info: m,
              log: m,
              warn: m,
              error: m,
              group: m,
              groupCollapsed: m,
              groupEnd: m
            });
          }
          fl++;
        }
      }
      function pl() {
        {
          if (fl--, fl === 0) {
            var m = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: Ce({}, m, {
                value: Go
              }),
              info: Ce({}, m, {
                value: dl
              }),
              warn: Ce({}, m, {
                value: qr
              }),
              error: Ce({}, m, {
                value: Ju
              }),
              group: Ce({}, m, {
                value: Nr
              }),
              groupCollapsed: Ce({}, m, {
                value: es
              }),
              groupEnd: Ce({}, m, {
                value: ts
              })
            });
          }
          fl < 0 && Ne("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ta = Ut.ReactCurrentDispatcher, Dr;
      function vl(m, k, j) {
        {
          if (Dr === void 0)
            try {
              throw Error();
            } catch (ue) {
              var B = ue.stack.trim().match(/\n( *(at )?)/);
              Dr = B && B[1] || "";
            }
          return `
` + Dr + m;
        }
      }
      var ml = false, hl;
      {
        var Xo = typeof WeakMap == "function" ? WeakMap : Map;
        hl = new Xo();
      }
      function Ko(m, k) {
        if (!m || ml)
          return "";
        {
          var j = hl.get(m);
          if (j !== void 0)
            return j;
        }
        var B;
        ml = true;
        var ue = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var Ge;
        Ge = ta.current, ta.current = null, qo();
        try {
          if (k) {
            var Se = function() {
              throw Error();
            };
            if (Object.defineProperty(Se.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Se, []);
              } catch (kt) {
                B = kt;
              }
              Reflect.construct(m, [], Se);
            } else {
              try {
                Se.call();
              } catch (kt) {
                B = kt;
              }
              m.call(Se.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (kt) {
              B = kt;
            }
            m();
          }
        } catch (kt) {
          if (kt && B && typeof kt.stack == "string") {
            for (var We = kt.stack.split(`
`), vt = B.stack.split(`
`), At = We.length - 1, rn = vt.length - 1; At >= 1 && rn >= 0 && We[At] !== vt[rn]; )
              rn--;
            for (; At >= 1 && rn >= 0; At--, rn--)
              if (We[At] !== vt[rn]) {
                if (At !== 1 || rn !== 1)
                  do
                    if (At--, rn--, rn < 0 || We[At] !== vt[rn]) {
                      var Jt = `
` + We[At].replace(" at new ", " at ");
                      return m.displayName && Jt.includes("<anonymous>") && (Jt = Jt.replace("<anonymous>", m.displayName)), typeof m == "function" && hl.set(m, Jt), Jt;
                    }
                  while (At >= 1 && rn >= 0);
                break;
              }
          }
        } finally {
          ml = false, ta.current = Ge, pl(), Error.prepareStackTrace = ue;
        }
        var an = m ? m.displayName || m.name : "", un = an ? vl(an) : "";
        return typeof m == "function" && hl.set(m, un), un;
      }
      function Ma(m, k, j) {
        return Ko(m, false);
      }
      function qf(m) {
        var k = m.prototype;
        return !!(k && k.isReactComponent);
      }
      function ha(m, k, j) {
        if (m == null)
          return "";
        if (typeof m == "function")
          return Ko(m, qf(m));
        if (typeof m == "string")
          return vl(m);
        switch (m) {
          case W:
            return vl("Suspense");
          case Z:
            return vl("SuspenseList");
        }
        if (typeof m == "object")
          switch (m.$$typeof) {
            case ve:
              return Ma(m.render);
            case q:
              return ha(m.type, k, j);
            case fe: {
              var B = m, ue = B._payload, Ge = B._init;
              try {
                return ha(Ge(ue), k, j);
              } catch {
              }
            }
          }
        return "";
      }
      var jt = {}, Zo = Ut.ReactDebugCurrentFrame;
      function no(m) {
        if (m) {
          var k = m._owner, j = ha(m.type, m._source, k ? k.type : null);
          Zo.setExtraStackFrame(j);
        } else
          Zo.setExtraStackFrame(null);
      }
      function Jo(m, k, j, B, ue) {
        {
          var Ge = Function.call.bind(yr);
          for (var Se in m)
            if (Ge(m, Se)) {
              var We = void 0;
              try {
                if (typeof m[Se] != "function") {
                  var vt = Error((B || "React class") + ": " + j + " type `" + Se + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof m[Se] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw vt.name = "Invariant Violation", vt;
                }
                We = m[Se](k, Se, B, j, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (At) {
                We = At;
              }
              We && !(We instanceof Error) && (no(ue), Ne("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", B || "React class", j, Se, typeof We), no(null)), We instanceof Error && !(We.message in jt) && (jt[We.message] = true, no(ue), Ne("Failed %s type: %s", j, We.message), no(null));
            }
        }
      }
      function Mt(m) {
        if (m) {
          var k = m._owner, j = ha(m.type, m._source, k ? k.type : null);
          xt(j);
        } else
          xt(null);
      }
      var eu;
      eu = false;
      function tu() {
        if (Te.current) {
          var m = Gn(Te.current.type);
          if (m)
            return `

Check the render method of \`` + m + "`.";
        }
        return "";
      }
      function at(m) {
        if (m !== void 0) {
          var k = m.fileName.replace(/^.*[\\\/]/, ""), j = m.lineNumber;
          return `

Check your code at ` + k + ":" + j + ".";
        }
        return "";
      }
      function ro(m) {
        return m != null ? at(m.__source) : "";
      }
      var Cn = {};
      function Xr(m) {
        var k = tu();
        if (!k) {
          var j = typeof m == "string" ? m : m.displayName || m.name;
          j && (k = `

Check the top-level render call using <` + j + ">.");
        }
        return k;
      }
      function Or(m, k) {
        if (!(!m._store || m._store.validated || m.key != null)) {
          m._store.validated = true;
          var j = Xr(k);
          if (!Cn[j]) {
            Cn[j] = true;
            var B = "";
            m && m._owner && m._owner !== Te.current && (B = " It was passed a child from " + Gn(m._owner.type) + "."), Mt(m), Ne('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', j, B), Mt(null);
          }
        }
      }
      function yl(m, k) {
        if (typeof m == "object") {
          if (yn(m))
            for (var j = 0; j < m.length; j++) {
              var B = m[j];
              $t(B) && Or(B, k);
            }
          else if ($t(m))
            m._store && (m._store.validated = true);
          else if (m) {
            var ue = de(m);
            if (typeof ue == "function" && ue !== m.entries)
              for (var Ge = ue.call(m), Se; !(Se = Ge.next()).done; )
                $t(Se.value) && Or(Se.value, k);
          }
        }
      }
      function Rn(m) {
        {
          var k = m.type;
          if (k == null || typeof k == "string")
            return;
          var j;
          if (typeof k == "function")
            j = k.propTypes;
          else if (typeof k == "object" && (k.$$typeof === ve || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          k.$$typeof === q))
            j = k.propTypes;
          else
            return;
          if (j) {
            var B = Gn(k);
            Jo(j, m.props, "prop", B, m);
          } else if (k.PropTypes !== void 0 && !eu) {
            eu = true;
            var ue = Gn(k);
            Ne("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", ue || "Unknown");
          }
          typeof k.getDefaultProps == "function" && !k.getDefaultProps.isReactClassApproved && Ne("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function Gt(m) {
        {
          for (var k = Object.keys(m.props), j = 0; j < k.length; j++) {
            var B = k[j];
            if (B !== "children" && B !== "key") {
              Mt(m), Ne("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", B), Mt(null);
              break;
            }
          }
          m.ref !== null && (Mt(m), Ne("Invalid attribute `ref` supplied to `React.Fragment`."), Mt(null));
        }
      }
      function ac(m, k, j) {
        var B = yt(m);
        if (!B) {
          var ue = "";
          (m === void 0 || typeof m == "object" && m !== null && Object.keys(m).length === 0) && (ue += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var Ge = ro(k);
          Ge ? ue += Ge : ue += tu();
          var Se;
          m === null ? Se = "null" : yn(m) ? Se = "array" : m !== void 0 && m.$$typeof === T ? (Se = "<" + (Gn(m.type) || "Unknown") + " />", ue = " Did you accidentally export a JSX literal instead of a component?") : Se = typeof m, Ne("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", Se, ue);
        }
        var We = Fe.apply(this, arguments);
        if (We == null)
          return We;
        if (B)
          for (var vt = 2; vt < arguments.length; vt++)
            yl(arguments[vt], m);
        return m === P ? Gt(We) : Rn(We), We;
      }
      var Kr = false;
      function qn(m) {
        var k = ac.bind(null, m);
        return k.type = m, Kr || (Kr = true, ht("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(k, "type", {
          enumerable: false,
          get: function() {
            return ht("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: m
            }), m;
          }
        }), k;
      }
      function ya(m, k, j) {
        for (var B = Pt.apply(this, arguments), ue = 2; ue < arguments.length; ue++)
          yl(arguments[ue], B.type);
        return Rn(B), B;
      }
      function lc(m, k) {
        var j = xe.transition;
        xe.transition = {};
        var B = xe.transition;
        xe.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          m();
        } finally {
          if (xe.transition = j, j === null && B._updatedFibers) {
            var ue = B._updatedFibers.size;
            ue > 10 && ht("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), B._updatedFibers.clear();
          }
        }
      }
      var Aa = false, gl = null;
      function oc(m) {
        if (gl === null)
          try {
            var k = ("require" + Math.random()).slice(0, 7), j = _ && _[k];
            gl = j.call(_, "timers").setImmediate;
          } catch {
            gl = function(ue) {
              Aa === false && (Aa = true, typeof MessageChannel > "u" && Ne("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var Ge = new MessageChannel();
              Ge.port1.onmessage = ue, Ge.port2.postMessage(void 0);
            };
          }
        return gl(m);
      }
      var Ni = 0, Sl = false;
      function bl(m) {
        {
          var k = Ni;
          Ni++, be.current === null && (be.current = []);
          var j = be.isBatchingLegacy, B;
          try {
            if (be.isBatchingLegacy = true, B = m(), !j && be.didScheduleLegacyUpdate) {
              var ue = be.current;
              ue !== null && (be.didScheduleLegacyUpdate = false, _l(ue));
            }
          } catch (an) {
            throw Di(k), an;
          } finally {
            be.isBatchingLegacy = j;
          }
          if (B !== null && typeof B == "object" && typeof B.then == "function") {
            var Ge = B, Se = false, We = {
              then: function(an, un) {
                Se = true, Ge.then(function(kt) {
                  Di(k), Ni === 0 ? nu(kt, an, un) : an(kt);
                }, function(kt) {
                  Di(k), un(kt);
                });
              }
            };
            return !Sl && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              Se || (Sl = true, Ne("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), We;
          } else {
            var vt = B;
            if (Di(k), Ni === 0) {
              var At = be.current;
              At !== null && (_l(At), be.current = null);
              var rn = {
                then: function(an, un) {
                  be.current === null ? (be.current = [], nu(vt, an, un)) : an(vt);
                }
              };
              return rn;
            } else {
              var Jt = {
                then: function(an, un) {
                  an(vt);
                }
              };
              return Jt;
            }
          }
        }
      }
      function Di(m) {
        m !== Ni - 1 && Ne("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), Ni = m;
      }
      function nu(m, k, j) {
        {
          var B = be.current;
          if (B !== null)
            try {
              _l(B), oc(function() {
                B.length === 0 ? (be.current = null, k(m)) : nu(m, k, j);
              });
            } catch (ue) {
              j(ue);
            }
          else
            k(m);
        }
      }
      var Cl = false;
      function _l(m) {
        if (!Cl) {
          Cl = true;
          var k = 0;
          try {
            for (; k < m.length; k++) {
              var j = m[k];
              do
                j = j(true);
              while (j !== null);
            }
            m.length = 0;
          } catch (B) {
            throw m = m.slice(k + 1), B;
          } finally {
            Cl = false;
          }
        }
      }
      var io = ac, ru = ya, ns = qn, na = {
        map: wi,
        forEach: to,
        count: ul,
        toArray: Qo,
        only: La
      };
      C.Children = na, C.Component = Ze, C.Fragment = P, C.Profiler = ge, C.PureComponent = It, C.StrictMode = g, C.Suspense = W, C.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Ut, C.cloneElement = ru, C.createContext = sl, C.createElement = io, C.createFactory = ns, C.createRef = hr, C.forwardRef = me, C.isValidElement = $t, C.lazy = te, C.memo = zt, C.startTransition = lc, C.unstable_act = bl, C.useCallback = Gr, C.useContext = Je, C.useDebugValue = vn, C.useDeferredValue = ea, C.useEffect = ir, C.useId = pt, C.useImperativeHandle = Qf, C.useInsertionEffect = Ji, C.useLayoutEffect = cl, C.useMemo = Wf, C.useReducer = Qt, C.useRef = gt, C.useState = bn, C.useSyncExternalStore = ma, C.useTransition = Gf, C.version = b, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }(iv, iv.exports)), iv.exports;
}
var CC;
function Zu() {
  return CC || (CC = 1, false ? Xh.exports = HR() : Xh.exports = PR()), Xh.exports;
}
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var _C;
function BR() {
  return _C || (_C = 1, function() {
    var _ = Zu(), C = Symbol.for("react.element"), b = Symbol.for("react.portal"), T = Symbol.for("react.fragment"), X = Symbol.for("react.strict_mode"), P = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), ge = Symbol.for("react.context"), J = Symbol.for("react.forward_ref"), Q = Symbol.for("react.suspense"), ve = Symbol.for("react.suspense_list"), W = Symbol.for("react.memo"), Z = Symbol.for("react.lazy"), q = Symbol.for("react.offscreen"), fe = Symbol.iterator, ee = "@@iterator";
    function ie(x) {
      if (x === null || typeof x != "object")
        return null;
      var te = fe && x[fe] || x[ee];
      return typeof te == "function" ? te : null;
    }
    var Xe = _.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function de(x) {
      {
        for (var te = arguments.length, me = new Array(te > 1 ? te - 1 : 0), Ie = 1; Ie < te; Ie++)
          me[Ie - 1] = arguments[Ie];
        oe("error", x, me);
      }
    }
    function oe(x, te, me) {
      {
        var Ie = Xe.ReactDebugCurrentFrame, yt = Ie.getStackAddendum();
        yt !== "" && (te += "%s", me = me.concat([yt]));
        var zt = me.map(function(He) {
          return String(He);
        });
        zt.unshift("Warning: " + te), Function.prototype.apply.call(console[x], console, zt);
      }
    }
    var xe = false, be = false, Te = false, De = false, St = false, xt;
    xt = Symbol.for("react.module.reference");
    function Lt(x) {
      return !!(typeof x == "string" || typeof x == "function" || x === T || x === P || St || x === X || x === Q || x === ve || De || x === q || xe || be || Te || typeof x == "object" && x !== null && (x.$$typeof === Z || x.$$typeof === W || x.$$typeof === g || x.$$typeof === ge || x.$$typeof === J || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      x.$$typeof === xt || x.getModuleId !== void 0));
    }
    function Et(x, te, me) {
      var Ie = x.displayName;
      if (Ie)
        return Ie;
      var yt = te.displayName || te.name || "";
      return yt !== "" ? me + "(" + yt + ")" : me;
    }
    function en(x) {
      return x.displayName || "Context";
    }
    function Be(x) {
      if (x == null)
        return null;
      if (typeof x.tag == "number" && de("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof x == "function")
        return x.displayName || x.name || null;
      if (typeof x == "string")
        return x;
      switch (x) {
        case T:
          return "Fragment";
        case b:
          return "Portal";
        case P:
          return "Profiler";
        case X:
          return "StrictMode";
        case Q:
          return "Suspense";
        case ve:
          return "SuspenseList";
      }
      if (typeof x == "object")
        switch (x.$$typeof) {
          case ge:
            var te = x;
            return en(te) + ".Consumer";
          case g:
            var me = x;
            return en(me._context) + ".Provider";
          case J:
            return Et(x, x.render, "ForwardRef");
          case W:
            var Ie = x.displayName || null;
            return Ie !== null ? Ie : Be(x.type) || "Memo";
          case Z: {
            var yt = x, zt = yt._payload, He = yt._init;
            try {
              return Be(He(zt));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var rt = Object.assign, Ut = 0, ht, Ne, ce, je, R, K, Ce;
    function it() {
    }
    it.__reactDisabledLog = true;
    function Ze() {
      {
        if (Ut === 0) {
          ht = console.log, Ne = console.info, ce = console.warn, je = console.error, R = console.group, K = console.groupCollapsed, Ce = console.groupEnd;
          var x = {
            configurable: true,
            enumerable: true,
            value: it,
            writable: true
          };
          Object.defineProperties(console, {
            info: x,
            log: x,
            warn: x,
            error: x,
            group: x,
            groupCollapsed: x,
            groupEnd: x
          });
        }
        Ut++;
      }
    }
    function Rt() {
      {
        if (Ut--, Ut === 0) {
          var x = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: rt({}, x, {
              value: ht
            }),
            info: rt({}, x, {
              value: Ne
            }),
            warn: rt({}, x, {
              value: ce
            }),
            error: rt({}, x, {
              value: je
            }),
            group: rt({}, x, {
              value: R
            }),
            groupCollapsed: rt({}, x, {
              value: K
            }),
            groupEnd: rt({}, x, {
              value: Ce
            })
          });
        }
        Ut < 0 && de("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var ct = Xe.ReactCurrentDispatcher, bt;
    function ft(x, te, me) {
      {
        if (bt === void 0)
          try {
            throw Error();
          } catch (yt) {
            var Ie = yt.stack.trim().match(/\n( *(at )?)/);
            bt = Ie && Ie[1] || "";
          }
        return `
` + bt + x;
      }
    }
    var It = false, Br;
    {
      var hr = typeof WeakMap == "function" ? WeakMap : Map;
      Br = new hr();
    }
    function Ir(x, te) {
      if (!x || It)
        return "";
      {
        var me = Br.get(x);
        if (me !== void 0)
          return me;
      }
      var Ie;
      It = true;
      var yt = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var zt;
      zt = ct.current, ct.current = null, Ze();
      try {
        if (te) {
          var He = function() {
            throw Error();
          };
          if (Object.defineProperty(He.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(He, []);
            } catch (Gr) {
              Ie = Gr;
            }
            Reflect.construct(x, [], He);
          } else {
            try {
              He.call();
            } catch (Gr) {
              Ie = Gr;
            }
            x.call(He.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Gr) {
            Ie = Gr;
          }
          x();
        }
      } catch (Gr) {
        if (Gr && Ie && typeof Gr.stack == "string") {
          for (var Je = Gr.stack.split(`
`), bn = Ie.stack.split(`
`), Qt = Je.length - 1, gt = bn.length - 1; Qt >= 1 && gt >= 0 && Je[Qt] !== bn[gt]; )
            gt--;
          for (; Qt >= 1 && gt >= 0; Qt--, gt--)
            if (Je[Qt] !== bn[gt]) {
              if (Qt !== 1 || gt !== 1)
                do
                  if (Qt--, gt--, gt < 0 || Je[Qt] !== bn[gt]) {
                    var ir = `
` + Je[Qt].replace(" at new ", " at ");
                    return x.displayName && ir.includes("<anonymous>") && (ir = ir.replace("<anonymous>", x.displayName)), typeof x == "function" && Br.set(x, ir), ir;
                  }
                while (Qt >= 1 && gt >= 0);
              break;
            }
        }
      } finally {
        It = false, ct.current = zt, Rt(), Error.prepareStackTrace = yt;
      }
      var Ji = x ? x.displayName || x.name : "", cl = Ji ? ft(Ji) : "";
      return typeof x == "function" && Br.set(x, cl), cl;
    }
    function yn(x, te, me) {
      return Ir(x, false);
    }
    function Qn(x) {
      var te = x.prototype;
      return !!(te && te.isReactComponent);
    }
    function Fn(x, te, me) {
      if (x == null)
        return "";
      if (typeof x == "function")
        return Ir(x, Qn(x));
      if (typeof x == "string")
        return ft(x);
      switch (x) {
        case Q:
          return ft("Suspense");
        case ve:
          return ft("SuspenseList");
      }
      if (typeof x == "object")
        switch (x.$$typeof) {
          case J:
            return yn(x.render);
          case W:
            return Fn(x.type, te, me);
          case Z: {
            var Ie = x, yt = Ie._payload, zt = Ie._init;
            try {
              return Fn(zt(yt), te, me);
            } catch {
            }
          }
        }
      return "";
    }
    var Hn = Object.prototype.hasOwnProperty, Dn = {}, $r = Xe.ReactDebugCurrentFrame;
    function Yr(x) {
      if (x) {
        var te = x._owner, me = Fn(x.type, x._source, te ? te.type : null);
        $r.setExtraStackFrame(me);
      } else
        $r.setExtraStackFrame(null);
    }
    function Gn(x, te, me, Ie, yt) {
      {
        var zt = Function.call.bind(Hn);
        for (var He in x)
          if (zt(x, He)) {
            var Je = void 0;
            try {
              if (typeof x[He] != "function") {
                var bn = Error((Ie || "React class") + ": " + me + " type `" + He + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof x[He] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw bn.name = "Invariant Violation", bn;
              }
              Je = x[He](te, He, Ie, me, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (Qt) {
              Je = Qt;
            }
            Je && !(Je instanceof Error) && (Yr(yt), de("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", Ie || "React class", me, He, typeof Je), Yr(null)), Je instanceof Error && !(Je.message in Dn) && (Dn[Je.message] = true, Yr(yt), de("Failed %s type: %s", me, Je.message), Yr(null));
          }
      }
    }
    var yr = Array.isArray;
    function Wr(x) {
      return yr(x);
    }
    function gr(x) {
      {
        var te = typeof Symbol == "function" && Symbol.toStringTag, me = te && x[Symbol.toStringTag] || x.constructor.name || "Object";
        return me;
      }
    }
    function pi(x) {
      try {
        return rr(x), false;
      } catch {
        return true;
      }
    }
    function rr(x) {
      return "" + x;
    }
    function Qr(x) {
      if (pi(x))
        return de("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", gr(x)), rr(x);
    }
    var gn = Xe.ReactCurrentOwner, wr = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    }, da, vi, pe;
    pe = {};
    function Fe(x) {
      if (Hn.call(x, "ref")) {
        var te = Object.getOwnPropertyDescriptor(x, "ref").get;
        if (te && te.isReactWarning)
          return false;
      }
      return x.ref !== void 0;
    }
    function dt(x) {
      if (Hn.call(x, "key")) {
        var te = Object.getOwnPropertyDescriptor(x, "key").get;
        if (te && te.isReactWarning)
          return false;
      }
      return x.key !== void 0;
    }
    function Pt(x, te) {
      if (typeof x.ref == "string" && gn.current && te && gn.current.stateNode !== te) {
        var me = Be(gn.current.type);
        pe[me] || (de('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', Be(gn.current.type), x.ref), pe[me] = true);
      }
    }
    function $t(x, te) {
      {
        var me = function() {
          da || (da = true, de("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", te));
        };
        me.isReactWarning = true, Object.defineProperty(x, "key", {
          get: me,
          configurable: true
        });
      }
    }
    function On(x, te) {
      {
        var me = function() {
          vi || (vi = true, de("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", te));
        };
        me.isReactWarning = true, Object.defineProperty(x, "ref", {
          get: me,
          configurable: true
        });
      }
    }
    var Sn = function(x, te, me, Ie, yt, zt, He) {
      var Je = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: C,
        // Built-in properties that belong on the element
        type: x,
        key: te,
        ref: me,
        props: He,
        // Record the component responsible for creating this element.
        _owner: zt
      };
      return Je._store = {}, Object.defineProperty(Je._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      }), Object.defineProperty(Je, "_self", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: Ie
      }), Object.defineProperty(Je, "_source", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: yt
      }), Object.freeze && (Object.freeze(Je.props), Object.freeze(Je)), Je;
    };
    function Sr(x, te, me, Ie, yt) {
      {
        var zt, He = {}, Je = null, bn = null;
        me !== void 0 && (Qr(me), Je = "" + me), dt(te) && (Qr(te.key), Je = "" + te.key), Fe(te) && (bn = te.ref, Pt(te, yt));
        for (zt in te)
          Hn.call(te, zt) && !wr.hasOwnProperty(zt) && (He[zt] = te[zt]);
        if (x && x.defaultProps) {
          var Qt = x.defaultProps;
          for (zt in Qt)
            He[zt] === void 0 && (He[zt] = Qt[zt]);
        }
        if (Je || bn) {
          var gt = typeof x == "function" ? x.displayName || x.name || "Unknown" : x;
          Je && $t(He, gt), bn && On(He, gt);
        }
        return Sn(x, Je, bn, yt, Ie, gn.current, He);
      }
    }
    var Zt = Xe.ReactCurrentOwner, Tr = Xe.ReactDebugCurrentFrame;
    function Yt(x) {
      if (x) {
        var te = x._owner, me = Fn(x.type, x._source, te ? te.type : null);
        Tr.setExtraStackFrame(me);
      } else
        Tr.setExtraStackFrame(null);
    }
    var Wt;
    Wt = false;
    function Zi(x) {
      return typeof x == "object" && x !== null && x.$$typeof === C;
    }
    function wi() {
      {
        if (Zt.current) {
          var x = Be(Zt.current.type);
          if (x)
            return `

Check the render method of \`` + x + "`.";
        }
        return "";
      }
    }
    function ul(x) {
      {
        if (x !== void 0) {
          var te = x.fileName.replace(/^.*[\\\/]/, ""), me = x.lineNumber;
          return `

Check your code at ` + te + ":" + me + ".";
        }
        return "";
      }
    }
    var to = {};
    function Qo(x) {
      {
        var te = wi();
        if (!te) {
          var me = typeof x == "string" ? x : x.displayName || x.name;
          me && (te = `

Check the top-level render call using <` + me + ">.");
        }
        return te;
      }
    }
    function La(x, te) {
      {
        if (!x._store || x._store.validated || x.key != null)
          return;
        x._store.validated = true;
        var me = Qo(te);
        if (to[me])
          return;
        to[me] = true;
        var Ie = "";
        x && x._owner && x._owner !== Zt.current && (Ie = " It was passed a child from " + Be(x._owner.type) + "."), Yt(x), de('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', me, Ie), Yt(null);
      }
    }
    function sl(x, te) {
      {
        if (typeof x != "object")
          return;
        if (Wr(x))
          for (var me = 0; me < x.length; me++) {
            var Ie = x[me];
            Zi(Ie) && La(Ie, te);
          }
        else if (Zi(x))
          x._store && (x._store.validated = true);
        else if (x) {
          var yt = ie(x);
          if (typeof yt == "function" && yt !== x.entries)
            for (var zt = yt.call(x), He; !(He = zt.next()).done; )
              Zi(He.value) && La(He.value, te);
        }
      }
    }
    function mi(x) {
      {
        var te = x.type;
        if (te == null || typeof te == "string")
          return;
        var me;
        if (typeof te == "function")
          me = te.propTypes;
        else if (typeof te == "object" && (te.$$typeof === J || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        te.$$typeof === W))
          me = te.propTypes;
        else
          return;
        if (me) {
          var Ie = Be(te);
          Gn(me, x.props, "prop", Ie, x);
        } else if (te.PropTypes !== void 0 && !Wt) {
          Wt = true;
          var yt = Be(te);
          de("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", yt || "Unknown");
        }
        typeof te.getDefaultProps == "function" && !te.getDefaultProps.isReactClassApproved && de("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function pa(x) {
      {
        for (var te = Object.keys(x.props), me = 0; me < te.length; me++) {
          var Ie = te[me];
          if (Ie !== "children" && Ie !== "key") {
            Yt(x), de("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", Ie), Yt(null);
            break;
          }
        }
        x.ref !== null && (Yt(x), de("Invalid attribute `ref` supplied to `React.Fragment`."), Yt(null));
      }
    }
    function Ti(x, te, me, Ie, yt, zt) {
      {
        var He = Lt(x);
        if (!He) {
          var Je = "";
          (x === void 0 || typeof x == "object" && x !== null && Object.keys(x).length === 0) && (Je += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var bn = ul(yt);
          bn ? Je += bn : Je += wi();
          var Qt;
          x === null ? Qt = "null" : Wr(x) ? Qt = "array" : x !== void 0 && x.$$typeof === C ? (Qt = "<" + (Be(x.type) || "Unknown") + " />", Je = " Did you accidentally export a JSX literal instead of a component?") : Qt = typeof x, de("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", Qt, Je);
        }
        var gt = Sr(x, te, me, yt, zt);
        if (gt == null)
          return gt;
        if (He) {
          var ir = te.children;
          if (ir !== void 0)
            if (Ie)
              if (Wr(ir)) {
                for (var Ji = 0; Ji < ir.length; Ji++)
                  sl(ir[Ji], x);
                Object.freeze && Object.freeze(ir);
              } else
                de("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              sl(ir, x);
        }
        return x === T ? pa(gt) : mi(gt), gt;
      }
    }
    var va = Ti;
    qh.Fragment = T, qh.jsxDEV = va;
  }()), qh;
}
false ? L0.exports = FR() : L0.exports = BR();
var L = L0.exports, av = {}, M0 = { exports: {} }, Gi = {}, Kh = { exports: {} }, R0 = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var EC;
function IR() {
  return EC || (EC = 1, function(_) {
    function C(ce, je) {
      var R = ce.length;
      ce.push(je);
      e:
        for (; 0 < R; ) {
          var K = R - 1 >>> 1, Ce = ce[K];
          if (0 < X(Ce, je))
            ce[K] = je, ce[R] = Ce, R = K;
          else
            break e;
        }
    }
    function b(ce) {
      return ce.length === 0 ? null : ce[0];
    }
    function T(ce) {
      if (ce.length === 0)
        return null;
      var je = ce[0], R = ce.pop();
      if (R !== je) {
        ce[0] = R;
        e:
          for (var K = 0, Ce = ce.length, it = Ce >>> 1; K < it; ) {
            var Ze = 2 * (K + 1) - 1, Rt = ce[Ze], ct = Ze + 1, bt = ce[ct];
            if (0 > X(Rt, R))
              ct < Ce && 0 > X(bt, Rt) ? (ce[K] = bt, ce[ct] = R, K = ct) : (ce[K] = Rt, ce[Ze] = R, K = Ze);
            else if (ct < Ce && 0 > X(bt, R))
              ce[K] = bt, ce[ct] = R, K = ct;
            else
              break e;
          }
      }
      return je;
    }
    function X(ce, je) {
      var R = ce.sortIndex - je.sortIndex;
      return R !== 0 ? R : ce.id - je.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var P = performance;
      _.unstable_now = function() {
        return P.now();
      };
    } else {
      var g = Date, ge = g.now();
      _.unstable_now = function() {
        return g.now() - ge;
      };
    }
    var J = [], Q = [], ve = 1, W = null, Z = 3, q = false, fe = false, ee = false, ie = typeof setTimeout == "function" ? setTimeout : null, Xe = typeof clearTimeout == "function" ? clearTimeout : null, de = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function oe(ce) {
      for (var je = b(Q); je !== null; ) {
        if (je.callback === null)
          T(Q);
        else if (je.startTime <= ce)
          T(Q), je.sortIndex = je.expirationTime, C(J, je);
        else
          break;
        je = b(Q);
      }
    }
    function xe(ce) {
      if (ee = false, oe(ce), !fe)
        if (b(J) !== null)
          fe = true, ht(be);
        else {
          var je = b(Q);
          je !== null && Ne(xe, je.startTime - ce);
        }
    }
    function be(ce, je) {
      fe = false, ee && (ee = false, Xe(St), St = -1), q = true;
      var R = Z;
      try {
        for (oe(je), W = b(J); W !== null && (!(W.expirationTime > je) || ce && !Et()); ) {
          var K = W.callback;
          if (typeof K == "function") {
            W.callback = null, Z = W.priorityLevel;
            var Ce = K(W.expirationTime <= je);
            je = _.unstable_now(), typeof Ce == "function" ? W.callback = Ce : W === b(J) && T(J), oe(je);
          } else
            T(J);
          W = b(J);
        }
        if (W !== null)
          var it = true;
        else {
          var Ze = b(Q);
          Ze !== null && Ne(xe, Ze.startTime - je), it = false;
        }
        return it;
      } finally {
        W = null, Z = R, q = false;
      }
    }
    var Te = false, De = null, St = -1, xt = 5, Lt = -1;
    function Et() {
      return !(_.unstable_now() - Lt < xt);
    }
    function en() {
      if (De !== null) {
        var ce = _.unstable_now();
        Lt = ce;
        var je = true;
        try {
          je = De(true, ce);
        } finally {
          je ? Be() : (Te = false, De = null);
        }
      } else
        Te = false;
    }
    var Be;
    if (typeof de == "function")
      Be = function() {
        de(en);
      };
    else if (typeof MessageChannel < "u") {
      var rt = new MessageChannel(), Ut = rt.port2;
      rt.port1.onmessage = en, Be = function() {
        Ut.postMessage(null);
      };
    } else
      Be = function() {
        ie(en, 0);
      };
    function ht(ce) {
      De = ce, Te || (Te = true, Be());
    }
    function Ne(ce, je) {
      St = ie(function() {
        ce(_.unstable_now());
      }, je);
    }
    _.unstable_IdlePriority = 5, _.unstable_ImmediatePriority = 1, _.unstable_LowPriority = 4, _.unstable_NormalPriority = 3, _.unstable_Profiling = null, _.unstable_UserBlockingPriority = 2, _.unstable_cancelCallback = function(ce) {
      ce.callback = null;
    }, _.unstable_continueExecution = function() {
      fe || q || (fe = true, ht(be));
    }, _.unstable_forceFrameRate = function(ce) {
      0 > ce || 125 < ce ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : xt = 0 < ce ? Math.floor(1e3 / ce) : 5;
    }, _.unstable_getCurrentPriorityLevel = function() {
      return Z;
    }, _.unstable_getFirstCallbackNode = function() {
      return b(J);
    }, _.unstable_next = function(ce) {
      switch (Z) {
        case 1:
        case 2:
        case 3:
          var je = 3;
          break;
        default:
          je = Z;
      }
      var R = Z;
      Z = je;
      try {
        return ce();
      } finally {
        Z = R;
      }
    }, _.unstable_pauseExecution = function() {
    }, _.unstable_requestPaint = function() {
    }, _.unstable_runWithPriority = function(ce, je) {
      switch (ce) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          ce = 3;
      }
      var R = Z;
      Z = ce;
      try {
        return je();
      } finally {
        Z = R;
      }
    }, _.unstable_scheduleCallback = function(ce, je, R) {
      var K = _.unstable_now();
      switch (typeof R == "object" && R !== null ? (R = R.delay, R = typeof R == "number" && 0 < R ? K + R : K) : R = K, ce) {
        case 1:
          var Ce = -1;
          break;
        case 2:
          Ce = 250;
          break;
        case 5:
          Ce = 1073741823;
          break;
        case 4:
          Ce = 1e4;
          break;
        default:
          Ce = 5e3;
      }
      return Ce = R + Ce, ce = { id: ve++, callback: je, priorityLevel: ce, startTime: R, expirationTime: Ce, sortIndex: -1 }, R > K ? (ce.sortIndex = R, C(Q, ce), b(J) === null && ce === b(Q) && (ee ? (Xe(St), St = -1) : ee = true, Ne(xe, R - K))) : (ce.sortIndex = Ce, C(J, ce), fe || q || (fe = true, ht(be))), ce;
    }, _.unstable_shouldYield = Et, _.unstable_wrapCallback = function(ce) {
      var je = Z;
      return function() {
        var R = Z;
        Z = je;
        try {
          return ce.apply(this, arguments);
        } finally {
          Z = R;
        }
      };
    };
  }(R0)), R0;
}
var w0 = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var kC;
function $R() {
  return kC || (kC = 1, function(_) {
    (function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var C = false, b = false, T = 5;
      function X(pe, Fe) {
        var dt = pe.length;
        pe.push(Fe), ge(pe, Fe, dt);
      }
      function P(pe) {
        return pe.length === 0 ? null : pe[0];
      }
      function g(pe) {
        if (pe.length === 0)
          return null;
        var Fe = pe[0], dt = pe.pop();
        return dt !== Fe && (pe[0] = dt, J(pe, dt, 0)), Fe;
      }
      function ge(pe, Fe, dt) {
        for (var Pt = dt; Pt > 0; ) {
          var $t = Pt - 1 >>> 1, On = pe[$t];
          if (Q(On, Fe) > 0)
            pe[$t] = Fe, pe[Pt] = On, Pt = $t;
          else
            return;
        }
      }
      function J(pe, Fe, dt) {
        for (var Pt = dt, $t = pe.length, On = $t >>> 1; Pt < On; ) {
          var Sn = (Pt + 1) * 2 - 1, Sr = pe[Sn], Zt = Sn + 1, Tr = pe[Zt];
          if (Q(Sr, Fe) < 0)
            Zt < $t && Q(Tr, Sr) < 0 ? (pe[Pt] = Tr, pe[Zt] = Fe, Pt = Zt) : (pe[Pt] = Sr, pe[Sn] = Fe, Pt = Sn);
          else if (Zt < $t && Q(Tr, Fe) < 0)
            pe[Pt] = Tr, pe[Zt] = Fe, Pt = Zt;
          else
            return;
        }
      }
      function Q(pe, Fe) {
        var dt = pe.sortIndex - Fe.sortIndex;
        return dt !== 0 ? dt : pe.id - Fe.id;
      }
      var ve = 1, W = 2, Z = 3, q = 4, fe = 5;
      function ee(pe, Fe) {
      }
      var ie = typeof performance == "object" && typeof performance.now == "function";
      if (ie) {
        var Xe = performance;
        _.unstable_now = function() {
          return Xe.now();
        };
      } else {
        var de = Date, oe = de.now();
        _.unstable_now = function() {
          return de.now() - oe;
        };
      }
      var xe = 1073741823, be = -1, Te = 250, De = 5e3, St = 1e4, xt = xe, Lt = [], Et = [], en = 1, Be = null, rt = Z, Ut = false, ht = false, Ne = false, ce = typeof setTimeout == "function" ? setTimeout : null, je = typeof clearTimeout == "function" ? clearTimeout : null, R = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function K(pe) {
        for (var Fe = P(Et); Fe !== null; ) {
          if (Fe.callback === null)
            g(Et);
          else if (Fe.startTime <= pe)
            g(Et), Fe.sortIndex = Fe.expirationTime, X(Lt, Fe);
          else
            return;
          Fe = P(Et);
        }
      }
      function Ce(pe) {
        if (Ne = false, K(pe), !ht)
          if (P(Lt) !== null)
            ht = true, Qr(it);
          else {
            var Fe = P(Et);
            Fe !== null && gn(Ce, Fe.startTime - pe);
          }
      }
      function it(pe, Fe) {
        ht = false, Ne && (Ne = false, wr()), Ut = true;
        var dt = rt;
        try {
          var Pt;
          if (!b)
            return Ze(pe, Fe);
        } finally {
          Be = null, rt = dt, Ut = false;
        }
      }
      function Ze(pe, Fe) {
        var dt = Fe;
        for (K(dt), Be = P(Lt); Be !== null && !C && !(Be.expirationTime > dt && (!pe || Yr())); ) {
          var Pt = Be.callback;
          if (typeof Pt == "function") {
            Be.callback = null, rt = Be.priorityLevel;
            var $t = Be.expirationTime <= dt, On = Pt($t);
            dt = _.unstable_now(), typeof On == "function" ? Be.callback = On : Be === P(Lt) && g(Lt), K(dt);
          } else
            g(Lt);
          Be = P(Lt);
        }
        if (Be !== null)
          return true;
        var Sn = P(Et);
        return Sn !== null && gn(Ce, Sn.startTime - dt), false;
      }
      function Rt(pe, Fe) {
        switch (pe) {
          case ve:
          case W:
          case Z:
          case q:
          case fe:
            break;
          default:
            pe = Z;
        }
        var dt = rt;
        rt = pe;
        try {
          return Fe();
        } finally {
          rt = dt;
        }
      }
      function ct(pe) {
        var Fe;
        switch (rt) {
          case ve:
          case W:
          case Z:
            Fe = Z;
            break;
          default:
            Fe = rt;
            break;
        }
        var dt = rt;
        rt = Fe;
        try {
          return pe();
        } finally {
          rt = dt;
        }
      }
      function bt(pe) {
        var Fe = rt;
        return function() {
          var dt = rt;
          rt = Fe;
          try {
            return pe.apply(this, arguments);
          } finally {
            rt = dt;
          }
        };
      }
      function ft(pe, Fe, dt) {
        var Pt = _.unstable_now(), $t;
        if (typeof dt == "object" && dt !== null) {
          var On = dt.delay;
          typeof On == "number" && On > 0 ? $t = Pt + On : $t = Pt;
        } else
          $t = Pt;
        var Sn;
        switch (pe) {
          case ve:
            Sn = be;
            break;
          case W:
            Sn = Te;
            break;
          case fe:
            Sn = xt;
            break;
          case q:
            Sn = St;
            break;
          case Z:
          default:
            Sn = De;
            break;
        }
        var Sr = $t + Sn, Zt = {
          id: en++,
          callback: Fe,
          priorityLevel: pe,
          startTime: $t,
          expirationTime: Sr,
          sortIndex: -1
        };
        return $t > Pt ? (Zt.sortIndex = $t, X(Et, Zt), P(Lt) === null && Zt === P(Et) && (Ne ? wr() : Ne = true, gn(Ce, $t - Pt))) : (Zt.sortIndex = Sr, X(Lt, Zt), !ht && !Ut && (ht = true, Qr(it))), Zt;
      }
      function It() {
      }
      function Br() {
        !ht && !Ut && (ht = true, Qr(it));
      }
      function hr() {
        return P(Lt);
      }
      function Ir(pe) {
        pe.callback = null;
      }
      function yn() {
        return rt;
      }
      var Qn = false, Fn = null, Hn = -1, Dn = T, $r = -1;
      function Yr() {
        var pe = _.unstable_now() - $r;
        return !(pe < Dn);
      }
      function Gn() {
      }
      function yr(pe) {
        if (pe < 0 || pe > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        pe > 0 ? Dn = Math.floor(1e3 / pe) : Dn = T;
      }
      var Wr = function() {
        if (Fn !== null) {
          var pe = _.unstable_now();
          $r = pe;
          var Fe = true, dt = true;
          try {
            dt = Fn(Fe, pe);
          } finally {
            dt ? gr() : (Qn = false, Fn = null);
          }
        } else
          Qn = false;
      }, gr;
      if (typeof R == "function")
        gr = function() {
          R(Wr);
        };
      else if (typeof MessageChannel < "u") {
        var pi = new MessageChannel(), rr = pi.port2;
        pi.port1.onmessage = Wr, gr = function() {
          rr.postMessage(null);
        };
      } else
        gr = function() {
          ce(Wr, 0);
        };
      function Qr(pe) {
        Fn = pe, Qn || (Qn = true, gr());
      }
      function gn(pe, Fe) {
        Hn = ce(function() {
          pe(_.unstable_now());
        }, Fe);
      }
      function wr() {
        je(Hn), Hn = -1;
      }
      var da = Gn, vi = null;
      _.unstable_IdlePriority = fe, _.unstable_ImmediatePriority = ve, _.unstable_LowPriority = q, _.unstable_NormalPriority = Z, _.unstable_Profiling = vi, _.unstable_UserBlockingPriority = W, _.unstable_cancelCallback = Ir, _.unstable_continueExecution = Br, _.unstable_forceFrameRate = yr, _.unstable_getCurrentPriorityLevel = yn, _.unstable_getFirstCallbackNode = hr, _.unstable_next = ct, _.unstable_pauseExecution = It, _.unstable_requestPaint = da, _.unstable_runWithPriority = Rt, _.unstable_scheduleCallback = ft, _.unstable_shouldYield = Yr, _.unstable_wrapCallback = bt, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }(w0)), w0;
}
var xC;
function IC() {
  return xC || (xC = 1, false ? Kh.exports = IR() : Kh.exports = $R()), Kh.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var RC;
function YR() {
  if (RC)
    return Gi;
  RC = 1;
  var _ = Zu(), C = IC();
  function b(n) {
    for (var r = "https://reactjs.org/docs/error-decoder.html?invariant=" + n, l = 1; l < arguments.length; l++)
      r += "&args[]=" + encodeURIComponent(arguments[l]);
    return "Minified React error #" + n + "; visit " + r + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var T = /* @__PURE__ */ new Set(), X = {};
  function P(n, r) {
    g(n, r), g(n + "Capture", r);
  }
  function g(n, r) {
    for (X[n] = r, n = 0; n < r.length; n++)
      T.add(r[n]);
  }
  var ge = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), J = Object.prototype.hasOwnProperty, Q = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ve = {}, W = {};
  function Z(n) {
    return J.call(W, n) ? true : J.call(ve, n) ? false : Q.test(n) ? W[n] = true : (ve[n] = true, false);
  }
  function q(n, r, l, u) {
    if (l !== null && l.type === 0)
      return false;
    switch (typeof r) {
      case "function":
      case "symbol":
        return true;
      case "boolean":
        return u ? false : l !== null ? !l.acceptsBooleans : (n = n.toLowerCase().slice(0, 5), n !== "data-" && n !== "aria-");
      default:
        return false;
    }
  }
  function fe(n, r, l, u) {
    if (r === null || typeof r > "u" || q(n, r, l, u))
      return true;
    if (u)
      return false;
    if (l !== null)
      switch (l.type) {
        case 3:
          return !r;
        case 4:
          return r === false;
        case 5:
          return isNaN(r);
        case 6:
          return isNaN(r) || 1 > r;
      }
    return false;
  }
  function ee(n, r, l, u, c, d, h) {
    this.acceptsBooleans = r === 2 || r === 3 || r === 4, this.attributeName = u, this.attributeNamespace = c, this.mustUseProperty = l, this.propertyName = n, this.type = r, this.sanitizeURL = d, this.removeEmptyString = h;
  }
  var ie = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(n) {
    ie[n] = new ee(n, 0, false, n, null, false, false);
  }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(n) {
    var r = n[0];
    ie[r] = new ee(r, 1, false, n[1], null, false, false);
  }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(n) {
    ie[n] = new ee(n, 2, false, n.toLowerCase(), null, false, false);
  }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(n) {
    ie[n] = new ee(n, 2, false, n, null, false, false);
  }), "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(n) {
    ie[n] = new ee(n, 3, false, n.toLowerCase(), null, false, false);
  }), ["checked", "multiple", "muted", "selected"].forEach(function(n) {
    ie[n] = new ee(n, 3, true, n, null, false, false);
  }), ["capture", "download"].forEach(function(n) {
    ie[n] = new ee(n, 4, false, n, null, false, false);
  }), ["cols", "rows", "size", "span"].forEach(function(n) {
    ie[n] = new ee(n, 6, false, n, null, false, false);
  }), ["rowSpan", "start"].forEach(function(n) {
    ie[n] = new ee(n, 5, false, n.toLowerCase(), null, false, false);
  });
  var Xe = /[\-:]([a-z])/g;
  function de(n) {
    return n[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(n) {
    var r = n.replace(
      Xe,
      de
    );
    ie[r] = new ee(r, 1, false, n, null, false, false);
  }), "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(n) {
    var r = n.replace(Xe, de);
    ie[r] = new ee(r, 1, false, n, "http://www.w3.org/1999/xlink", false, false);
  }), ["xml:base", "xml:lang", "xml:space"].forEach(function(n) {
    var r = n.replace(Xe, de);
    ie[r] = new ee(r, 1, false, n, "http://www.w3.org/XML/1998/namespace", false, false);
  }), ["tabIndex", "crossOrigin"].forEach(function(n) {
    ie[n] = new ee(n, 1, false, n.toLowerCase(), null, false, false);
  }), ie.xlinkHref = new ee("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false), ["src", "href", "action", "formAction"].forEach(function(n) {
    ie[n] = new ee(n, 1, false, n.toLowerCase(), null, true, true);
  });
  function oe(n, r, l, u) {
    var c = ie.hasOwnProperty(r) ? ie[r] : null;
    (c !== null ? c.type !== 0 : u || !(2 < r.length) || r[0] !== "o" && r[0] !== "O" || r[1] !== "n" && r[1] !== "N") && (fe(r, l, c, u) && (l = null), u || c === null ? Z(r) && (l === null ? n.removeAttribute(r) : n.setAttribute(r, "" + l)) : c.mustUseProperty ? n[c.propertyName] = l === null ? c.type === 3 ? false : "" : l : (r = c.attributeName, u = c.attributeNamespace, l === null ? n.removeAttribute(r) : (c = c.type, l = c === 3 || c === 4 && l === true ? "" : "" + l, u ? n.setAttributeNS(u, r, l) : n.setAttribute(r, l))));
  }
  var xe = _.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, be = Symbol.for("react.element"), Te = Symbol.for("react.portal"), De = Symbol.for("react.fragment"), St = Symbol.for("react.strict_mode"), xt = Symbol.for("react.profiler"), Lt = Symbol.for("react.provider"), Et = Symbol.for("react.context"), en = Symbol.for("react.forward_ref"), Be = Symbol.for("react.suspense"), rt = Symbol.for("react.suspense_list"), Ut = Symbol.for("react.memo"), ht = Symbol.for("react.lazy"), Ne = Symbol.for("react.offscreen"), ce = Symbol.iterator;
  function je(n) {
    return n === null || typeof n != "object" ? null : (n = ce && n[ce] || n["@@iterator"], typeof n == "function" ? n : null);
  }
  var R = Object.assign, K;
  function Ce(n) {
    if (K === void 0)
      try {
        throw Error();
      } catch (l) {
        var r = l.stack.trim().match(/\n( *(at )?)/);
        K = r && r[1] || "";
      }
    return `
` + K + n;
  }
  var it = false;
  function Ze(n, r) {
    if (!n || it)
      return "";
    it = true;
    var l = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (r)
        if (r = function() {
          throw Error();
        }, Object.defineProperty(r.prototype, "props", { set: function() {
          throw Error();
        } }), typeof Reflect == "object" && Reflect.construct) {
          try {
            Reflect.construct(r, []);
          } catch (H) {
            var u = H;
          }
          Reflect.construct(n, [], r);
        } else {
          try {
            r.call();
          } catch (H) {
            u = H;
          }
          n.call(r.prototype);
        }
      else {
        try {
          throw Error();
        } catch (H) {
          u = H;
        }
        n();
      }
    } catch (H) {
      if (H && u && typeof H.stack == "string") {
        for (var c = H.stack.split(`
`), d = u.stack.split(`
`), h = c.length - 1, E = d.length - 1; 1 <= h && 0 <= E && c[h] !== d[E]; )
          E--;
        for (; 1 <= h && 0 <= E; h--, E--)
          if (c[h] !== d[E]) {
            if (h !== 1 || E !== 1)
              do
                if (h--, E--, 0 > E || c[h] !== d[E]) {
                  var w = `
` + c[h].replace(" at new ", " at ");
                  return n.displayName && w.includes("<anonymous>") && (w = w.replace("<anonymous>", n.displayName)), w;
                }
              while (1 <= h && 0 <= E);
            break;
          }
      }
    } finally {
      it = false, Error.prepareStackTrace = l;
    }
    return (n = n ? n.displayName || n.name : "") ? Ce(n) : "";
  }
  function Rt(n) {
    switch (n.tag) {
      case 5:
        return Ce(n.type);
      case 16:
        return Ce("Lazy");
      case 13:
        return Ce("Suspense");
      case 19:
        return Ce("SuspenseList");
      case 0:
      case 2:
      case 15:
        return n = Ze(n.type, false), n;
      case 11:
        return n = Ze(n.type.render, false), n;
      case 1:
        return n = Ze(n.type, true), n;
      default:
        return "";
    }
  }
  function ct(n) {
    if (n == null)
      return null;
    if (typeof n == "function")
      return n.displayName || n.name || null;
    if (typeof n == "string")
      return n;
    switch (n) {
      case De:
        return "Fragment";
      case Te:
        return "Portal";
      case xt:
        return "Profiler";
      case St:
        return "StrictMode";
      case Be:
        return "Suspense";
      case rt:
        return "SuspenseList";
    }
    if (typeof n == "object")
      switch (n.$$typeof) {
        case Et:
          return (n.displayName || "Context") + ".Consumer";
        case Lt:
          return (n._context.displayName || "Context") + ".Provider";
        case en:
          var r = n.render;
          return n = n.displayName, n || (n = r.displayName || r.name || "", n = n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef"), n;
        case Ut:
          return r = n.displayName || null, r !== null ? r : ct(n.type) || "Memo";
        case ht:
          r = n._payload, n = n._init;
          try {
            return ct(n(r));
          } catch {
          }
      }
    return null;
  }
  function bt(n) {
    var r = n.type;
    switch (n.tag) {
      case 24:
        return "Cache";
      case 9:
        return (r.displayName || "Context") + ".Consumer";
      case 10:
        return (r._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return n = r.render, n = n.displayName || n.name || "", r.displayName || (n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return r;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return ct(r);
      case 8:
        return r === St ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof r == "function")
          return r.displayName || r.name || null;
        if (typeof r == "string")
          return r;
    }
    return null;
  }
  function ft(n) {
    switch (typeof n) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return n;
      case "object":
        return n;
      default:
        return "";
    }
  }
  function It(n) {
    var r = n.type;
    return (n = n.nodeName) && n.toLowerCase() === "input" && (r === "checkbox" || r === "radio");
  }
  function Br(n) {
    var r = It(n) ? "checked" : "value", l = Object.getOwnPropertyDescriptor(n.constructor.prototype, r), u = "" + n[r];
    if (!n.hasOwnProperty(r) && typeof l < "u" && typeof l.get == "function" && typeof l.set == "function") {
      var c = l.get, d = l.set;
      return Object.defineProperty(n, r, { configurable: true, get: function() {
        return c.call(this);
      }, set: function(h) {
        u = "" + h, d.call(this, h);
      } }), Object.defineProperty(n, r, { enumerable: l.enumerable }), { getValue: function() {
        return u;
      }, setValue: function(h) {
        u = "" + h;
      }, stopTracking: function() {
        n._valueTracker = null, delete n[r];
      } };
    }
  }
  function hr(n) {
    n._valueTracker || (n._valueTracker = Br(n));
  }
  function Ir(n) {
    if (!n)
      return false;
    var r = n._valueTracker;
    if (!r)
      return true;
    var l = r.getValue(), u = "";
    return n && (u = It(n) ? n.checked ? "true" : "false" : n.value), n = u, n !== l ? (r.setValue(n), true) : false;
  }
  function yn(n) {
    if (n = n || (typeof document < "u" ? document : void 0), typeof n > "u")
      return null;
    try {
      return n.activeElement || n.body;
    } catch {
      return n.body;
    }
  }
  function Qn(n, r) {
    var l = r.checked;
    return R({}, r, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: l ?? n._wrapperState.initialChecked });
  }
  function Fn(n, r) {
    var l = r.defaultValue == null ? "" : r.defaultValue, u = r.checked != null ? r.checked : r.defaultChecked;
    l = ft(r.value != null ? r.value : l), n._wrapperState = { initialChecked: u, initialValue: l, controlled: r.type === "checkbox" || r.type === "radio" ? r.checked != null : r.value != null };
  }
  function Hn(n, r) {
    r = r.checked, r != null && oe(n, "checked", r, false);
  }
  function Dn(n, r) {
    Hn(n, r);
    var l = ft(r.value), u = r.type;
    if (l != null)
      u === "number" ? (l === 0 && n.value === "" || n.value != l) && (n.value = "" + l) : n.value !== "" + l && (n.value = "" + l);
    else if (u === "submit" || u === "reset") {
      n.removeAttribute("value");
      return;
    }
    r.hasOwnProperty("value") ? Yr(n, r.type, l) : r.hasOwnProperty("defaultValue") && Yr(n, r.type, ft(r.defaultValue)), r.checked == null && r.defaultChecked != null && (n.defaultChecked = !!r.defaultChecked);
  }
  function $r(n, r, l) {
    if (r.hasOwnProperty("value") || r.hasOwnProperty("defaultValue")) {
      var u = r.type;
      if (!(u !== "submit" && u !== "reset" || r.value !== void 0 && r.value !== null))
        return;
      r = "" + n._wrapperState.initialValue, l || r === n.value || (n.value = r), n.defaultValue = r;
    }
    l = n.name, l !== "" && (n.name = ""), n.defaultChecked = !!n._wrapperState.initialChecked, l !== "" && (n.name = l);
  }
  function Yr(n, r, l) {
    (r !== "number" || yn(n.ownerDocument) !== n) && (l == null ? n.defaultValue = "" + n._wrapperState.initialValue : n.defaultValue !== "" + l && (n.defaultValue = "" + l));
  }
  var Gn = Array.isArray;
  function yr(n, r, l, u) {
    if (n = n.options, r) {
      r = {};
      for (var c = 0; c < l.length; c++)
        r["$" + l[c]] = true;
      for (l = 0; l < n.length; l++)
        c = r.hasOwnProperty("$" + n[l].value), n[l].selected !== c && (n[l].selected = c), c && u && (n[l].defaultSelected = true);
    } else {
      for (l = "" + ft(l), r = null, c = 0; c < n.length; c++) {
        if (n[c].value === l) {
          n[c].selected = true, u && (n[c].defaultSelected = true);
          return;
        }
        r !== null || n[c].disabled || (r = n[c]);
      }
      r !== null && (r.selected = true);
    }
  }
  function Wr(n, r) {
    if (r.dangerouslySetInnerHTML != null)
      throw Error(b(91));
    return R({}, r, { value: void 0, defaultValue: void 0, children: "" + n._wrapperState.initialValue });
  }
  function gr(n, r) {
    var l = r.value;
    if (l == null) {
      if (l = r.children, r = r.defaultValue, l != null) {
        if (r != null)
          throw Error(b(92));
        if (Gn(l)) {
          if (1 < l.length)
            throw Error(b(93));
          l = l[0];
        }
        r = l;
      }
      r == null && (r = ""), l = r;
    }
    n._wrapperState = { initialValue: ft(l) };
  }
  function pi(n, r) {
    var l = ft(r.value), u = ft(r.defaultValue);
    l != null && (l = "" + l, l !== n.value && (n.value = l), r.defaultValue == null && n.defaultValue !== l && (n.defaultValue = l)), u != null && (n.defaultValue = "" + u);
  }
  function rr(n) {
    var r = n.textContent;
    r === n._wrapperState.initialValue && r !== "" && r !== null && (n.value = r);
  }
  function Qr(n) {
    switch (n) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function gn(n, r) {
    return n == null || n === "http://www.w3.org/1999/xhtml" ? Qr(r) : n === "http://www.w3.org/2000/svg" && r === "foreignObject" ? "http://www.w3.org/1999/xhtml" : n;
  }
  var wr, da = function(n) {
    return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(r, l, u, c) {
      MSApp.execUnsafeLocalFunction(function() {
        return n(r, l, u, c);
      });
    } : n;
  }(function(n, r) {
    if (n.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in n)
      n.innerHTML = r;
    else {
      for (wr = wr || document.createElement("div"), wr.innerHTML = "<svg>" + r.valueOf().toString() + "</svg>", r = wr.firstChild; n.firstChild; )
        n.removeChild(n.firstChild);
      for (; r.firstChild; )
        n.appendChild(r.firstChild);
    }
  });
  function vi(n, r) {
    if (r) {
      var l = n.firstChild;
      if (l && l === n.lastChild && l.nodeType === 3) {
        l.nodeValue = r;
        return;
      }
    }
    n.textContent = r;
  }
  var pe = {
    animationIterationCount: true,
    aspectRatio: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  }, Fe = ["Webkit", "ms", "Moz", "O"];
  Object.keys(pe).forEach(function(n) {
    Fe.forEach(function(r) {
      r = r + n.charAt(0).toUpperCase() + n.substring(1), pe[r] = pe[n];
    });
  });
  function dt(n, r, l) {
    return r == null || typeof r == "boolean" || r === "" ? "" : l || typeof r != "number" || r === 0 || pe.hasOwnProperty(n) && pe[n] ? ("" + r).trim() : r + "px";
  }
  function Pt(n, r) {
    n = n.style;
    for (var l in r)
      if (r.hasOwnProperty(l)) {
        var u = l.indexOf("--") === 0, c = dt(l, r[l], u);
        l === "float" && (l = "cssFloat"), u ? n.setProperty(l, c) : n[l] = c;
      }
  }
  var $t = R({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
  function On(n, r) {
    if (r) {
      if ($t[n] && (r.children != null || r.dangerouslySetInnerHTML != null))
        throw Error(b(137, n));
      if (r.dangerouslySetInnerHTML != null) {
        if (r.children != null)
          throw Error(b(60));
        if (typeof r.dangerouslySetInnerHTML != "object" || !("__html" in r.dangerouslySetInnerHTML))
          throw Error(b(61));
      }
      if (r.style != null && typeof r.style != "object")
        throw Error(b(62));
    }
  }
  function Sn(n, r) {
    if (n.indexOf("-") === -1)
      return typeof r.is == "string";
    switch (n) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var Sr = null;
  function Zt(n) {
    return n = n.target || n.srcElement || window, n.correspondingUseElement && (n = n.correspondingUseElement), n.nodeType === 3 ? n.parentNode : n;
  }
  var Tr = null, Yt = null, Wt = null;
  function Zi(n) {
    if (n = hs(n)) {
      if (typeof Tr != "function")
        throw Error(b(280));
      var r = n.stateNode;
      r && (r = $e(r), Tr(n.stateNode, n.type, r));
    }
  }
  function wi(n) {
    Yt ? Wt ? Wt.push(n) : Wt = [n] : Yt = n;
  }
  function ul() {
    if (Yt) {
      var n = Yt, r = Wt;
      if (Wt = Yt = null, Zi(n), r)
        for (n = 0; n < r.length; n++)
          Zi(r[n]);
    }
  }
  function to(n, r) {
    return n(r);
  }
  function Qo() {
  }
  var La = false;
  function sl(n, r, l) {
    if (La)
      return n(r, l);
    La = true;
    try {
      return to(n, r, l);
    } finally {
      La = false, (Yt !== null || Wt !== null) && (Qo(), ul());
    }
  }
  function mi(n, r) {
    var l = n.stateNode;
    if (l === null)
      return null;
    var u = $e(l);
    if (u === null)
      return null;
    l = u[r];
    e:
      switch (r) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (u = !u.disabled) || (n = n.type, u = !(n === "button" || n === "input" || n === "select" || n === "textarea")), n = !u;
          break e;
        default:
          n = false;
      }
    if (n)
      return null;
    if (l && typeof l != "function")
      throw Error(b(231, r, typeof l));
    return l;
  }
  var pa = false;
  if (ge)
    try {
      var Ti = {};
      Object.defineProperty(Ti, "passive", { get: function() {
        pa = true;
      } }), window.addEventListener("test", Ti, Ti), window.removeEventListener("test", Ti, Ti);
    } catch {
      pa = false;
    }
  function va(n, r, l, u, c, d, h, E, w) {
    var H = Array.prototype.slice.call(arguments, 3);
    try {
      r.apply(l, H);
    } catch (re) {
      this.onError(re);
    }
  }
  var x = false, te = null, me = false, Ie = null, yt = { onError: function(n) {
    x = true, te = n;
  } };
  function zt(n, r, l, u, c, d, h, E, w) {
    x = false, te = null, va.apply(yt, arguments);
  }
  function He(n, r, l, u, c, d, h, E, w) {
    if (zt.apply(this, arguments), x) {
      if (x) {
        var H = te;
        x = false, te = null;
      } else
        throw Error(b(198));
      me || (me = true, Ie = H);
    }
  }
  function Je(n) {
    var r = n, l = n;
    if (n.alternate)
      for (; r.return; )
        r = r.return;
    else {
      n = r;
      do
        r = n, r.flags & 4098 && (l = r.return), n = r.return;
      while (n);
    }
    return r.tag === 3 ? l : null;
  }
  function bn(n) {
    if (n.tag === 13) {
      var r = n.memoizedState;
      if (r === null && (n = n.alternate, n !== null && (r = n.memoizedState)), r !== null)
        return r.dehydrated;
    }
    return null;
  }
  function Qt(n) {
    if (Je(n) !== n)
      throw Error(b(188));
  }
  function gt(n) {
    var r = n.alternate;
    if (!r) {
      if (r = Je(n), r === null)
        throw Error(b(188));
      return r !== n ? null : n;
    }
    for (var l = n, u = r; ; ) {
      var c = l.return;
      if (c === null)
        break;
      var d = c.alternate;
      if (d === null) {
        if (u = c.return, u !== null) {
          l = u;
          continue;
        }
        break;
      }
      if (c.child === d.child) {
        for (d = c.child; d; ) {
          if (d === l)
            return Qt(c), n;
          if (d === u)
            return Qt(c), r;
          d = d.sibling;
        }
        throw Error(b(188));
      }
      if (l.return !== u.return)
        l = c, u = d;
      else {
        for (var h = false, E = c.child; E; ) {
          if (E === l) {
            h = true, l = c, u = d;
            break;
          }
          if (E === u) {
            h = true, u = c, l = d;
            break;
          }
          E = E.sibling;
        }
        if (!h) {
          for (E = d.child; E; ) {
            if (E === l) {
              h = true, l = d, u = c;
              break;
            }
            if (E === u) {
              h = true, u = d, l = c;
              break;
            }
            E = E.sibling;
          }
          if (!h)
            throw Error(b(189));
        }
      }
      if (l.alternate !== u)
        throw Error(b(190));
    }
    if (l.tag !== 3)
      throw Error(b(188));
    return l.stateNode.current === l ? n : r;
  }
  function ir(n) {
    return n = gt(n), n !== null ? Ji(n) : null;
  }
  function Ji(n) {
    if (n.tag === 5 || n.tag === 6)
      return n;
    for (n = n.child; n !== null; ) {
      var r = Ji(n);
      if (r !== null)
        return r;
      n = n.sibling;
    }
    return null;
  }
  var cl = C.unstable_scheduleCallback, Gr = C.unstable_cancelCallback, Wf = C.unstable_shouldYield, Qf = C.unstable_requestPaint, vn = C.unstable_now, Gf = C.unstable_getCurrentPriorityLevel, ea = C.unstable_ImmediatePriority, pt = C.unstable_UserBlockingPriority, ma = C.unstable_NormalPriority, fl = C.unstable_LowPriority, Go = C.unstable_IdlePriority, dl = null, qr = null;
  function Ju(n) {
    if (qr && typeof qr.onCommitFiberRoot == "function")
      try {
        qr.onCommitFiberRoot(dl, n, void 0, (n.current.flags & 128) === 128);
      } catch {
      }
  }
  var Nr = Math.clz32 ? Math.clz32 : ic, es = Math.log, ts = Math.LN2;
  function ic(n) {
    return n >>>= 0, n === 0 ? 32 : 31 - (es(n) / ts | 0) | 0;
  }
  var qo = 64, pl = 4194304;
  function ta(n) {
    switch (n & -n) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return n & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return n & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return n;
    }
  }
  function Dr(n, r) {
    var l = n.pendingLanes;
    if (l === 0)
      return 0;
    var u = 0, c = n.suspendedLanes, d = n.pingedLanes, h = l & 268435455;
    if (h !== 0) {
      var E = h & ~c;
      E !== 0 ? u = ta(E) : (d &= h, d !== 0 && (u = ta(d)));
    } else
      h = l & ~c, h !== 0 ? u = ta(h) : d !== 0 && (u = ta(d));
    if (u === 0)
      return 0;
    if (r !== 0 && r !== u && !(r & c) && (c = u & -u, d = r & -r, c >= d || c === 16 && (d & 4194240) !== 0))
      return r;
    if (u & 4 && (u |= l & 16), r = n.entangledLanes, r !== 0)
      for (n = n.entanglements, r &= u; 0 < r; )
        l = 31 - Nr(r), c = 1 << l, u |= n[l], r &= ~c;
    return u;
  }
  function vl(n, r) {
    switch (n) {
      case 1:
      case 2:
      case 4:
        return r + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return r + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function ml(n, r) {
    for (var l = n.suspendedLanes, u = n.pingedLanes, c = n.expirationTimes, d = n.pendingLanes; 0 < d; ) {
      var h = 31 - Nr(d), E = 1 << h, w = c[h];
      w === -1 ? (!(E & l) || E & u) && (c[h] = vl(E, r)) : w <= r && (n.expiredLanes |= E), d &= ~E;
    }
  }
  function hl(n) {
    return n = n.pendingLanes & -1073741825, n !== 0 ? n : n & 1073741824 ? 1073741824 : 0;
  }
  function Xo() {
    var n = qo;
    return qo <<= 1, !(qo & 4194240) && (qo = 64), n;
  }
  function Ko(n) {
    for (var r = [], l = 0; 31 > l; l++)
      r.push(n);
    return r;
  }
  function Ma(n, r, l) {
    n.pendingLanes |= r, r !== 536870912 && (n.suspendedLanes = 0, n.pingedLanes = 0), n = n.eventTimes, r = 31 - Nr(r), n[r] = l;
  }
  function qf(n, r) {
    var l = n.pendingLanes & ~r;
    n.pendingLanes = r, n.suspendedLanes = 0, n.pingedLanes = 0, n.expiredLanes &= r, n.mutableReadLanes &= r, n.entangledLanes &= r, r = n.entanglements;
    var u = n.eventTimes;
    for (n = n.expirationTimes; 0 < l; ) {
      var c = 31 - Nr(l), d = 1 << c;
      r[c] = 0, u[c] = -1, n[c] = -1, l &= ~d;
    }
  }
  function ha(n, r) {
    var l = n.entangledLanes |= r;
    for (n = n.entanglements; l; ) {
      var u = 31 - Nr(l), c = 1 << u;
      c & r | n[u] & r && (n[u] |= r), l &= ~c;
    }
  }
  var jt = 0;
  function Zo(n) {
    return n &= -n, 1 < n ? 4 < n ? n & 268435455 ? 16 : 536870912 : 4 : 1;
  }
  var no, Jo, Mt, eu, tu, at = false, ro = [], Cn = null, Xr = null, Or = null, yl = /* @__PURE__ */ new Map(), Rn = /* @__PURE__ */ new Map(), Gt = [], ac = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Kr(n, r) {
    switch (n) {
      case "focusin":
      case "focusout":
        Cn = null;
        break;
      case "dragenter":
      case "dragleave":
        Xr = null;
        break;
      case "mouseover":
      case "mouseout":
        Or = null;
        break;
      case "pointerover":
      case "pointerout":
        yl.delete(r.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Rn.delete(r.pointerId);
    }
  }
  function qn(n, r, l, u, c, d) {
    return n === null || n.nativeEvent !== d ? (n = { blockedOn: r, domEventName: l, eventSystemFlags: u, nativeEvent: d, targetContainers: [c] }, r !== null && (r = hs(r), r !== null && Jo(r)), n) : (n.eventSystemFlags |= u, r = n.targetContainers, c !== null && r.indexOf(c) === -1 && r.push(c), n);
  }
  function ya(n, r, l, u, c) {
    switch (r) {
      case "focusin":
        return Cn = qn(Cn, n, r, l, u, c), true;
      case "dragenter":
        return Xr = qn(Xr, n, r, l, u, c), true;
      case "mouseover":
        return Or = qn(Or, n, r, l, u, c), true;
      case "pointerover":
        var d = c.pointerId;
        return yl.set(d, qn(yl.get(d) || null, n, r, l, u, c)), true;
      case "gotpointercapture":
        return d = c.pointerId, Rn.set(d, qn(Rn.get(d) || null, n, r, l, u, c)), true;
    }
    return false;
  }
  function lc(n) {
    var r = Li(n.target);
    if (r !== null) {
      var l = Je(r);
      if (l !== null) {
        if (r = l.tag, r === 13) {
          if (r = bn(l), r !== null) {
            n.blockedOn = r, tu(n.priority, function() {
              Mt(l);
            });
            return;
          }
        } else if (r === 3 && l.stateNode.current.memoizedState.isDehydrated) {
          n.blockedOn = l.tag === 3 ? l.stateNode.containerInfo : null;
          return;
        }
      }
    }
    n.blockedOn = null;
  }
  function Aa(n) {
    if (n.blockedOn !== null)
      return false;
    for (var r = n.targetContainers; 0 < r.length; ) {
      var l = ru(n.domEventName, n.eventSystemFlags, r[0], n.nativeEvent);
      if (l === null) {
        l = n.nativeEvent;
        var u = new l.constructor(l.type, l);
        Sr = u, l.target.dispatchEvent(u), Sr = null;
      } else
        return r = hs(l), r !== null && Jo(r), n.blockedOn = l, false;
      r.shift();
    }
    return true;
  }
  function gl(n, r, l) {
    Aa(n) && l.delete(r);
  }
  function oc() {
    at = false, Cn !== null && Aa(Cn) && (Cn = null), Xr !== null && Aa(Xr) && (Xr = null), Or !== null && Aa(Or) && (Or = null), yl.forEach(gl), Rn.forEach(gl);
  }
  function Ni(n, r) {
    n.blockedOn === r && (n.blockedOn = null, at || (at = true, C.unstable_scheduleCallback(C.unstable_NormalPriority, oc)));
  }
  function Sl(n) {
    function r(c) {
      return Ni(c, n);
    }
    if (0 < ro.length) {
      Ni(ro[0], n);
      for (var l = 1; l < ro.length; l++) {
        var u = ro[l];
        u.blockedOn === n && (u.blockedOn = null);
      }
    }
    for (Cn !== null && Ni(Cn, n), Xr !== null && Ni(Xr, n), Or !== null && Ni(Or, n), yl.forEach(r), Rn.forEach(r), l = 0; l < Gt.length; l++)
      u = Gt[l], u.blockedOn === n && (u.blockedOn = null);
    for (; 0 < Gt.length && (l = Gt[0], l.blockedOn === null); )
      lc(l), l.blockedOn === null && Gt.shift();
  }
  var bl = xe.ReactCurrentBatchConfig, Di = true;
  function nu(n, r, l, u) {
    var c = jt, d = bl.transition;
    bl.transition = null;
    try {
      jt = 1, _l(n, r, l, u);
    } finally {
      jt = c, bl.transition = d;
    }
  }
  function Cl(n, r, l, u) {
    var c = jt, d = bl.transition;
    bl.transition = null;
    try {
      jt = 4, _l(n, r, l, u);
    } finally {
      jt = c, bl.transition = d;
    }
  }
  function _l(n, r, l, u) {
    if (Di) {
      var c = ru(n, r, l, u);
      if (c === null)
        hc(n, r, u, io, l), Kr(n, u);
      else if (ya(c, n, r, l, u))
        u.stopPropagation();
      else if (Kr(n, u), r & 4 && -1 < ac.indexOf(n)) {
        for (; c !== null; ) {
          var d = hs(c);
          if (d !== null && no(d), d = ru(n, r, l, u), d === null && hc(n, r, u, io, l), d === c)
            break;
          c = d;
        }
        c !== null && u.stopPropagation();
      } else
        hc(n, r, u, null, l);
    }
  }
  var io = null;
  function ru(n, r, l, u) {
    if (io = null, n = Zt(u), n = Li(n), n !== null)
      if (r = Je(n), r === null)
        n = null;
      else if (l = r.tag, l === 13) {
        if (n = bn(r), n !== null)
          return n;
        n = null;
      } else if (l === 3) {
        if (r.stateNode.current.memoizedState.isDehydrated)
          return r.tag === 3 ? r.stateNode.containerInfo : null;
        n = null;
      } else
        r !== n && (n = null);
    return io = n, null;
  }
  function ns(n) {
    switch (n) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (Gf()) {
          case ea:
            return 1;
          case pt:
            return 4;
          case ma:
          case fl:
            return 16;
          case Go:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var na = null, m = null, k = null;
  function j() {
    if (k)
      return k;
    var n, r = m, l = r.length, u, c = "value" in na ? na.value : na.textContent, d = c.length;
    for (n = 0; n < l && r[n] === c[n]; n++)
      ;
    var h = l - n;
    for (u = 1; u <= h && r[l - u] === c[d - u]; u++)
      ;
    return k = c.slice(n, 1 < u ? 1 - u : void 0);
  }
  function B(n) {
    var r = n.keyCode;
    return "charCode" in n ? (n = n.charCode, n === 0 && r === 13 && (n = 13)) : n = r, n === 10 && (n = 13), 32 <= n || n === 13 ? n : 0;
  }
  function ue() {
    return true;
  }
  function Ge() {
    return false;
  }
  function Se(n) {
    function r(l, u, c, d, h) {
      this._reactName = l, this._targetInst = c, this.type = u, this.nativeEvent = d, this.target = h, this.currentTarget = null;
      for (var E in n)
        n.hasOwnProperty(E) && (l = n[E], this[E] = l ? l(d) : d[E]);
      return this.isDefaultPrevented = (d.defaultPrevented != null ? d.defaultPrevented : d.returnValue === false) ? ue : Ge, this.isPropagationStopped = Ge, this;
    }
    return R(r.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var l = this.nativeEvent;
      l && (l.preventDefault ? l.preventDefault() : typeof l.returnValue != "unknown" && (l.returnValue = false), this.isDefaultPrevented = ue);
    }, stopPropagation: function() {
      var l = this.nativeEvent;
      l && (l.stopPropagation ? l.stopPropagation() : typeof l.cancelBubble != "unknown" && (l.cancelBubble = true), this.isPropagationStopped = ue);
    }, persist: function() {
    }, isPersistent: ue }), r;
  }
  var We = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(n) {
    return n.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0 }, vt = Se(We), At = R({}, We, { view: 0, detail: 0 }), rn = Se(At), Jt, an, un, kt = R({}, At, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: ed, button: 0, buttons: 0, relatedTarget: function(n) {
    return n.relatedTarget === void 0 ? n.fromElement === n.srcElement ? n.toElement : n.fromElement : n.relatedTarget;
  }, movementX: function(n) {
    return "movementX" in n ? n.movementX : (n !== un && (un && n.type === "mousemove" ? (Jt = n.screenX - un.screenX, an = n.screenY - un.screenY) : an = Jt = 0, un = n), Jt);
  }, movementY: function(n) {
    return "movementY" in n ? n.movementY : an;
  } }), za = Se(kt), iu = R({}, kt, { dataTransfer: 0 }), rs = Se(iu), Xf = R({}, At, { relatedTarget: 0 }), ra = Se(Xf), is = R({}, We, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), as = Se(is), Kf = R({}, We, { clipboardData: function(n) {
    return "clipboardData" in n ? n.clipboardData : window.clipboardData;
  } }), ty = Se(Kf), ny = R({}, We, { data: 0 }), Zf = Se(ny), Jf = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, sv = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, cv = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
  function fv(n) {
    var r = this.nativeEvent;
    return r.getModifierState ? r.getModifierState(n) : (n = cv[n]) ? !!r[n] : false;
  }
  function ed() {
    return fv;
  }
  var Va = R({}, At, { key: function(n) {
    if (n.key) {
      var r = Jf[n.key] || n.key;
      if (r !== "Unidentified")
        return r;
    }
    return n.type === "keypress" ? (n = B(n), n === 13 ? "Enter" : String.fromCharCode(n)) : n.type === "keydown" || n.type === "keyup" ? sv[n.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: ed, charCode: function(n) {
    return n.type === "keypress" ? B(n) : 0;
  }, keyCode: function(n) {
    return n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
  }, which: function(n) {
    return n.type === "keypress" ? B(n) : n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
  } }), ry = Se(Va), td = R({}, kt, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), uc = Se(td), nd = R({}, At, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: ed }), iy = Se(nd), sc = R({}, We, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), dv = Se(sc), Zr = R({}, kt, {
    deltaX: function(n) {
      return "deltaX" in n ? n.deltaX : "wheelDeltaX" in n ? -n.wheelDeltaX : 0;
    },
    deltaY: function(n) {
      return "deltaY" in n ? n.deltaY : "wheelDeltaY" in n ? -n.wheelDeltaY : "wheelDelta" in n ? -n.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), Ua = Se(Zr), zn = [9, 13, 27, 32], ia = ge && "CompositionEvent" in window, ao = null;
  ge && "documentMode" in document && (ao = document.documentMode);
  var cc = ge && "TextEvent" in window && !ao, pv = ge && (!ia || ao && 8 < ao && 11 >= ao), au = " ", vv = false;
  function mv(n, r) {
    switch (n) {
      case "keyup":
        return zn.indexOf(r.keyCode) !== -1;
      case "keydown":
        return r.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function fc(n) {
    return n = n.detail, typeof n == "object" && "data" in n ? n.data : null;
  }
  var lu = false;
  function ay(n, r) {
    switch (n) {
      case "compositionend":
        return fc(r);
      case "keypress":
        return r.which !== 32 ? null : (vv = true, au);
      case "textInput":
        return n = r.data, n === au && vv ? null : n;
      default:
        return null;
    }
  }
  function ly(n, r) {
    if (lu)
      return n === "compositionend" || !ia && mv(n, r) ? (n = j(), k = m = na = null, lu = false, n) : null;
    switch (n) {
      case "paste":
        return null;
      case "keypress":
        if (!(r.ctrlKey || r.altKey || r.metaKey) || r.ctrlKey && r.altKey) {
          if (r.char && 1 < r.char.length)
            return r.char;
          if (r.which)
            return String.fromCharCode(r.which);
        }
        return null;
      case "compositionend":
        return pv && r.locale !== "ko" ? null : r.data;
      default:
        return null;
    }
  }
  var hv = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
  function yv(n) {
    var r = n && n.nodeName && n.nodeName.toLowerCase();
    return r === "input" ? !!hv[n.type] : r === "textarea";
  }
  function gv(n, r, l, u) {
    wi(u), r = ps(r, "onChange"), 0 < r.length && (l = new vt("onChange", "change", null, l, u), n.push({ event: l, listeners: r }));
  }
  var ls = null, ou = null;
  function uu(n) {
    mc(n, 0);
  }
  function su(n) {
    var r = fu(n);
    if (Ir(r))
      return n;
  }
  function Sv(n, r) {
    if (n === "change")
      return r;
  }
  var rd = false;
  if (ge) {
    var id;
    if (ge) {
      var ad = "oninput" in document;
      if (!ad) {
        var bv = document.createElement("div");
        bv.setAttribute("oninput", "return;"), ad = typeof bv.oninput == "function";
      }
      id = ad;
    } else
      id = false;
    rd = id && (!document.documentMode || 9 < document.documentMode);
  }
  function Cv() {
    ls && (ls.detachEvent("onpropertychange", _v), ou = ls = null);
  }
  function _v(n) {
    if (n.propertyName === "value" && su(ou)) {
      var r = [];
      gv(r, ou, n, Zt(n)), sl(uu, r);
    }
  }
  function oy(n, r, l) {
    n === "focusin" ? (Cv(), ls = r, ou = l, ls.attachEvent("onpropertychange", _v)) : n === "focusout" && Cv();
  }
  function uy(n) {
    if (n === "selectionchange" || n === "keyup" || n === "keydown")
      return su(ou);
  }
  function sy(n, r) {
    if (n === "click")
      return su(r);
  }
  function Ev(n, r) {
    if (n === "input" || n === "change")
      return su(r);
  }
  function cy(n, r) {
    return n === r && (n !== 0 || 1 / n === 1 / r) || n !== n && r !== r;
  }
  var Oi = typeof Object.is == "function" ? Object.is : cy;
  function os(n, r) {
    if (Oi(n, r))
      return true;
    if (typeof n != "object" || n === null || typeof r != "object" || r === null)
      return false;
    var l = Object.keys(n), u = Object.keys(r);
    if (l.length !== u.length)
      return false;
    for (u = 0; u < l.length; u++) {
      var c = l[u];
      if (!J.call(r, c) || !Oi(n[c], r[c]))
        return false;
    }
    return true;
  }
  function kv(n) {
    for (; n && n.firstChild; )
      n = n.firstChild;
    return n;
  }
  function xv(n, r) {
    var l = kv(n);
    n = 0;
    for (var u; l; ) {
      if (l.nodeType === 3) {
        if (u = n + l.textContent.length, n <= r && u >= r)
          return { node: l, offset: r - n };
        n = u;
      }
      e: {
        for (; l; ) {
          if (l.nextSibling) {
            l = l.nextSibling;
            break e;
          }
          l = l.parentNode;
        }
        l = void 0;
      }
      l = kv(l);
    }
  }
  function Rv(n, r) {
    return n && r ? n === r ? true : n && n.nodeType === 3 ? false : r && r.nodeType === 3 ? Rv(n, r.parentNode) : "contains" in n ? n.contains(r) : n.compareDocumentPosition ? !!(n.compareDocumentPosition(r) & 16) : false : false;
  }
  function dc() {
    for (var n = window, r = yn(); r instanceof n.HTMLIFrameElement; ) {
      try {
        var l = typeof r.contentWindow.location.href == "string";
      } catch {
        l = false;
      }
      if (l)
        n = r.contentWindow;
      else
        break;
      r = yn(n.document);
    }
    return r;
  }
  function ja(n) {
    var r = n && n.nodeName && n.nodeName.toLowerCase();
    return r && (r === "input" && (n.type === "text" || n.type === "search" || n.type === "tel" || n.type === "url" || n.type === "password") || r === "textarea" || n.contentEditable === "true");
  }
  function pc(n) {
    var r = dc(), l = n.focusedElem, u = n.selectionRange;
    if (r !== l && l && l.ownerDocument && Rv(l.ownerDocument.documentElement, l)) {
      if (u !== null && ja(l)) {
        if (r = u.start, n = u.end, n === void 0 && (n = r), "selectionStart" in l)
          l.selectionStart = r, l.selectionEnd = Math.min(n, l.value.length);
        else if (n = (r = l.ownerDocument || document) && r.defaultView || window, n.getSelection) {
          n = n.getSelection();
          var c = l.textContent.length, d = Math.min(u.start, c);
          u = u.end === void 0 ? d : Math.min(u.end, c), !n.extend && d > u && (c = u, u = d, d = c), c = xv(l, d);
          var h = xv(
            l,
            u
          );
          c && h && (n.rangeCount !== 1 || n.anchorNode !== c.node || n.anchorOffset !== c.offset || n.focusNode !== h.node || n.focusOffset !== h.offset) && (r = r.createRange(), r.setStart(c.node, c.offset), n.removeAllRanges(), d > u ? (n.addRange(r), n.extend(h.node, h.offset)) : (r.setEnd(h.node, h.offset), n.addRange(r)));
        }
      }
      for (r = [], n = l; n = n.parentNode; )
        n.nodeType === 1 && r.push({ element: n, left: n.scrollLeft, top: n.scrollTop });
      for (typeof l.focus == "function" && l.focus(), l = 0; l < r.length; l++)
        n = r[l], n.element.scrollLeft = n.left, n.element.scrollTop = n.top;
    }
  }
  var wv = ge && "documentMode" in document && 11 >= document.documentMode, aa = null, ld = null, us = null, od = false;
  function Tv(n, r, l) {
    var u = l.window === l ? l.document : l.nodeType === 9 ? l : l.ownerDocument;
    od || aa == null || aa !== yn(u) || (u = aa, "selectionStart" in u && ja(u) ? u = { start: u.selectionStart, end: u.selectionEnd } : (u = (u.ownerDocument && u.ownerDocument.defaultView || window).getSelection(), u = { anchorNode: u.anchorNode, anchorOffset: u.anchorOffset, focusNode: u.focusNode, focusOffset: u.focusOffset }), us && os(us, u) || (us = u, u = ps(ld, "onSelect"), 0 < u.length && (r = new vt("onSelect", "select", null, r, l), n.push({ event: r, listeners: u }), r.target = aa)));
  }
  function vc(n, r) {
    var l = {};
    return l[n.toLowerCase()] = r.toLowerCase(), l["Webkit" + n] = "webkit" + r, l["Moz" + n] = "moz" + r, l;
  }
  var lo = { animationend: vc("Animation", "AnimationEnd"), animationiteration: vc("Animation", "AnimationIteration"), animationstart: vc("Animation", "AnimationStart"), transitionend: vc("Transition", "TransitionEnd") }, ud = {}, sd = {};
  ge && (sd = document.createElement("div").style, "AnimationEvent" in window || (delete lo.animationend.animation, delete lo.animationiteration.animation, delete lo.animationstart.animation), "TransitionEvent" in window || delete lo.transitionend.transition);
  function Xn(n) {
    if (ud[n])
      return ud[n];
    if (!lo[n])
      return n;
    var r = lo[n], l;
    for (l in r)
      if (r.hasOwnProperty(l) && l in sd)
        return ud[n] = r[l];
    return n;
  }
  var cd = Xn("animationend"), Nv = Xn("animationiteration"), Dv = Xn("animationstart"), Ov = Xn("transitionend"), Lv = /* @__PURE__ */ new Map(), Mv = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function Fa(n, r) {
    Lv.set(n, r), P(r, [n]);
  }
  for (var ss = 0; ss < Mv.length; ss++) {
    var oo = Mv[ss], fy = oo.toLowerCase(), cs = oo[0].toUpperCase() + oo.slice(1);
    Fa(fy, "on" + cs);
  }
  Fa(cd, "onAnimationEnd"), Fa(Nv, "onAnimationIteration"), Fa(Dv, "onAnimationStart"), Fa("dblclick", "onDoubleClick"), Fa("focusin", "onFocus"), Fa("focusout", "onBlur"), Fa(Ov, "onTransitionEnd"), g("onMouseEnter", ["mouseout", "mouseover"]), g("onMouseLeave", ["mouseout", "mouseover"]), g("onPointerEnter", ["pointerout", "pointerover"]), g("onPointerLeave", ["pointerout", "pointerover"]), P("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" ")), P("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")), P("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), P("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" ")), P("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" ")), P("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var fs = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), dy = new Set("cancel close invalid load scroll toggle".split(" ").concat(fs));
  function Av(n, r, l) {
    var u = n.type || "unknown-event";
    n.currentTarget = l, He(u, r, void 0, n), n.currentTarget = null;
  }
  function mc(n, r) {
    r = (r & 4) !== 0;
    for (var l = 0; l < n.length; l++) {
      var u = n[l], c = u.event;
      u = u.listeners;
      e: {
        var d = void 0;
        if (r)
          for (var h = u.length - 1; 0 <= h; h--) {
            var E = u[h], w = E.instance, H = E.currentTarget;
            if (E = E.listener, w !== d && c.isPropagationStopped())
              break e;
            Av(c, E, H), d = w;
          }
        else
          for (h = 0; h < u.length; h++) {
            if (E = u[h], w = E.instance, H = E.currentTarget, E = E.listener, w !== d && c.isPropagationStopped())
              break e;
            Av(c, E, H), d = w;
          }
      }
    }
    if (me)
      throw n = Ie, me = false, Ie = null, n;
  }
  function ln(n, r) {
    var l = r[yd];
    l === void 0 && (l = r[yd] = /* @__PURE__ */ new Set());
    var u = n + "__bubble";
    l.has(u) || (zv(r, n, 2, false), l.add(u));
  }
  function El(n, r, l) {
    var u = 0;
    r && (u |= 4), zv(l, n, u, r);
  }
  var Ha = "_reactListening" + Math.random().toString(36).slice(2);
  function cu(n) {
    if (!n[Ha]) {
      n[Ha] = true, T.forEach(function(l) {
        l !== "selectionchange" && (dy.has(l) || El(l, false, n), El(l, true, n));
      });
      var r = n.nodeType === 9 ? n : n.ownerDocument;
      r === null || r[Ha] || (r[Ha] = true, El("selectionchange", false, r));
    }
  }
  function zv(n, r, l, u) {
    switch (ns(r)) {
      case 1:
        var c = nu;
        break;
      case 4:
        c = Cl;
        break;
      default:
        c = _l;
    }
    l = c.bind(null, r, l, n), c = void 0, !pa || r !== "touchstart" && r !== "touchmove" && r !== "wheel" || (c = true), u ? c !== void 0 ? n.addEventListener(r, l, { capture: true, passive: c }) : n.addEventListener(r, l, true) : c !== void 0 ? n.addEventListener(r, l, { passive: c }) : n.addEventListener(r, l, false);
  }
  function hc(n, r, l, u, c) {
    var d = u;
    if (!(r & 1) && !(r & 2) && u !== null)
      e:
        for (; ; ) {
          if (u === null)
            return;
          var h = u.tag;
          if (h === 3 || h === 4) {
            var E = u.stateNode.containerInfo;
            if (E === c || E.nodeType === 8 && E.parentNode === c)
              break;
            if (h === 4)
              for (h = u.return; h !== null; ) {
                var w = h.tag;
                if ((w === 3 || w === 4) && (w = h.stateNode.containerInfo, w === c || w.nodeType === 8 && w.parentNode === c))
                  return;
                h = h.return;
              }
            for (; E !== null; ) {
              if (h = Li(E), h === null)
                return;
              if (w = h.tag, w === 5 || w === 6) {
                u = d = h;
                continue e;
              }
              E = E.parentNode;
            }
          }
          u = u.return;
        }
    sl(function() {
      var H = d, re = Zt(l), ae = [];
      e: {
        var ne = Lv.get(n);
        if (ne !== void 0) {
          var Ee = vt, Le = n;
          switch (n) {
            case "keypress":
              if (B(l) === 0)
                break e;
            case "keydown":
            case "keyup":
              Ee = ry;
              break;
            case "focusin":
              Le = "focus", Ee = ra;
              break;
            case "focusout":
              Le = "blur", Ee = ra;
              break;
            case "beforeblur":
            case "afterblur":
              Ee = ra;
              break;
            case "click":
              if (l.button === 2)
                break e;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              Ee = za;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              Ee = rs;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              Ee = iy;
              break;
            case cd:
            case Nv:
            case Dv:
              Ee = as;
              break;
            case Ov:
              Ee = dv;
              break;
            case "scroll":
              Ee = rn;
              break;
            case "wheel":
              Ee = Ua;
              break;
            case "copy":
            case "cut":
            case "paste":
              Ee = ty;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              Ee = uc;
          }
          var ze = (r & 4) !== 0, Mn = !ze && n === "scroll", M = ze ? ne !== null ? ne + "Capture" : null : ne;
          ze = [];
          for (var D = H, V; D !== null; ) {
            V = D;
            var se = V.stateNode;
            if (V.tag === 5 && se !== null && (V = se, M !== null && (se = mi(D, M), se != null && ze.push(ds(D, se, V)))), Mn)
              break;
            D = D.return;
          }
          0 < ze.length && (ne = new Ee(ne, Le, null, l, re), ae.push({ event: ne, listeners: ze }));
        }
      }
      if (!(r & 7)) {
        e: {
          if (ne = n === "mouseover" || n === "pointerover", Ee = n === "mouseout" || n === "pointerout", ne && l !== Sr && (Le = l.relatedTarget || l.fromElement) && (Li(Le) || Le[Pa]))
            break e;
          if ((Ee || ne) && (ne = re.window === re ? re : (ne = re.ownerDocument) ? ne.defaultView || ne.parentWindow : window, Ee ? (Le = l.relatedTarget || l.toElement, Ee = H, Le = Le ? Li(Le) : null, Le !== null && (Mn = Je(Le), Le !== Mn || Le.tag !== 5 && Le.tag !== 6) && (Le = null)) : (Ee = null, Le = H), Ee !== Le)) {
            if (ze = za, se = "onMouseLeave", M = "onMouseEnter", D = "mouse", (n === "pointerout" || n === "pointerover") && (ze = uc, se = "onPointerLeave", M = "onPointerEnter", D = "pointer"), Mn = Ee == null ? ne : fu(Ee), V = Le == null ? ne : fu(Le), ne = new ze(se, D + "leave", Ee, l, re), ne.target = Mn, ne.relatedTarget = V, se = null, Li(re) === H && (ze = new ze(M, D + "enter", Le, l, re), ze.target = V, ze.relatedTarget = Mn, se = ze), Mn = se, Ee && Le)
              t: {
                for (ze = Ee, M = Le, D = 0, V = ze; V; V = uo(V))
                  D++;
                for (V = 0, se = M; se; se = uo(se))
                  V++;
                for (; 0 < D - V; )
                  ze = uo(ze), D--;
                for (; 0 < V - D; )
                  M = uo(M), V--;
                for (; D--; ) {
                  if (ze === M || M !== null && ze === M.alternate)
                    break t;
                  ze = uo(ze), M = uo(M);
                }
                ze = null;
              }
            else
              ze = null;
            Ee !== null && fd(ae, ne, Ee, ze, false), Le !== null && Mn !== null && fd(ae, Mn, Le, ze, true);
          }
        }
        e: {
          if (ne = H ? fu(H) : window, Ee = ne.nodeName && ne.nodeName.toLowerCase(), Ee === "select" || Ee === "input" && ne.type === "file")
            var Ve = Sv;
          else if (yv(ne))
            if (rd)
              Ve = Ev;
            else {
              Ve = uy;
              var Me = oy;
            }
          else
            (Ee = ne.nodeName) && Ee.toLowerCase() === "input" && (ne.type === "checkbox" || ne.type === "radio") && (Ve = sy);
          if (Ve && (Ve = Ve(n, H))) {
            gv(ae, Ve, l, re);
            break e;
          }
          Me && Me(n, ne, H), n === "focusout" && (Me = ne._wrapperState) && Me.controlled && ne.type === "number" && Yr(ne, "number", ne.value);
        }
        switch (Me = H ? fu(H) : window, n) {
          case "focusin":
            (yv(Me) || Me.contentEditable === "true") && (aa = Me, ld = H, us = null);
            break;
          case "focusout":
            us = ld = aa = null;
            break;
          case "mousedown":
            od = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            od = false, Tv(ae, l, re);
            break;
          case "selectionchange":
            if (wv)
              break;
          case "keydown":
          case "keyup":
            Tv(ae, l, re);
        }
        var Pe;
        if (ia)
          e: {
            switch (n) {
              case "compositionstart":
                var nt = "onCompositionStart";
                break e;
              case "compositionend":
                nt = "onCompositionEnd";
                break e;
              case "compositionupdate":
                nt = "onCompositionUpdate";
                break e;
            }
            nt = void 0;
          }
        else
          lu ? mv(n, l) && (nt = "onCompositionEnd") : n === "keydown" && l.keyCode === 229 && (nt = "onCompositionStart");
        nt && (pv && l.locale !== "ko" && (lu || nt !== "onCompositionStart" ? nt === "onCompositionEnd" && lu && (Pe = j()) : (na = re, m = "value" in na ? na.value : na.textContent, lu = true)), Me = ps(H, nt), 0 < Me.length && (nt = new Zf(nt, n, null, l, re), ae.push({ event: nt, listeners: Me }), Pe ? nt.data = Pe : (Pe = fc(l), Pe !== null && (nt.data = Pe)))), (Pe = cc ? ay(n, l) : ly(n, l)) && (H = ps(H, "onBeforeInput"), 0 < H.length && (re = new Zf("onBeforeInput", "beforeinput", null, l, re), ae.push({ event: re, listeners: H }), re.data = Pe));
      }
      mc(ae, r);
    });
  }
  function ds(n, r, l) {
    return { instance: n, listener: r, currentTarget: l };
  }
  function ps(n, r) {
    for (var l = r + "Capture", u = []; n !== null; ) {
      var c = n, d = c.stateNode;
      c.tag === 5 && d !== null && (c = d, d = mi(n, l), d != null && u.unshift(ds(n, d, c)), d = mi(n, r), d != null && u.push(ds(n, d, c))), n = n.return;
    }
    return u;
  }
  function uo(n) {
    if (n === null)
      return null;
    do
      n = n.return;
    while (n && n.tag !== 5);
    return n || null;
  }
  function fd(n, r, l, u, c) {
    for (var d = r._reactName, h = []; l !== null && l !== u; ) {
      var E = l, w = E.alternate, H = E.stateNode;
      if (w !== null && w === u)
        break;
      E.tag === 5 && H !== null && (E = H, c ? (w = mi(l, d), w != null && h.unshift(ds(l, w, E))) : c || (w = mi(l, d), w != null && h.push(ds(l, w, E)))), l = l.return;
    }
    h.length !== 0 && n.push({ event: r, listeners: h });
  }
  var dd = /\r\n?/g, py = /\u0000|\uFFFD/g;
  function pd(n) {
    return (typeof n == "string" ? n : "" + n).replace(dd, `
`).replace(py, "");
  }
  function yc(n, r, l) {
    if (r = pd(r), pd(n) !== r && l)
      throw Error(b(425));
  }
  function gc() {
  }
  var vd = null, so = null;
  function vs(n, r) {
    return n === "textarea" || n === "noscript" || typeof r.children == "string" || typeof r.children == "number" || typeof r.dangerouslySetInnerHTML == "object" && r.dangerouslySetInnerHTML !== null && r.dangerouslySetInnerHTML.__html != null;
  }
  var co = typeof setTimeout == "function" ? setTimeout : void 0, Vv = typeof clearTimeout == "function" ? clearTimeout : void 0, md = typeof Promise == "function" ? Promise : void 0, hd = typeof queueMicrotask == "function" ? queueMicrotask : typeof md < "u" ? function(n) {
    return md.resolve(null).then(n).catch(vy);
  } : co;
  function vy(n) {
    setTimeout(function() {
      throw n;
    });
  }
  function kl(n, r) {
    var l = r, u = 0;
    do {
      var c = l.nextSibling;
      if (n.removeChild(l), c && c.nodeType === 8)
        if (l = c.data, l === "/$") {
          if (u === 0) {
            n.removeChild(c), Sl(r);
            return;
          }
          u--;
        } else
          l !== "$" && l !== "$?" && l !== "$!" || u++;
      l = c;
    } while (l);
    Sl(r);
  }
  function la(n) {
    for (; n != null; n = n.nextSibling) {
      var r = n.nodeType;
      if (r === 1 || r === 3)
        break;
      if (r === 8) {
        if (r = n.data, r === "$" || r === "$!" || r === "$?")
          break;
        if (r === "/$")
          return null;
      }
    }
    return n;
  }
  function ms(n) {
    n = n.previousSibling;
    for (var r = 0; n; ) {
      if (n.nodeType === 8) {
        var l = n.data;
        if (l === "$" || l === "$!" || l === "$?") {
          if (r === 0)
            return n;
          r--;
        } else
          l === "/$" && r++;
      }
      n = n.previousSibling;
    }
    return null;
  }
  var xl = Math.random().toString(36).slice(2), ga = "__reactFiber$" + xl, fo = "__reactProps$" + xl, Pa = "__reactContainer$" + xl, yd = "__reactEvents$" + xl, my = "__reactListeners$" + xl, gd = "__reactHandles$" + xl;
  function Li(n) {
    var r = n[ga];
    if (r)
      return r;
    for (var l = n.parentNode; l; ) {
      if (r = l[Pa] || l[ga]) {
        if (l = r.alternate, r.child !== null || l !== null && l.child !== null)
          for (n = ms(n); n !== null; ) {
            if (l = n[ga])
              return l;
            n = ms(n);
          }
        return r;
      }
      n = l, l = n.parentNode;
    }
    return null;
  }
  function hs(n) {
    return n = n[ga] || n[Pa], !n || n.tag !== 5 && n.tag !== 6 && n.tag !== 13 && n.tag !== 3 ? null : n;
  }
  function fu(n) {
    if (n.tag === 5 || n.tag === 6)
      return n.stateNode;
    throw Error(b(33));
  }
  function $e(n) {
    return n[fo] || null;
  }
  var Rl = [], sn = -1;
  function ut(n) {
    return { current: n };
  }
  function Bt(n) {
    0 > sn || (n.current = Rl[sn], Rl[sn] = null, sn--);
  }
  function qt(n, r) {
    sn++, Rl[sn] = n.current, n.current = r;
  }
  var Sa = {}, tt = ut(Sa), wn = ut(false), Jr = Sa;
  function Mi(n, r) {
    var l = n.type.contextTypes;
    if (!l)
      return Sa;
    var u = n.stateNode;
    if (u && u.__reactInternalMemoizedUnmaskedChildContext === r)
      return u.__reactInternalMemoizedMaskedChildContext;
    var c = {}, d;
    for (d in l)
      c[d] = r[d];
    return u && (n = n.stateNode, n.__reactInternalMemoizedUnmaskedChildContext = r, n.__reactInternalMemoizedMaskedChildContext = c), c;
  }
  function mn(n) {
    return n = n.childContextTypes, n != null;
  }
  function Ai() {
    Bt(wn), Bt(tt);
  }
  function wl(n, r, l) {
    if (tt.current !== Sa)
      throw Error(b(168));
    qt(tt, r), qt(wn, l);
  }
  function ys(n, r, l) {
    var u = n.stateNode;
    if (r = r.childContextTypes, typeof u.getChildContext != "function")
      return l;
    u = u.getChildContext();
    for (var c in u)
      if (!(c in r))
        throw Error(b(108, bt(n) || "Unknown", c));
    return R({}, l, u);
  }
  function Sc(n) {
    return n = (n = n.stateNode) && n.__reactInternalMemoizedMergedChildContext || Sa, Jr = tt.current, qt(tt, n), qt(wn, wn.current), true;
  }
  function Uv(n, r, l) {
    var u = n.stateNode;
    if (!u)
      throw Error(b(169));
    l ? (n = ys(n, r, Jr), u.__reactInternalMemoizedMergedChildContext = n, Bt(wn), Bt(tt), qt(tt, n)) : Bt(wn), qt(wn, l);
  }
  var hi = null, Kn = false, gs = false;
  function Sd(n) {
    hi === null ? hi = [n] : hi.push(n);
  }
  function bd(n) {
    Kn = true, Sd(n);
  }
  function ei() {
    if (!gs && hi !== null) {
      gs = true;
      var n = 0, r = jt;
      try {
        var l = hi;
        for (jt = 1; n < l.length; n++) {
          var u = l[n];
          do
            u = u(true);
          while (u !== null);
        }
        hi = null, Kn = false;
      } catch (c) {
        throw hi !== null && (hi = hi.slice(n + 1)), cl(ea, ei), c;
      } finally {
        jt = r, gs = false;
      }
    }
    return null;
  }
  var Tl = [], ti = 0, po = null, du = 0, ni = [], br = 0, zi = null, ar = 1, Ba = "";
  function yi(n, r) {
    Tl[ti++] = du, Tl[ti++] = po, po = n, du = r;
  }
  function Cd(n, r, l) {
    ni[br++] = ar, ni[br++] = Ba, ni[br++] = zi, zi = n;
    var u = ar;
    n = Ba;
    var c = 32 - Nr(u) - 1;
    u &= ~(1 << c), l += 1;
    var d = 32 - Nr(r) + c;
    if (30 < d) {
      var h = c - c % 5;
      d = (u & (1 << h) - 1).toString(32), u >>= h, c -= h, ar = 1 << 32 - Nr(r) + c | l << c | u, Ba = d + n;
    } else
      ar = 1 << d | l << c | u, Ba = n;
  }
  function bc(n) {
    n.return !== null && (yi(n, 1), Cd(n, 1, 0));
  }
  function _d(n) {
    for (; n === po; )
      po = Tl[--ti], Tl[ti] = null, du = Tl[--ti], Tl[ti] = null;
    for (; n === zi; )
      zi = ni[--br], ni[br] = null, Ba = ni[--br], ni[br] = null, ar = ni[--br], ni[br] = null;
  }
  var gi = null, ri = null, cn = false, Vi = null;
  function Ed(n, r) {
    var l = Bi(5, null, null, 0);
    l.elementType = "DELETED", l.stateNode = r, l.return = n, r = n.deletions, r === null ? (n.deletions = [l], n.flags |= 16) : r.push(l);
  }
  function jv(n, r) {
    switch (n.tag) {
      case 5:
        var l = n.type;
        return r = r.nodeType !== 1 || l.toLowerCase() !== r.nodeName.toLowerCase() ? null : r, r !== null ? (n.stateNode = r, gi = n, ri = la(r.firstChild), true) : false;
      case 6:
        return r = n.pendingProps === "" || r.nodeType !== 3 ? null : r, r !== null ? (n.stateNode = r, gi = n, ri = null, true) : false;
      case 13:
        return r = r.nodeType !== 8 ? null : r, r !== null ? (l = zi !== null ? { id: ar, overflow: Ba } : null, n.memoizedState = { dehydrated: r, treeContext: l, retryLane: 1073741824 }, l = Bi(18, null, null, 0), l.stateNode = r, l.return = n, n.child = l, gi = n, ri = null, true) : false;
      default:
        return false;
    }
  }
  function Cc(n) {
    return (n.mode & 1) !== 0 && (n.flags & 128) === 0;
  }
  function _c(n) {
    if (cn) {
      var r = ri;
      if (r) {
        var l = r;
        if (!jv(n, r)) {
          if (Cc(n))
            throw Error(b(418));
          r = la(l.nextSibling);
          var u = gi;
          r && jv(n, r) ? Ed(u, l) : (n.flags = n.flags & -4097 | 2, cn = false, gi = n);
        }
      } else {
        if (Cc(n))
          throw Error(b(418));
        n.flags = n.flags & -4097 | 2, cn = false, gi = n;
      }
    }
  }
  function Fv(n) {
    for (n = n.return; n !== null && n.tag !== 5 && n.tag !== 3 && n.tag !== 13; )
      n = n.return;
    gi = n;
  }
  function Ec(n) {
    if (n !== gi)
      return false;
    if (!cn)
      return Fv(n), cn = true, false;
    var r;
    if ((r = n.tag !== 3) && !(r = n.tag !== 5) && (r = n.type, r = r !== "head" && r !== "body" && !vs(n.type, n.memoizedProps)), r && (r = ri)) {
      if (Cc(n))
        throw Hv(), Error(b(418));
      for (; r; )
        Ed(n, r), r = la(r.nextSibling);
    }
    if (Fv(n), n.tag === 13) {
      if (n = n.memoizedState, n = n !== null ? n.dehydrated : null, !n)
        throw Error(b(317));
      e: {
        for (n = n.nextSibling, r = 0; n; ) {
          if (n.nodeType === 8) {
            var l = n.data;
            if (l === "/$") {
              if (r === 0) {
                ri = la(n.nextSibling);
                break e;
              }
              r--;
            } else
              l !== "$" && l !== "$!" && l !== "$?" || r++;
          }
          n = n.nextSibling;
        }
        ri = null;
      }
    } else
      ri = gi ? la(n.stateNode.nextSibling) : null;
    return true;
  }
  function Hv() {
    for (var n = ri; n; )
      n = la(n.nextSibling);
  }
  function _n() {
    ri = gi = null, cn = false;
  }
  function kd(n) {
    Vi === null ? Vi = [n] : Vi.push(n);
  }
  var kc = xe.ReactCurrentBatchConfig;
  function Si(n, r) {
    if (n && n.defaultProps) {
      r = R({}, r), n = n.defaultProps;
      for (var l in n)
        r[l] === void 0 && (r[l] = n[l]);
      return r;
    }
    return r;
  }
  var ba = ut(null), xc = null, Nl = null, xd = null;
  function Rd() {
    xd = Nl = xc = null;
  }
  function Dl(n) {
    var r = ba.current;
    Bt(ba), n._currentValue = r;
  }
  function Zn(n, r, l) {
    for (; n !== null; ) {
      var u = n.alternate;
      if ((n.childLanes & r) !== r ? (n.childLanes |= r, u !== null && (u.childLanes |= r)) : u !== null && (u.childLanes & r) !== r && (u.childLanes |= r), n === l)
        break;
      n = n.return;
    }
  }
  function he(n, r) {
    xc = n, xd = Nl = null, n = n.dependencies, n !== null && n.firstContext !== null && (n.lanes & r && (Vn = true), n.firstContext = null);
  }
  function Ln(n) {
    var r = n._currentValue;
    if (xd !== n)
      if (n = { context: n, memoizedValue: r, next: null }, Nl === null) {
        if (xc === null)
          throw Error(b(308));
        Nl = n, xc.dependencies = { lanes: 0, firstContext: n };
      } else
        Nl = Nl.next = n;
    return r;
  }
  var lr = null;
  function wd(n) {
    lr === null ? lr = [n] : lr.push(n);
  }
  function Pv(n, r, l, u) {
    var c = r.interleaved;
    return c === null ? (l.next = l, wd(r)) : (l.next = c.next, c.next = l), r.interleaved = l, Ia(n, u);
  }
  function Ia(n, r) {
    n.lanes |= r;
    var l = n.alternate;
    for (l !== null && (l.lanes |= r), l = n, n = n.return; n !== null; )
      n.childLanes |= r, l = n.alternate, l !== null && (l.childLanes |= r), l = n, n = n.return;
    return l.tag === 3 ? l.stateNode : null;
  }
  var Ol = false;
  function Td(n) {
    n.updateQueue = { baseState: n.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function Pn(n, r) {
    n = n.updateQueue, r.updateQueue === n && (r.updateQueue = { baseState: n.baseState, firstBaseUpdate: n.firstBaseUpdate, lastBaseUpdate: n.lastBaseUpdate, shared: n.shared, effects: n.effects });
  }
  function $a(n, r) {
    return { eventTime: n, lane: r, tag: 0, payload: null, callback: null, next: null };
  }
  function Ll(n, r, l) {
    var u = n.updateQueue;
    if (u === null)
      return null;
    if (u = u.shared, Ct & 2) {
      var c = u.pending;
      return c === null ? r.next = r : (r.next = c.next, c.next = r), u.pending = r, Ia(n, l);
    }
    return c = u.interleaved, c === null ? (r.next = r, wd(u)) : (r.next = c.next, c.next = r), u.interleaved = r, Ia(n, l);
  }
  function Rc(n, r, l) {
    if (r = r.updateQueue, r !== null && (r = r.shared, (l & 4194240) !== 0)) {
      var u = r.lanes;
      u &= n.pendingLanes, l |= u, r.lanes = l, ha(n, l);
    }
  }
  function Nd(n, r) {
    var l = n.updateQueue, u = n.alternate;
    if (u !== null && (u = u.updateQueue, l === u)) {
      var c = null, d = null;
      if (l = l.firstBaseUpdate, l !== null) {
        do {
          var h = { eventTime: l.eventTime, lane: l.lane, tag: l.tag, payload: l.payload, callback: l.callback, next: null };
          d === null ? c = d = h : d = d.next = h, l = l.next;
        } while (l !== null);
        d === null ? c = d = r : d = d.next = r;
      } else
        c = d = r;
      l = { baseState: u.baseState, firstBaseUpdate: c, lastBaseUpdate: d, shared: u.shared, effects: u.effects }, n.updateQueue = l;
      return;
    }
    n = l.lastBaseUpdate, n === null ? l.firstBaseUpdate = r : n.next = r, l.lastBaseUpdate = r;
  }
  function Ml(n, r, l, u) {
    var c = n.updateQueue;
    Ol = false;
    var d = c.firstBaseUpdate, h = c.lastBaseUpdate, E = c.shared.pending;
    if (E !== null) {
      c.shared.pending = null;
      var w = E, H = w.next;
      w.next = null, h === null ? d = H : h.next = H, h = w;
      var re = n.alternate;
      re !== null && (re = re.updateQueue, E = re.lastBaseUpdate, E !== h && (E === null ? re.firstBaseUpdate = H : E.next = H, re.lastBaseUpdate = w));
    }
    if (d !== null) {
      var ae = c.baseState;
      h = 0, re = H = w = null, E = d;
      do {
        var ne = E.lane, Ee = E.eventTime;
        if ((u & ne) === ne) {
          re !== null && (re = re.next = {
            eventTime: Ee,
            lane: 0,
            tag: E.tag,
            payload: E.payload,
            callback: E.callback,
            next: null
          });
          e: {
            var Le = n, ze = E;
            switch (ne = r, Ee = l, ze.tag) {
              case 1:
                if (Le = ze.payload, typeof Le == "function") {
                  ae = Le.call(Ee, ae, ne);
                  break e;
                }
                ae = Le;
                break e;
              case 3:
                Le.flags = Le.flags & -65537 | 128;
              case 0:
                if (Le = ze.payload, ne = typeof Le == "function" ? Le.call(Ee, ae, ne) : Le, ne == null)
                  break e;
                ae = R({}, ae, ne);
                break e;
              case 2:
                Ol = true;
            }
          }
          E.callback !== null && E.lane !== 0 && (n.flags |= 64, ne = c.effects, ne === null ? c.effects = [E] : ne.push(E));
        } else
          Ee = { eventTime: Ee, lane: ne, tag: E.tag, payload: E.payload, callback: E.callback, next: null }, re === null ? (H = re = Ee, w = ae) : re = re.next = Ee, h |= ne;
        if (E = E.next, E === null) {
          if (E = c.shared.pending, E === null)
            break;
          ne = E, E = ne.next, ne.next = null, c.lastBaseUpdate = ne, c.shared.pending = null;
        }
      } while (true);
      if (re === null && (w = ae), c.baseState = w, c.firstBaseUpdate = H, c.lastBaseUpdate = re, r = c.shared.interleaved, r !== null) {
        c = r;
        do
          h |= c.lane, c = c.next;
        while (c !== r);
      } else
        d === null && (c.shared.lanes = 0);
      Ga |= h, n.lanes = h, n.memoizedState = ae;
    }
  }
  function vo(n, r, l) {
    if (n = r.effects, r.effects = null, n !== null)
      for (r = 0; r < n.length; r++) {
        var u = n[r], c = u.callback;
        if (c !== null) {
          if (u.callback = null, u = l, typeof c != "function")
            throw Error(b(191, c));
          c.call(u);
        }
      }
  }
  var Bv = new _.Component().refs;
  function Dd(n, r, l, u) {
    r = n.memoizedState, l = l(u, r), l = l == null ? r : R({}, r, l), n.memoizedState = l, n.lanes === 0 && (n.updateQueue.baseState = l);
  }
  var wc = { isMounted: function(n) {
    return (n = n._reactInternals) ? Je(n) === n : false;
  }, enqueueSetState: function(n, r, l) {
    n = n._reactInternals;
    var u = kr(), c = Un(n), d = $a(u, c);
    d.payload = r, l != null && (d.callback = l), r = Ll(n, d, c), r !== null && (xr(r, n, c, u), Rc(r, n, c));
  }, enqueueReplaceState: function(n, r, l) {
    n = n._reactInternals;
    var u = kr(), c = Un(n), d = $a(u, c);
    d.tag = 1, d.payload = r, l != null && (d.callback = l), r = Ll(n, d, c), r !== null && (xr(r, n, c, u), Rc(r, n, c));
  }, enqueueForceUpdate: function(n, r) {
    n = n._reactInternals;
    var l = kr(), u = Un(n), c = $a(l, u);
    c.tag = 2, r != null && (c.callback = r), r = Ll(n, c, u), r !== null && (xr(r, n, u, l), Rc(r, n, u));
  } };
  function Iv(n, r, l, u, c, d, h) {
    return n = n.stateNode, typeof n.shouldComponentUpdate == "function" ? n.shouldComponentUpdate(u, d, h) : r.prototype && r.prototype.isPureReactComponent ? !os(l, u) || !os(c, d) : true;
  }
  function $v(n, r, l) {
    var u = false, c = Sa, d = r.contextType;
    return typeof d == "object" && d !== null ? d = Ln(d) : (c = mn(r) ? Jr : tt.current, u = r.contextTypes, d = (u = u != null) ? Mi(n, c) : Sa), r = new r(l, d), n.memoizedState = r.state !== null && r.state !== void 0 ? r.state : null, r.updater = wc, n.stateNode = r, r._reactInternals = n, u && (n = n.stateNode, n.__reactInternalMemoizedUnmaskedChildContext = c, n.__reactInternalMemoizedMaskedChildContext = d), r;
  }
  function Yv(n, r, l, u) {
    n = r.state, typeof r.componentWillReceiveProps == "function" && r.componentWillReceiveProps(l, u), typeof r.UNSAFE_componentWillReceiveProps == "function" && r.UNSAFE_componentWillReceiveProps(l, u), r.state !== n && wc.enqueueReplaceState(r, r.state, null);
  }
  function Tc(n, r, l, u) {
    var c = n.stateNode;
    c.props = l, c.state = n.memoizedState, c.refs = Bv, Td(n);
    var d = r.contextType;
    typeof d == "object" && d !== null ? c.context = Ln(d) : (d = mn(r) ? Jr : tt.current, c.context = Mi(n, d)), c.state = n.memoizedState, d = r.getDerivedStateFromProps, typeof d == "function" && (Dd(n, r, d, l), c.state = n.memoizedState), typeof r.getDerivedStateFromProps == "function" || typeof c.getSnapshotBeforeUpdate == "function" || typeof c.UNSAFE_componentWillMount != "function" && typeof c.componentWillMount != "function" || (r = c.state, typeof c.componentWillMount == "function" && c.componentWillMount(), typeof c.UNSAFE_componentWillMount == "function" && c.UNSAFE_componentWillMount(), r !== c.state && wc.enqueueReplaceState(c, c.state, null), Ml(n, l, c, u), c.state = n.memoizedState), typeof c.componentDidMount == "function" && (n.flags |= 4194308);
  }
  function pu(n, r, l) {
    if (n = l.ref, n !== null && typeof n != "function" && typeof n != "object") {
      if (l._owner) {
        if (l = l._owner, l) {
          if (l.tag !== 1)
            throw Error(b(309));
          var u = l.stateNode;
        }
        if (!u)
          throw Error(b(147, n));
        var c = u, d = "" + n;
        return r !== null && r.ref !== null && typeof r.ref == "function" && r.ref._stringRef === d ? r.ref : (r = function(h) {
          var E = c.refs;
          E === Bv && (E = c.refs = {}), h === null ? delete E[d] : E[d] = h;
        }, r._stringRef = d, r);
      }
      if (typeof n != "string")
        throw Error(b(284));
      if (!l._owner)
        throw Error(b(290, n));
    }
    return n;
  }
  function Nc(n, r) {
    throw n = Object.prototype.toString.call(r), Error(b(31, n === "[object Object]" ? "object with keys {" + Object.keys(r).join(", ") + "}" : n));
  }
  function Wv(n) {
    var r = n._init;
    return r(n._payload);
  }
  function Qv(n) {
    function r(M, D) {
      if (n) {
        var V = M.deletions;
        V === null ? (M.deletions = [D], M.flags |= 16) : V.push(D);
      }
    }
    function l(M, D) {
      if (!n)
        return null;
      for (; D !== null; )
        r(M, D), D = D.sibling;
      return null;
    }
    function u(M, D) {
      for (M = /* @__PURE__ */ new Map(); D !== null; )
        D.key !== null ? M.set(D.key, D) : M.set(D.index, D), D = D.sibling;
      return M;
    }
    function c(M, D) {
      return M = Pl(M, D), M.index = 0, M.sibling = null, M;
    }
    function d(M, D, V) {
      return M.index = V, n ? (V = M.alternate, V !== null ? (V = V.index, V < D ? (M.flags |= 2, D) : V) : (M.flags |= 2, D)) : (M.flags |= 1048576, D);
    }
    function h(M) {
      return n && M.alternate === null && (M.flags |= 2), M;
    }
    function E(M, D, V, se) {
      return D === null || D.tag !== 6 ? (D = Us(V, M.mode, se), D.return = M, D) : (D = c(D, V), D.return = M, D);
    }
    function w(M, D, V, se) {
      var Ve = V.type;
      return Ve === De ? re(M, D, V.props.children, se, V.key) : D !== null && (D.elementType === Ve || typeof Ve == "object" && Ve !== null && Ve.$$typeof === ht && Wv(Ve) === D.type) ? (se = c(D, V.props), se.ref = pu(M, D, V), se.return = M, se) : (se = uf(V.type, V.key, V.props, null, M.mode, se), se.ref = pu(M, D, V), se.return = M, se);
    }
    function H(M, D, V, se) {
      return D === null || D.tag !== 4 || D.stateNode.containerInfo !== V.containerInfo || D.stateNode.implementation !== V.implementation ? (D = Mo(V, M.mode, se), D.return = M, D) : (D = c(D, V.children || []), D.return = M, D);
    }
    function re(M, D, V, se, Ve) {
      return D === null || D.tag !== 7 ? (D = Lo(V, M.mode, se, Ve), D.return = M, D) : (D = c(D, V), D.return = M, D);
    }
    function ae(M, D, V) {
      if (typeof D == "string" && D !== "" || typeof D == "number")
        return D = Us("" + D, M.mode, V), D.return = M, D;
      if (typeof D == "object" && D !== null) {
        switch (D.$$typeof) {
          case be:
            return V = uf(D.type, D.key, D.props, null, M.mode, V), V.ref = pu(M, null, D), V.return = M, V;
          case Te:
            return D = Mo(D, M.mode, V), D.return = M, D;
          case ht:
            var se = D._init;
            return ae(M, se(D._payload), V);
        }
        if (Gn(D) || je(D))
          return D = Lo(D, M.mode, V, null), D.return = M, D;
        Nc(M, D);
      }
      return null;
    }
    function ne(M, D, V, se) {
      var Ve = D !== null ? D.key : null;
      if (typeof V == "string" && V !== "" || typeof V == "number")
        return Ve !== null ? null : E(M, D, "" + V, se);
      if (typeof V == "object" && V !== null) {
        switch (V.$$typeof) {
          case be:
            return V.key === Ve ? w(M, D, V, se) : null;
          case Te:
            return V.key === Ve ? H(M, D, V, se) : null;
          case ht:
            return Ve = V._init, ne(
              M,
              D,
              Ve(V._payload),
              se
            );
        }
        if (Gn(V) || je(V))
          return Ve !== null ? null : re(M, D, V, se, null);
        Nc(M, V);
      }
      return null;
    }
    function Ee(M, D, V, se, Ve) {
      if (typeof se == "string" && se !== "" || typeof se == "number")
        return M = M.get(V) || null, E(D, M, "" + se, Ve);
      if (typeof se == "object" && se !== null) {
        switch (se.$$typeof) {
          case be:
            return M = M.get(se.key === null ? V : se.key) || null, w(D, M, se, Ve);
          case Te:
            return M = M.get(se.key === null ? V : se.key) || null, H(D, M, se, Ve);
          case ht:
            var Me = se._init;
            return Ee(M, D, V, Me(se._payload), Ve);
        }
        if (Gn(se) || je(se))
          return M = M.get(V) || null, re(D, M, se, Ve, null);
        Nc(D, se);
      }
      return null;
    }
    function Le(M, D, V, se) {
      for (var Ve = null, Me = null, Pe = D, nt = D = 0, tr = null; Pe !== null && nt < V.length; nt++) {
        Pe.index > nt ? (tr = Pe, Pe = null) : tr = Pe.sibling;
        var Vt = ne(M, Pe, V[nt], se);
        if (Vt === null) {
          Pe === null && (Pe = tr);
          break;
        }
        n && Pe && Vt.alternate === null && r(M, Pe), D = d(Vt, D, nt), Me === null ? Ve = Vt : Me.sibling = Vt, Me = Vt, Pe = tr;
      }
      if (nt === V.length)
        return l(M, Pe), cn && yi(M, nt), Ve;
      if (Pe === null) {
        for (; nt < V.length; nt++)
          Pe = ae(M, V[nt], se), Pe !== null && (D = d(Pe, D, nt), Me === null ? Ve = Pe : Me.sibling = Pe, Me = Pe);
        return cn && yi(M, nt), Ve;
      }
      for (Pe = u(M, Pe); nt < V.length; nt++)
        tr = Ee(Pe, M, nt, V[nt], se), tr !== null && (n && tr.alternate !== null && Pe.delete(tr.key === null ? nt : tr.key), D = d(tr, D, nt), Me === null ? Ve = tr : Me.sibling = tr, Me = tr);
      return n && Pe.forEach(function(Bl) {
        return r(M, Bl);
      }), cn && yi(M, nt), Ve;
    }
    function ze(M, D, V, se) {
      var Ve = je(V);
      if (typeof Ve != "function")
        throw Error(b(150));
      if (V = Ve.call(V), V == null)
        throw Error(b(151));
      for (var Me = Ve = null, Pe = D, nt = D = 0, tr = null, Vt = V.next(); Pe !== null && !Vt.done; nt++, Vt = V.next()) {
        Pe.index > nt ? (tr = Pe, Pe = null) : tr = Pe.sibling;
        var Bl = ne(M, Pe, Vt.value, se);
        if (Bl === null) {
          Pe === null && (Pe = tr);
          break;
        }
        n && Pe && Bl.alternate === null && r(M, Pe), D = d(Bl, D, nt), Me === null ? Ve = Bl : Me.sibling = Bl, Me = Bl, Pe = tr;
      }
      if (Vt.done)
        return l(
          M,
          Pe
        ), cn && yi(M, nt), Ve;
      if (Pe === null) {
        for (; !Vt.done; nt++, Vt = V.next())
          Vt = ae(M, Vt.value, se), Vt !== null && (D = d(Vt, D, nt), Me === null ? Ve = Vt : Me.sibling = Vt, Me = Vt);
        return cn && yi(M, nt), Ve;
      }
      for (Pe = u(M, Pe); !Vt.done; nt++, Vt = V.next())
        Vt = Ee(Pe, M, nt, Vt.value, se), Vt !== null && (n && Vt.alternate !== null && Pe.delete(Vt.key === null ? nt : Vt.key), D = d(Vt, D, nt), Me === null ? Ve = Vt : Me.sibling = Vt, Me = Vt);
      return n && Pe.forEach(function(zy) {
        return r(M, zy);
      }), cn && yi(M, nt), Ve;
    }
    function Mn(M, D, V, se) {
      if (typeof V == "object" && V !== null && V.type === De && V.key === null && (V = V.props.children), typeof V == "object" && V !== null) {
        switch (V.$$typeof) {
          case be:
            e: {
              for (var Ve = V.key, Me = D; Me !== null; ) {
                if (Me.key === Ve) {
                  if (Ve = V.type, Ve === De) {
                    if (Me.tag === 7) {
                      l(M, Me.sibling), D = c(Me, V.props.children), D.return = M, M = D;
                      break e;
                    }
                  } else if (Me.elementType === Ve || typeof Ve == "object" && Ve !== null && Ve.$$typeof === ht && Wv(Ve) === Me.type) {
                    l(M, Me.sibling), D = c(Me, V.props), D.ref = pu(M, Me, V), D.return = M, M = D;
                    break e;
                  }
                  l(M, Me);
                  break;
                } else
                  r(M, Me);
                Me = Me.sibling;
              }
              V.type === De ? (D = Lo(V.props.children, M.mode, se, V.key), D.return = M, M = D) : (se = uf(V.type, V.key, V.props, null, M.mode, se), se.ref = pu(M, D, V), se.return = M, M = se);
            }
            return h(M);
          case Te:
            e: {
              for (Me = V.key; D !== null; ) {
                if (D.key === Me)
                  if (D.tag === 4 && D.stateNode.containerInfo === V.containerInfo && D.stateNode.implementation === V.implementation) {
                    l(M, D.sibling), D = c(D, V.children || []), D.return = M, M = D;
                    break e;
                  } else {
                    l(M, D);
                    break;
                  }
                else
                  r(M, D);
                D = D.sibling;
              }
              D = Mo(V, M.mode, se), D.return = M, M = D;
            }
            return h(M);
          case ht:
            return Me = V._init, Mn(M, D, Me(V._payload), se);
        }
        if (Gn(V))
          return Le(M, D, V, se);
        if (je(V))
          return ze(M, D, V, se);
        Nc(M, V);
      }
      return typeof V == "string" && V !== "" || typeof V == "number" ? (V = "" + V, D !== null && D.tag === 6 ? (l(M, D.sibling), D = c(D, V), D.return = M, M = D) : (l(M, D), D = Us(V, M.mode, se), D.return = M, M = D), h(M)) : l(M, D);
    }
    return Mn;
  }
  var vu = Qv(true), Gv = Qv(false), Ss = {}, oa = ut(Ss), bs = ut(Ss), mu = ut(Ss);
  function mo(n) {
    if (n === Ss)
      throw Error(b(174));
    return n;
  }
  function Od(n, r) {
    switch (qt(mu, r), qt(bs, n), qt(oa, Ss), n = r.nodeType, n) {
      case 9:
      case 11:
        r = (r = r.documentElement) ? r.namespaceURI : gn(null, "");
        break;
      default:
        n = n === 8 ? r.parentNode : r, r = n.namespaceURI || null, n = n.tagName, r = gn(r, n);
    }
    Bt(oa), qt(oa, r);
  }
  function Al() {
    Bt(oa), Bt(bs), Bt(mu);
  }
  function Qe(n) {
    mo(mu.current);
    var r = mo(oa.current), l = gn(r, n.type);
    r !== l && (qt(bs, n), qt(oa, l));
  }
  function mt(n) {
    bs.current === n && (Bt(oa), Bt(bs));
  }
  var qe = ut(0);
  function En(n) {
    for (var r = n; r !== null; ) {
      if (r.tag === 13) {
        var l = r.memoizedState;
        if (l !== null && (l = l.dehydrated, l === null || l.data === "$?" || l.data === "$!"))
          return r;
      } else if (r.tag === 19 && r.memoizedProps.revealOrder !== void 0) {
        if (r.flags & 128)
          return r;
      } else if (r.child !== null) {
        r.child.return = r, r = r.child;
        continue;
      }
      if (r === n)
        break;
      for (; r.sibling === null; ) {
        if (r.return === null || r.return === n)
          return null;
        r = r.return;
      }
      r.sibling.return = r.return, r = r.sibling;
    }
    return null;
  }
  var Ui = [];
  function Dc() {
    for (var n = 0; n < Ui.length; n++)
      Ui[n]._workInProgressVersionPrimary = null;
    Ui.length = 0;
  }
  var Oc = xe.ReactCurrentDispatcher, Ld = xe.ReactCurrentBatchConfig, ho = 0, fn = null, Y = null, wt = null, Ke = false, Ca = false, bi = 0, yo = 0;
  function dn() {
    throw Error(b(321));
  }
  function go(n, r) {
    if (r === null)
      return false;
    for (var l = 0; l < r.length && l < n.length; l++)
      if (!Oi(n[l], r[l]))
        return false;
    return true;
  }
  function zl(n, r, l, u, c, d) {
    if (ho = d, fn = r, r.memoizedState = null, r.updateQueue = null, r.lanes = 0, Oc.current = n === null || n.memoizedState === null ? yy : gy, n = l(u, c), Ca) {
      d = 0;
      do {
        if (Ca = false, bi = 0, 25 <= d)
          throw Error(b(301));
        d += 1, wt = Y = null, r.updateQueue = null, Oc.current = Ad, n = l(u, c);
      } while (Ca);
    }
    if (Oc.current = Qc, r = Y !== null && Y.next !== null, ho = 0, wt = Y = fn = null, Ke = false, r)
      throw Error(b(300));
    return n;
  }
  function So() {
    var n = bi !== 0;
    return bi = 0, n;
  }
  function ji() {
    var n = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    return wt === null ? fn.memoizedState = wt = n : wt = wt.next = n, wt;
  }
  function ii() {
    if (Y === null) {
      var n = fn.alternate;
      n = n !== null ? n.memoizedState : null;
    } else
      n = Y.next;
    var r = wt === null ? fn.memoizedState : wt.next;
    if (r !== null)
      wt = r, Y = n;
    else {
      if (n === null)
        throw Error(b(310));
      Y = n, n = { memoizedState: Y.memoizedState, baseState: Y.baseState, baseQueue: Y.baseQueue, queue: Y.queue, next: null }, wt === null ? fn.memoizedState = wt = n : wt = wt.next = n;
    }
    return wt;
  }
  function bo(n, r) {
    return typeof r == "function" ? r(n) : r;
  }
  function Cs(n) {
    var r = ii(), l = r.queue;
    if (l === null)
      throw Error(b(311));
    l.lastRenderedReducer = n;
    var u = Y, c = u.baseQueue, d = l.pending;
    if (d !== null) {
      if (c !== null) {
        var h = c.next;
        c.next = d.next, d.next = h;
      }
      u.baseQueue = c = d, l.pending = null;
    }
    if (c !== null) {
      d = c.next, u = u.baseState;
      var E = h = null, w = null, H = d;
      do {
        var re = H.lane;
        if ((ho & re) === re)
          w !== null && (w = w.next = { lane: 0, action: H.action, hasEagerState: H.hasEagerState, eagerState: H.eagerState, next: null }), u = H.hasEagerState ? H.eagerState : n(u, H.action);
        else {
          var ae = {
            lane: re,
            action: H.action,
            hasEagerState: H.hasEagerState,
            eagerState: H.eagerState,
            next: null
          };
          w === null ? (E = w = ae, h = u) : w = w.next = ae, fn.lanes |= re, Ga |= re;
        }
        H = H.next;
      } while (H !== null && H !== d);
      w === null ? h = u : w.next = E, Oi(u, r.memoizedState) || (Vn = true), r.memoizedState = u, r.baseState = h, r.baseQueue = w, l.lastRenderedState = u;
    }
    if (n = l.interleaved, n !== null) {
      c = n;
      do
        d = c.lane, fn.lanes |= d, Ga |= d, c = c.next;
      while (c !== n);
    } else
      c === null && (l.lanes = 0);
    return [r.memoizedState, l.dispatch];
  }
  function _s(n) {
    var r = ii(), l = r.queue;
    if (l === null)
      throw Error(b(311));
    l.lastRenderedReducer = n;
    var u = l.dispatch, c = l.pending, d = r.memoizedState;
    if (c !== null) {
      l.pending = null;
      var h = c = c.next;
      do
        d = n(d, h.action), h = h.next;
      while (h !== c);
      Oi(d, r.memoizedState) || (Vn = true), r.memoizedState = d, r.baseQueue === null && (r.baseState = d), l.lastRenderedState = d;
    }
    return [d, u];
  }
  function Lc() {
  }
  function Mc(n, r) {
    var l = fn, u = ii(), c = r(), d = !Oi(u.memoizedState, c);
    if (d && (u.memoizedState = c, Vn = true), u = u.queue, Es(Vc.bind(null, l, u, n), [n]), u.getSnapshot !== r || d || wt !== null && wt.memoizedState.tag & 1) {
      if (l.flags |= 2048, Co(9, zc.bind(null, l, u, c, r), void 0, null), kn === null)
        throw Error(b(349));
      ho & 30 || Ac(l, r, c);
    }
    return c;
  }
  function Ac(n, r, l) {
    n.flags |= 16384, n = { getSnapshot: r, value: l }, r = fn.updateQueue, r === null ? (r = { lastEffect: null, stores: null }, fn.updateQueue = r, r.stores = [n]) : (l = r.stores, l === null ? r.stores = [n] : l.push(n));
  }
  function zc(n, r, l, u) {
    r.value = l, r.getSnapshot = u, Uc(r) && jc(n);
  }
  function Vc(n, r, l) {
    return l(function() {
      Uc(r) && jc(n);
    });
  }
  function Uc(n) {
    var r = n.getSnapshot;
    n = n.value;
    try {
      var l = r();
      return !Oi(n, l);
    } catch {
      return true;
    }
  }
  function jc(n) {
    var r = Ia(n, 1);
    r !== null && xr(r, n, 1, -1);
  }
  function Fc(n) {
    var r = ji();
    return typeof n == "function" && (n = n()), r.memoizedState = r.baseState = n, n = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: bo, lastRenderedState: n }, r.queue = n, n = n.dispatch = Wc.bind(null, fn, n), [r.memoizedState, n];
  }
  function Co(n, r, l, u) {
    return n = { tag: n, create: r, destroy: l, deps: u, next: null }, r = fn.updateQueue, r === null ? (r = { lastEffect: null, stores: null }, fn.updateQueue = r, r.lastEffect = n.next = n) : (l = r.lastEffect, l === null ? r.lastEffect = n.next = n : (u = l.next, l.next = n, n.next = u, r.lastEffect = n)), n;
  }
  function Hc() {
    return ii().memoizedState;
  }
  function _o(n, r, l, u) {
    var c = ji();
    fn.flags |= n, c.memoizedState = Co(1 | r, l, void 0, u === void 0 ? null : u);
  }
  function Ya(n, r, l, u) {
    var c = ii();
    u = u === void 0 ? null : u;
    var d = void 0;
    if (Y !== null) {
      var h = Y.memoizedState;
      if (d = h.destroy, u !== null && go(u, h.deps)) {
        c.memoizedState = Co(r, l, d, u);
        return;
      }
    }
    fn.flags |= n, c.memoizedState = Co(1 | r, l, d, u);
  }
  function Pc(n, r) {
    return _o(8390656, 8, n, r);
  }
  function Es(n, r) {
    return Ya(2048, 8, n, r);
  }
  function Bc(n, r) {
    return Ya(4, 2, n, r);
  }
  function Ic(n, r) {
    return Ya(4, 4, n, r);
  }
  function Md(n, r) {
    if (typeof r == "function")
      return n = n(), r(n), function() {
        r(null);
      };
    if (r != null)
      return n = n(), r.current = n, function() {
        r.current = null;
      };
  }
  function hu(n, r, l) {
    return l = l != null ? l.concat([n]) : null, Ya(4, 4, Md.bind(null, r, n), l);
  }
  function $c() {
  }
  function yu(n, r) {
    var l = ii();
    r = r === void 0 ? null : r;
    var u = l.memoizedState;
    return u !== null && r !== null && go(r, u[1]) ? u[0] : (l.memoizedState = [n, r], n);
  }
  function Vl(n, r) {
    var l = ii();
    r = r === void 0 ? null : r;
    var u = l.memoizedState;
    return u !== null && r !== null && go(r, u[1]) ? u[0] : (n = n(), l.memoizedState = [n, r], n);
  }
  function ai(n, r, l) {
    return ho & 21 ? (Oi(l, r) || (l = Xo(), fn.lanes |= l, Ga |= l, n.baseState = true), r) : (n.baseState && (n.baseState = false, Vn = true), n.memoizedState = l);
  }
  function hy(n, r) {
    var l = jt;
    jt = l !== 0 && 4 > l ? l : 4, n(true);
    var u = Ld.transition;
    Ld.transition = {};
    try {
      n(false), r();
    } finally {
      jt = l, Ld.transition = u;
    }
  }
  function on() {
    return ii().memoizedState;
  }
  function Yc(n, r, l) {
    var u = Un(n);
    if (l = { lane: u, action: l, hasEagerState: false, eagerState: null, next: null }, gu(n))
      ks(r, l);
    else if (l = Pv(n, r, l, u), l !== null) {
      var c = kr();
      xr(l, n, u, c), qv(l, r, u);
    }
  }
  function Wc(n, r, l) {
    var u = Un(n), c = { lane: u, action: l, hasEagerState: false, eagerState: null, next: null };
    if (gu(n))
      ks(r, c);
    else {
      var d = n.alternate;
      if (n.lanes === 0 && (d === null || d.lanes === 0) && (d = r.lastRenderedReducer, d !== null))
        try {
          var h = r.lastRenderedState, E = d(h, l);
          if (c.hasEagerState = true, c.eagerState = E, Oi(E, h)) {
            var w = r.interleaved;
            w === null ? (c.next = c, wd(r)) : (c.next = w.next, w.next = c), r.interleaved = c;
            return;
          }
        } catch {
        } finally {
        }
      l = Pv(n, r, c, u), l !== null && (c = kr(), xr(l, n, u, c), qv(l, r, u));
    }
  }
  function gu(n) {
    var r = n.alternate;
    return n === fn || r !== null && r === fn;
  }
  function ks(n, r) {
    Ca = Ke = true;
    var l = n.pending;
    l === null ? r.next = r : (r.next = l.next, l.next = r), n.pending = r;
  }
  function qv(n, r, l) {
    if (l & 4194240) {
      var u = r.lanes;
      u &= n.pendingLanes, l |= u, r.lanes = l, ha(n, l);
    }
  }
  var Qc = { readContext: Ln, useCallback: dn, useContext: dn, useEffect: dn, useImperativeHandle: dn, useInsertionEffect: dn, useLayoutEffect: dn, useMemo: dn, useReducer: dn, useRef: dn, useState: dn, useDebugValue: dn, useDeferredValue: dn, useTransition: dn, useMutableSource: dn, useSyncExternalStore: dn, useId: dn, unstable_isNewReconciler: false }, yy = { readContext: Ln, useCallback: function(n, r) {
    return ji().memoizedState = [n, r === void 0 ? null : r], n;
  }, useContext: Ln, useEffect: Pc, useImperativeHandle: function(n, r, l) {
    return l = l != null ? l.concat([n]) : null, _o(
      4194308,
      4,
      Md.bind(null, r, n),
      l
    );
  }, useLayoutEffect: function(n, r) {
    return _o(4194308, 4, n, r);
  }, useInsertionEffect: function(n, r) {
    return _o(4, 2, n, r);
  }, useMemo: function(n, r) {
    var l = ji();
    return r = r === void 0 ? null : r, n = n(), l.memoizedState = [n, r], n;
  }, useReducer: function(n, r, l) {
    var u = ji();
    return r = l !== void 0 ? l(r) : r, u.memoizedState = u.baseState = r, n = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: n, lastRenderedState: r }, u.queue = n, n = n.dispatch = Yc.bind(null, fn, n), [u.memoizedState, n];
  }, useRef: function(n) {
    var r = ji();
    return n = { current: n }, r.memoizedState = n;
  }, useState: Fc, useDebugValue: $c, useDeferredValue: function(n) {
    return ji().memoizedState = n;
  }, useTransition: function() {
    var n = Fc(false), r = n[0];
    return n = hy.bind(null, n[1]), ji().memoizedState = n, [r, n];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(n, r, l) {
    var u = fn, c = ji();
    if (cn) {
      if (l === void 0)
        throw Error(b(407));
      l = l();
    } else {
      if (l = r(), kn === null)
        throw Error(b(349));
      ho & 30 || Ac(u, r, l);
    }
    c.memoizedState = l;
    var d = { value: l, getSnapshot: r };
    return c.queue = d, Pc(Vc.bind(
      null,
      u,
      d,
      n
    ), [n]), u.flags |= 2048, Co(9, zc.bind(null, u, d, l, r), void 0, null), l;
  }, useId: function() {
    var n = ji(), r = kn.identifierPrefix;
    if (cn) {
      var l = Ba, u = ar;
      l = (u & ~(1 << 32 - Nr(u) - 1)).toString(32) + l, r = ":" + r + "R" + l, l = bi++, 0 < l && (r += "H" + l.toString(32)), r += ":";
    } else
      l = yo++, r = ":" + r + "r" + l.toString(32) + ":";
    return n.memoizedState = r;
  }, unstable_isNewReconciler: false }, gy = {
    readContext: Ln,
    useCallback: yu,
    useContext: Ln,
    useEffect: Es,
    useImperativeHandle: hu,
    useInsertionEffect: Bc,
    useLayoutEffect: Ic,
    useMemo: Vl,
    useReducer: Cs,
    useRef: Hc,
    useState: function() {
      return Cs(bo);
    },
    useDebugValue: $c,
    useDeferredValue: function(n) {
      var r = ii();
      return ai(r, Y.memoizedState, n);
    },
    useTransition: function() {
      var n = Cs(bo)[0], r = ii().memoizedState;
      return [n, r];
    },
    useMutableSource: Lc,
    useSyncExternalStore: Mc,
    useId: on,
    unstable_isNewReconciler: false
  }, Ad = { readContext: Ln, useCallback: yu, useContext: Ln, useEffect: Es, useImperativeHandle: hu, useInsertionEffect: Bc, useLayoutEffect: Ic, useMemo: Vl, useReducer: _s, useRef: Hc, useState: function() {
    return _s(bo);
  }, useDebugValue: $c, useDeferredValue: function(n) {
    var r = ii();
    return Y === null ? r.memoizedState = n : ai(r, Y.memoizedState, n);
  }, useTransition: function() {
    var n = _s(bo)[0], r = ii().memoizedState;
    return [n, r];
  }, useMutableSource: Lc, useSyncExternalStore: Mc, useId: on, unstable_isNewReconciler: false };
  function Su(n, r) {
    try {
      var l = "", u = r;
      do
        l += Rt(u), u = u.return;
      while (u);
      var c = l;
    } catch (d) {
      c = `
Error generating stack: ` + d.message + `
` + d.stack;
    }
    return { value: n, source: r, stack: c, digest: null };
  }
  function xs(n, r, l) {
    return { value: n, source: null, stack: null, digest: r ?? null };
  }
  function Gc(n, r) {
    try {
      console.error(r.value);
    } catch (l) {
      setTimeout(function() {
        throw l;
      });
    }
  }
  var Sy = typeof WeakMap == "function" ? WeakMap : Map;
  function Xv(n, r, l) {
    l = $a(-1, l), l.tag = 3, l.payload = { element: null };
    var u = r.value;
    return l.callback = function() {
      tf || (tf = true, wo = u), Gc(n, r);
    }, l;
  }
  function Rs(n, r, l) {
    l = $a(-1, l), l.tag = 3;
    var u = n.type.getDerivedStateFromError;
    if (typeof u == "function") {
      var c = r.value;
      l.payload = function() {
        return u(c);
      }, l.callback = function() {
        Gc(n, r);
      };
    }
    var d = n.stateNode;
    return d !== null && typeof d.componentDidCatch == "function" && (l.callback = function() {
      Gc(n, r), typeof u != "function" && (ka === null ? ka = /* @__PURE__ */ new Set([this]) : ka.add(this));
      var h = r.stack;
      this.componentDidCatch(r.value, { componentStack: h !== null ? h : "" });
    }), l;
  }
  function Kv(n, r, l) {
    var u = n.pingCache;
    if (u === null) {
      u = n.pingCache = new Sy();
      var c = /* @__PURE__ */ new Set();
      u.set(r, c);
    } else
      c = u.get(r), c === void 0 && (c = /* @__PURE__ */ new Set(), u.set(r, c));
    c.has(l) || (c.add(l), n = Ry.bind(null, n, r, l), r.then(n, n));
  }
  function zd(n) {
    do {
      var r;
      if ((r = n.tag === 13) && (r = n.memoizedState, r = r !== null ? r.dehydrated !== null : true), r)
        return n;
      n = n.return;
    } while (n !== null);
    return null;
  }
  function Vd(n, r, l, u, c) {
    return n.mode & 1 ? (n.flags |= 65536, n.lanes = c, n) : (n === r ? n.flags |= 65536 : (n.flags |= 128, l.flags |= 131072, l.flags &= -52805, l.tag === 1 && (l.alternate === null ? l.tag = 17 : (r = $a(-1, 1), r.tag = 2, Ll(l, r, 1))), l.lanes |= 1), n);
  }
  var by = xe.ReactCurrentOwner, Vn = false;
  function Bn(n, r, l, u) {
    r.child = n === null ? Gv(r, null, l, u) : vu(r, n.child, l, u);
  }
  function Ul(n, r, l, u, c) {
    l = l.render;
    var d = r.ref;
    return he(r, c), u = zl(n, r, l, u, d, c), l = So(), n !== null && !Vn ? (r.updateQueue = n.updateQueue, r.flags &= -2053, n.lanes &= ~c, or(n, r, c)) : (cn && l && bc(r), r.flags |= 1, Bn(n, r, u, c), r.child);
  }
  function qc(n, r, l, u, c) {
    if (n === null) {
      var d = l.type;
      return typeof d == "function" && !tp(d) && d.defaultProps === void 0 && l.compare === null && l.defaultProps === void 0 ? (r.tag = 15, r.type = d, li(n, r, d, u, c)) : (n = uf(l.type, null, u, r, r.mode, c), n.ref = r.ref, n.return = r, r.child = n);
    }
    if (d = n.child, !(n.lanes & c)) {
      var h = d.memoizedProps;
      if (l = l.compare, l = l !== null ? l : os, l(h, u) && n.ref === r.ref)
        return or(n, r, c);
    }
    return r.flags |= 1, n = Pl(d, u), n.ref = r.ref, n.return = r, r.child = n;
  }
  function li(n, r, l, u, c) {
    if (n !== null) {
      var d = n.memoizedProps;
      if (os(d, u) && n.ref === r.ref)
        if (Vn = false, r.pendingProps = u = d, (n.lanes & c) !== 0)
          n.flags & 131072 && (Vn = true);
        else
          return r.lanes = n.lanes, or(n, r, c);
    }
    return bu(n, r, l, u, c);
  }
  function Eo(n, r, l) {
    var u = r.pendingProps, c = u.children, d = n !== null ? n.memoizedState : null;
    if (u.mode === "hidden")
      if (!(r.mode & 1))
        r.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, qt(Ru, Ci), Ci |= l;
      else {
        if (!(l & 1073741824))
          return n = d !== null ? d.baseLanes | l : l, r.lanes = r.childLanes = 1073741824, r.memoizedState = { baseLanes: n, cachePool: null, transitions: null }, r.updateQueue = null, qt(Ru, Ci), Ci |= n, null;
        r.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, u = d !== null ? d.baseLanes : l, qt(Ru, Ci), Ci |= u;
      }
    else
      d !== null ? (u = d.baseLanes | l, r.memoizedState = null) : u = l, qt(Ru, Ci), Ci |= u;
    return Bn(n, r, c, l), r.child;
  }
  function st(n, r) {
    var l = r.ref;
    (n === null && l !== null || n !== null && n.ref !== l) && (r.flags |= 512, r.flags |= 2097152);
  }
  function bu(n, r, l, u, c) {
    var d = mn(l) ? Jr : tt.current;
    return d = Mi(r, d), he(r, c), l = zl(n, r, l, u, d, c), u = So(), n !== null && !Vn ? (r.updateQueue = n.updateQueue, r.flags &= -2053, n.lanes &= ~c, or(n, r, c)) : (cn && u && bc(r), r.flags |= 1, Bn(n, r, l, c), r.child);
  }
  function Ud(n, r, l, u, c) {
    if (mn(l)) {
      var d = true;
      Sc(r);
    } else
      d = false;
    if (he(r, c), r.stateNode === null)
      Cr(n, r), $v(r, l, u), Tc(r, l, u, c), u = true;
    else if (n === null) {
      var h = r.stateNode, E = r.memoizedProps;
      h.props = E;
      var w = h.context, H = l.contextType;
      typeof H == "object" && H !== null ? H = Ln(H) : (H = mn(l) ? Jr : tt.current, H = Mi(r, H));
      var re = l.getDerivedStateFromProps, ae = typeof re == "function" || typeof h.getSnapshotBeforeUpdate == "function";
      ae || typeof h.UNSAFE_componentWillReceiveProps != "function" && typeof h.componentWillReceiveProps != "function" || (E !== u || w !== H) && Yv(r, h, u, H), Ol = false;
      var ne = r.memoizedState;
      h.state = ne, Ml(r, u, h, c), w = r.memoizedState, E !== u || ne !== w || wn.current || Ol ? (typeof re == "function" && (Dd(r, l, re, u), w = r.memoizedState), (E = Ol || Iv(r, l, E, u, ne, w, H)) ? (ae || typeof h.UNSAFE_componentWillMount != "function" && typeof h.componentWillMount != "function" || (typeof h.componentWillMount == "function" && h.componentWillMount(), typeof h.UNSAFE_componentWillMount == "function" && h.UNSAFE_componentWillMount()), typeof h.componentDidMount == "function" && (r.flags |= 4194308)) : (typeof h.componentDidMount == "function" && (r.flags |= 4194308), r.memoizedProps = u, r.memoizedState = w), h.props = u, h.state = w, h.context = H, u = E) : (typeof h.componentDidMount == "function" && (r.flags |= 4194308), u = false);
    } else {
      h = r.stateNode, Pn(n, r), E = r.memoizedProps, H = r.type === r.elementType ? E : Si(r.type, E), h.props = H, ae = r.pendingProps, ne = h.context, w = l.contextType, typeof w == "object" && w !== null ? w = Ln(w) : (w = mn(l) ? Jr : tt.current, w = Mi(r, w));
      var Ee = l.getDerivedStateFromProps;
      (re = typeof Ee == "function" || typeof h.getSnapshotBeforeUpdate == "function") || typeof h.UNSAFE_componentWillReceiveProps != "function" && typeof h.componentWillReceiveProps != "function" || (E !== ae || ne !== w) && Yv(r, h, u, w), Ol = false, ne = r.memoizedState, h.state = ne, Ml(r, u, h, c);
      var Le = r.memoizedState;
      E !== ae || ne !== Le || wn.current || Ol ? (typeof Ee == "function" && (Dd(r, l, Ee, u), Le = r.memoizedState), (H = Ol || Iv(r, l, H, u, ne, Le, w) || false) ? (re || typeof h.UNSAFE_componentWillUpdate != "function" && typeof h.componentWillUpdate != "function" || (typeof h.componentWillUpdate == "function" && h.componentWillUpdate(u, Le, w), typeof h.UNSAFE_componentWillUpdate == "function" && h.UNSAFE_componentWillUpdate(u, Le, w)), typeof h.componentDidUpdate == "function" && (r.flags |= 4), typeof h.getSnapshotBeforeUpdate == "function" && (r.flags |= 1024)) : (typeof h.componentDidUpdate != "function" || E === n.memoizedProps && ne === n.memoizedState || (r.flags |= 4), typeof h.getSnapshotBeforeUpdate != "function" || E === n.memoizedProps && ne === n.memoizedState || (r.flags |= 1024), r.memoizedProps = u, r.memoizedState = Le), h.props = u, h.state = Le, h.context = w, u = H) : (typeof h.componentDidUpdate != "function" || E === n.memoizedProps && ne === n.memoizedState || (r.flags |= 4), typeof h.getSnapshotBeforeUpdate != "function" || E === n.memoizedProps && ne === n.memoizedState || (r.flags |= 1024), u = false);
    }
    return Zv(n, r, l, u, d, c);
  }
  function Zv(n, r, l, u, c, d) {
    st(n, r);
    var h = (r.flags & 128) !== 0;
    if (!u && !h)
      return c && Uv(r, l, false), or(n, r, d);
    u = r.stateNode, by.current = r;
    var E = h && typeof l.getDerivedStateFromError != "function" ? null : u.render();
    return r.flags |= 1, n !== null && h ? (r.child = vu(r, n.child, null, d), r.child = vu(r, null, E, d)) : Bn(n, r, E, d), r.memoizedState = u.state, c && Uv(r, l, true), r.child;
  }
  function Jv(n) {
    var r = n.stateNode;
    r.pendingContext ? wl(n, r.pendingContext, r.pendingContext !== r.context) : r.context && wl(n, r.context, false), Od(n, r.containerInfo);
  }
  function Xc(n, r, l, u, c) {
    return _n(), kd(c), r.flags |= 256, Bn(n, r, l, u), r.child;
  }
  var ko = { dehydrated: null, treeContext: null, retryLane: 0 };
  function jd(n) {
    return { baseLanes: n, cachePool: null, transitions: null };
  }
  function Fd(n, r, l) {
    var u = r.pendingProps, c = qe.current, d = false, h = (r.flags & 128) !== 0, E;
    if ((E = h) || (E = n !== null && n.memoizedState === null ? false : (c & 2) !== 0), E ? (d = true, r.flags &= -129) : (n === null || n.memoizedState !== null) && (c |= 1), qt(qe, c & 1), n === null)
      return _c(r), n = r.memoizedState, n !== null && (n = n.dehydrated, n !== null) ? (r.mode & 1 ? n.data === "$!" ? r.lanes = 8 : r.lanes = 1073741824 : r.lanes = 1, null) : (h = u.children, n = u.fallback, d ? (u = r.mode, d = r.child, h = { mode: "hidden", children: h }, !(u & 1) && d !== null ? (d.childLanes = 0, d.pendingProps = h) : d = Vs(h, u, 0, null), n = Lo(n, u, l, null), d.return = r, n.return = r, d.sibling = n, r.child = d, r.child.memoizedState = jd(l), r.memoizedState = ko, n) : Hd(r, h));
    if (c = n.memoizedState, c !== null && (E = c.dehydrated, E !== null))
      return Cy(n, r, h, u, E, c, l);
    if (d) {
      d = u.fallback, h = r.mode, c = n.child, E = c.sibling;
      var w = { mode: "hidden", children: u.children };
      return !(h & 1) && r.child !== c ? (u = r.child, u.childLanes = 0, u.pendingProps = w, r.deletions = null) : (u = Pl(c, w), u.subtreeFlags = c.subtreeFlags & 14680064), E !== null ? d = Pl(E, d) : (d = Lo(d, h, l, null), d.flags |= 2), d.return = r, u.return = r, u.sibling = d, r.child = u, u = d, d = r.child, h = n.child.memoizedState, h = h === null ? jd(l) : { baseLanes: h.baseLanes | l, cachePool: null, transitions: h.transitions }, d.memoizedState = h, d.childLanes = n.childLanes & ~l, r.memoizedState = ko, u;
    }
    return d = n.child, n = d.sibling, u = Pl(d, { mode: "visible", children: u.children }), !(r.mode & 1) && (u.lanes = l), u.return = r, u.sibling = null, n !== null && (l = r.deletions, l === null ? (r.deletions = [n], r.flags |= 16) : l.push(n)), r.child = u, r.memoizedState = null, u;
  }
  function Hd(n, r) {
    return r = Vs({ mode: "visible", children: r }, n.mode, 0, null), r.return = n, n.child = r;
  }
  function Cu(n, r, l, u) {
    return u !== null && kd(u), vu(r, n.child, null, l), n = Hd(r, r.pendingProps.children), n.flags |= 2, r.memoizedState = null, n;
  }
  function Cy(n, r, l, u, c, d, h) {
    if (l)
      return r.flags & 256 ? (r.flags &= -257, u = xs(Error(b(422))), Cu(n, r, h, u)) : r.memoizedState !== null ? (r.child = n.child, r.flags |= 128, null) : (d = u.fallback, c = r.mode, u = Vs({ mode: "visible", children: u.children }, c, 0, null), d = Lo(d, c, h, null), d.flags |= 2, u.return = r, d.return = r, u.sibling = d, r.child = u, r.mode & 1 && vu(r, n.child, null, h), r.child.memoizedState = jd(h), r.memoizedState = ko, d);
    if (!(r.mode & 1))
      return Cu(n, r, h, null);
    if (c.data === "$!") {
      if (u = c.nextSibling && c.nextSibling.dataset, u)
        var E = u.dgst;
      return u = E, d = Error(b(419)), u = xs(d, u), Cu(n, r, h, u);
    }
    if (E = (h & n.childLanes) !== 0, Vn || E) {
      if (u = kn, u !== null) {
        switch (h & -h) {
          case 4:
            c = 2;
            break;
          case 16:
            c = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            c = 32;
            break;
          case 536870912:
            c = 268435456;
            break;
          default:
            c = 0;
        }
        c = c & (u.suspendedLanes | h) ? 0 : c, c !== 0 && c !== d.retryLane && (d.retryLane = c, Ia(n, c), xr(u, n, c, -1));
      }
      return Zd(), u = xs(Error(b(421))), Cu(n, r, h, u);
    }
    return c.data === "$?" ? (r.flags |= 128, r.child = n.child, r = wy.bind(null, n), c._reactRetry = r, null) : (n = d.treeContext, ri = la(c.nextSibling), gi = r, cn = true, Vi = null, n !== null && (ni[br++] = ar, ni[br++] = Ba, ni[br++] = zi, ar = n.id, Ba = n.overflow, zi = r), r = Hd(r, u.children), r.flags |= 4096, r);
  }
  function Pd(n, r, l) {
    n.lanes |= r;
    var u = n.alternate;
    u !== null && (u.lanes |= r), Zn(n.return, r, l);
  }
  function Kc(n, r, l, u, c) {
    var d = n.memoizedState;
    d === null ? n.memoizedState = { isBackwards: r, rendering: null, renderingStartTime: 0, last: u, tail: l, tailMode: c } : (d.isBackwards = r, d.rendering = null, d.renderingStartTime = 0, d.last = u, d.tail = l, d.tailMode = c);
  }
  function Bd(n, r, l) {
    var u = r.pendingProps, c = u.revealOrder, d = u.tail;
    if (Bn(n, r, u.children, l), u = qe.current, u & 2)
      u = u & 1 | 2, r.flags |= 128;
    else {
      if (n !== null && n.flags & 128)
        e:
          for (n = r.child; n !== null; ) {
            if (n.tag === 13)
              n.memoizedState !== null && Pd(n, l, r);
            else if (n.tag === 19)
              Pd(n, l, r);
            else if (n.child !== null) {
              n.child.return = n, n = n.child;
              continue;
            }
            if (n === r)
              break e;
            for (; n.sibling === null; ) {
              if (n.return === null || n.return === r)
                break e;
              n = n.return;
            }
            n.sibling.return = n.return, n = n.sibling;
          }
      u &= 1;
    }
    if (qt(qe, u), !(r.mode & 1))
      r.memoizedState = null;
    else
      switch (c) {
        case "forwards":
          for (l = r.child, c = null; l !== null; )
            n = l.alternate, n !== null && En(n) === null && (c = l), l = l.sibling;
          l = c, l === null ? (c = r.child, r.child = null) : (c = l.sibling, l.sibling = null), Kc(r, false, c, l, d);
          break;
        case "backwards":
          for (l = null, c = r.child, r.child = null; c !== null; ) {
            if (n = c.alternate, n !== null && En(n) === null) {
              r.child = c;
              break;
            }
            n = c.sibling, c.sibling = l, l = c, c = n;
          }
          Kc(r, true, l, null, d);
          break;
        case "together":
          Kc(r, false, null, null, void 0);
          break;
        default:
          r.memoizedState = null;
      }
    return r.child;
  }
  function Cr(n, r) {
    !(r.mode & 1) && n !== null && (n.alternate = null, r.alternate = null, r.flags |= 2);
  }
  function or(n, r, l) {
    if (n !== null && (r.dependencies = n.dependencies), Ga |= r.lanes, !(l & r.childLanes))
      return null;
    if (n !== null && r.child !== n.child)
      throw Error(b(153));
    if (r.child !== null) {
      for (n = r.child, l = Pl(n, n.pendingProps), r.child = l, l.return = r; n.sibling !== null; )
        n = n.sibling, l = l.sibling = Pl(n, n.pendingProps), l.return = r;
      l.sibling = null;
    }
    return r.child;
  }
  function Wa(n, r, l) {
    switch (r.tag) {
      case 3:
        Jv(r), _n();
        break;
      case 5:
        Qe(r);
        break;
      case 1:
        mn(r.type) && Sc(r);
        break;
      case 4:
        Od(r, r.stateNode.containerInfo);
        break;
      case 10:
        var u = r.type._context, c = r.memoizedProps.value;
        qt(ba, u._currentValue), u._currentValue = c;
        break;
      case 13:
        if (u = r.memoizedState, u !== null)
          return u.dehydrated !== null ? (qt(qe, qe.current & 1), r.flags |= 128, null) : l & r.child.childLanes ? Fd(n, r, l) : (qt(qe, qe.current & 1), n = or(n, r, l), n !== null ? n.sibling : null);
        qt(qe, qe.current & 1);
        break;
      case 19:
        if (u = (l & r.childLanes) !== 0, n.flags & 128) {
          if (u)
            return Bd(n, r, l);
          r.flags |= 128;
        }
        if (c = r.memoizedState, c !== null && (c.rendering = null, c.tail = null, c.lastEffect = null), qt(qe, qe.current), u)
          break;
        return null;
      case 22:
      case 23:
        return r.lanes = 0, Eo(n, r, l);
    }
    return or(n, r, l);
  }
  var ws, xo, Fi, In;
  ws = function(n, r) {
    for (var l = r.child; l !== null; ) {
      if (l.tag === 5 || l.tag === 6)
        n.appendChild(l.stateNode);
      else if (l.tag !== 4 && l.child !== null) {
        l.child.return = l, l = l.child;
        continue;
      }
      if (l === r)
        break;
      for (; l.sibling === null; ) {
        if (l.return === null || l.return === r)
          return;
        l = l.return;
      }
      l.sibling.return = l.return, l = l.sibling;
    }
  }, xo = function() {
  }, Fi = function(n, r, l, u) {
    var c = n.memoizedProps;
    if (c !== u) {
      n = r.stateNode, mo(oa.current);
      var d = null;
      switch (l) {
        case "input":
          c = Qn(n, c), u = Qn(n, u), d = [];
          break;
        case "select":
          c = R({}, c, { value: void 0 }), u = R({}, u, { value: void 0 }), d = [];
          break;
        case "textarea":
          c = Wr(n, c), u = Wr(n, u), d = [];
          break;
        default:
          typeof c.onClick != "function" && typeof u.onClick == "function" && (n.onclick = gc);
      }
      On(l, u);
      var h;
      l = null;
      for (H in c)
        if (!u.hasOwnProperty(H) && c.hasOwnProperty(H) && c[H] != null)
          if (H === "style") {
            var E = c[H];
            for (h in E)
              E.hasOwnProperty(h) && (l || (l = {}), l[h] = "");
          } else
            H !== "dangerouslySetInnerHTML" && H !== "children" && H !== "suppressContentEditableWarning" && H !== "suppressHydrationWarning" && H !== "autoFocus" && (X.hasOwnProperty(H) ? d || (d = []) : (d = d || []).push(H, null));
      for (H in u) {
        var w = u[H];
        if (E = c != null ? c[H] : void 0, u.hasOwnProperty(H) && w !== E && (w != null || E != null))
          if (H === "style")
            if (E) {
              for (h in E)
                !E.hasOwnProperty(h) || w && w.hasOwnProperty(h) || (l || (l = {}), l[h] = "");
              for (h in w)
                w.hasOwnProperty(h) && E[h] !== w[h] && (l || (l = {}), l[h] = w[h]);
            } else
              l || (d || (d = []), d.push(
                H,
                l
              )), l = w;
          else
            H === "dangerouslySetInnerHTML" ? (w = w ? w.__html : void 0, E = E ? E.__html : void 0, w != null && E !== w && (d = d || []).push(H, w)) : H === "children" ? typeof w != "string" && typeof w != "number" || (d = d || []).push(H, "" + w) : H !== "suppressContentEditableWarning" && H !== "suppressHydrationWarning" && (X.hasOwnProperty(H) ? (w != null && H === "onScroll" && ln("scroll", n), d || E === w || (d = [])) : (d = d || []).push(H, w));
      }
      l && (d = d || []).push("style", l);
      var H = d;
      (r.updateQueue = H) && (r.flags |= 4);
    }
  }, In = function(n, r, l, u) {
    l !== u && (r.flags |= 4);
  };
  function Ts(n, r) {
    if (!cn)
      switch (n.tailMode) {
        case "hidden":
          r = n.tail;
          for (var l = null; r !== null; )
            r.alternate !== null && (l = r), r = r.sibling;
          l === null ? n.tail = null : l.sibling = null;
          break;
        case "collapsed":
          l = n.tail;
          for (var u = null; l !== null; )
            l.alternate !== null && (u = l), l = l.sibling;
          u === null ? r || n.tail === null ? n.tail = null : n.tail.sibling = null : u.sibling = null;
      }
  }
  function _r(n) {
    var r = n.alternate !== null && n.alternate.child === n.child, l = 0, u = 0;
    if (r)
      for (var c = n.child; c !== null; )
        l |= c.lanes | c.childLanes, u |= c.subtreeFlags & 14680064, u |= c.flags & 14680064, c.return = n, c = c.sibling;
    else
      for (c = n.child; c !== null; )
        l |= c.lanes | c.childLanes, u |= c.subtreeFlags, u |= c.flags, c.return = n, c = c.sibling;
    return n.subtreeFlags |= u, n.childLanes = l, r;
  }
  function _y(n, r, l) {
    var u = r.pendingProps;
    switch (_d(r), r.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return _r(r), null;
      case 1:
        return mn(r.type) && Ai(), _r(r), null;
      case 3:
        return u = r.stateNode, Al(), Bt(wn), Bt(tt), Dc(), u.pendingContext && (u.context = u.pendingContext, u.pendingContext = null), (n === null || n.child === null) && (Ec(r) ? r.flags |= 4 : n === null || n.memoizedState.isDehydrated && !(r.flags & 256) || (r.flags |= 1024, Vi !== null && (zs(Vi), Vi = null))), xo(n, r), _r(r), null;
      case 5:
        mt(r);
        var c = mo(mu.current);
        if (l = r.type, n !== null && r.stateNode != null)
          Fi(n, r, l, u, c), n.ref !== r.ref && (r.flags |= 512, r.flags |= 2097152);
        else {
          if (!u) {
            if (r.stateNode === null)
              throw Error(b(166));
            return _r(r), null;
          }
          if (n = mo(oa.current), Ec(r)) {
            u = r.stateNode, l = r.type;
            var d = r.memoizedProps;
            switch (u[ga] = r, u[fo] = d, n = (r.mode & 1) !== 0, l) {
              case "dialog":
                ln("cancel", u), ln("close", u);
                break;
              case "iframe":
              case "object":
              case "embed":
                ln("load", u);
                break;
              case "video":
              case "audio":
                for (c = 0; c < fs.length; c++)
                  ln(fs[c], u);
                break;
              case "source":
                ln("error", u);
                break;
              case "img":
              case "image":
              case "link":
                ln(
                  "error",
                  u
                ), ln("load", u);
                break;
              case "details":
                ln("toggle", u);
                break;
              case "input":
                Fn(u, d), ln("invalid", u);
                break;
              case "select":
                u._wrapperState = { wasMultiple: !!d.multiple }, ln("invalid", u);
                break;
              case "textarea":
                gr(u, d), ln("invalid", u);
            }
            On(l, d), c = null;
            for (var h in d)
              if (d.hasOwnProperty(h)) {
                var E = d[h];
                h === "children" ? typeof E == "string" ? u.textContent !== E && (d.suppressHydrationWarning !== true && yc(u.textContent, E, n), c = ["children", E]) : typeof E == "number" && u.textContent !== "" + E && (d.suppressHydrationWarning !== true && yc(
                  u.textContent,
                  E,
                  n
                ), c = ["children", "" + E]) : X.hasOwnProperty(h) && E != null && h === "onScroll" && ln("scroll", u);
              }
            switch (l) {
              case "input":
                hr(u), $r(u, d, true);
                break;
              case "textarea":
                hr(u), rr(u);
                break;
              case "select":
              case "option":
                break;
              default:
                typeof d.onClick == "function" && (u.onclick = gc);
            }
            u = c, r.updateQueue = u, u !== null && (r.flags |= 4);
          } else {
            h = c.nodeType === 9 ? c : c.ownerDocument, n === "http://www.w3.org/1999/xhtml" && (n = Qr(l)), n === "http://www.w3.org/1999/xhtml" ? l === "script" ? (n = h.createElement("div"), n.innerHTML = "<script></script>", n = n.removeChild(n.firstChild)) : typeof u.is == "string" ? n = h.createElement(l, { is: u.is }) : (n = h.createElement(l), l === "select" && (h = n, u.multiple ? h.multiple = true : u.size && (h.size = u.size))) : n = h.createElementNS(n, l), n[ga] = r, n[fo] = u, ws(n, r, false, false), r.stateNode = n;
            e: {
              switch (h = Sn(l, u), l) {
                case "dialog":
                  ln("cancel", n), ln("close", n), c = u;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  ln("load", n), c = u;
                  break;
                case "video":
                case "audio":
                  for (c = 0; c < fs.length; c++)
                    ln(fs[c], n);
                  c = u;
                  break;
                case "source":
                  ln("error", n), c = u;
                  break;
                case "img":
                case "image":
                case "link":
                  ln(
                    "error",
                    n
                  ), ln("load", n), c = u;
                  break;
                case "details":
                  ln("toggle", n), c = u;
                  break;
                case "input":
                  Fn(n, u), c = Qn(n, u), ln("invalid", n);
                  break;
                case "option":
                  c = u;
                  break;
                case "select":
                  n._wrapperState = { wasMultiple: !!u.multiple }, c = R({}, u, { value: void 0 }), ln("invalid", n);
                  break;
                case "textarea":
                  gr(n, u), c = Wr(n, u), ln("invalid", n);
                  break;
                default:
                  c = u;
              }
              On(l, c), E = c;
              for (d in E)
                if (E.hasOwnProperty(d)) {
                  var w = E[d];
                  d === "style" ? Pt(n, w) : d === "dangerouslySetInnerHTML" ? (w = w ? w.__html : void 0, w != null && da(n, w)) : d === "children" ? typeof w == "string" ? (l !== "textarea" || w !== "") && vi(n, w) : typeof w == "number" && vi(n, "" + w) : d !== "suppressContentEditableWarning" && d !== "suppressHydrationWarning" && d !== "autoFocus" && (X.hasOwnProperty(d) ? w != null && d === "onScroll" && ln("scroll", n) : w != null && oe(n, d, w, h));
                }
              switch (l) {
                case "input":
                  hr(n), $r(n, u, false);
                  break;
                case "textarea":
                  hr(n), rr(n);
                  break;
                case "option":
                  u.value != null && n.setAttribute("value", "" + ft(u.value));
                  break;
                case "select":
                  n.multiple = !!u.multiple, d = u.value, d != null ? yr(n, !!u.multiple, d, false) : u.defaultValue != null && yr(
                    n,
                    !!u.multiple,
                    u.defaultValue,
                    true
                  );
                  break;
                default:
                  typeof c.onClick == "function" && (n.onclick = gc);
              }
              switch (l) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  u = !!u.autoFocus;
                  break e;
                case "img":
                  u = true;
                  break e;
                default:
                  u = false;
              }
            }
            u && (r.flags |= 4);
          }
          r.ref !== null && (r.flags |= 512, r.flags |= 2097152);
        }
        return _r(r), null;
      case 6:
        if (n && r.stateNode != null)
          In(n, r, n.memoizedProps, u);
        else {
          if (typeof u != "string" && r.stateNode === null)
            throw Error(b(166));
          if (l = mo(mu.current), mo(oa.current), Ec(r)) {
            if (u = r.stateNode, l = r.memoizedProps, u[ga] = r, (d = u.nodeValue !== l) && (n = gi, n !== null))
              switch (n.tag) {
                case 3:
                  yc(u.nodeValue, l, (n.mode & 1) !== 0);
                  break;
                case 5:
                  n.memoizedProps.suppressHydrationWarning !== true && yc(u.nodeValue, l, (n.mode & 1) !== 0);
              }
            d && (r.flags |= 4);
          } else
            u = (l.nodeType === 9 ? l : l.ownerDocument).createTextNode(u), u[ga] = r, r.stateNode = u;
        }
        return _r(r), null;
      case 13:
        if (Bt(qe), u = r.memoizedState, n === null || n.memoizedState !== null && n.memoizedState.dehydrated !== null) {
          if (cn && ri !== null && r.mode & 1 && !(r.flags & 128))
            Hv(), _n(), r.flags |= 98560, d = false;
          else if (d = Ec(r), u !== null && u.dehydrated !== null) {
            if (n === null) {
              if (!d)
                throw Error(b(318));
              if (d = r.memoizedState, d = d !== null ? d.dehydrated : null, !d)
                throw Error(b(317));
              d[ga] = r;
            } else
              _n(), !(r.flags & 128) && (r.memoizedState = null), r.flags |= 4;
            _r(r), d = false;
          } else
            Vi !== null && (zs(Vi), Vi = null), d = true;
          if (!d)
            return r.flags & 65536 ? r : null;
        }
        return r.flags & 128 ? (r.lanes = l, r) : (u = u !== null, u !== (n !== null && n.memoizedState !== null) && u && (r.child.flags |= 8192, r.mode & 1 && (n === null || qe.current & 1 ? Yn === 0 && (Yn = 3) : Zd())), r.updateQueue !== null && (r.flags |= 4), _r(r), null);
      case 4:
        return Al(), xo(n, r), n === null && cu(r.stateNode.containerInfo), _r(r), null;
      case 10:
        return Dl(r.type._context), _r(r), null;
      case 17:
        return mn(r.type) && Ai(), _r(r), null;
      case 19:
        if (Bt(qe), d = r.memoizedState, d === null)
          return _r(r), null;
        if (u = (r.flags & 128) !== 0, h = d.rendering, h === null)
          if (u)
            Ts(d, false);
          else {
            if (Yn !== 0 || n !== null && n.flags & 128)
              for (n = r.child; n !== null; ) {
                if (h = En(n), h !== null) {
                  for (r.flags |= 128, Ts(d, false), u = h.updateQueue, u !== null && (r.updateQueue = u, r.flags |= 4), r.subtreeFlags = 0, u = l, l = r.child; l !== null; )
                    d = l, n = u, d.flags &= 14680066, h = d.alternate, h === null ? (d.childLanes = 0, d.lanes = n, d.child = null, d.subtreeFlags = 0, d.memoizedProps = null, d.memoizedState = null, d.updateQueue = null, d.dependencies = null, d.stateNode = null) : (d.childLanes = h.childLanes, d.lanes = h.lanes, d.child = h.child, d.subtreeFlags = 0, d.deletions = null, d.memoizedProps = h.memoizedProps, d.memoizedState = h.memoizedState, d.updateQueue = h.updateQueue, d.type = h.type, n = h.dependencies, d.dependencies = n === null ? null : { lanes: n.lanes, firstContext: n.firstContext }), l = l.sibling;
                  return qt(qe, qe.current & 1 | 2), r.child;
                }
                n = n.sibling;
              }
            d.tail !== null && vn() > Tu && (r.flags |= 128, u = true, Ts(d, false), r.lanes = 4194304);
          }
        else {
          if (!u)
            if (n = En(h), n !== null) {
              if (r.flags |= 128, u = true, l = n.updateQueue, l !== null && (r.updateQueue = l, r.flags |= 4), Ts(d, true), d.tail === null && d.tailMode === "hidden" && !h.alternate && !cn)
                return _r(r), null;
            } else
              2 * vn() - d.renderingStartTime > Tu && l !== 1073741824 && (r.flags |= 128, u = true, Ts(d, false), r.lanes = 4194304);
          d.isBackwards ? (h.sibling = r.child, r.child = h) : (l = d.last, l !== null ? l.sibling = h : r.child = h, d.last = h);
        }
        return d.tail !== null ? (r = d.tail, d.rendering = r, d.tail = r.sibling, d.renderingStartTime = vn(), r.sibling = null, l = qe.current, qt(qe, u ? l & 1 | 2 : l & 1), r) : (_r(r), null);
      case 22:
      case 23:
        return Kd(), u = r.memoizedState !== null, n !== null && n.memoizedState !== null !== u && (r.flags |= 8192), u && r.mode & 1 ? Ci & 1073741824 && (_r(r), r.subtreeFlags & 6 && (r.flags |= 8192)) : _r(r), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(b(156, r.tag));
  }
  function Id(n, r) {
    switch (_d(r), r.tag) {
      case 1:
        return mn(r.type) && Ai(), n = r.flags, n & 65536 ? (r.flags = n & -65537 | 128, r) : null;
      case 3:
        return Al(), Bt(wn), Bt(tt), Dc(), n = r.flags, n & 65536 && !(n & 128) ? (r.flags = n & -65537 | 128, r) : null;
      case 5:
        return mt(r), null;
      case 13:
        if (Bt(qe), n = r.memoizedState, n !== null && n.dehydrated !== null) {
          if (r.alternate === null)
            throw Error(b(340));
          _n();
        }
        return n = r.flags, n & 65536 ? (r.flags = n & -65537 | 128, r) : null;
      case 19:
        return Bt(qe), null;
      case 4:
        return Al(), null;
      case 10:
        return Dl(r.type._context), null;
      case 22:
      case 23:
        return Kd(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Ns = false, $n = false, em = typeof WeakSet == "function" ? WeakSet : Set, Oe = null;
  function _u(n, r) {
    var l = n.ref;
    if (l !== null)
      if (typeof l == "function")
        try {
          l(null);
        } catch (u) {
          Nn(n, r, u);
        }
      else
        l.current = null;
  }
  function Ds(n, r, l) {
    try {
      l();
    } catch (u) {
      Nn(n, r, u);
    }
  }
  var tm = false;
  function nm(n, r) {
    if (vd = Di, n = dc(), ja(n)) {
      if ("selectionStart" in n)
        var l = { start: n.selectionStart, end: n.selectionEnd };
      else
        e: {
          l = (l = n.ownerDocument) && l.defaultView || window;
          var u = l.getSelection && l.getSelection();
          if (u && u.rangeCount !== 0) {
            l = u.anchorNode;
            var c = u.anchorOffset, d = u.focusNode;
            u = u.focusOffset;
            try {
              l.nodeType, d.nodeType;
            } catch {
              l = null;
              break e;
            }
            var h = 0, E = -1, w = -1, H = 0, re = 0, ae = n, ne = null;
            t:
              for (; ; ) {
                for (var Ee; ae !== l || c !== 0 && ae.nodeType !== 3 || (E = h + c), ae !== d || u !== 0 && ae.nodeType !== 3 || (w = h + u), ae.nodeType === 3 && (h += ae.nodeValue.length), (Ee = ae.firstChild) !== null; )
                  ne = ae, ae = Ee;
                for (; ; ) {
                  if (ae === n)
                    break t;
                  if (ne === l && ++H === c && (E = h), ne === d && ++re === u && (w = h), (Ee = ae.nextSibling) !== null)
                    break;
                  ae = ne, ne = ae.parentNode;
                }
                ae = Ee;
              }
            l = E === -1 || w === -1 ? null : { start: E, end: w };
          } else
            l = null;
        }
      l = l || { start: 0, end: 0 };
    } else
      l = null;
    for (so = { focusedElem: n, selectionRange: l }, Di = false, Oe = r; Oe !== null; )
      if (r = Oe, n = r.child, (r.subtreeFlags & 1028) !== 0 && n !== null)
        n.return = r, Oe = n;
      else
        for (; Oe !== null; ) {
          r = Oe;
          try {
            var Le = r.alternate;
            if (r.flags & 1024)
              switch (r.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (Le !== null) {
                    var ze = Le.memoizedProps, Mn = Le.memoizedState, M = r.stateNode, D = M.getSnapshotBeforeUpdate(r.elementType === r.type ? ze : Si(r.type, ze), Mn);
                    M.__reactInternalSnapshotBeforeUpdate = D;
                  }
                  break;
                case 3:
                  var V = r.stateNode.containerInfo;
                  V.nodeType === 1 ? V.textContent = "" : V.nodeType === 9 && V.documentElement && V.removeChild(V.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(b(163));
              }
          } catch (se) {
            Nn(r, r.return, se);
          }
          if (n = r.sibling, n !== null) {
            n.return = r.return, Oe = n;
            break;
          }
          Oe = r.return;
        }
    return Le = tm, tm = false, Le;
  }
  function Os(n, r, l) {
    var u = r.updateQueue;
    if (u = u !== null ? u.lastEffect : null, u !== null) {
      var c = u = u.next;
      do {
        if ((c.tag & n) === n) {
          var d = c.destroy;
          c.destroy = void 0, d !== void 0 && Ds(r, l, d);
        }
        c = c.next;
      } while (c !== u);
    }
  }
  function Ls(n, r) {
    if (r = r.updateQueue, r = r !== null ? r.lastEffect : null, r !== null) {
      var l = r = r.next;
      do {
        if ((l.tag & n) === n) {
          var u = l.create;
          l.destroy = u();
        }
        l = l.next;
      } while (l !== r);
    }
  }
  function $d(n) {
    var r = n.ref;
    if (r !== null) {
      var l = n.stateNode;
      switch (n.tag) {
        case 5:
          n = l;
          break;
        default:
          n = l;
      }
      typeof r == "function" ? r(n) : r.current = n;
    }
  }
  function Yd(n) {
    var r = n.alternate;
    r !== null && (n.alternate = null, Yd(r)), n.child = null, n.deletions = null, n.sibling = null, n.tag === 5 && (r = n.stateNode, r !== null && (delete r[ga], delete r[fo], delete r[yd], delete r[my], delete r[gd])), n.stateNode = null, n.return = null, n.dependencies = null, n.memoizedProps = null, n.memoizedState = null, n.pendingProps = null, n.stateNode = null, n.updateQueue = null;
  }
  function rm(n) {
    return n.tag === 5 || n.tag === 3 || n.tag === 4;
  }
  function Zc(n) {
    e:
      for (; ; ) {
        for (; n.sibling === null; ) {
          if (n.return === null || rm(n.return))
            return null;
          n = n.return;
        }
        for (n.sibling.return = n.return, n = n.sibling; n.tag !== 5 && n.tag !== 6 && n.tag !== 18; ) {
          if (n.flags & 2 || n.child === null || n.tag === 4)
            continue e;
          n.child.return = n, n = n.child;
        }
        if (!(n.flags & 2))
          return n.stateNode;
      }
  }
  function Eu(n, r, l) {
    var u = n.tag;
    if (u === 5 || u === 6)
      n = n.stateNode, r ? l.nodeType === 8 ? l.parentNode.insertBefore(n, r) : l.insertBefore(n, r) : (l.nodeType === 8 ? (r = l.parentNode, r.insertBefore(n, l)) : (r = l, r.appendChild(n)), l = l._reactRootContainer, l != null || r.onclick !== null || (r.onclick = gc));
    else if (u !== 4 && (n = n.child, n !== null))
      for (Eu(n, r, l), n = n.sibling; n !== null; )
        Eu(n, r, l), n = n.sibling;
  }
  function _a(n, r, l) {
    var u = n.tag;
    if (u === 5 || u === 6)
      n = n.stateNode, r ? l.insertBefore(n, r) : l.appendChild(n);
    else if (u !== 4 && (n = n.child, n !== null))
      for (_a(n, r, l), n = n.sibling; n !== null; )
        _a(n, r, l), n = n.sibling;
  }
  var hn = null, Jn = false;
  function Hi(n, r, l) {
    for (l = l.child; l !== null; )
      ku(n, r, l), l = l.sibling;
  }
  function ku(n, r, l) {
    if (qr && typeof qr.onCommitFiberUnmount == "function")
      try {
        qr.onCommitFiberUnmount(dl, l);
      } catch {
      }
    switch (l.tag) {
      case 5:
        $n || _u(l, r);
      case 6:
        var u = hn, c = Jn;
        hn = null, Hi(n, r, l), hn = u, Jn = c, hn !== null && (Jn ? (n = hn, l = l.stateNode, n.nodeType === 8 ? n.parentNode.removeChild(l) : n.removeChild(l)) : hn.removeChild(l.stateNode));
        break;
      case 18:
        hn !== null && (Jn ? (n = hn, l = l.stateNode, n.nodeType === 8 ? kl(n.parentNode, l) : n.nodeType === 1 && kl(n, l), Sl(n)) : kl(hn, l.stateNode));
        break;
      case 4:
        u = hn, c = Jn, hn = l.stateNode.containerInfo, Jn = true, Hi(n, r, l), hn = u, Jn = c;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (!$n && (u = l.updateQueue, u !== null && (u = u.lastEffect, u !== null))) {
          c = u = u.next;
          do {
            var d = c, h = d.destroy;
            d = d.tag, h !== void 0 && (d & 2 || d & 4) && Ds(l, r, h), c = c.next;
          } while (c !== u);
        }
        Hi(n, r, l);
        break;
      case 1:
        if (!$n && (_u(l, r), u = l.stateNode, typeof u.componentWillUnmount == "function"))
          try {
            u.props = l.memoizedProps, u.state = l.memoizedState, u.componentWillUnmount();
          } catch (E) {
            Nn(l, r, E);
          }
        Hi(n, r, l);
        break;
      case 21:
        Hi(n, r, l);
        break;
      case 22:
        l.mode & 1 ? ($n = (u = $n) || l.memoizedState !== null, Hi(n, r, l), $n = u) : Hi(n, r, l);
        break;
      default:
        Hi(n, r, l);
    }
  }
  function Qa(n) {
    var r = n.updateQueue;
    if (r !== null) {
      n.updateQueue = null;
      var l = n.stateNode;
      l === null && (l = n.stateNode = new em()), r.forEach(function(u) {
        var c = Ty.bind(null, n, u);
        l.has(u) || (l.add(u), u.then(c, c));
      });
    }
  }
  function ua(n, r) {
    var l = r.deletions;
    if (l !== null)
      for (var u = 0; u < l.length; u++) {
        var c = l[u];
        try {
          var d = n, h = r, E = h;
          e:
            for (; E !== null; ) {
              switch (E.tag) {
                case 5:
                  hn = E.stateNode, Jn = false;
                  break e;
                case 3:
                  hn = E.stateNode.containerInfo, Jn = true;
                  break e;
                case 4:
                  hn = E.stateNode.containerInfo, Jn = true;
                  break e;
              }
              E = E.return;
            }
          if (hn === null)
            throw Error(b(160));
          ku(d, h, c), hn = null, Jn = false;
          var w = c.alternate;
          w !== null && (w.return = null), c.return = null;
        } catch (H) {
          Nn(c, r, H);
        }
      }
    if (r.subtreeFlags & 12854)
      for (r = r.child; r !== null; )
        im(r, n), r = r.sibling;
  }
  function im(n, r) {
    var l = n.alternate, u = n.flags;
    switch (n.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (ua(r, n), Ea(n), u & 4) {
          try {
            Os(3, n, n.return), Ls(3, n);
          } catch (ze) {
            Nn(n, n.return, ze);
          }
          try {
            Os(5, n, n.return);
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        }
        break;
      case 1:
        ua(r, n), Ea(n), u & 512 && l !== null && _u(l, l.return);
        break;
      case 5:
        if (ua(r, n), Ea(n), u & 512 && l !== null && _u(l, l.return), n.flags & 32) {
          var c = n.stateNode;
          try {
            vi(c, "");
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        }
        if (u & 4 && (c = n.stateNode, c != null)) {
          var d = n.memoizedProps, h = l !== null ? l.memoizedProps : d, E = n.type, w = n.updateQueue;
          if (n.updateQueue = null, w !== null)
            try {
              E === "input" && d.type === "radio" && d.name != null && Hn(c, d), Sn(E, h);
              var H = Sn(E, d);
              for (h = 0; h < w.length; h += 2) {
                var re = w[h], ae = w[h + 1];
                re === "style" ? Pt(c, ae) : re === "dangerouslySetInnerHTML" ? da(c, ae) : re === "children" ? vi(c, ae) : oe(c, re, ae, H);
              }
              switch (E) {
                case "input":
                  Dn(c, d);
                  break;
                case "textarea":
                  pi(c, d);
                  break;
                case "select":
                  var ne = c._wrapperState.wasMultiple;
                  c._wrapperState.wasMultiple = !!d.multiple;
                  var Ee = d.value;
                  Ee != null ? yr(c, !!d.multiple, Ee, false) : ne !== !!d.multiple && (d.defaultValue != null ? yr(
                    c,
                    !!d.multiple,
                    d.defaultValue,
                    true
                  ) : yr(c, !!d.multiple, d.multiple ? [] : "", false));
              }
              c[fo] = d;
            } catch (ze) {
              Nn(n, n.return, ze);
            }
        }
        break;
      case 6:
        if (ua(r, n), Ea(n), u & 4) {
          if (n.stateNode === null)
            throw Error(b(162));
          c = n.stateNode, d = n.memoizedProps;
          try {
            c.nodeValue = d;
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        }
        break;
      case 3:
        if (ua(r, n), Ea(n), u & 4 && l !== null && l.memoizedState.isDehydrated)
          try {
            Sl(r.containerInfo);
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        break;
      case 4:
        ua(r, n), Ea(n);
        break;
      case 13:
        ua(r, n), Ea(n), c = n.child, c.flags & 8192 && (d = c.memoizedState !== null, c.stateNode.isHidden = d, !d || c.alternate !== null && c.alternate.memoizedState !== null || (Gd = vn())), u & 4 && Qa(n);
        break;
      case 22:
        if (re = l !== null && l.memoizedState !== null, n.mode & 1 ? ($n = (H = $n) || re, ua(r, n), $n = H) : ua(r, n), Ea(n), u & 8192) {
          if (H = n.memoizedState !== null, (n.stateNode.isHidden = H) && !re && n.mode & 1)
            for (Oe = n, re = n.child; re !== null; ) {
              for (ae = Oe = re; Oe !== null; ) {
                switch (ne = Oe, Ee = ne.child, ne.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Os(4, ne, ne.return);
                    break;
                  case 1:
                    _u(ne, ne.return);
                    var Le = ne.stateNode;
                    if (typeof Le.componentWillUnmount == "function") {
                      u = ne, l = ne.return;
                      try {
                        r = u, Le.props = r.memoizedProps, Le.state = r.memoizedState, Le.componentWillUnmount();
                      } catch (ze) {
                        Nn(u, l, ze);
                      }
                    }
                    break;
                  case 5:
                    _u(ne, ne.return);
                    break;
                  case 22:
                    if (ne.memoizedState !== null) {
                      Wd(ae);
                      continue;
                    }
                }
                Ee !== null ? (Ee.return = ne, Oe = Ee) : Wd(ae);
              }
              re = re.sibling;
            }
          e:
            for (re = null, ae = n; ; ) {
              if (ae.tag === 5) {
                if (re === null) {
                  re = ae;
                  try {
                    c = ae.stateNode, H ? (d = c.style, typeof d.setProperty == "function" ? d.setProperty("display", "none", "important") : d.display = "none") : (E = ae.stateNode, w = ae.memoizedProps.style, h = w != null && w.hasOwnProperty("display") ? w.display : null, E.style.display = dt("display", h));
                  } catch (ze) {
                    Nn(n, n.return, ze);
                  }
                }
              } else if (ae.tag === 6) {
                if (re === null)
                  try {
                    ae.stateNode.nodeValue = H ? "" : ae.memoizedProps;
                  } catch (ze) {
                    Nn(n, n.return, ze);
                  }
              } else if ((ae.tag !== 22 && ae.tag !== 23 || ae.memoizedState === null || ae === n) && ae.child !== null) {
                ae.child.return = ae, ae = ae.child;
                continue;
              }
              if (ae === n)
                break e;
              for (; ae.sibling === null; ) {
                if (ae.return === null || ae.return === n)
                  break e;
                re === ae && (re = null), ae = ae.return;
              }
              re === ae && (re = null), ae.sibling.return = ae.return, ae = ae.sibling;
            }
        }
        break;
      case 19:
        ua(r, n), Ea(n), u & 4 && Qa(n);
        break;
      case 21:
        break;
      default:
        ua(
          r,
          n
        ), Ea(n);
    }
  }
  function Ea(n) {
    var r = n.flags;
    if (r & 2) {
      try {
        e: {
          for (var l = n.return; l !== null; ) {
            if (rm(l)) {
              var u = l;
              break e;
            }
            l = l.return;
          }
          throw Error(b(160));
        }
        switch (u.tag) {
          case 5:
            var c = u.stateNode;
            u.flags & 32 && (vi(c, ""), u.flags &= -33);
            var d = Zc(n);
            _a(n, d, c);
            break;
          case 3:
          case 4:
            var h = u.stateNode.containerInfo, E = Zc(n);
            Eu(n, E, h);
            break;
          default:
            throw Error(b(161));
        }
      } catch (w) {
        Nn(n, n.return, w);
      }
      n.flags &= -3;
    }
    r & 4096 && (n.flags &= -4097);
  }
  function am(n, r, l) {
    Oe = n, xu(n);
  }
  function xu(n, r, l) {
    for (var u = (n.mode & 1) !== 0; Oe !== null; ) {
      var c = Oe, d = c.child;
      if (c.tag === 22 && u) {
        var h = c.memoizedState !== null || Ns;
        if (!h) {
          var E = c.alternate, w = E !== null && E.memoizedState !== null || $n;
          E = Ns;
          var H = $n;
          if (Ns = h, ($n = w) && !H)
            for (Oe = c; Oe !== null; )
              h = Oe, w = h.child, h.tag === 22 && h.memoizedState !== null ? om(c) : w !== null ? (w.return = h, Oe = w) : om(c);
          for (; d !== null; )
            Oe = d, xu(d), d = d.sibling;
          Oe = c, Ns = E, $n = H;
        }
        lm(n);
      } else
        c.subtreeFlags & 8772 && d !== null ? (d.return = c, Oe = d) : lm(n);
    }
  }
  function lm(n) {
    for (; Oe !== null; ) {
      var r = Oe;
      if (r.flags & 8772) {
        var l = r.alternate;
        try {
          if (r.flags & 8772)
            switch (r.tag) {
              case 0:
              case 11:
              case 15:
                $n || Ls(5, r);
                break;
              case 1:
                var u = r.stateNode;
                if (r.flags & 4 && !$n)
                  if (l === null)
                    u.componentDidMount();
                  else {
                    var c = r.elementType === r.type ? l.memoizedProps : Si(r.type, l.memoizedProps);
                    u.componentDidUpdate(c, l.memoizedState, u.__reactInternalSnapshotBeforeUpdate);
                  }
                var d = r.updateQueue;
                d !== null && vo(r, d, u);
                break;
              case 3:
                var h = r.updateQueue;
                if (h !== null) {
                  if (l = null, r.child !== null)
                    switch (r.child.tag) {
                      case 5:
                        l = r.child.stateNode;
                        break;
                      case 1:
                        l = r.child.stateNode;
                    }
                  vo(r, h, l);
                }
                break;
              case 5:
                var E = r.stateNode;
                if (l === null && r.flags & 4) {
                  l = E;
                  var w = r.memoizedProps;
                  switch (r.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      w.autoFocus && l.focus();
                      break;
                    case "img":
                      w.src && (l.src = w.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (r.memoizedState === null) {
                  var H = r.alternate;
                  if (H !== null) {
                    var re = H.memoizedState;
                    if (re !== null) {
                      var ae = re.dehydrated;
                      ae !== null && Sl(ae);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(b(163));
            }
          $n || r.flags & 512 && $d(r);
        } catch (ne) {
          Nn(r, r.return, ne);
        }
      }
      if (r === n) {
        Oe = null;
        break;
      }
      if (l = r.sibling, l !== null) {
        l.return = r.return, Oe = l;
        break;
      }
      Oe = r.return;
    }
  }
  function Wd(n) {
    for (; Oe !== null; ) {
      var r = Oe;
      if (r === n) {
        Oe = null;
        break;
      }
      var l = r.sibling;
      if (l !== null) {
        l.return = r.return, Oe = l;
        break;
      }
      Oe = r.return;
    }
  }
  function om(n) {
    for (; Oe !== null; ) {
      var r = Oe;
      try {
        switch (r.tag) {
          case 0:
          case 11:
          case 15:
            var l = r.return;
            try {
              Ls(4, r);
            } catch (w) {
              Nn(r, l, w);
            }
            break;
          case 1:
            var u = r.stateNode;
            if (typeof u.componentDidMount == "function") {
              var c = r.return;
              try {
                u.componentDidMount();
              } catch (w) {
                Nn(r, c, w);
              }
            }
            var d = r.return;
            try {
              $d(r);
            } catch (w) {
              Nn(r, d, w);
            }
            break;
          case 5:
            var h = r.return;
            try {
              $d(r);
            } catch (w) {
              Nn(r, h, w);
            }
        }
      } catch (w) {
        Nn(r, r.return, w);
      }
      if (r === n) {
        Oe = null;
        break;
      }
      var E = r.sibling;
      if (E !== null) {
        E.return = r.return, Oe = E;
        break;
      }
      Oe = r.return;
    }
  }
  var Jc = Math.ceil, Ms = xe.ReactCurrentDispatcher, Qd = xe.ReactCurrentOwner, Er = xe.ReactCurrentBatchConfig, Ct = 0, kn = null, Tn = null, er = 0, Ci = 0, Ru = ut(0), Yn = 0, As = null, Ga = 0, ef = 0, wu = 0, Ro = null, Lr = null, Gd = 0, Tu = 1 / 0, qa = null, tf = false, wo = null, ka = null, jl = false, Fl = null, nf = 0, Nu = 0, rf = null, To = -1, No = 0;
  function kr() {
    return Ct & 6 ? vn() : To !== -1 ? To : To = vn();
  }
  function Un(n) {
    return n.mode & 1 ? Ct & 2 && er !== 0 ? er & -er : kc.transition !== null ? (No === 0 && (No = Xo()), No) : (n = jt, n !== 0 || (n = window.event, n = n === void 0 ? 16 : ns(n.type)), n) : 1;
  }
  function xr(n, r, l, u) {
    if (50 < Nu)
      throw Nu = 0, rf = null, Error(b(185));
    Ma(n, l, u), (!(Ct & 2) || n !== kn) && (n === kn && (!(Ct & 2) && (ef |= l), Yn === 4 && Pi(n, er)), Rr(n, u), l === 1 && Ct === 0 && !(r.mode & 1) && (Tu = vn() + 500, Kn && ei()));
  }
  function Rr(n, r) {
    var l = n.callbackNode;
    ml(n, r);
    var u = Dr(n, n === kn ? er : 0);
    if (u === 0)
      l !== null && Gr(l), n.callbackNode = null, n.callbackPriority = 0;
    else if (r = u & -u, n.callbackPriority !== r) {
      if (l != null && Gr(l), r === 1)
        n.tag === 0 ? bd(um.bind(null, n)) : Sd(um.bind(null, n)), hd(function() {
          !(Ct & 6) && ei();
        }), l = null;
      else {
        switch (Zo(u)) {
          case 1:
            l = ea;
            break;
          case 4:
            l = pt;
            break;
          case 16:
            l = ma;
            break;
          case 536870912:
            l = Go;
            break;
          default:
            l = ma;
        }
        l = ep(l, Du.bind(null, n));
      }
      n.callbackPriority = r, n.callbackNode = l;
    }
  }
  function Du(n, r) {
    if (To = -1, No = 0, Ct & 6)
      throw Error(b(327));
    var l = n.callbackNode;
    if (Lu() && n.callbackNode !== l)
      return null;
    var u = Dr(n, n === kn ? er : 0);
    if (u === 0)
      return null;
    if (u & 30 || u & n.expiredLanes || r)
      r = lf(n, u);
    else {
      r = u;
      var c = Ct;
      Ct |= 2;
      var d = af();
      (kn !== n || er !== r) && (qa = null, Tu = vn() + 500, Do(n, r));
      do
        try {
          ky();
          break;
        } catch (E) {
          sm(n, E);
        }
      while (true);
      Rd(), Ms.current = d, Ct = c, Tn !== null ? r = 0 : (kn = null, er = 0, r = Yn);
    }
    if (r !== 0) {
      if (r === 2 && (c = hl(n), c !== 0 && (u = c, r = qd(n, c))), r === 1)
        throw l = As, Do(n, 0), Pi(n, u), Rr(n, vn()), l;
      if (r === 6)
        Pi(n, u);
      else {
        if (c = n.current.alternate, !(u & 30) && !Xd(c) && (r = lf(n, u), r === 2 && (d = hl(n), d !== 0 && (u = d, r = qd(n, d))), r === 1))
          throw l = As, Do(n, 0), Pi(n, u), Rr(n, vn()), l;
        switch (n.finishedWork = c, n.finishedLanes = u, r) {
          case 0:
          case 1:
            throw Error(b(345));
          case 2:
            Oo(n, Lr, qa);
            break;
          case 3:
            if (Pi(n, u), (u & 130023424) === u && (r = Gd + 500 - vn(), 10 < r)) {
              if (Dr(n, 0) !== 0)
                break;
              if (c = n.suspendedLanes, (c & u) !== u) {
                kr(), n.pingedLanes |= n.suspendedLanes & c;
                break;
              }
              n.timeoutHandle = co(Oo.bind(null, n, Lr, qa), r);
              break;
            }
            Oo(n, Lr, qa);
            break;
          case 4:
            if (Pi(n, u), (u & 4194240) === u)
              break;
            for (r = n.eventTimes, c = -1; 0 < u; ) {
              var h = 31 - Nr(u);
              d = 1 << h, h = r[h], h > c && (c = h), u &= ~d;
            }
            if (u = c, u = vn() - u, u = (120 > u ? 120 : 480 > u ? 480 : 1080 > u ? 1080 : 1920 > u ? 1920 : 3e3 > u ? 3e3 : 4320 > u ? 4320 : 1960 * Jc(u / 1960)) - u, 10 < u) {
              n.timeoutHandle = co(Oo.bind(null, n, Lr, qa), u);
              break;
            }
            Oo(n, Lr, qa);
            break;
          case 5:
            Oo(n, Lr, qa);
            break;
          default:
            throw Error(b(329));
        }
      }
    }
    return Rr(n, vn()), n.callbackNode === l ? Du.bind(null, n) : null;
  }
  function qd(n, r) {
    var l = Ro;
    return n.current.memoizedState.isDehydrated && (Do(n, r).flags |= 256), n = lf(n, r), n !== 2 && (r = Lr, Lr = l, r !== null && zs(r)), n;
  }
  function zs(n) {
    Lr === null ? Lr = n : Lr.push.apply(Lr, n);
  }
  function Xd(n) {
    for (var r = n; ; ) {
      if (r.flags & 16384) {
        var l = r.updateQueue;
        if (l !== null && (l = l.stores, l !== null))
          for (var u = 0; u < l.length; u++) {
            var c = l[u], d = c.getSnapshot;
            c = c.value;
            try {
              if (!Oi(d(), c))
                return false;
            } catch {
              return false;
            }
          }
      }
      if (l = r.child, r.subtreeFlags & 16384 && l !== null)
        l.return = r, r = l;
      else {
        if (r === n)
          break;
        for (; r.sibling === null; ) {
          if (r.return === null || r.return === n)
            return true;
          r = r.return;
        }
        r.sibling.return = r.return, r = r.sibling;
      }
    }
    return true;
  }
  function Pi(n, r) {
    for (r &= ~wu, r &= ~ef, n.suspendedLanes |= r, n.pingedLanes &= ~r, n = n.expirationTimes; 0 < r; ) {
      var l = 31 - Nr(r), u = 1 << l;
      n[l] = -1, r &= ~u;
    }
  }
  function um(n) {
    if (Ct & 6)
      throw Error(b(327));
    Lu();
    var r = Dr(n, 0);
    if (!(r & 1))
      return Rr(n, vn()), null;
    var l = lf(n, r);
    if (n.tag !== 0 && l === 2) {
      var u = hl(n);
      u !== 0 && (r = u, l = qd(n, u));
    }
    if (l === 1)
      throw l = As, Do(n, 0), Pi(n, r), Rr(n, vn()), l;
    if (l === 6)
      throw Error(b(345));
    return n.finishedWork = n.current.alternate, n.finishedLanes = r, Oo(n, Lr, qa), Rr(n, vn()), null;
  }
  function Ou(n, r) {
    var l = Ct;
    Ct |= 1;
    try {
      return n(r);
    } finally {
      Ct = l, Ct === 0 && (Tu = vn() + 500, Kn && ei());
    }
  }
  function Hl(n) {
    Fl !== null && Fl.tag === 0 && !(Ct & 6) && Lu();
    var r = Ct;
    Ct |= 1;
    var l = Er.transition, u = jt;
    try {
      if (Er.transition = null, jt = 1, n)
        return n();
    } finally {
      jt = u, Er.transition = l, Ct = r, !(Ct & 6) && ei();
    }
  }
  function Kd() {
    Ci = Ru.current, Bt(Ru);
  }
  function Do(n, r) {
    n.finishedWork = null, n.finishedLanes = 0;
    var l = n.timeoutHandle;
    if (l !== -1 && (n.timeoutHandle = -1, Vv(l)), Tn !== null)
      for (l = Tn.return; l !== null; ) {
        var u = l;
        switch (_d(u), u.tag) {
          case 1:
            u = u.type.childContextTypes, u != null && Ai();
            break;
          case 3:
            Al(), Bt(wn), Bt(tt), Dc();
            break;
          case 5:
            mt(u);
            break;
          case 4:
            Al();
            break;
          case 13:
            Bt(qe);
            break;
          case 19:
            Bt(qe);
            break;
          case 10:
            Dl(u.type._context);
            break;
          case 22:
          case 23:
            Kd();
        }
        l = l.return;
      }
    if (kn = n, Tn = n = Pl(n.current, null), er = Ci = r, Yn = 0, As = null, wu = ef = Ga = 0, Lr = Ro = null, lr !== null) {
      for (r = 0; r < lr.length; r++)
        if (l = lr[r], u = l.interleaved, u !== null) {
          l.interleaved = null;
          var c = u.next, d = l.pending;
          if (d !== null) {
            var h = d.next;
            d.next = c, u.next = h;
          }
          l.pending = u;
        }
      lr = null;
    }
    return n;
  }
  function sm(n, r) {
    do {
      var l = Tn;
      try {
        if (Rd(), Oc.current = Qc, Ke) {
          for (var u = fn.memoizedState; u !== null; ) {
            var c = u.queue;
            c !== null && (c.pending = null), u = u.next;
          }
          Ke = false;
        }
        if (ho = 0, wt = Y = fn = null, Ca = false, bi = 0, Qd.current = null, l === null || l.return === null) {
          Yn = 1, As = r, Tn = null;
          break;
        }
        e: {
          var d = n, h = l.return, E = l, w = r;
          if (r = er, E.flags |= 32768, w !== null && typeof w == "object" && typeof w.then == "function") {
            var H = w, re = E, ae = re.tag;
            if (!(re.mode & 1) && (ae === 0 || ae === 11 || ae === 15)) {
              var ne = re.alternate;
              ne ? (re.updateQueue = ne.updateQueue, re.memoizedState = ne.memoizedState, re.lanes = ne.lanes) : (re.updateQueue = null, re.memoizedState = null);
            }
            var Ee = zd(h);
            if (Ee !== null) {
              Ee.flags &= -257, Vd(Ee, h, E, d, r), Ee.mode & 1 && Kv(d, H, r), r = Ee, w = H;
              var Le = r.updateQueue;
              if (Le === null) {
                var ze = /* @__PURE__ */ new Set();
                ze.add(w), r.updateQueue = ze;
              } else
                Le.add(w);
              break e;
            } else {
              if (!(r & 1)) {
                Kv(d, H, r), Zd();
                break e;
              }
              w = Error(b(426));
            }
          } else if (cn && E.mode & 1) {
            var Mn = zd(h);
            if (Mn !== null) {
              !(Mn.flags & 65536) && (Mn.flags |= 256), Vd(Mn, h, E, d, r), kd(Su(w, E));
              break e;
            }
          }
          d = w = Su(w, E), Yn !== 4 && (Yn = 2), Ro === null ? Ro = [d] : Ro.push(d), d = h;
          do {
            switch (d.tag) {
              case 3:
                d.flags |= 65536, r &= -r, d.lanes |= r;
                var M = Xv(d, w, r);
                Nd(d, M);
                break e;
              case 1:
                E = w;
                var D = d.type, V = d.stateNode;
                if (!(d.flags & 128) && (typeof D.getDerivedStateFromError == "function" || V !== null && typeof V.componentDidCatch == "function" && (ka === null || !ka.has(V)))) {
                  d.flags |= 65536, r &= -r, d.lanes |= r;
                  var se = Rs(d, E, r);
                  Nd(d, se);
                  break e;
                }
            }
            d = d.return;
          } while (d !== null);
        }
        Jd(l);
      } catch (Ve) {
        r = Ve, Tn === l && l !== null && (Tn = l = l.return);
        continue;
      }
      break;
    } while (true);
  }
  function af() {
    var n = Ms.current;
    return Ms.current = Qc, n === null ? Qc : n;
  }
  function Zd() {
    (Yn === 0 || Yn === 3 || Yn === 2) && (Yn = 4), kn === null || !(Ga & 268435455) && !(ef & 268435455) || Pi(kn, er);
  }
  function lf(n, r) {
    var l = Ct;
    Ct |= 2;
    var u = af();
    (kn !== n || er !== r) && (qa = null, Do(n, r));
    do
      try {
        Ey();
        break;
      } catch (c) {
        sm(n, c);
      }
    while (true);
    if (Rd(), Ct = l, Ms.current = u, Tn !== null)
      throw Error(b(261));
    return kn = null, er = 0, Yn;
  }
  function Ey() {
    for (; Tn !== null; )
      cm(Tn);
  }
  function ky() {
    for (; Tn !== null && !Wf(); )
      cm(Tn);
  }
  function cm(n) {
    var r = dm(n.alternate, n, Ci);
    n.memoizedProps = n.pendingProps, r === null ? Jd(n) : Tn = r, Qd.current = null;
  }
  function Jd(n) {
    var r = n;
    do {
      var l = r.alternate;
      if (n = r.return, r.flags & 32768) {
        if (l = Id(l, r), l !== null) {
          l.flags &= 32767, Tn = l;
          return;
        }
        if (n !== null)
          n.flags |= 32768, n.subtreeFlags = 0, n.deletions = null;
        else {
          Yn = 6, Tn = null;
          return;
        }
      } else if (l = _y(l, r, Ci), l !== null) {
        Tn = l;
        return;
      }
      if (r = r.sibling, r !== null) {
        Tn = r;
        return;
      }
      Tn = r = n;
    } while (r !== null);
    Yn === 0 && (Yn = 5);
  }
  function Oo(n, r, l) {
    var u = jt, c = Er.transition;
    try {
      Er.transition = null, jt = 1, xy(n, r, l, u);
    } finally {
      Er.transition = c, jt = u;
    }
    return null;
  }
  function xy(n, r, l, u) {
    do
      Lu();
    while (Fl !== null);
    if (Ct & 6)
      throw Error(b(327));
    l = n.finishedWork;
    var c = n.finishedLanes;
    if (l === null)
      return null;
    if (n.finishedWork = null, n.finishedLanes = 0, l === n.current)
      throw Error(b(177));
    n.callbackNode = null, n.callbackPriority = 0;
    var d = l.lanes | l.childLanes;
    if (qf(n, d), n === kn && (Tn = kn = null, er = 0), !(l.subtreeFlags & 2064) && !(l.flags & 2064) || jl || (jl = true, ep(ma, function() {
      return Lu(), null;
    })), d = (l.flags & 15990) !== 0, l.subtreeFlags & 15990 || d) {
      d = Er.transition, Er.transition = null;
      var h = jt;
      jt = 1;
      var E = Ct;
      Ct |= 4, Qd.current = null, nm(n, l), im(l, n), pc(so), Di = !!vd, so = vd = null, n.current = l, am(l), Qf(), Ct = E, jt = h, Er.transition = d;
    } else
      n.current = l;
    if (jl && (jl = false, Fl = n, nf = c), d = n.pendingLanes, d === 0 && (ka = null), Ju(l.stateNode), Rr(n, vn()), r !== null)
      for (u = n.onRecoverableError, l = 0; l < r.length; l++)
        c = r[l], u(c.value, { componentStack: c.stack, digest: c.digest });
    if (tf)
      throw tf = false, n = wo, wo = null, n;
    return nf & 1 && n.tag !== 0 && Lu(), d = n.pendingLanes, d & 1 ? n === rf ? Nu++ : (Nu = 0, rf = n) : Nu = 0, ei(), null;
  }
  function Lu() {
    if (Fl !== null) {
      var n = Zo(nf), r = Er.transition, l = jt;
      try {
        if (Er.transition = null, jt = 16 > n ? 16 : n, Fl === null)
          var u = false;
        else {
          if (n = Fl, Fl = null, nf = 0, Ct & 6)
            throw Error(b(331));
          var c = Ct;
          for (Ct |= 4, Oe = n.current; Oe !== null; ) {
            var d = Oe, h = d.child;
            if (Oe.flags & 16) {
              var E = d.deletions;
              if (E !== null) {
                for (var w = 0; w < E.length; w++) {
                  var H = E[w];
                  for (Oe = H; Oe !== null; ) {
                    var re = Oe;
                    switch (re.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Os(8, re, d);
                    }
                    var ae = re.child;
                    if (ae !== null)
                      ae.return = re, Oe = ae;
                    else
                      for (; Oe !== null; ) {
                        re = Oe;
                        var ne = re.sibling, Ee = re.return;
                        if (Yd(re), re === H) {
                          Oe = null;
                          break;
                        }
                        if (ne !== null) {
                          ne.return = Ee, Oe = ne;
                          break;
                        }
                        Oe = Ee;
                      }
                  }
                }
                var Le = d.alternate;
                if (Le !== null) {
                  var ze = Le.child;
                  if (ze !== null) {
                    Le.child = null;
                    do {
                      var Mn = ze.sibling;
                      ze.sibling = null, ze = Mn;
                    } while (ze !== null);
                  }
                }
                Oe = d;
              }
            }
            if (d.subtreeFlags & 2064 && h !== null)
              h.return = d, Oe = h;
            else
              e:
                for (; Oe !== null; ) {
                  if (d = Oe, d.flags & 2048)
                    switch (d.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Os(9, d, d.return);
                    }
                  var M = d.sibling;
                  if (M !== null) {
                    M.return = d.return, Oe = M;
                    break e;
                  }
                  Oe = d.return;
                }
          }
          var D = n.current;
          for (Oe = D; Oe !== null; ) {
            h = Oe;
            var V = h.child;
            if (h.subtreeFlags & 2064 && V !== null)
              V.return = h, Oe = V;
            else
              e:
                for (h = D; Oe !== null; ) {
                  if (E = Oe, E.flags & 2048)
                    try {
                      switch (E.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Ls(9, E);
                      }
                    } catch (Ve) {
                      Nn(E, E.return, Ve);
                    }
                  if (E === h) {
                    Oe = null;
                    break e;
                  }
                  var se = E.sibling;
                  if (se !== null) {
                    se.return = E.return, Oe = se;
                    break e;
                  }
                  Oe = E.return;
                }
          }
          if (Ct = c, ei(), qr && typeof qr.onPostCommitFiberRoot == "function")
            try {
              qr.onPostCommitFiberRoot(dl, n);
            } catch {
            }
          u = true;
        }
        return u;
      } finally {
        jt = l, Er.transition = r;
      }
    }
    return false;
  }
  function fm(n, r, l) {
    r = Su(l, r), r = Xv(n, r, 1), n = Ll(n, r, 1), r = kr(), n !== null && (Ma(n, 1, r), Rr(n, r));
  }
  function Nn(n, r, l) {
    if (n.tag === 3)
      fm(n, n, l);
    else
      for (; r !== null; ) {
        if (r.tag === 3) {
          fm(r, n, l);
          break;
        } else if (r.tag === 1) {
          var u = r.stateNode;
          if (typeof r.type.getDerivedStateFromError == "function" || typeof u.componentDidCatch == "function" && (ka === null || !ka.has(u))) {
            n = Su(l, n), n = Rs(r, n, 1), r = Ll(r, n, 1), n = kr(), r !== null && (Ma(r, 1, n), Rr(r, n));
            break;
          }
        }
        r = r.return;
      }
  }
  function Ry(n, r, l) {
    var u = n.pingCache;
    u !== null && u.delete(r), r = kr(), n.pingedLanes |= n.suspendedLanes & l, kn === n && (er & l) === l && (Yn === 4 || Yn === 3 && (er & 130023424) === er && 500 > vn() - Gd ? Do(n, 0) : wu |= l), Rr(n, r);
  }
  function of(n, r) {
    r === 0 && (n.mode & 1 ? (r = pl, pl <<= 1, !(pl & 130023424) && (pl = 4194304)) : r = 1);
    var l = kr();
    n = Ia(n, r), n !== null && (Ma(n, r, l), Rr(n, l));
  }
  function wy(n) {
    var r = n.memoizedState, l = 0;
    r !== null && (l = r.retryLane), of(n, l);
  }
  function Ty(n, r) {
    var l = 0;
    switch (n.tag) {
      case 13:
        var u = n.stateNode, c = n.memoizedState;
        c !== null && (l = c.retryLane);
        break;
      case 19:
        u = n.stateNode;
        break;
      default:
        throw Error(b(314));
    }
    u !== null && u.delete(r), of(n, l);
  }
  var dm;
  dm = function(n, r, l) {
    if (n !== null)
      if (n.memoizedProps !== r.pendingProps || wn.current)
        Vn = true;
      else {
        if (!(n.lanes & l) && !(r.flags & 128))
          return Vn = false, Wa(n, r, l);
        Vn = !!(n.flags & 131072);
      }
    else
      Vn = false, cn && r.flags & 1048576 && Cd(r, du, r.index);
    switch (r.lanes = 0, r.tag) {
      case 2:
        var u = r.type;
        Cr(n, r), n = r.pendingProps;
        var c = Mi(r, tt.current);
        he(r, l), c = zl(null, r, u, n, c, l);
        var d = So();
        return r.flags |= 1, typeof c == "object" && c !== null && typeof c.render == "function" && c.$$typeof === void 0 ? (r.tag = 1, r.memoizedState = null, r.updateQueue = null, mn(u) ? (d = true, Sc(r)) : d = false, r.memoizedState = c.state !== null && c.state !== void 0 ? c.state : null, Td(r), c.updater = wc, r.stateNode = c, c._reactInternals = r, Tc(r, u, n, l), r = Zv(null, r, u, true, d, l)) : (r.tag = 0, cn && d && bc(r), Bn(null, r, c, l), r = r.child), r;
      case 16:
        u = r.elementType;
        e: {
          switch (Cr(n, r), n = r.pendingProps, c = u._init, u = c(u._payload), r.type = u, c = r.tag = Dy(u), n = Si(u, n), c) {
            case 0:
              r = bu(null, r, u, n, l);
              break e;
            case 1:
              r = Ud(null, r, u, n, l);
              break e;
            case 11:
              r = Ul(null, r, u, n, l);
              break e;
            case 14:
              r = qc(null, r, u, Si(u.type, n), l);
              break e;
          }
          throw Error(b(
            306,
            u,
            ""
          ));
        }
        return r;
      case 0:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), bu(n, r, u, c, l);
      case 1:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), Ud(n, r, u, c, l);
      case 3:
        e: {
          if (Jv(r), n === null)
            throw Error(b(387));
          u = r.pendingProps, d = r.memoizedState, c = d.element, Pn(n, r), Ml(r, u, null, l);
          var h = r.memoizedState;
          if (u = h.element, d.isDehydrated)
            if (d = { element: u, isDehydrated: false, cache: h.cache, pendingSuspenseBoundaries: h.pendingSuspenseBoundaries, transitions: h.transitions }, r.updateQueue.baseState = d, r.memoizedState = d, r.flags & 256) {
              c = Su(Error(b(423)), r), r = Xc(n, r, u, l, c);
              break e;
            } else if (u !== c) {
              c = Su(Error(b(424)), r), r = Xc(n, r, u, l, c);
              break e;
            } else
              for (ri = la(r.stateNode.containerInfo.firstChild), gi = r, cn = true, Vi = null, l = Gv(r, null, u, l), r.child = l; l; )
                l.flags = l.flags & -3 | 4096, l = l.sibling;
          else {
            if (_n(), u === c) {
              r = or(n, r, l);
              break e;
            }
            Bn(n, r, u, l);
          }
          r = r.child;
        }
        return r;
      case 5:
        return Qe(r), n === null && _c(r), u = r.type, c = r.pendingProps, d = n !== null ? n.memoizedProps : null, h = c.children, vs(u, c) ? h = null : d !== null && vs(u, d) && (r.flags |= 32), st(n, r), Bn(n, r, h, l), r.child;
      case 6:
        return n === null && _c(r), null;
      case 13:
        return Fd(n, r, l);
      case 4:
        return Od(r, r.stateNode.containerInfo), u = r.pendingProps, n === null ? r.child = vu(r, null, u, l) : Bn(n, r, u, l), r.child;
      case 11:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), Ul(n, r, u, c, l);
      case 7:
        return Bn(n, r, r.pendingProps, l), r.child;
      case 8:
        return Bn(n, r, r.pendingProps.children, l), r.child;
      case 12:
        return Bn(n, r, r.pendingProps.children, l), r.child;
      case 10:
        e: {
          if (u = r.type._context, c = r.pendingProps, d = r.memoizedProps, h = c.value, qt(ba, u._currentValue), u._currentValue = h, d !== null)
            if (Oi(d.value, h)) {
              if (d.children === c.children && !wn.current) {
                r = or(n, r, l);
                break e;
              }
            } else
              for (d = r.child, d !== null && (d.return = r); d !== null; ) {
                var E = d.dependencies;
                if (E !== null) {
                  h = d.child;
                  for (var w = E.firstContext; w !== null; ) {
                    if (w.context === u) {
                      if (d.tag === 1) {
                        w = $a(-1, l & -l), w.tag = 2;
                        var H = d.updateQueue;
                        if (H !== null) {
                          H = H.shared;
                          var re = H.pending;
                          re === null ? w.next = w : (w.next = re.next, re.next = w), H.pending = w;
                        }
                      }
                      d.lanes |= l, w = d.alternate, w !== null && (w.lanes |= l), Zn(
                        d.return,
                        l,
                        r
                      ), E.lanes |= l;
                      break;
                    }
                    w = w.next;
                  }
                } else if (d.tag === 10)
                  h = d.type === r.type ? null : d.child;
                else if (d.tag === 18) {
                  if (h = d.return, h === null)
                    throw Error(b(341));
                  h.lanes |= l, E = h.alternate, E !== null && (E.lanes |= l), Zn(h, l, r), h = d.sibling;
                } else
                  h = d.child;
                if (h !== null)
                  h.return = d;
                else
                  for (h = d; h !== null; ) {
                    if (h === r) {
                      h = null;
                      break;
                    }
                    if (d = h.sibling, d !== null) {
                      d.return = h.return, h = d;
                      break;
                    }
                    h = h.return;
                  }
                d = h;
              }
          Bn(n, r, c.children, l), r = r.child;
        }
        return r;
      case 9:
        return c = r.type, u = r.pendingProps.children, he(r, l), c = Ln(c), u = u(c), r.flags |= 1, Bn(n, r, u, l), r.child;
      case 14:
        return u = r.type, c = Si(u, r.pendingProps), c = Si(u.type, c), qc(n, r, u, c, l);
      case 15:
        return li(n, r, r.type, r.pendingProps, l);
      case 17:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), Cr(n, r), r.tag = 1, mn(u) ? (n = true, Sc(r)) : n = false, he(r, l), $v(r, u, c), Tc(r, u, c, l), Zv(null, r, u, true, n, l);
      case 19:
        return Bd(n, r, l);
      case 22:
        return Eo(n, r, l);
    }
    throw Error(b(156, r.tag));
  };
  function ep(n, r) {
    return cl(n, r);
  }
  function Ny(n, r, l, u) {
    this.tag = n, this.key = l, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = r, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = u, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function Bi(n, r, l, u) {
    return new Ny(n, r, l, u);
  }
  function tp(n) {
    return n = n.prototype, !(!n || !n.isReactComponent);
  }
  function Dy(n) {
    if (typeof n == "function")
      return tp(n) ? 1 : 0;
    if (n != null) {
      if (n = n.$$typeof, n === en)
        return 11;
      if (n === Ut)
        return 14;
    }
    return 2;
  }
  function Pl(n, r) {
    var l = n.alternate;
    return l === null ? (l = Bi(n.tag, r, n.key, n.mode), l.elementType = n.elementType, l.type = n.type, l.stateNode = n.stateNode, l.alternate = n, n.alternate = l) : (l.pendingProps = r, l.type = n.type, l.flags = 0, l.subtreeFlags = 0, l.deletions = null), l.flags = n.flags & 14680064, l.childLanes = n.childLanes, l.lanes = n.lanes, l.child = n.child, l.memoizedProps = n.memoizedProps, l.memoizedState = n.memoizedState, l.updateQueue = n.updateQueue, r = n.dependencies, l.dependencies = r === null ? null : { lanes: r.lanes, firstContext: r.firstContext }, l.sibling = n.sibling, l.index = n.index, l.ref = n.ref, l;
  }
  function uf(n, r, l, u, c, d) {
    var h = 2;
    if (u = n, typeof n == "function")
      tp(n) && (h = 1);
    else if (typeof n == "string")
      h = 5;
    else
      e:
        switch (n) {
          case De:
            return Lo(l.children, c, d, r);
          case St:
            h = 8, c |= 8;
            break;
          case xt:
            return n = Bi(12, l, r, c | 2), n.elementType = xt, n.lanes = d, n;
          case Be:
            return n = Bi(13, l, r, c), n.elementType = Be, n.lanes = d, n;
          case rt:
            return n = Bi(19, l, r, c), n.elementType = rt, n.lanes = d, n;
          case Ne:
            return Vs(l, c, d, r);
          default:
            if (typeof n == "object" && n !== null)
              switch (n.$$typeof) {
                case Lt:
                  h = 10;
                  break e;
                case Et:
                  h = 9;
                  break e;
                case en:
                  h = 11;
                  break e;
                case Ut:
                  h = 14;
                  break e;
                case ht:
                  h = 16, u = null;
                  break e;
              }
            throw Error(b(130, n == null ? n : typeof n, ""));
        }
    return r = Bi(h, l, r, c), r.elementType = n, r.type = u, r.lanes = d, r;
  }
  function Lo(n, r, l, u) {
    return n = Bi(7, n, u, r), n.lanes = l, n;
  }
  function Vs(n, r, l, u) {
    return n = Bi(22, n, u, r), n.elementType = Ne, n.lanes = l, n.stateNode = { isHidden: false }, n;
  }
  function Us(n, r, l) {
    return n = Bi(6, n, null, r), n.lanes = l, n;
  }
  function Mo(n, r, l) {
    return r = Bi(4, n.children !== null ? n.children : [], n.key, r), r.lanes = l, r.stateNode = { containerInfo: n.containerInfo, pendingChildren: null, implementation: n.implementation }, r;
  }
  function Oy(n, r, l, u, c) {
    this.tag = r, this.containerInfo = n, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = Ko(0), this.expirationTimes = Ko(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Ko(0), this.identifierPrefix = u, this.onRecoverableError = c, this.mutableSourceEagerHydrationData = null;
  }
  function sf(n, r, l, u, c, d, h, E, w) {
    return n = new Oy(n, r, l, E, w), r === 1 ? (r = 1, d === true && (r |= 8)) : r = 0, d = Bi(3, null, null, r), n.current = d, d.stateNode = n, d.memoizedState = { element: u, isDehydrated: l, cache: null, transitions: null, pendingSuspenseBoundaries: null }, Td(d), n;
  }
  function pm(n, r, l) {
    var u = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return { $$typeof: Te, key: u == null ? null : "" + u, children: n, containerInfo: r, implementation: l };
  }
  function np(n) {
    if (!n)
      return Sa;
    n = n._reactInternals;
    e: {
      if (Je(n) !== n || n.tag !== 1)
        throw Error(b(170));
      var r = n;
      do {
        switch (r.tag) {
          case 3:
            r = r.stateNode.context;
            break e;
          case 1:
            if (mn(r.type)) {
              r = r.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        r = r.return;
      } while (r !== null);
      throw Error(b(171));
    }
    if (n.tag === 1) {
      var l = n.type;
      if (mn(l))
        return ys(n, l, r);
    }
    return r;
  }
  function vm(n, r, l, u, c, d, h, E, w) {
    return n = sf(l, u, true, n, c, d, h, E, w), n.context = np(null), l = n.current, u = kr(), c = Un(l), d = $a(u, c), d.callback = r ?? null, Ll(l, d, c), n.current.lanes = c, Ma(n, c, u), Rr(n, u), n;
  }
  function js(n, r, l, u) {
    var c = r.current, d = kr(), h = Un(c);
    return l = np(l), r.context === null ? r.context = l : r.pendingContext = l, r = $a(d, h), r.payload = { element: n }, u = u === void 0 ? null : u, u !== null && (r.callback = u), n = Ll(c, r, h), n !== null && (xr(n, c, h, d), Rc(n, c, h)), h;
  }
  function cf(n) {
    if (n = n.current, !n.child)
      return null;
    switch (n.child.tag) {
      case 5:
        return n.child.stateNode;
      default:
        return n.child.stateNode;
    }
  }
  function mm(n, r) {
    if (n = n.memoizedState, n !== null && n.dehydrated !== null) {
      var l = n.retryLane;
      n.retryLane = l !== 0 && l < r ? l : r;
    }
  }
  function rp(n, r) {
    mm(n, r), (n = n.alternate) && mm(n, r);
  }
  function hm() {
    return null;
  }
  var ip = typeof reportError == "function" ? reportError : function(n) {
    console.error(n);
  };
  function ff(n) {
    this._internalRoot = n;
  }
  Xa.prototype.render = ff.prototype.render = function(n) {
    var r = this._internalRoot;
    if (r === null)
      throw Error(b(409));
    js(n, r, null, null);
  }, Xa.prototype.unmount = ff.prototype.unmount = function() {
    var n = this._internalRoot;
    if (n !== null) {
      this._internalRoot = null;
      var r = n.containerInfo;
      Hl(function() {
        js(null, n, null, null);
      }), r[Pa] = null;
    }
  };
  function Xa(n) {
    this._internalRoot = n;
  }
  Xa.prototype.unstable_scheduleHydration = function(n) {
    if (n) {
      var r = eu();
      n = { blockedOn: null, target: n, priority: r };
      for (var l = 0; l < Gt.length && r !== 0 && r < Gt[l].priority; l++)
        ;
      Gt.splice(l, 0, n), l === 0 && lc(n);
    }
  };
  function ap(n) {
    return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11);
  }
  function df(n) {
    return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11 && (n.nodeType !== 8 || n.nodeValue !== " react-mount-point-unstable "));
  }
  function ym() {
  }
  function Ly(n, r, l, u, c) {
    if (c) {
      if (typeof u == "function") {
        var d = u;
        u = function() {
          var H = cf(h);
          d.call(H);
        };
      }
      var h = vm(r, u, n, 0, null, false, false, "", ym);
      return n._reactRootContainer = h, n[Pa] = h.current, cu(n.nodeType === 8 ? n.parentNode : n), Hl(), h;
    }
    for (; c = n.lastChild; )
      n.removeChild(c);
    if (typeof u == "function") {
      var E = u;
      u = function() {
        var H = cf(w);
        E.call(H);
      };
    }
    var w = sf(n, 0, false, null, null, false, false, "", ym);
    return n._reactRootContainer = w, n[Pa] = w.current, cu(n.nodeType === 8 ? n.parentNode : n), Hl(function() {
      js(r, w, l, u);
    }), w;
  }
  function pf(n, r, l, u, c) {
    var d = l._reactRootContainer;
    if (d) {
      var h = d;
      if (typeof c == "function") {
        var E = c;
        c = function() {
          var w = cf(h);
          E.call(w);
        };
      }
      js(r, h, n, c);
    } else
      h = Ly(l, r, n, c, u);
    return cf(h);
  }
  no = function(n) {
    switch (n.tag) {
      case 3:
        var r = n.stateNode;
        if (r.current.memoizedState.isDehydrated) {
          var l = ta(r.pendingLanes);
          l !== 0 && (ha(r, l | 1), Rr(r, vn()), !(Ct & 6) && (Tu = vn() + 500, ei()));
        }
        break;
      case 13:
        Hl(function() {
          var u = Ia(n, 1);
          if (u !== null) {
            var c = kr();
            xr(u, n, 1, c);
          }
        }), rp(n, 1);
    }
  }, Jo = function(n) {
    if (n.tag === 13) {
      var r = Ia(n, 134217728);
      if (r !== null) {
        var l = kr();
        xr(r, n, 134217728, l);
      }
      rp(n, 134217728);
    }
  }, Mt = function(n) {
    if (n.tag === 13) {
      var r = Un(n), l = Ia(n, r);
      if (l !== null) {
        var u = kr();
        xr(l, n, r, u);
      }
      rp(n, r);
    }
  }, eu = function() {
    return jt;
  }, tu = function(n, r) {
    var l = jt;
    try {
      return jt = n, r();
    } finally {
      jt = l;
    }
  }, Tr = function(n, r, l) {
    switch (r) {
      case "input":
        if (Dn(n, l), r = l.name, l.type === "radio" && r != null) {
          for (l = n; l.parentNode; )
            l = l.parentNode;
          for (l = l.querySelectorAll("input[name=" + JSON.stringify("" + r) + '][type="radio"]'), r = 0; r < l.length; r++) {
            var u = l[r];
            if (u !== n && u.form === n.form) {
              var c = $e(u);
              if (!c)
                throw Error(b(90));
              Ir(u), Dn(u, c);
            }
          }
        }
        break;
      case "textarea":
        pi(n, l);
        break;
      case "select":
        r = l.value, r != null && yr(n, !!l.multiple, r, false);
    }
  }, to = Ou, Qo = Hl;
  var My = { usingClientEntryPoint: false, Events: [hs, fu, $e, wi, ul, Ou] }, Mu = { findFiberByHostInstance: Li, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" }, Ay = { bundleType: Mu.bundleType, version: Mu.version, rendererPackageName: Mu.rendererPackageName, rendererConfig: Mu.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: xe.ReactCurrentDispatcher, findHostInstanceByFiber: function(n) {
    return n = ir(n), n === null ? null : n.stateNode;
  }, findFiberByHostInstance: Mu.findFiberByHostInstance || hm, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
    var vf = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!vf.isDisabled && vf.supportsFiber)
      try {
        dl = vf.inject(Ay), qr = vf;
      } catch {
      }
  }
  return Gi.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = My, Gi.createPortal = function(n, r) {
    var l = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (!ap(r))
      throw Error(b(200));
    return pm(n, r, null, l);
  }, Gi.createRoot = function(n, r) {
    if (!ap(n))
      throw Error(b(299));
    var l = false, u = "", c = ip;
    return r != null && (r.unstable_strictMode === true && (l = true), r.identifierPrefix !== void 0 && (u = r.identifierPrefix), r.onRecoverableError !== void 0 && (c = r.onRecoverableError)), r = sf(n, 1, false, null, null, l, false, u, c), n[Pa] = r.current, cu(n.nodeType === 8 ? n.parentNode : n), new ff(r);
  }, Gi.findDOMNode = function(n) {
    if (n == null)
      return null;
    if (n.nodeType === 1)
      return n;
    var r = n._reactInternals;
    if (r === void 0)
      throw typeof n.render == "function" ? Error(b(188)) : (n = Object.keys(n).join(","), Error(b(268, n)));
    return n = ir(r), n = n === null ? null : n.stateNode, n;
  }, Gi.flushSync = function(n) {
    return Hl(n);
  }, Gi.hydrate = function(n, r, l) {
    if (!df(r))
      throw Error(b(200));
    return pf(null, n, r, true, l);
  }, Gi.hydrateRoot = function(n, r, l) {
    if (!ap(n))
      throw Error(b(405));
    var u = l != null && l.hydratedSources || null, c = false, d = "", h = ip;
    if (l != null && (l.unstable_strictMode === true && (c = true), l.identifierPrefix !== void 0 && (d = l.identifierPrefix), l.onRecoverableError !== void 0 && (h = l.onRecoverableError)), r = vm(r, null, n, 1, l ?? null, c, false, d, h), n[Pa] = r.current, cu(n), u)
      for (n = 0; n < u.length; n++)
        l = u[n], c = l._getVersion, c = c(l._source), r.mutableSourceEagerHydrationData == null ? r.mutableSourceEagerHydrationData = [l, c] : r.mutableSourceEagerHydrationData.push(
          l,
          c
        );
    return new Xa(r);
  }, Gi.render = function(n, r, l) {
    if (!df(r))
      throw Error(b(200));
    return pf(null, n, r, false, l);
  }, Gi.unmountComponentAtNode = function(n) {
    if (!df(n))
      throw Error(b(40));
    return n._reactRootContainer ? (Hl(function() {
      pf(null, null, n, false, function() {
        n._reactRootContainer = null, n[Pa] = null;
      });
    }), true) : false;
  }, Gi.unstable_batchedUpdates = Ou, Gi.unstable_renderSubtreeIntoContainer = function(n, r, l, u) {
    if (!df(l))
      throw Error(b(200));
    if (n == null || n._reactInternals === void 0)
      throw Error(b(38));
    return pf(n, r, l, false, u);
  }, Gi.version = "18.2.0-next-9e3b772b8-20220608", Gi;
}
var qi = {};
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var wC;
function WR() {
  return wC || (wC = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var _ = Zu(), C = IC(), b = _.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, T = false;
    function X(e) {
      T = e;
    }
    function P(e) {
      if (!T) {
        for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++)
          i[a - 1] = arguments[a];
        ge("warn", e, i);
      }
    }
    function g(e) {
      if (!T) {
        for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++)
          i[a - 1] = arguments[a];
        ge("error", e, i);
      }
    }
    function ge(e, t, i) {
      {
        var a = b.ReactDebugCurrentFrame, o = a.getStackAddendum();
        o !== "" && (t += "%s", i = i.concat([o]));
        var s = i.map(function(f) {
          return String(f);
        });
        s.unshift("Warning: " + t), Function.prototype.apply.call(console[e], console, s);
      }
    }
    var J = 0, Q = 1, ve = 2, W = 3, Z = 4, q = 5, fe = 6, ee = 7, ie = 8, Xe = 9, de = 10, oe = 11, xe = 12, be = 13, Te = 14, De = 15, St = 16, xt = 17, Lt = 18, Et = 19, en = 21, Be = 22, rt = 23, Ut = 24, ht = 25, Ne = true, ce = false, je = false, R = false, K = false, Ce = true, it = false, Ze = false, Rt = true, ct = true, bt = true, ft = /* @__PURE__ */ new Set(), It = {}, Br = {};
    function hr(e, t) {
      Ir(e, t), Ir(e + "Capture", t);
    }
    function Ir(e, t) {
      It[e] && g("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", e), It[e] = t;
      {
        var i = e.toLowerCase();
        Br[i] = e, e === "onDoubleClick" && (Br.ondblclick = e);
      }
      for (var a = 0; a < t.length; a++)
        ft.add(t[a]);
    }
    var yn = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", Qn = Object.prototype.hasOwnProperty;
    function Fn(e) {
      {
        var t = typeof Symbol == "function" && Symbol.toStringTag, i = t && e[Symbol.toStringTag] || e.constructor.name || "Object";
        return i;
      }
    }
    function Hn(e) {
      try {
        return Dn(e), false;
      } catch {
        return true;
      }
    }
    function Dn(e) {
      return "" + e;
    }
    function $r(e, t) {
      if (Hn(e))
        return g("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", t, Fn(e)), Dn(e);
    }
    function Yr(e) {
      if (Hn(e))
        return g("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Fn(e)), Dn(e);
    }
    function Gn(e, t) {
      if (Hn(e))
        return g("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", t, Fn(e)), Dn(e);
    }
    function yr(e, t) {
      if (Hn(e))
        return g("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", t, Fn(e)), Dn(e);
    }
    function Wr(e) {
      if (Hn(e))
        return g("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", Fn(e)), Dn(e);
    }
    function gr(e) {
      if (Hn(e))
        return g("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", Fn(e)), Dn(e);
    }
    var pi = 0, rr = 1, Qr = 2, gn = 3, wr = 4, da = 5, vi = 6, pe = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", Fe = pe + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", dt = new RegExp("^[" + pe + "][" + Fe + "]*$"), Pt = {}, $t = {};
    function On(e) {
      return Qn.call($t, e) ? true : Qn.call(Pt, e) ? false : dt.test(e) ? ($t[e] = true, true) : (Pt[e] = true, g("Invalid attribute name: `%s`", e), false);
    }
    function Sn(e, t, i) {
      return t !== null ? t.type === pi : i ? false : e.length > 2 && (e[0] === "o" || e[0] === "O") && (e[1] === "n" || e[1] === "N");
    }
    function Sr(e, t, i, a) {
      if (i !== null && i.type === pi)
        return false;
      switch (typeof t) {
        case "function":
        case "symbol":
          return true;
        case "boolean": {
          if (a)
            return false;
          if (i !== null)
            return !i.acceptsBooleans;
          var o = e.toLowerCase().slice(0, 5);
          return o !== "data-" && o !== "aria-";
        }
        default:
          return false;
      }
    }
    function Zt(e, t, i, a) {
      if (t === null || typeof t > "u" || Sr(e, t, i, a))
        return true;
      if (a)
        return false;
      if (i !== null)
        switch (i.type) {
          case gn:
            return !t;
          case wr:
            return t === false;
          case da:
            return isNaN(t);
          case vi:
            return isNaN(t) || t < 1;
        }
      return false;
    }
    function Tr(e) {
      return Wt.hasOwnProperty(e) ? Wt[e] : null;
    }
    function Yt(e, t, i, a, o, s, f) {
      this.acceptsBooleans = t === Qr || t === gn || t === wr, this.attributeName = a, this.attributeNamespace = o, this.mustUseProperty = i, this.propertyName = e, this.type = t, this.sanitizeURL = s, this.removeEmptyString = f;
    }
    var Wt = {}, Zi = [
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    Zi.forEach(function(e) {
      Wt[e] = new Yt(
        e,
        pi,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(e) {
      var t = e[0], i = e[1];
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        Qr,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        Qr,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        gn,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        gn,
        true,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        wr,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        vi,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), ["rowSpan", "start"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        da,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var wi = /[\-\:]([a-z])/g, ul = function(e) {
      return e[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      var t = e.replace(wi, ul);
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        e,
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      var t = e.replace(wi, ul);
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        e,
        "http://www.w3.org/1999/xlink",
        false,
        // sanitizeURL
        false
      );
    }), [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      var t = e.replace(wi, ul);
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        e,
        "http://www.w3.org/XML/1998/namespace",
        false,
        // sanitizeURL
        false
      );
    }), ["tabIndex", "crossOrigin"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        rr,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var to = "xlinkHref";
    Wt[to] = new Yt(
      "xlinkHref",
      rr,
      false,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      true,
      // sanitizeURL
      false
    ), ["src", "href", "action", "formAction"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        rr,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        true,
        // sanitizeURL
        true
      );
    });
    var Qo = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, La = false;
    function sl(e) {
      !La && Qo.test(e) && (La = true, g("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(e)));
    }
    function mi(e, t, i, a) {
      if (a.mustUseProperty) {
        var o = a.propertyName;
        return e[o];
      } else {
        $r(i, t), a.sanitizeURL && sl("" + i);
        var s = a.attributeName, f = null;
        if (a.type === wr) {
          if (e.hasAttribute(s)) {
            var p = e.getAttribute(s);
            return p === "" ? true : Zt(t, i, a, false) ? p : p === "" + i ? i : p;
          }
        } else if (e.hasAttribute(s)) {
          if (Zt(t, i, a, false))
            return e.getAttribute(s);
          if (a.type === gn)
            return i;
          f = e.getAttribute(s);
        }
        return Zt(t, i, a, false) ? f === null ? i : f : f === "" + i ? i : f;
      }
    }
    function pa(e, t, i, a) {
      {
        if (!On(t))
          return;
        if (!e.hasAttribute(t))
          return i === void 0 ? void 0 : null;
        var o = e.getAttribute(t);
        return $r(i, t), o === "" + i ? i : o;
      }
    }
    function Ti(e, t, i, a) {
      var o = Tr(t);
      if (!Sn(t, o, a)) {
        if (Zt(t, i, o, a) && (i = null), a || o === null) {
          if (On(t)) {
            var s = t;
            i === null ? e.removeAttribute(s) : ($r(i, t), e.setAttribute(s, "" + i));
          }
          return;
        }
        var f = o.mustUseProperty;
        if (f) {
          var p = o.propertyName;
          if (i === null) {
            var v = o.type;
            e[p] = v === gn ? false : "";
          } else
            e[p] = i;
          return;
        }
        var y = o.attributeName, S = o.attributeNamespace;
        if (i === null)
          e.removeAttribute(y);
        else {
          var O = o.type, N;
          O === gn || O === wr && i === true ? N = "" : ($r(i, y), N = "" + i, o.sanitizeURL && sl(N.toString())), S ? e.setAttributeNS(S, y, N) : e.setAttribute(y, N);
        }
      }
    }
    var va = Symbol.for("react.element"), x = Symbol.for("react.portal"), te = Symbol.for("react.fragment"), me = Symbol.for("react.strict_mode"), Ie = Symbol.for("react.profiler"), yt = Symbol.for("react.provider"), zt = Symbol.for("react.context"), He = Symbol.for("react.forward_ref"), Je = Symbol.for("react.suspense"), bn = Symbol.for("react.suspense_list"), Qt = Symbol.for("react.memo"), gt = Symbol.for("react.lazy"), ir = Symbol.for("react.scope"), Ji = Symbol.for("react.debug_trace_mode"), cl = Symbol.for("react.offscreen"), Gr = Symbol.for("react.legacy_hidden"), Wf = Symbol.for("react.cache"), Qf = Symbol.for("react.tracing_marker"), vn = Symbol.iterator, Gf = "@@iterator";
    function ea(e) {
      if (e === null || typeof e != "object")
        return null;
      var t = vn && e[vn] || e[Gf];
      return typeof t == "function" ? t : null;
    }
    var pt = Object.assign, ma = 0, fl, Go, dl, qr, Ju, Nr, es;
    function ts() {
    }
    ts.__reactDisabledLog = true;
    function ic() {
      {
        if (ma === 0) {
          fl = console.log, Go = console.info, dl = console.warn, qr = console.error, Ju = console.group, Nr = console.groupCollapsed, es = console.groupEnd;
          var e = {
            configurable: true,
            enumerable: true,
            value: ts,
            writable: true
          };
          Object.defineProperties(console, {
            info: e,
            log: e,
            warn: e,
            error: e,
            group: e,
            groupCollapsed: e,
            groupEnd: e
          });
        }
        ma++;
      }
    }
    function qo() {
      {
        if (ma--, ma === 0) {
          var e = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: pt({}, e, {
              value: fl
            }),
            info: pt({}, e, {
              value: Go
            }),
            warn: pt({}, e, {
              value: dl
            }),
            error: pt({}, e, {
              value: qr
            }),
            group: pt({}, e, {
              value: Ju
            }),
            groupCollapsed: pt({}, e, {
              value: Nr
            }),
            groupEnd: pt({}, e, {
              value: es
            })
          });
        }
        ma < 0 && g("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var pl = b.ReactCurrentDispatcher, ta;
    function Dr(e, t, i) {
      {
        if (ta === void 0)
          try {
            throw Error();
          } catch (o) {
            var a = o.stack.trim().match(/\n( *(at )?)/);
            ta = a && a[1] || "";
          }
        return `
` + ta + e;
      }
    }
    var vl = false, ml;
    {
      var hl = typeof WeakMap == "function" ? WeakMap : Map;
      ml = new hl();
    }
    function Xo(e, t) {
      if (!e || vl)
        return "";
      {
        var i = ml.get(e);
        if (i !== void 0)
          return i;
      }
      var a;
      vl = true;
      var o = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var s;
      s = pl.current, pl.current = null, ic();
      try {
        if (t) {
          var f = function() {
            throw Error();
          };
          if (Object.defineProperty(f.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(f, []);
            } catch (F) {
              a = F;
            }
            Reflect.construct(e, [], f);
          } else {
            try {
              f.call();
            } catch (F) {
              a = F;
            }
            e.call(f.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (F) {
            a = F;
          }
          e();
        }
      } catch (F) {
        if (F && a && typeof F.stack == "string") {
          for (var p = F.stack.split(`
`), v = a.stack.split(`
`), y = p.length - 1, S = v.length - 1; y >= 1 && S >= 0 && p[y] !== v[S]; )
            S--;
          for (; y >= 1 && S >= 0; y--, S--)
            if (p[y] !== v[S]) {
              if (y !== 1 || S !== 1)
                do
                  if (y--, S--, S < 0 || p[y] !== v[S]) {
                    var O = `
` + p[y].replace(" at new ", " at ");
                    return e.displayName && O.includes("<anonymous>") && (O = O.replace("<anonymous>", e.displayName)), typeof e == "function" && ml.set(e, O), O;
                  }
                while (y >= 1 && S >= 0);
              break;
            }
        }
      } finally {
        vl = false, pl.current = s, qo(), Error.prepareStackTrace = o;
      }
      var N = e ? e.displayName || e.name : "", U = N ? Dr(N) : "";
      return typeof e == "function" && ml.set(e, U), U;
    }
    function Ko(e, t, i) {
      return Xo(e, true);
    }
    function Ma(e, t, i) {
      return Xo(e, false);
    }
    function qf(e) {
      var t = e.prototype;
      return !!(t && t.isReactComponent);
    }
    function ha(e, t, i) {
      if (e == null)
        return "";
      if (typeof e == "function")
        return Xo(e, qf(e));
      if (typeof e == "string")
        return Dr(e);
      switch (e) {
        case Je:
          return Dr("Suspense");
        case bn:
          return Dr("SuspenseList");
      }
      if (typeof e == "object")
        switch (e.$$typeof) {
          case He:
            return Ma(e.render);
          case Qt:
            return ha(e.type, t, i);
          case gt: {
            var a = e, o = a._payload, s = a._init;
            try {
              return ha(s(o), t, i);
            } catch {
            }
          }
        }
      return "";
    }
    function jt(e) {
      switch (e._debugOwner && e._debugOwner.type, e._debugSource, e.tag) {
        case q:
          return Dr(e.type);
        case St:
          return Dr("Lazy");
        case be:
          return Dr("Suspense");
        case Et:
          return Dr("SuspenseList");
        case J:
        case ve:
        case De:
          return Ma(e.type);
        case oe:
          return Ma(e.type.render);
        case Q:
          return Ko(e.type);
        default:
          return "";
      }
    }
    function Zo(e) {
      try {
        var t = "", i = e;
        do
          t += jt(i), i = i.return;
        while (i);
        return t;
      } catch (a) {
        return `
Error generating stack: ` + a.message + `
` + a.stack;
      }
    }
    function no(e, t, i) {
      var a = e.displayName;
      if (a)
        return a;
      var o = t.displayName || t.name || "";
      return o !== "" ? i + "(" + o + ")" : i;
    }
    function Jo(e) {
      return e.displayName || "Context";
    }
    function Mt(e) {
      if (e == null)
        return null;
      if (typeof e.tag == "number" && g("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof e == "function")
        return e.displayName || e.name || null;
      if (typeof e == "string")
        return e;
      switch (e) {
        case te:
          return "Fragment";
        case x:
          return "Portal";
        case Ie:
          return "Profiler";
        case me:
          return "StrictMode";
        case Je:
          return "Suspense";
        case bn:
          return "SuspenseList";
      }
      if (typeof e == "object")
        switch (e.$$typeof) {
          case zt:
            var t = e;
            return Jo(t) + ".Consumer";
          case yt:
            var i = e;
            return Jo(i._context) + ".Provider";
          case He:
            return no(e, e.render, "ForwardRef");
          case Qt:
            var a = e.displayName || null;
            return a !== null ? a : Mt(e.type) || "Memo";
          case gt: {
            var o = e, s = o._payload, f = o._init;
            try {
              return Mt(f(s));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function eu(e, t, i) {
      var a = t.displayName || t.name || "";
      return e.displayName || (a !== "" ? i + "(" + a + ")" : i);
    }
    function tu(e) {
      return e.displayName || "Context";
    }
    function at(e) {
      var t = e.tag, i = e.type;
      switch (t) {
        case Ut:
          return "Cache";
        case Xe:
          var a = i;
          return tu(a) + ".Consumer";
        case de:
          var o = i;
          return tu(o._context) + ".Provider";
        case Lt:
          return "DehydratedFragment";
        case oe:
          return eu(i, i.render, "ForwardRef");
        case ee:
          return "Fragment";
        case q:
          return i;
        case Z:
          return "Portal";
        case W:
          return "Root";
        case fe:
          return "Text";
        case St:
          return Mt(i);
        case ie:
          return i === me ? "StrictMode" : "Mode";
        case Be:
          return "Offscreen";
        case xe:
          return "Profiler";
        case en:
          return "Scope";
        case be:
          return "Suspense";
        case Et:
          return "SuspenseList";
        case ht:
          return "TracingMarker";
        case Q:
        case J:
        case xt:
        case ve:
        case Te:
        case De:
          if (typeof i == "function")
            return i.displayName || i.name || null;
          if (typeof i == "string")
            return i;
          break;
      }
      return null;
    }
    var ro = b.ReactDebugCurrentFrame, Cn = null, Xr = false;
    function Or() {
      {
        if (Cn === null)
          return null;
        var e = Cn._debugOwner;
        if (e !== null && typeof e < "u")
          return at(e);
      }
      return null;
    }
    function yl() {
      return Cn === null ? "" : Zo(Cn);
    }
    function Rn() {
      ro.getCurrentStack = null, Cn = null, Xr = false;
    }
    function Gt(e) {
      ro.getCurrentStack = e === null ? null : yl, Cn = e, Xr = false;
    }
    function ac() {
      return Cn;
    }
    function Kr(e) {
      Xr = e;
    }
    function qn(e) {
      return "" + e;
    }
    function ya(e) {
      switch (typeof e) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return e;
        case "object":
          return gr(e), e;
        default:
          return "";
      }
    }
    var lc = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function Aa(e, t) {
      lc[t.type] || t.onChange || t.onInput || t.readOnly || t.disabled || t.value == null || g("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), t.onChange || t.readOnly || t.disabled || t.checked == null || g("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function gl(e) {
      var t = e.type, i = e.nodeName;
      return i && i.toLowerCase() === "input" && (t === "checkbox" || t === "radio");
    }
    function oc(e) {
      return e._valueTracker;
    }
    function Ni(e) {
      e._valueTracker = null;
    }
    function Sl(e) {
      var t = "";
      return e && (gl(e) ? t = e.checked ? "true" : "false" : t = e.value), t;
    }
    function bl(e) {
      var t = gl(e) ? "checked" : "value", i = Object.getOwnPropertyDescriptor(e.constructor.prototype, t);
      gr(e[t]);
      var a = "" + e[t];
      if (!(e.hasOwnProperty(t) || typeof i > "u" || typeof i.get != "function" || typeof i.set != "function")) {
        var o = i.get, s = i.set;
        Object.defineProperty(e, t, {
          configurable: true,
          get: function() {
            return o.call(this);
          },
          set: function(p) {
            gr(p), a = "" + p, s.call(this, p);
          }
        }), Object.defineProperty(e, t, {
          enumerable: i.enumerable
        });
        var f = {
          getValue: function() {
            return a;
          },
          setValue: function(p) {
            gr(p), a = "" + p;
          },
          stopTracking: function() {
            Ni(e), delete e[t];
          }
        };
        return f;
      }
    }
    function Di(e) {
      oc(e) || (e._valueTracker = bl(e));
    }
    function nu(e) {
      if (!e)
        return false;
      var t = oc(e);
      if (!t)
        return true;
      var i = t.getValue(), a = Sl(e);
      return a !== i ? (t.setValue(a), true) : false;
    }
    function Cl(e) {
      if (e = e || (typeof document < "u" ? document : void 0), typeof e > "u")
        return null;
      try {
        return e.activeElement || e.body;
      } catch {
        return e.body;
      }
    }
    var _l = false, io = false, ru = false, ns = false;
    function na(e) {
      var t = e.type === "checkbox" || e.type === "radio";
      return t ? e.checked != null : e.value != null;
    }
    function m(e, t) {
      var i = e, a = t.checked, o = pt({}, t, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: a ?? i._wrapperState.initialChecked
      });
      return o;
    }
    function k(e, t) {
      Aa("input", t), t.checked !== void 0 && t.defaultChecked !== void 0 && !io && (g("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", Or() || "A component", t.type), io = true), t.value !== void 0 && t.defaultValue !== void 0 && !_l && (g("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", Or() || "A component", t.type), _l = true);
      var i = e, a = t.defaultValue == null ? "" : t.defaultValue;
      i._wrapperState = {
        initialChecked: t.checked != null ? t.checked : t.defaultChecked,
        initialValue: ya(t.value != null ? t.value : a),
        controlled: na(t)
      };
    }
    function j(e, t) {
      var i = e, a = t.checked;
      a != null && Ti(i, "checked", a, false);
    }
    function B(e, t) {
      var i = e;
      {
        var a = na(t);
        !i._wrapperState.controlled && a && !ns && (g("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), ns = true), i._wrapperState.controlled && !a && !ru && (g("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), ru = true);
      }
      j(e, t);
      var o = ya(t.value), s = t.type;
      if (o != null)
        s === "number" ? (o === 0 && i.value === "" || // We explicitly want to coerce to number here if possible.
        // eslint-disable-next-line
        i.value != o) && (i.value = qn(o)) : i.value !== qn(o) && (i.value = qn(o));
      else if (s === "submit" || s === "reset") {
        i.removeAttribute("value");
        return;
      }
      t.hasOwnProperty("value") ? We(i, t.type, o) : t.hasOwnProperty("defaultValue") && We(i, t.type, ya(t.defaultValue)), t.checked == null && t.defaultChecked != null && (i.defaultChecked = !!t.defaultChecked);
    }
    function ue(e, t, i) {
      var a = e;
      if (t.hasOwnProperty("value") || t.hasOwnProperty("defaultValue")) {
        var o = t.type, s = o === "submit" || o === "reset";
        if (s && (t.value === void 0 || t.value === null))
          return;
        var f = qn(a._wrapperState.initialValue);
        i || f !== a.value && (a.value = f), a.defaultValue = f;
      }
      var p = a.name;
      p !== "" && (a.name = ""), a.defaultChecked = !a.defaultChecked, a.defaultChecked = !!a._wrapperState.initialChecked, p !== "" && (a.name = p);
    }
    function Ge(e, t) {
      var i = e;
      B(i, t), Se(i, t);
    }
    function Se(e, t) {
      var i = t.name;
      if (t.type === "radio" && i != null) {
        for (var a = e; a.parentNode; )
          a = a.parentNode;
        $r(i, "name");
        for (var o = a.querySelectorAll("input[name=" + JSON.stringify("" + i) + '][type="radio"]'), s = 0; s < o.length; s++) {
          var f = o[s];
          if (!(f === e || f.form !== e.form)) {
            var p = Am(f);
            if (!p)
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            nu(f), B(f, p);
          }
        }
      }
    }
    function We(e, t, i) {
      (t !== "number" || Cl(e.ownerDocument) !== e) && (i == null ? e.defaultValue = qn(e._wrapperState.initialValue) : e.defaultValue !== qn(i) && (e.defaultValue = qn(i)));
    }
    var vt = false, At = false, rn = false;
    function Jt(e, t) {
      t.value == null && (typeof t.children == "object" && t.children !== null ? _.Children.forEach(t.children, function(i) {
        i != null && (typeof i == "string" || typeof i == "number" || At || (At = true, g("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
      }) : t.dangerouslySetInnerHTML != null && (rn || (rn = true, g("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), t.selected != null && !vt && (g("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), vt = true);
    }
    function an(e, t) {
      t.value != null && e.setAttribute("value", qn(ya(t.value)));
    }
    var un = Array.isArray;
    function kt(e) {
      return un(e);
    }
    var za;
    za = false;
    function iu() {
      var e = Or();
      return e ? `

Check the render method of \`` + e + "`." : "";
    }
    var rs = ["value", "defaultValue"];
    function Xf(e) {
      {
        Aa("select", e);
        for (var t = 0; t < rs.length; t++) {
          var i = rs[t];
          if (e[i] != null) {
            var a = kt(e[i]);
            e.multiple && !a ? g("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", i, iu()) : !e.multiple && a && g("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", i, iu());
          }
        }
      }
    }
    function ra(e, t, i, a) {
      var o = e.options;
      if (t) {
        for (var s = i, f = {}, p = 0; p < s.length; p++)
          f["$" + s[p]] = true;
        for (var v = 0; v < o.length; v++) {
          var y = f.hasOwnProperty("$" + o[v].value);
          o[v].selected !== y && (o[v].selected = y), y && a && (o[v].defaultSelected = true);
        }
      } else {
        for (var S = qn(ya(i)), O = null, N = 0; N < o.length; N++) {
          if (o[N].value === S) {
            o[N].selected = true, a && (o[N].defaultSelected = true);
            return;
          }
          O === null && !o[N].disabled && (O = o[N]);
        }
        O !== null && (O.selected = true);
      }
    }
    function is(e, t) {
      return pt({}, t, {
        value: void 0
      });
    }
    function as(e, t) {
      var i = e;
      Xf(t), i._wrapperState = {
        wasMultiple: !!t.multiple
      }, t.value !== void 0 && t.defaultValue !== void 0 && !za && (g("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), za = true);
    }
    function Kf(e, t) {
      var i = e;
      i.multiple = !!t.multiple;
      var a = t.value;
      a != null ? ra(i, !!t.multiple, a, false) : t.defaultValue != null && ra(i, !!t.multiple, t.defaultValue, true);
    }
    function ty(e, t) {
      var i = e, a = i._wrapperState.wasMultiple;
      i._wrapperState.wasMultiple = !!t.multiple;
      var o = t.value;
      o != null ? ra(i, !!t.multiple, o, false) : a !== !!t.multiple && (t.defaultValue != null ? ra(i, !!t.multiple, t.defaultValue, true) : ra(i, !!t.multiple, t.multiple ? [] : "", false));
    }
    function ny(e, t) {
      var i = e, a = t.value;
      a != null && ra(i, !!t.multiple, a, false);
    }
    var Zf = false;
    function Jf(e, t) {
      var i = e;
      if (t.dangerouslySetInnerHTML != null)
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      var a = pt({}, t, {
        value: void 0,
        defaultValue: void 0,
        children: qn(i._wrapperState.initialValue)
      });
      return a;
    }
    function sv(e, t) {
      var i = e;
      Aa("textarea", t), t.value !== void 0 && t.defaultValue !== void 0 && !Zf && (g("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", Or() || "A component"), Zf = true);
      var a = t.value;
      if (a == null) {
        var o = t.children, s = t.defaultValue;
        if (o != null) {
          g("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          {
            if (s != null)
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (kt(o)) {
              if (o.length > 1)
                throw new Error("<textarea> can only have at most one child.");
              o = o[0];
            }
            s = o;
          }
        }
        s == null && (s = ""), a = s;
      }
      i._wrapperState = {
        initialValue: ya(a)
      };
    }
    function cv(e, t) {
      var i = e, a = ya(t.value), o = ya(t.defaultValue);
      if (a != null) {
        var s = qn(a);
        s !== i.value && (i.value = s), t.defaultValue == null && i.defaultValue !== s && (i.defaultValue = s);
      }
      o != null && (i.defaultValue = qn(o));
    }
    function fv(e, t) {
      var i = e, a = i.textContent;
      a === i._wrapperState.initialValue && a !== "" && a !== null && (i.value = a);
    }
    function ed(e, t) {
      cv(e, t);
    }
    var Va = "http://www.w3.org/1999/xhtml", ry = "http://www.w3.org/1998/Math/MathML", td = "http://www.w3.org/2000/svg";
    function uc(e) {
      switch (e) {
        case "svg":
          return td;
        case "math":
          return ry;
        default:
          return Va;
      }
    }
    function nd(e, t) {
      return e == null || e === Va ? uc(t) : e === td && t === "foreignObject" ? Va : e;
    }
    var iy = function(e) {
      return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(t, i, a, o) {
        MSApp.execUnsafeLocalFunction(function() {
          return e(t, i, a, o);
        });
      } : e;
    }, sc, dv = iy(function(e, t) {
      if (e.namespaceURI === td && !("innerHTML" in e)) {
        sc = sc || document.createElement("div"), sc.innerHTML = "<svg>" + t.valueOf().toString() + "</svg>";
        for (var i = sc.firstChild; e.firstChild; )
          e.removeChild(e.firstChild);
        for (; i.firstChild; )
          e.appendChild(i.firstChild);
        return;
      }
      e.innerHTML = t;
    }), Zr = 1, Ua = 3, zn = 8, ia = 9, ao = 11, cc = function(e, t) {
      if (t) {
        var i = e.firstChild;
        if (i && i === e.lastChild && i.nodeType === Ua) {
          i.nodeValue = t;
          return;
        }
      }
      e.textContent = t;
    }, pv = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    }, au = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function vv(e, t) {
      return e + t.charAt(0).toUpperCase() + t.substring(1);
    }
    var mv = ["Webkit", "ms", "Moz", "O"];
    Object.keys(au).forEach(function(e) {
      mv.forEach(function(t) {
        au[vv(t, e)] = au[e];
      });
    });
    function fc(e, t, i) {
      var a = t == null || typeof t == "boolean" || t === "";
      return a ? "" : !i && typeof t == "number" && t !== 0 && !(au.hasOwnProperty(e) && au[e]) ? t + "px" : (yr(t, e), ("" + t).trim());
    }
    var lu = /([A-Z])/g, ay = /^ms-/;
    function ly(e) {
      return e.replace(lu, "-$1").toLowerCase().replace(ay, "-ms-");
    }
    var hv = function() {
    };
    {
      var yv = /^(?:webkit|moz|o)[A-Z]/, gv = /^-ms-/, ls = /-(.)/g, ou = /;\s*$/, uu = {}, su = {}, Sv = false, rd = false, id = function(e) {
        return e.replace(ls, function(t, i) {
          return i.toUpperCase();
        });
      }, ad = function(e) {
        uu.hasOwnProperty(e) && uu[e] || (uu[e] = true, g(
          "Unsupported style property %s. Did you mean %s?",
          e,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
          id(e.replace(gv, "ms-"))
        ));
      }, bv = function(e) {
        uu.hasOwnProperty(e) && uu[e] || (uu[e] = true, g("Unsupported vendor-prefixed style property %s. Did you mean %s?", e, e.charAt(0).toUpperCase() + e.slice(1)));
      }, Cv = function(e, t) {
        su.hasOwnProperty(t) && su[t] || (su[t] = true, g(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, e, t.replace(ou, "")));
      }, _v = function(e, t) {
        Sv || (Sv = true, g("`NaN` is an invalid value for the `%s` css style property.", e));
      }, oy = function(e, t) {
        rd || (rd = true, g("`Infinity` is an invalid value for the `%s` css style property.", e));
      };
      hv = function(e, t) {
        e.indexOf("-") > -1 ? ad(e) : yv.test(e) ? bv(e) : ou.test(t) && Cv(e, t), typeof t == "number" && (isNaN(t) ? _v(e, t) : isFinite(t) || oy(e, t));
      };
    }
    var uy = hv;
    function sy(e) {
      {
        var t = "", i = "";
        for (var a in e)
          if (e.hasOwnProperty(a)) {
            var o = e[a];
            if (o != null) {
              var s = a.indexOf("--") === 0;
              t += i + (s ? a : ly(a)) + ":", t += fc(a, o, s), i = ";";
            }
          }
        return t || null;
      }
    }
    function Ev(e, t) {
      var i = e.style;
      for (var a in t)
        if (t.hasOwnProperty(a)) {
          var o = a.indexOf("--") === 0;
          o || uy(a, t[a]);
          var s = fc(a, t[a], o);
          a === "float" && (a = "cssFloat"), o ? i.setProperty(a, s) : i[a] = s;
        }
    }
    function cy(e) {
      return e == null || typeof e == "boolean" || e === "";
    }
    function Oi(e) {
      var t = {};
      for (var i in e)
        for (var a = pv[i] || [i], o = 0; o < a.length; o++)
          t[a[o]] = i;
      return t;
    }
    function os(e, t) {
      {
        if (!t)
          return;
        var i = Oi(e), a = Oi(t), o = {};
        for (var s in i) {
          var f = i[s], p = a[s];
          if (p && f !== p) {
            var v = f + "," + p;
            if (o[v])
              continue;
            o[v] = true, g("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", cy(e[f]) ? "Removing" : "Updating", f, p);
          }
        }
      }
    }
    var kv = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    }, xv = pt({
      menuitem: true
    }, kv), Rv = "__html";
    function dc(e, t) {
      if (t) {
        if (xv[e] && (t.children != null || t.dangerouslySetInnerHTML != null))
          throw new Error(e + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        if (t.dangerouslySetInnerHTML != null) {
          if (t.children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof t.dangerouslySetInnerHTML != "object" || !(Rv in t.dangerouslySetInnerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!t.suppressContentEditableWarning && t.contentEditable && t.children != null && g("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), t.style != null && typeof t.style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function ja(e, t) {
      if (e.indexOf("-") === -1)
        return typeof t.is == "string";
      switch (e) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var pc = {
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    }, wv = {
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    }, aa = {}, ld = new RegExp("^(aria)-[" + Fe + "]*$"), us = new RegExp("^(aria)[A-Z][" + Fe + "]*$");
    function od(e, t) {
      {
        if (Qn.call(aa, t) && aa[t])
          return true;
        if (us.test(t)) {
          var i = "aria-" + t.slice(4).toLowerCase(), a = wv.hasOwnProperty(i) ? i : null;
          if (a == null)
            return g("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", t), aa[t] = true, true;
          if (t !== a)
            return g("Invalid ARIA attribute `%s`. Did you mean `%s`?", t, a), aa[t] = true, true;
        }
        if (ld.test(t)) {
          var o = t.toLowerCase(), s = wv.hasOwnProperty(o) ? o : null;
          if (s == null)
            return aa[t] = true, false;
          if (t !== s)
            return g("Unknown ARIA attribute `%s`. Did you mean `%s`?", t, s), aa[t] = true, true;
        }
      }
      return true;
    }
    function Tv(e, t) {
      {
        var i = [];
        for (var a in t) {
          var o = od(e, a);
          o || i.push(a);
        }
        var s = i.map(function(f) {
          return "`" + f + "`";
        }).join(", ");
        i.length === 1 ? g("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", s, e) : i.length > 1 && g("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", s, e);
      }
    }
    function vc(e, t) {
      ja(e, t) || Tv(e, t);
    }
    var lo = false;
    function ud(e, t) {
      {
        if (e !== "input" && e !== "textarea" && e !== "select")
          return;
        t != null && t.value === null && !lo && (lo = true, e === "select" && t.multiple ? g("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", e) : g("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", e));
      }
    }
    var sd = function() {
    };
    {
      var Xn = {}, cd = /^on./, Nv = /^on[^A-Z]/, Dv = new RegExp("^(aria)-[" + Fe + "]*$"), Ov = new RegExp("^(aria)[A-Z][" + Fe + "]*$");
      sd = function(e, t, i, a) {
        if (Qn.call(Xn, t) && Xn[t])
          return true;
        var o = t.toLowerCase();
        if (o === "onfocusin" || o === "onfocusout")
          return g("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), Xn[t] = true, true;
        if (a != null) {
          var s = a.registrationNameDependencies, f = a.possibleRegistrationNames;
          if (s.hasOwnProperty(t))
            return true;
          var p = f.hasOwnProperty(o) ? f[o] : null;
          if (p != null)
            return g("Invalid event handler property `%s`. Did you mean `%s`?", t, p), Xn[t] = true, true;
          if (cd.test(t))
            return g("Unknown event handler property `%s`. It will be ignored.", t), Xn[t] = true, true;
        } else if (cd.test(t))
          return Nv.test(t) && g("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", t), Xn[t] = true, true;
        if (Dv.test(t) || Ov.test(t))
          return true;
        if (o === "innerhtml")
          return g("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), Xn[t] = true, true;
        if (o === "aria")
          return g("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), Xn[t] = true, true;
        if (o === "is" && i !== null && i !== void 0 && typeof i != "string")
          return g("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof i), Xn[t] = true, true;
        if (typeof i == "number" && isNaN(i))
          return g("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", t), Xn[t] = true, true;
        var v = Tr(t), y = v !== null && v.type === pi;
        if (pc.hasOwnProperty(o)) {
          var S = pc[o];
          if (S !== t)
            return g("Invalid DOM property `%s`. Did you mean `%s`?", t, S), Xn[t] = true, true;
        } else if (!y && t !== o)
          return g("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", t, o), Xn[t] = true, true;
        return typeof i == "boolean" && Sr(t, i, v, false) ? (i ? g('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', i, t, t, i, t) : g('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', i, t, t, i, t, t, t), Xn[t] = true, true) : y ? true : Sr(t, i, v, false) ? (Xn[t] = true, false) : ((i === "false" || i === "true") && v !== null && v.type === gn && (g("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", i, t, i === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', t, i), Xn[t] = true), true);
      };
    }
    var Lv = function(e, t, i) {
      {
        var a = [];
        for (var o in t) {
          var s = sd(e, o, t[o], i);
          s || a.push(o);
        }
        var f = a.map(function(p) {
          return "`" + p + "`";
        }).join(", ");
        a.length === 1 ? g("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", f, e) : a.length > 1 && g("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", f, e);
      }
    };
    function Mv(e, t, i) {
      ja(e, t) || Lv(e, t, i);
    }
    var Fa = 1, ss = 2, oo = 4, fy = Fa | ss | oo, cs = null;
    function fs(e) {
      cs !== null && g("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), cs = e;
    }
    function dy() {
      cs === null && g("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), cs = null;
    }
    function Av(e) {
      return e === cs;
    }
    function mc(e) {
      var t = e.target || e.srcElement || window;
      return t.correspondingUseElement && (t = t.correspondingUseElement), t.nodeType === Ua ? t.parentNode : t;
    }
    var ln = null, El = null, Ha = null;
    function cu(e) {
      var t = Vu(e);
      if (t) {
        if (typeof ln != "function")
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var i = t.stateNode;
        if (i) {
          var a = Am(i);
          ln(t.stateNode, t.type, a);
        }
      }
    }
    function zv(e) {
      ln = e;
    }
    function hc(e) {
      El ? Ha ? Ha.push(e) : Ha = [e] : El = e;
    }
    function ds() {
      return El !== null || Ha !== null;
    }
    function ps() {
      if (El) {
        var e = El, t = Ha;
        if (El = null, Ha = null, cu(e), t)
          for (var i = 0; i < t.length; i++)
            cu(t[i]);
      }
    }
    var uo = function(e, t) {
      return e(t);
    }, fd = function() {
    }, dd = false;
    function py() {
      var e = ds();
      e && (fd(), ps());
    }
    function pd(e, t, i) {
      if (dd)
        return e(t, i);
      dd = true;
      try {
        return uo(e, t, i);
      } finally {
        dd = false, py();
      }
    }
    function yc(e, t, i) {
      uo = e, fd = i;
    }
    function gc(e) {
      return e === "button" || e === "input" || e === "select" || e === "textarea";
    }
    function vd(e, t, i) {
      switch (e) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(i.disabled && gc(t));
        default:
          return false;
      }
    }
    function so(e, t) {
      var i = e.stateNode;
      if (i === null)
        return null;
      var a = Am(i);
      if (a === null)
        return null;
      var o = a[t];
      if (vd(t, e.type, a))
        return null;
      if (o && typeof o != "function")
        throw new Error("Expected `" + t + "` listener to be a function, instead got a value of `" + typeof o + "` type.");
      return o;
    }
    var vs = false;
    if (yn)
      try {
        var co = {};
        Object.defineProperty(co, "passive", {
          get: function() {
            vs = true;
          }
        }), window.addEventListener("test", co, co), window.removeEventListener("test", co, co);
      } catch {
        vs = false;
      }
    function Vv(e, t, i, a, o, s, f, p, v) {
      var y = Array.prototype.slice.call(arguments, 3);
      try {
        t.apply(i, y);
      } catch (S) {
        this.onError(S);
      }
    }
    var md = Vv;
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
      var hd = document.createElement("react");
      md = function(t, i, a, o, s, f, p, v, y) {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var S = document.createEvent("Event"), O = false, N = true, U = window.event, F = Object.getOwnPropertyDescriptor(window, "event");
        function I() {
          hd.removeEventListener($, Ye, false), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = U);
        }
        var Re = Array.prototype.slice.call(arguments, 3);
        function Ye() {
          O = true, I(), i.apply(a, Re), N = false;
        }
        var Ue, Nt = false, _t = false;
        function A(z) {
          if (Ue = z.error, Nt = true, Ue === null && z.colno === 0 && z.lineno === 0 && (_t = true), z.defaultPrevented && Ue != null && typeof Ue == "object")
            try {
              Ue._suppressLogging = true;
            } catch {
            }
        }
        var $ = "react-" + (t || "invokeguardedcallback");
        if (window.addEventListener("error", A), hd.addEventListener($, Ye, false), S.initEvent($, false, false), hd.dispatchEvent(S), F && Object.defineProperty(window, "event", F), O && N && (Nt ? _t && (Ue = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : Ue = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(Ue)), window.removeEventListener("error", A), !O)
          return I(), Vv.apply(this, arguments);
      };
    }
    var vy = md, kl = false, la = null, ms = false, xl = null, ga = {
      onError: function(e) {
        kl = true, la = e;
      }
    };
    function fo(e, t, i, a, o, s, f, p, v) {
      kl = false, la = null, vy.apply(ga, arguments);
    }
    function Pa(e, t, i, a, o, s, f, p, v) {
      if (fo.apply(this, arguments), kl) {
        var y = gd();
        ms || (ms = true, xl = y);
      }
    }
    function yd() {
      if (ms) {
        var e = xl;
        throw ms = false, xl = null, e;
      }
    }
    function my() {
      return kl;
    }
    function gd() {
      if (kl) {
        var e = la;
        return kl = false, la = null, e;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    function Li(e) {
      return e._reactInternals;
    }
    function hs(e) {
      return e._reactInternals !== void 0;
    }
    function fu(e, t) {
      e._reactInternals = t;
    }
    var $e = (
      /*                      */
      0
    ), Rl = (
      /*                */
      1
    ), sn = (
      /*                    */
      2
    ), ut = (
      /*                       */
      4
    ), Bt = (
      /*                */
      16
    ), qt = (
      /*                 */
      32
    ), Sa = (
      /*                     */
      64
    ), tt = (
      /*                   */
      128
    ), wn = (
      /*            */
      256
    ), Jr = (
      /*                          */
      512
    ), Mi = (
      /*                     */
      1024
    ), mn = (
      /*                      */
      2048
    ), Ai = (
      /*                    */
      4096
    ), wl = (
      /*                   */
      8192
    ), ys = (
      /*             */
      16384
    ), Sc = mn | ut | Sa | Jr | Mi | ys, Uv = (
      /*               */
      32767
    ), hi = (
      /*                   */
      32768
    ), Kn = (
      /*                */
      65536
    ), gs = (
      /* */
      131072
    ), Sd = (
      /*                       */
      1048576
    ), bd = (
      /*                    */
      2097152
    ), ei = (
      /*                 */
      4194304
    ), Tl = (
      /*                */
      8388608
    ), ti = (
      /*               */
      16777216
    ), po = (
      /*              */
      33554432
    ), du = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      ut | Mi | 0
    ), ni = sn | ut | Bt | qt | Jr | Ai | wl, br = ut | Sa | Jr | wl, zi = mn | Bt, ar = ei | Tl | bd, Ba = b.ReactCurrentOwner;
    function yi(e) {
      var t = e, i = e;
      if (e.alternate)
        for (; t.return; )
          t = t.return;
      else {
        var a = t;
        do
          t = a, (t.flags & (sn | Ai)) !== $e && (i = t.return), a = t.return;
        while (a);
      }
      return t.tag === W ? i : null;
    }
    function Cd(e) {
      if (e.tag === be) {
        var t = e.memoizedState;
        if (t === null) {
          var i = e.alternate;
          i !== null && (t = i.memoizedState);
        }
        if (t !== null)
          return t.dehydrated;
      }
      return null;
    }
    function bc(e) {
      return e.tag === W ? e.stateNode.containerInfo : null;
    }
    function _d(e) {
      return yi(e) === e;
    }
    function gi(e) {
      {
        var t = Ba.current;
        if (t !== null && t.tag === Q) {
          var i = t, a = i.stateNode;
          a._warnedAboutRefsInRender || g("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", at(i) || "A component"), a._warnedAboutRefsInRender = true;
        }
      }
      var o = Li(e);
      return o ? yi(o) === o : false;
    }
    function ri(e) {
      if (yi(e) !== e)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function cn(e) {
      var t = e.alternate;
      if (!t) {
        var i = yi(e);
        if (i === null)
          throw new Error("Unable to find node on an unmounted component.");
        return i !== e ? null : e;
      }
      for (var a = e, o = t; ; ) {
        var s = a.return;
        if (s === null)
          break;
        var f = s.alternate;
        if (f === null) {
          var p = s.return;
          if (p !== null) {
            a = o = p;
            continue;
          }
          break;
        }
        if (s.child === f.child) {
          for (var v = s.child; v; ) {
            if (v === a)
              return ri(s), e;
            if (v === o)
              return ri(s), t;
            v = v.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== o.return)
          a = s, o = f;
        else {
          for (var y = false, S = s.child; S; ) {
            if (S === a) {
              y = true, a = s, o = f;
              break;
            }
            if (S === o) {
              y = true, o = s, a = f;
              break;
            }
            S = S.sibling;
          }
          if (!y) {
            for (S = f.child; S; ) {
              if (S === a) {
                y = true, a = f, o = s;
                break;
              }
              if (S === o) {
                y = true, o = f, a = s;
                break;
              }
              S = S.sibling;
            }
            if (!y)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (a.alternate !== o)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (a.tag !== W)
        throw new Error("Unable to find node on an unmounted component.");
      return a.stateNode.current === a ? e : t;
    }
    function Vi(e) {
      var t = cn(e);
      return t !== null ? Ed(t) : null;
    }
    function Ed(e) {
      if (e.tag === q || e.tag === fe)
        return e;
      for (var t = e.child; t !== null; ) {
        var i = Ed(t);
        if (i !== null)
          return i;
        t = t.sibling;
      }
      return null;
    }
    function jv(e) {
      var t = cn(e);
      return t !== null ? Cc(t) : null;
    }
    function Cc(e) {
      if (e.tag === q || e.tag === fe)
        return e;
      for (var t = e.child; t !== null; ) {
        if (t.tag !== Z) {
          var i = Cc(t);
          if (i !== null)
            return i;
        }
        t = t.sibling;
      }
      return null;
    }
    var _c = C.unstable_scheduleCallback, Fv = C.unstable_cancelCallback, Ec = C.unstable_shouldYield, Hv = C.unstable_requestPaint, _n = C.unstable_now, kd = C.unstable_getCurrentPriorityLevel, kc = C.unstable_ImmediatePriority, Si = C.unstable_UserBlockingPriority, ba = C.unstable_NormalPriority, xc = C.unstable_LowPriority, Nl = C.unstable_IdlePriority, xd = C.unstable_yieldValue, Rd = C.unstable_setDisableYieldValue, Dl = null, Zn = null, he = null, Ln = false, lr = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
    function wd(e) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return false;
      var t = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (t.isDisabled)
        return true;
      if (!t.supportsFiber)
        return g("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), true;
      try {
        Rt && (e = pt({}, e, {
          getLaneLabelMap: Ll,
          injectProfilingHooks: $a
        })), Dl = t.inject(e), Zn = t;
      } catch (i) {
        g("React instrumentation encountered an error: %s.", i);
      }
      return !!t.checkDCE;
    }
    function Pv(e, t) {
      if (Zn && typeof Zn.onScheduleFiberRoot == "function")
        try {
          Zn.onScheduleFiberRoot(Dl, e, t);
        } catch (i) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", i));
        }
    }
    function Ia(e, t) {
      if (Zn && typeof Zn.onCommitFiberRoot == "function")
        try {
          var i = (e.current.flags & tt) === tt;
          if (ct) {
            var a;
            switch (t) {
              case Cr:
                a = kc;
                break;
              case or:
                a = Si;
                break;
              case Wa:
                a = ba;
                break;
              case ws:
                a = Nl;
                break;
              default:
                a = ba;
                break;
            }
            Zn.onCommitFiberRoot(Dl, e, a, i);
          }
        } catch (o) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", o));
        }
    }
    function Ol(e) {
      if (Zn && typeof Zn.onPostCommitFiberRoot == "function")
        try {
          Zn.onPostCommitFiberRoot(Dl, e);
        } catch (t) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", t));
        }
    }
    function Td(e) {
      if (Zn && typeof Zn.onCommitFiberUnmount == "function")
        try {
          Zn.onCommitFiberUnmount(Dl, e);
        } catch (t) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", t));
        }
    }
    function Pn(e) {
      if (typeof xd == "function" && (Rd(e), X(e)), Zn && typeof Zn.setStrictMode == "function")
        try {
          Zn.setStrictMode(Dl, e);
        } catch (t) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", t));
        }
    }
    function $a(e) {
      he = e;
    }
    function Ll() {
      {
        for (var e = /* @__PURE__ */ new Map(), t = 1, i = 0; i < fn; i++) {
          var a = hy(t);
          e.set(t, a), t *= 2;
        }
        return e;
      }
    }
    function Rc(e) {
      he !== null && typeof he.markCommitStarted == "function" && he.markCommitStarted(e);
    }
    function Nd() {
      he !== null && typeof he.markCommitStopped == "function" && he.markCommitStopped();
    }
    function Ml(e) {
      he !== null && typeof he.markComponentRenderStarted == "function" && he.markComponentRenderStarted(e);
    }
    function vo() {
      he !== null && typeof he.markComponentRenderStopped == "function" && he.markComponentRenderStopped();
    }
    function Bv(e) {
      he !== null && typeof he.markComponentPassiveEffectMountStarted == "function" && he.markComponentPassiveEffectMountStarted(e);
    }
    function Dd() {
      he !== null && typeof he.markComponentPassiveEffectMountStopped == "function" && he.markComponentPassiveEffectMountStopped();
    }
    function wc(e) {
      he !== null && typeof he.markComponentPassiveEffectUnmountStarted == "function" && he.markComponentPassiveEffectUnmountStarted(e);
    }
    function Iv() {
      he !== null && typeof he.markComponentPassiveEffectUnmountStopped == "function" && he.markComponentPassiveEffectUnmountStopped();
    }
    function $v(e) {
      he !== null && typeof he.markComponentLayoutEffectMountStarted == "function" && he.markComponentLayoutEffectMountStarted(e);
    }
    function Yv() {
      he !== null && typeof he.markComponentLayoutEffectMountStopped == "function" && he.markComponentLayoutEffectMountStopped();
    }
    function Tc(e) {
      he !== null && typeof he.markComponentLayoutEffectUnmountStarted == "function" && he.markComponentLayoutEffectUnmountStarted(e);
    }
    function pu() {
      he !== null && typeof he.markComponentLayoutEffectUnmountStopped == "function" && he.markComponentLayoutEffectUnmountStopped();
    }
    function Nc(e, t, i) {
      he !== null && typeof he.markComponentErrored == "function" && he.markComponentErrored(e, t, i);
    }
    function Wv(e, t, i) {
      he !== null && typeof he.markComponentSuspended == "function" && he.markComponentSuspended(e, t, i);
    }
    function Qv(e) {
      he !== null && typeof he.markLayoutEffectsStarted == "function" && he.markLayoutEffectsStarted(e);
    }
    function vu() {
      he !== null && typeof he.markLayoutEffectsStopped == "function" && he.markLayoutEffectsStopped();
    }
    function Gv(e) {
      he !== null && typeof he.markPassiveEffectsStarted == "function" && he.markPassiveEffectsStarted(e);
    }
    function Ss() {
      he !== null && typeof he.markPassiveEffectsStopped == "function" && he.markPassiveEffectsStopped();
    }
    function oa(e) {
      he !== null && typeof he.markRenderStarted == "function" && he.markRenderStarted(e);
    }
    function bs() {
      he !== null && typeof he.markRenderYielded == "function" && he.markRenderYielded();
    }
    function mu() {
      he !== null && typeof he.markRenderStopped == "function" && he.markRenderStopped();
    }
    function mo(e) {
      he !== null && typeof he.markRenderScheduled == "function" && he.markRenderScheduled(e);
    }
    function Od(e, t) {
      he !== null && typeof he.markForceUpdateScheduled == "function" && he.markForceUpdateScheduled(e, t);
    }
    function Al(e, t) {
      he !== null && typeof he.markStateUpdateScheduled == "function" && he.markStateUpdateScheduled(e, t);
    }
    var Qe = (
      /*                         */
      0
    ), mt = (
      /*                 */
      1
    ), qe = (
      /*                    */
      2
    ), En = (
      /*               */
      8
    ), Ui = (
      /*              */
      16
    ), Dc = Math.clz32 ? Math.clz32 : ho, Oc = Math.log, Ld = Math.LN2;
    function ho(e) {
      var t = e >>> 0;
      return t === 0 ? 32 : 31 - (Oc(t) / Ld | 0) | 0;
    }
    var fn = 31, Y = (
      /*                        */
      0
    ), wt = (
      /*                          */
      0
    ), Ke = (
      /*                        */
      1
    ), Ca = (
      /*    */
      2
    ), bi = (
      /*             */
      4
    ), yo = (
      /*            */
      8
    ), dn = (
      /*                     */
      16
    ), go = (
      /*                */
      32
    ), zl = (
      /*                       */
      4194240
    ), So = (
      /*                        */
      64
    ), ji = (
      /*                        */
      128
    ), ii = (
      /*                        */
      256
    ), bo = (
      /*                        */
      512
    ), Cs = (
      /*                        */
      1024
    ), _s = (
      /*                        */
      2048
    ), Lc = (
      /*                        */
      4096
    ), Mc = (
      /*                        */
      8192
    ), Ac = (
      /*                        */
      16384
    ), zc = (
      /*                       */
      32768
    ), Vc = (
      /*                       */
      65536
    ), Uc = (
      /*                       */
      131072
    ), jc = (
      /*                       */
      262144
    ), Fc = (
      /*                       */
      524288
    ), Co = (
      /*                       */
      1048576
    ), Hc = (
      /*                       */
      2097152
    ), _o = (
      /*                            */
      130023424
    ), Ya = (
      /*                             */
      4194304
    ), Pc = (
      /*                             */
      8388608
    ), Es = (
      /*                             */
      16777216
    ), Bc = (
      /*                             */
      33554432
    ), Ic = (
      /*                             */
      67108864
    ), Md = Ya, hu = (
      /*          */
      134217728
    ), $c = (
      /*                          */
      268435455
    ), yu = (
      /*               */
      268435456
    ), Vl = (
      /*                        */
      536870912
    ), ai = (
      /*                   */
      1073741824
    );
    function hy(e) {
      {
        if (e & Ke)
          return "Sync";
        if (e & Ca)
          return "InputContinuousHydration";
        if (e & bi)
          return "InputContinuous";
        if (e & yo)
          return "DefaultHydration";
        if (e & dn)
          return "Default";
        if (e & go)
          return "TransitionHydration";
        if (e & zl)
          return "Transition";
        if (e & _o)
          return "Retry";
        if (e & hu)
          return "SelectiveHydration";
        if (e & yu)
          return "IdleHydration";
        if (e & Vl)
          return "Idle";
        if (e & ai)
          return "Offscreen";
      }
    }
    var on = -1, Yc = So, Wc = Ya;
    function gu(e) {
      switch (Vn(e)) {
        case Ke:
          return Ke;
        case Ca:
          return Ca;
        case bi:
          return bi;
        case yo:
          return yo;
        case dn:
          return dn;
        case go:
          return go;
        case So:
        case ji:
        case ii:
        case bo:
        case Cs:
        case _s:
        case Lc:
        case Mc:
        case Ac:
        case zc:
        case Vc:
        case Uc:
        case jc:
        case Fc:
        case Co:
        case Hc:
          return e & zl;
        case Ya:
        case Pc:
        case Es:
        case Bc:
        case Ic:
          return e & _o;
        case hu:
          return hu;
        case yu:
          return yu;
        case Vl:
          return Vl;
        case ai:
          return ai;
        default:
          return g("Should have found matching lanes. This is a bug in React."), e;
      }
    }
    function ks(e, t) {
      var i = e.pendingLanes;
      if (i === Y)
        return Y;
      var a = Y, o = e.suspendedLanes, s = e.pingedLanes, f = i & $c;
      if (f !== Y) {
        var p = f & ~o;
        if (p !== Y)
          a = gu(p);
        else {
          var v = f & s;
          v !== Y && (a = gu(v));
        }
      } else {
        var y = i & ~o;
        y !== Y ? a = gu(y) : s !== Y && (a = gu(s));
      }
      if (a === Y)
        return Y;
      if (t !== Y && t !== a && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (t & o) === Y) {
        var S = Vn(a), O = Vn(t);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          S >= O || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          S === dn && (O & zl) !== Y
        )
          return t;
      }
      (a & bi) !== Y && (a |= i & dn);
      var N = e.entangledLanes;
      if (N !== Y)
        for (var U = e.entanglements, F = a & N; F > 0; ) {
          var I = Ul(F), Re = 1 << I;
          a |= U[I], F &= ~Re;
        }
      return a;
    }
    function qv(e, t) {
      for (var i = e.eventTimes, a = on; t > 0; ) {
        var o = Ul(t), s = 1 << o, f = i[o];
        f > a && (a = f), t &= ~s;
      }
      return a;
    }
    function Qc(e, t) {
      switch (e) {
        case Ke:
        case Ca:
        case bi:
          return t + 250;
        case yo:
        case dn:
        case go:
        case So:
        case ji:
        case ii:
        case bo:
        case Cs:
        case _s:
        case Lc:
        case Mc:
        case Ac:
        case zc:
        case Vc:
        case Uc:
        case jc:
        case Fc:
        case Co:
        case Hc:
          return t + 5e3;
        case Ya:
        case Pc:
        case Es:
        case Bc:
        case Ic:
          return on;
        case hu:
        case yu:
        case Vl:
        case ai:
          return on;
        default:
          return g("Should have found matching lanes. This is a bug in React."), on;
      }
    }
    function yy(e, t) {
      for (var i = e.pendingLanes, a = e.suspendedLanes, o = e.pingedLanes, s = e.expirationTimes, f = i; f > 0; ) {
        var p = Ul(f), v = 1 << p, y = s[p];
        y === on ? ((v & a) === Y || (v & o) !== Y) && (s[p] = Qc(v, t)) : y <= t && (e.expiredLanes |= v), f &= ~v;
      }
    }
    function gy(e) {
      return gu(e.pendingLanes);
    }
    function Ad(e) {
      var t = e.pendingLanes & ~ai;
      return t !== Y ? t : t & ai ? ai : Y;
    }
    function Su(e) {
      return (e & Ke) !== Y;
    }
    function xs(e) {
      return (e & $c) !== Y;
    }
    function Gc(e) {
      return (e & _o) === e;
    }
    function Sy(e) {
      var t = Ke | bi | dn;
      return (e & t) === Y;
    }
    function Xv(e) {
      return (e & zl) === e;
    }
    function Rs(e, t) {
      var i = Ca | bi | yo | dn;
      return (t & i) !== Y;
    }
    function Kv(e, t) {
      return (t & e.expiredLanes) !== Y;
    }
    function zd(e) {
      return (e & zl) !== Y;
    }
    function Vd() {
      var e = Yc;
      return Yc <<= 1, (Yc & zl) === Y && (Yc = So), e;
    }
    function by() {
      var e = Wc;
      return Wc <<= 1, (Wc & _o) === Y && (Wc = Ya), e;
    }
    function Vn(e) {
      return e & -e;
    }
    function Bn(e) {
      return Vn(e);
    }
    function Ul(e) {
      return 31 - Dc(e);
    }
    function qc(e) {
      return Ul(e);
    }
    function li(e, t) {
      return (e & t) !== Y;
    }
    function Eo(e, t) {
      return (e & t) === t;
    }
    function st(e, t) {
      return e | t;
    }
    function bu(e, t) {
      return e & ~t;
    }
    function Ud(e, t) {
      return e & t;
    }
    function Zv(e) {
      return e;
    }
    function Jv(e, t) {
      return e !== wt && e < t ? e : t;
    }
    function Xc(e) {
      for (var t = [], i = 0; i < fn; i++)
        t.push(e);
      return t;
    }
    function ko(e, t, i) {
      e.pendingLanes |= t, t !== Vl && (e.suspendedLanes = Y, e.pingedLanes = Y);
      var a = e.eventTimes, o = qc(t);
      a[o] = i;
    }
    function jd(e, t) {
      e.suspendedLanes |= t, e.pingedLanes &= ~t;
      for (var i = e.expirationTimes, a = t; a > 0; ) {
        var o = Ul(a), s = 1 << o;
        i[o] = on, a &= ~s;
      }
    }
    function Fd(e, t, i) {
      e.pingedLanes |= e.suspendedLanes & t;
    }
    function Hd(e, t) {
      var i = e.pendingLanes & ~t;
      e.pendingLanes = t, e.suspendedLanes = Y, e.pingedLanes = Y, e.expiredLanes &= t, e.mutableReadLanes &= t, e.entangledLanes &= t;
      for (var a = e.entanglements, o = e.eventTimes, s = e.expirationTimes, f = i; f > 0; ) {
        var p = Ul(f), v = 1 << p;
        a[p] = Y, o[p] = on, s[p] = on, f &= ~v;
      }
    }
    function Cu(e, t) {
      for (var i = e.entangledLanes |= t, a = e.entanglements, o = i; o; ) {
        var s = Ul(o), f = 1 << s;
        f & t | // Is this lane transitively entangled with the newly entangled lanes?
        a[s] & t && (a[s] |= t), o &= ~f;
      }
    }
    function Cy(e, t) {
      var i = Vn(t), a;
      switch (i) {
        case bi:
          a = Ca;
          break;
        case dn:
          a = yo;
          break;
        case So:
        case ji:
        case ii:
        case bo:
        case Cs:
        case _s:
        case Lc:
        case Mc:
        case Ac:
        case zc:
        case Vc:
        case Uc:
        case jc:
        case Fc:
        case Co:
        case Hc:
        case Ya:
        case Pc:
        case Es:
        case Bc:
        case Ic:
          a = go;
          break;
        case Vl:
          a = yu;
          break;
        default:
          a = wt;
          break;
      }
      return (a & (e.suspendedLanes | t)) !== wt ? wt : a;
    }
    function Pd(e, t, i) {
      if (lr)
        for (var a = e.pendingUpdatersLaneMap; i > 0; ) {
          var o = qc(i), s = 1 << o, f = a[o];
          f.add(t), i &= ~s;
        }
    }
    function Kc(e, t) {
      if (lr)
        for (var i = e.pendingUpdatersLaneMap, a = e.memoizedUpdaters; t > 0; ) {
          var o = qc(t), s = 1 << o, f = i[o];
          f.size > 0 && (f.forEach(function(p) {
            var v = p.alternate;
            (v === null || !a.has(v)) && a.add(p);
          }), f.clear()), t &= ~s;
        }
    }
    function Bd(e, t) {
      return null;
    }
    var Cr = Ke, or = bi, Wa = dn, ws = Vl, xo = wt;
    function Fi() {
      return xo;
    }
    function In(e) {
      xo = e;
    }
    function Ts(e, t) {
      var i = xo;
      try {
        return xo = e, t();
      } finally {
        xo = i;
      }
    }
    function _r(e, t) {
      return e !== 0 && e < t ? e : t;
    }
    function _y(e, t) {
      return e > t ? e : t;
    }
    function Id(e, t) {
      return e !== 0 && e < t;
    }
    function Ns(e) {
      var t = Vn(e);
      return Id(Cr, t) ? Id(or, t) ? xs(t) ? Wa : ws : or : Cr;
    }
    function $n(e) {
      var t = e.current.memoizedState;
      return t.isDehydrated;
    }
    var em;
    function Oe(e) {
      em = e;
    }
    function _u(e) {
      em(e);
    }
    var Ds;
    function tm(e) {
      Ds = e;
    }
    var nm;
    function Os(e) {
      nm = e;
    }
    var Ls;
    function $d(e) {
      Ls = e;
    }
    var Yd;
    function rm(e) {
      Yd = e;
    }
    var Zc = false, Eu = [], _a = null, hn = null, Jn = null, Hi = /* @__PURE__ */ new Map(), ku = /* @__PURE__ */ new Map(), Qa = [], ua = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function im(e) {
      return ua.indexOf(e) > -1;
    }
    function Ea(e, t, i, a, o) {
      return {
        blockedOn: e,
        domEventName: t,
        eventSystemFlags: i,
        nativeEvent: o,
        targetContainers: [a]
      };
    }
    function am(e, t) {
      switch (e) {
        case "focusin":
        case "focusout":
          _a = null;
          break;
        case "dragenter":
        case "dragleave":
          hn = null;
          break;
        case "mouseover":
        case "mouseout":
          Jn = null;
          break;
        case "pointerover":
        case "pointerout": {
          var i = t.pointerId;
          Hi.delete(i);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var a = t.pointerId;
          ku.delete(a);
          break;
        }
      }
    }
    function xu(e, t, i, a, o, s) {
      if (e === null || e.nativeEvent !== s) {
        var f = Ea(t, i, a, o, s);
        if (t !== null) {
          var p = Vu(t);
          p !== null && Ds(p);
        }
        return f;
      }
      e.eventSystemFlags |= a;
      var v = e.targetContainers;
      return o !== null && v.indexOf(o) === -1 && v.push(o), e;
    }
    function lm(e, t, i, a, o) {
      switch (t) {
        case "focusin": {
          var s = o;
          return _a = xu(_a, e, t, i, a, s), true;
        }
        case "dragenter": {
          var f = o;
          return hn = xu(hn, e, t, i, a, f), true;
        }
        case "mouseover": {
          var p = o;
          return Jn = xu(Jn, e, t, i, a, p), true;
        }
        case "pointerover": {
          var v = o, y = v.pointerId;
          return Hi.set(y, xu(Hi.get(y) || null, e, t, i, a, v)), true;
        }
        case "gotpointercapture": {
          var S = o, O = S.pointerId;
          return ku.set(O, xu(ku.get(O) || null, e, t, i, a, S)), true;
        }
      }
      return false;
    }
    function Wd(e) {
      var t = Ps(e.target);
      if (t !== null) {
        var i = yi(t);
        if (i !== null) {
          var a = i.tag;
          if (a === be) {
            var o = Cd(i);
            if (o !== null) {
              e.blockedOn = o, Yd(e.priority, function() {
                nm(i);
              });
              return;
            }
          } else if (a === W) {
            var s = i.stateNode;
            if ($n(s)) {
              e.blockedOn = bc(i);
              return;
            }
          }
        }
      }
      e.blockedOn = null;
    }
    function om(e) {
      for (var t = Ls(), i = {
        blockedOn: null,
        target: e,
        priority: t
      }, a = 0; a < Qa.length && Id(t, Qa[a].priority); a++)
        ;
      Qa.splice(a, 0, i), a === 0 && Wd(i);
    }
    function Jc(e) {
      if (e.blockedOn !== null)
        return false;
      for (var t = e.targetContainers; t.length > 0; ) {
        var i = t[0], a = Ro(e.domEventName, e.eventSystemFlags, i, e.nativeEvent);
        if (a === null) {
          var o = e.nativeEvent, s = new o.constructor(o.type, o);
          fs(s), o.target.dispatchEvent(s), dy();
        } else {
          var f = Vu(a);
          return f !== null && Ds(f), e.blockedOn = a, false;
        }
        t.shift();
      }
      return true;
    }
    function Ms(e, t, i) {
      Jc(e) && i.delete(t);
    }
    function Qd() {
      Zc = false, _a !== null && Jc(_a) && (_a = null), hn !== null && Jc(hn) && (hn = null), Jn !== null && Jc(Jn) && (Jn = null), Hi.forEach(Ms), ku.forEach(Ms);
    }
    function Er(e, t) {
      e.blockedOn === t && (e.blockedOn = null, Zc || (Zc = true, C.unstable_scheduleCallback(C.unstable_NormalPriority, Qd)));
    }
    function Ct(e) {
      if (Eu.length > 0) {
        Er(Eu[0], e);
        for (var t = 1; t < Eu.length; t++) {
          var i = Eu[t];
          i.blockedOn === e && (i.blockedOn = null);
        }
      }
      _a !== null && Er(_a, e), hn !== null && Er(hn, e), Jn !== null && Er(Jn, e);
      var a = function(p) {
        return Er(p, e);
      };
      Hi.forEach(a), ku.forEach(a);
      for (var o = 0; o < Qa.length; o++) {
        var s = Qa[o];
        s.blockedOn === e && (s.blockedOn = null);
      }
      for (; Qa.length > 0; ) {
        var f = Qa[0];
        if (f.blockedOn !== null)
          break;
        Wd(f), f.blockedOn === null && Qa.shift();
      }
    }
    var kn = b.ReactCurrentBatchConfig, Tn = true;
    function er(e) {
      Tn = !!e;
    }
    function Ci() {
      return Tn;
    }
    function Ru(e, t, i) {
      var a = Lr(t), o;
      switch (a) {
        case Cr:
          o = Yn;
          break;
        case or:
          o = As;
          break;
        case Wa:
        default:
          o = Ga;
          break;
      }
      return o.bind(null, t, i, e);
    }
    function Yn(e, t, i, a) {
      var o = Fi(), s = kn.transition;
      kn.transition = null;
      try {
        In(Cr), Ga(e, t, i, a);
      } finally {
        In(o), kn.transition = s;
      }
    }
    function As(e, t, i, a) {
      var o = Fi(), s = kn.transition;
      kn.transition = null;
      try {
        In(or), Ga(e, t, i, a);
      } finally {
        In(o), kn.transition = s;
      }
    }
    function Ga(e, t, i, a) {
      Tn && ef(e, t, i, a);
    }
    function ef(e, t, i, a) {
      var o = Ro(e, t, i, a);
      if (o === null) {
        By(e, t, a, wu, i), am(e, a);
        return;
      }
      if (lm(o, e, t, i, a)) {
        a.stopPropagation();
        return;
      }
      if (am(e, a), t & oo && im(e)) {
        for (; o !== null; ) {
          var s = Vu(o);
          s !== null && _u(s);
          var f = Ro(e, t, i, a);
          if (f === null && By(e, t, a, wu, i), f === o)
            break;
          o = f;
        }
        o !== null && a.stopPropagation();
        return;
      }
      By(e, t, a, null, i);
    }
    var wu = null;
    function Ro(e, t, i, a) {
      wu = null;
      var o = mc(a), s = Ps(o);
      if (s !== null) {
        var f = yi(s);
        if (f === null)
          s = null;
        else {
          var p = f.tag;
          if (p === be) {
            var v = Cd(f);
            if (v !== null)
              return v;
            s = null;
          } else if (p === W) {
            var y = f.stateNode;
            if ($n(y))
              return bc(f);
            s = null;
          } else
            f !== s && (s = null);
        }
      }
      return wu = s, null;
    }
    function Lr(e) {
      switch (e) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return Cr;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return or;
        case "message": {
          var t = kd();
          switch (t) {
            case kc:
              return Cr;
            case Si:
              return or;
            case ba:
            case xc:
              return Wa;
            case Nl:
              return ws;
            default:
              return Wa;
          }
        }
        default:
          return Wa;
      }
    }
    function Gd(e, t, i) {
      return e.addEventListener(t, i, false), i;
    }
    function Tu(e, t, i) {
      return e.addEventListener(t, i, true), i;
    }
    function qa(e, t, i, a) {
      return e.addEventListener(t, i, {
        capture: true,
        passive: a
      }), i;
    }
    function tf(e, t, i, a) {
      return e.addEventListener(t, i, {
        passive: a
      }), i;
    }
    var wo = null, ka = null, jl = null;
    function Fl(e) {
      return wo = e, ka = rf(), true;
    }
    function nf() {
      wo = null, ka = null, jl = null;
    }
    function Nu() {
      if (jl)
        return jl;
      var e, t = ka, i = t.length, a, o = rf(), s = o.length;
      for (e = 0; e < i && t[e] === o[e]; e++)
        ;
      var f = i - e;
      for (a = 1; a <= f && t[i - a] === o[s - a]; a++)
        ;
      var p = a > 1 ? 1 - a : void 0;
      return jl = o.slice(e, p), jl;
    }
    function rf() {
      return "value" in wo ? wo.value : wo.textContent;
    }
    function To(e) {
      var t, i = e.keyCode;
      return "charCode" in e ? (t = e.charCode, t === 0 && i === 13 && (t = 13)) : t = i, t === 10 && (t = 13), t >= 32 || t === 13 ? t : 0;
    }
    function No() {
      return true;
    }
    function kr() {
      return false;
    }
    function Un(e) {
      function t(i, a, o, s, f) {
        this._reactName = i, this._targetInst = o, this.type = a, this.nativeEvent = s, this.target = f, this.currentTarget = null;
        for (var p in e)
          if (e.hasOwnProperty(p)) {
            var v = e[p];
            v ? this[p] = v(s) : this[p] = s[p];
          }
        var y = s.defaultPrevented != null ? s.defaultPrevented : s.returnValue === false;
        return y ? this.isDefaultPrevented = No : this.isDefaultPrevented = kr, this.isPropagationStopped = kr, this;
      }
      return pt(t.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var i = this.nativeEvent;
          i && (i.preventDefault ? i.preventDefault() : typeof i.returnValue != "unknown" && (i.returnValue = false), this.isDefaultPrevented = No);
        },
        stopPropagation: function() {
          var i = this.nativeEvent;
          i && (i.stopPropagation ? i.stopPropagation() : typeof i.cancelBubble != "unknown" && (i.cancelBubble = true), this.isPropagationStopped = No);
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: No
      }), t;
    }
    var xr = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(e) {
        return e.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    }, Rr = Un(xr), Du = pt({}, xr, {
      view: 0,
      detail: 0
    }), qd = Un(Du), zs, Xd, Pi;
    function um(e) {
      e !== Pi && (Pi && e.type === "mousemove" ? (zs = e.screenX - Pi.screenX, Xd = e.screenY - Pi.screenY) : (zs = 0, Xd = 0), Pi = e);
    }
    var Ou = pt({}, Du, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: of,
      button: 0,
      buttons: 0,
      relatedTarget: function(e) {
        return e.relatedTarget === void 0 ? e.fromElement === e.srcElement ? e.toElement : e.fromElement : e.relatedTarget;
      },
      movementX: function(e) {
        return "movementX" in e ? e.movementX : (um(e), zs);
      },
      movementY: function(e) {
        return "movementY" in e ? e.movementY : Xd;
      }
    }), Hl = Un(Ou), Kd = pt({}, Ou, {
      dataTransfer: 0
    }), Do = Un(Kd), sm = pt({}, Du, {
      relatedTarget: 0
    }), af = Un(sm), Zd = pt({}, xr, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), lf = Un(Zd), Ey = pt({}, xr, {
      clipboardData: function(e) {
        return "clipboardData" in e ? e.clipboardData : window.clipboardData;
      }
    }), ky = Un(Ey), cm = pt({}, xr, {
      data: 0
    }), Jd = Un(cm), Oo = Jd, xy = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Lu = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    function fm(e) {
      if (e.key) {
        var t = xy[e.key] || e.key;
        if (t !== "Unidentified")
          return t;
      }
      if (e.type === "keypress") {
        var i = To(e);
        return i === 13 ? "Enter" : String.fromCharCode(i);
      }
      return e.type === "keydown" || e.type === "keyup" ? Lu[e.keyCode] || "Unidentified" : "";
    }
    var Nn = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function Ry(e) {
      var t = this, i = t.nativeEvent;
      if (i.getModifierState)
        return i.getModifierState(e);
      var a = Nn[e];
      return a ? !!i[a] : false;
    }
    function of(e) {
      return Ry;
    }
    var wy = pt({}, Du, {
      key: fm,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: of,
      // Legacy Interface
      charCode: function(e) {
        return e.type === "keypress" ? To(e) : 0;
      },
      keyCode: function(e) {
        return e.type === "keydown" || e.type === "keyup" ? e.keyCode : 0;
      },
      which: function(e) {
        return e.type === "keypress" ? To(e) : e.type === "keydown" || e.type === "keyup" ? e.keyCode : 0;
      }
    }), Ty = Un(wy), dm = pt({}, Ou, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    }), ep = Un(dm), Ny = pt({}, Du, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: of
    }), Bi = Un(Ny), tp = pt({}, xr, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), Dy = Un(tp), Pl = pt({}, Ou, {
      deltaX: function(e) {
        return "deltaX" in e ? e.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in e ? -e.wheelDeltaX : 0
        );
      },
      deltaY: function(e) {
        return "deltaY" in e ? e.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in e ? -e.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in e ? -e.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    }), uf = Un(Pl), Lo = [9, 13, 27, 32], Vs = 229, Us = yn && "CompositionEvent" in window, Mo = null;
    yn && "documentMode" in document && (Mo = document.documentMode);
    var Oy = yn && "TextEvent" in window && !Mo, sf = yn && (!Us || Mo && Mo > 8 && Mo <= 11), pm = 32, np = String.fromCharCode(pm);
    function vm() {
      hr("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), hr("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), hr("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), hr("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var js = false;
    function cf(e) {
      return (e.ctrlKey || e.altKey || e.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(e.ctrlKey && e.altKey);
    }
    function mm(e) {
      switch (e) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function rp(e, t) {
      return e === "keydown" && t.keyCode === Vs;
    }
    function hm(e, t) {
      switch (e) {
        case "keyup":
          return Lo.indexOf(t.keyCode) !== -1;
        case "keydown":
          return t.keyCode !== Vs;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function ip(e) {
      var t = e.detail;
      return typeof t == "object" && "data" in t ? t.data : null;
    }
    function ff(e) {
      return e.locale === "ko";
    }
    var Xa = false;
    function ap(e, t, i, a, o) {
      var s, f;
      if (Us ? s = mm(t) : Xa ? hm(t, a) && (s = "onCompositionEnd") : rp(t, a) && (s = "onCompositionStart"), !s)
        return null;
      sf && !ff(a) && (!Xa && s === "onCompositionStart" ? Xa = Fl(o) : s === "onCompositionEnd" && Xa && (f = Nu()));
      var p = Cm(i, s);
      if (p.length > 0) {
        var v = new Jd(s, t, null, a, o);
        if (e.push({
          event: v,
          listeners: p
        }), f)
          v.data = f;
        else {
          var y = ip(a);
          y !== null && (v.data = y);
        }
      }
    }
    function df(e, t) {
      switch (e) {
        case "compositionend":
          return ip(t);
        case "keypress":
          var i = t.which;
          return i !== pm ? null : (js = true, np);
        case "textInput":
          var a = t.data;
          return a === np && js ? null : a;
        default:
          return null;
      }
    }
    function ym(e, t) {
      if (Xa) {
        if (e === "compositionend" || !Us && hm(e, t)) {
          var i = Nu();
          return nf(), Xa = false, i;
        }
        return null;
      }
      switch (e) {
        case "paste":
          return null;
        case "keypress":
          if (!cf(t)) {
            if (t.char && t.char.length > 1)
              return t.char;
            if (t.which)
              return String.fromCharCode(t.which);
          }
          return null;
        case "compositionend":
          return sf && !ff(t) ? null : t.data;
        default:
          return null;
      }
    }
    function Ly(e, t, i, a, o) {
      var s;
      if (Oy ? s = df(t, a) : s = ym(t, a), !s)
        return null;
      var f = Cm(i, "onBeforeInput");
      if (f.length > 0) {
        var p = new Oo("onBeforeInput", "beforeinput", null, a, o);
        e.push({
          event: p,
          listeners: f
        }), p.data = s;
      }
    }
    function pf(e, t, i, a, o, s, f) {
      ap(e, t, i, a, o), Ly(e, t, i, a, o);
    }
    var My = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function Mu(e) {
      var t = e && e.nodeName && e.nodeName.toLowerCase();
      return t === "input" ? !!My[e.type] : t === "textarea";
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function Ay(e) {
      if (!yn)
        return false;
      var t = "on" + e, i = t in document;
      if (!i) {
        var a = document.createElement("div");
        a.setAttribute(t, "return;"), i = typeof a[t] == "function";
      }
      return i;
    }
    function vf() {
      hr("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function n(e, t, i, a) {
      hc(a);
      var o = Cm(t, "onChange");
      if (o.length > 0) {
        var s = new Rr("onChange", "change", null, i, a);
        e.push({
          event: s,
          listeners: o
        });
      }
    }
    var r = null, l = null;
    function u(e) {
      var t = e.nodeName && e.nodeName.toLowerCase();
      return t === "select" || t === "input" && e.type === "file";
    }
    function c(e) {
      var t = [];
      n(t, l, e, mc(e)), pd(d, t);
    }
    function d(e) {
      X0(e, 0);
    }
    function h(e) {
      var t = bf(e);
      if (nu(t))
        return e;
    }
    function E(e, t) {
      if (e === "change")
        return t;
    }
    var w = false;
    yn && (w = Ay("input") && (!document.documentMode || document.documentMode > 9));
    function H(e, t) {
      r = e, l = t, r.attachEvent("onpropertychange", ae);
    }
    function re() {
      r && (r.detachEvent("onpropertychange", ae), r = null, l = null);
    }
    function ae(e) {
      e.propertyName === "value" && h(l) && c(e);
    }
    function ne(e, t, i) {
      e === "focusin" ? (re(), H(t, i)) : e === "focusout" && re();
    }
    function Ee(e, t) {
      if (e === "selectionchange" || e === "keyup" || e === "keydown")
        return h(l);
    }
    function Le(e) {
      var t = e.nodeName;
      return t && t.toLowerCase() === "input" && (e.type === "checkbox" || e.type === "radio");
    }
    function ze(e, t) {
      if (e === "click")
        return h(t);
    }
    function Mn(e, t) {
      if (e === "input" || e === "change")
        return h(t);
    }
    function M(e) {
      var t = e._wrapperState;
      !t || !t.controlled || e.type !== "number" || We(e, "number", e.value);
    }
    function D(e, t, i, a, o, s, f) {
      var p = i ? bf(i) : window, v, y;
      if (u(p) ? v = E : Mu(p) ? w ? v = Mn : (v = Ee, y = ne) : Le(p) && (v = ze), v) {
        var S = v(t, i);
        if (S) {
          n(e, S, a, o);
          return;
        }
      }
      y && y(t, p, i), t === "focusout" && M(p);
    }
    function V() {
      Ir("onMouseEnter", ["mouseout", "mouseover"]), Ir("onMouseLeave", ["mouseout", "mouseover"]), Ir("onPointerEnter", ["pointerout", "pointerover"]), Ir("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function se(e, t, i, a, o, s, f) {
      var p = t === "mouseover" || t === "pointerover", v = t === "mouseout" || t === "pointerout";
      if (p && !Av(a)) {
        var y = a.relatedTarget || a.fromElement;
        if (y && (Ps(y) || Sp(y)))
          return;
      }
      if (!(!v && !p)) {
        var S;
        if (o.window === o)
          S = o;
        else {
          var O = o.ownerDocument;
          O ? S = O.defaultView || O.parentWindow : S = window;
        }
        var N, U;
        if (v) {
          var F = a.relatedTarget || a.toElement;
          if (N = i, U = F ? Ps(F) : null, U !== null) {
            var I = yi(U);
            (U !== I || U.tag !== q && U.tag !== fe) && (U = null);
          }
        } else
          N = null, U = i;
        if (N !== U) {
          var Re = Hl, Ye = "onMouseLeave", Ue = "onMouseEnter", Nt = "mouse";
          (t === "pointerout" || t === "pointerover") && (Re = ep, Ye = "onPointerLeave", Ue = "onPointerEnter", Nt = "pointer");
          var _t = N == null ? S : bf(N), A = U == null ? S : bf(U), $ = new Re(Ye, Nt + "leave", N, a, o);
          $.target = _t, $.relatedTarget = A;
          var z = null, le = Ps(o);
          if (le === i) {
            var we = new Re(Ue, Nt + "enter", U, a, o);
            we.target = A, we.relatedTarget = _t, z = we;
          }
          h_(e, $, z, N, U);
        }
      }
    }
    function Ve(e, t) {
      return e === t && (e !== 0 || 1 / e === 1 / t) || e !== e && t !== t;
    }
    var Me = typeof Object.is == "function" ? Object.is : Ve;
    function Pe(e, t) {
      if (Me(e, t))
        return true;
      if (typeof e != "object" || e === null || typeof t != "object" || t === null)
        return false;
      var i = Object.keys(e), a = Object.keys(t);
      if (i.length !== a.length)
        return false;
      for (var o = 0; o < i.length; o++) {
        var s = i[o];
        if (!Qn.call(t, s) || !Me(e[s], t[s]))
          return false;
      }
      return true;
    }
    function nt(e) {
      for (; e && e.firstChild; )
        e = e.firstChild;
      return e;
    }
    function tr(e) {
      for (; e; ) {
        if (e.nextSibling)
          return e.nextSibling;
        e = e.parentNode;
      }
    }
    function Vt(e, t) {
      for (var i = nt(e), a = 0, o = 0; i; ) {
        if (i.nodeType === Ua) {
          if (o = a + i.textContent.length, a <= t && o >= t)
            return {
              node: i,
              offset: t - a
            };
          a = o;
        }
        i = nt(tr(i));
      }
    }
    function Bl(e) {
      var t = e.ownerDocument, i = t && t.defaultView || window, a = i.getSelection && i.getSelection();
      if (!a || a.rangeCount === 0)
        return null;
      var o = a.anchorNode, s = a.anchorOffset, f = a.focusNode, p = a.focusOffset;
      try {
        o.nodeType, f.nodeType;
      } catch {
        return null;
      }
      return zy(e, o, s, f, p);
    }
    function zy(e, t, i, a, o) {
      var s = 0, f = -1, p = -1, v = 0, y = 0, S = e, O = null;
      e:
        for (; ; ) {
          for (var N = null; S === t && (i === 0 || S.nodeType === Ua) && (f = s + i), S === a && (o === 0 || S.nodeType === Ua) && (p = s + o), S.nodeType === Ua && (s += S.nodeValue.length), (N = S.firstChild) !== null; )
            O = S, S = N;
          for (; ; ) {
            if (S === e)
              break e;
            if (O === t && ++v === i && (f = s), O === a && ++y === o && (p = s), (N = S.nextSibling) !== null)
              break;
            S = O, O = S.parentNode;
          }
          S = N;
        }
      return f === -1 || p === -1 ? null : {
        start: f,
        end: p
      };
    }
    function KC(e, t) {
      var i = e.ownerDocument || document, a = i && i.defaultView || window;
      if (a.getSelection) {
        var o = a.getSelection(), s = e.textContent.length, f = Math.min(t.start, s), p = t.end === void 0 ? f : Math.min(t.end, s);
        if (!o.extend && f > p) {
          var v = p;
          p = f, f = v;
        }
        var y = Vt(e, f), S = Vt(e, p);
        if (y && S) {
          if (o.rangeCount === 1 && o.anchorNode === y.node && o.anchorOffset === y.offset && o.focusNode === S.node && o.focusOffset === S.offset)
            return;
          var O = i.createRange();
          O.setStart(y.node, y.offset), o.removeAllRanges(), f > p ? (o.addRange(O), o.extend(S.node, S.offset)) : (O.setEnd(S.node, S.offset), o.addRange(O));
        }
      }
    }
    function j0(e) {
      return e && e.nodeType === Ua;
    }
    function F0(e, t) {
      return !e || !t ? false : e === t ? true : j0(e) ? false : j0(t) ? F0(e, t.parentNode) : "contains" in e ? e.contains(t) : e.compareDocumentPosition ? !!(e.compareDocumentPosition(t) & 16) : false;
    }
    function ZC(e) {
      return e && e.ownerDocument && F0(e.ownerDocument.documentElement, e);
    }
    function JC(e) {
      try {
        return typeof e.contentWindow.location.href == "string";
      } catch {
        return false;
      }
    }
    function H0() {
      for (var e = window, t = Cl(); t instanceof e.HTMLIFrameElement; ) {
        if (JC(t))
          e = t.contentWindow;
        else
          return t;
        t = Cl(e.document);
      }
      return t;
    }
    function Vy(e) {
      var t = e && e.nodeName && e.nodeName.toLowerCase();
      return t && (t === "input" && (e.type === "text" || e.type === "search" || e.type === "tel" || e.type === "url" || e.type === "password") || t === "textarea" || e.contentEditable === "true");
    }
    function e_() {
      var e = H0();
      return {
        focusedElem: e,
        selectionRange: Vy(e) ? n_(e) : null
      };
    }
    function t_(e) {
      var t = H0(), i = e.focusedElem, a = e.selectionRange;
      if (t !== i && ZC(i)) {
        a !== null && Vy(i) && r_(i, a);
        for (var o = [], s = i; s = s.parentNode; )
          s.nodeType === Zr && o.push({
            element: s,
            left: s.scrollLeft,
            top: s.scrollTop
          });
        typeof i.focus == "function" && i.focus();
        for (var f = 0; f < o.length; f++) {
          var p = o[f];
          p.element.scrollLeft = p.left, p.element.scrollTop = p.top;
        }
      }
    }
    function n_(e) {
      var t;
      return "selectionStart" in e ? t = {
        start: e.selectionStart,
        end: e.selectionEnd
      } : t = Bl(e), t || {
        start: 0,
        end: 0
      };
    }
    function r_(e, t) {
      var i = t.start, a = t.end;
      a === void 0 && (a = i), "selectionStart" in e ? (e.selectionStart = i, e.selectionEnd = Math.min(a, e.value.length)) : KC(e, t);
    }
    var i_ = yn && "documentMode" in document && document.documentMode <= 11;
    function a_() {
      hr("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var mf = null, Uy = null, lp = null, jy = false;
    function l_(e) {
      if ("selectionStart" in e && Vy(e))
        return {
          start: e.selectionStart,
          end: e.selectionEnd
        };
      var t = e.ownerDocument && e.ownerDocument.defaultView || window, i = t.getSelection();
      return {
        anchorNode: i.anchorNode,
        anchorOffset: i.anchorOffset,
        focusNode: i.focusNode,
        focusOffset: i.focusOffset
      };
    }
    function o_(e) {
      return e.window === e ? e.document : e.nodeType === ia ? e : e.ownerDocument;
    }
    function P0(e, t, i) {
      var a = o_(i);
      if (!(jy || mf == null || mf !== Cl(a))) {
        var o = l_(mf);
        if (!lp || !Pe(lp, o)) {
          lp = o;
          var s = Cm(Uy, "onSelect");
          if (s.length > 0) {
            var f = new Rr("onSelect", "select", null, t, i);
            e.push({
              event: f,
              listeners: s
            }), f.target = mf;
          }
        }
      }
    }
    function u_(e, t, i, a, o, s, f) {
      var p = i ? bf(i) : window;
      switch (t) {
        case "focusin":
          (Mu(p) || p.contentEditable === "true") && (mf = p, Uy = i, lp = null);
          break;
        case "focusout":
          mf = null, Uy = null, lp = null;
          break;
        case "mousedown":
          jy = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          jy = false, P0(e, a, o);
          break;
        case "selectionchange":
          if (i_)
            break;
        case "keydown":
        case "keyup":
          P0(e, a, o);
      }
    }
    function gm(e, t) {
      var i = {};
      return i[e.toLowerCase()] = t.toLowerCase(), i["Webkit" + e] = "webkit" + t, i["Moz" + e] = "moz" + t, i;
    }
    var hf = {
      animationend: gm("Animation", "AnimationEnd"),
      animationiteration: gm("Animation", "AnimationIteration"),
      animationstart: gm("Animation", "AnimationStart"),
      transitionend: gm("Transition", "TransitionEnd")
    }, Fy = {}, B0 = {};
    yn && (B0 = document.createElement("div").style, "AnimationEvent" in window || (delete hf.animationend.animation, delete hf.animationiteration.animation, delete hf.animationstart.animation), "TransitionEvent" in window || delete hf.transitionend.transition);
    function Sm(e) {
      if (Fy[e])
        return Fy[e];
      if (!hf[e])
        return e;
      var t = hf[e];
      for (var i in t)
        if (t.hasOwnProperty(i) && i in B0)
          return Fy[e] = t[i];
      return e;
    }
    var I0 = Sm("animationend"), $0 = Sm("animationiteration"), Y0 = Sm("animationstart"), W0 = Sm("transitionend"), Q0 = /* @__PURE__ */ new Map(), G0 = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function Au(e, t) {
      Q0.set(e, t), hr(t, [e]);
    }
    function s_() {
      for (var e = 0; e < G0.length; e++) {
        var t = G0[e], i = t.toLowerCase(), a = t[0].toUpperCase() + t.slice(1);
        Au(i, "on" + a);
      }
      Au(I0, "onAnimationEnd"), Au($0, "onAnimationIteration"), Au(Y0, "onAnimationStart"), Au("dblclick", "onDoubleClick"), Au("focusin", "onFocus"), Au("focusout", "onBlur"), Au(W0, "onTransitionEnd");
    }
    function c_(e, t, i, a, o, s, f) {
      var p = Q0.get(t);
      if (p !== void 0) {
        var v = Rr, y = t;
        switch (t) {
          case "keypress":
            if (To(a) === 0)
              return;
          case "keydown":
          case "keyup":
            v = Ty;
            break;
          case "focusin":
            y = "focus", v = af;
            break;
          case "focusout":
            y = "blur", v = af;
            break;
          case "beforeblur":
          case "afterblur":
            v = af;
            break;
          case "click":
            if (a.button === 2)
              return;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            v = Hl;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            v = Do;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            v = Bi;
            break;
          case I0:
          case $0:
          case Y0:
            v = lf;
            break;
          case W0:
            v = Dy;
            break;
          case "scroll":
            v = qd;
            break;
          case "wheel":
            v = uf;
            break;
          case "copy":
          case "cut":
          case "paste":
            v = ky;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            v = ep;
            break;
        }
        var S = (s & oo) !== 0;
        {
          var O = !S && // TODO: ideally, we'd eventually add all events from
          // nonDelegatedEvents list in DOMPluginEventSystem.
          // Then we can remove this special list.
          // This is a breaking change that can wait until React 18.
          t === "scroll", N = v_(i, p, a.type, S, O);
          if (N.length > 0) {
            var U = new v(p, y, null, a, o);
            e.push({
              event: U,
              listeners: N
            });
          }
        }
      }
    }
    s_(), V(), vf(), a_(), vm();
    function f_(e, t, i, a, o, s, f) {
      c_(e, t, i, a, o, s);
      var p = (s & fy) === 0;
      p && (se(e, t, i, a, o), D(e, t, i, a, o), u_(e, t, i, a, o), pf(e, t, i, a, o));
    }
    var op = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], Hy = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(op));
    function q0(e, t, i) {
      var a = e.type || "unknown-event";
      e.currentTarget = i, Pa(a, t, void 0, e), e.currentTarget = null;
    }
    function d_(e, t, i) {
      var a;
      if (i)
        for (var o = t.length - 1; o >= 0; o--) {
          var s = t[o], f = s.instance, p = s.currentTarget, v = s.listener;
          if (f !== a && e.isPropagationStopped())
            return;
          q0(e, v, p), a = f;
        }
      else
        for (var y = 0; y < t.length; y++) {
          var S = t[y], O = S.instance, N = S.currentTarget, U = S.listener;
          if (O !== a && e.isPropagationStopped())
            return;
          q0(e, U, N), a = O;
        }
    }
    function X0(e, t) {
      for (var i = (t & oo) !== 0, a = 0; a < e.length; a++) {
        var o = e[a], s = o.event, f = o.listeners;
        d_(s, f, i);
      }
      yd();
    }
    function p_(e, t, i, a, o) {
      var s = mc(i), f = [];
      f_(f, e, a, i, s, t), X0(f, t);
    }
    function xn(e, t) {
      Hy.has(e) || g('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', e);
      var i = false, a = IE(t), o = y_(e);
      a.has(o) || (K0(t, e, ss, i), a.add(o));
    }
    function Py(e, t, i) {
      Hy.has(e) && !t && g('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', e);
      var a = 0;
      t && (a |= oo), K0(i, e, a, t);
    }
    var bm = "_reactListening" + Math.random().toString(36).slice(2);
    function up(e) {
      if (!e[bm]) {
        e[bm] = true, ft.forEach(function(i) {
          i !== "selectionchange" && (Hy.has(i) || Py(i, false, e), Py(i, true, e));
        });
        var t = e.nodeType === ia ? e : e.ownerDocument;
        t !== null && (t[bm] || (t[bm] = true, Py("selectionchange", false, t)));
      }
    }
    function K0(e, t, i, a, o) {
      var s = Ru(e, t, i), f = void 0;
      vs && (t === "touchstart" || t === "touchmove" || t === "wheel") && (f = true), e = e, a ? f !== void 0 ? qa(e, t, s, f) : Tu(e, t, s) : f !== void 0 ? tf(e, t, s, f) : Gd(e, t, s);
    }
    function Z0(e, t) {
      return e === t || e.nodeType === zn && e.parentNode === t;
    }
    function By(e, t, i, a, o) {
      var s = a;
      if (!(t & Fa) && !(t & ss)) {
        var f = o;
        if (a !== null) {
          var p = a;
          e:
            for (; ; ) {
              if (p === null)
                return;
              var v = p.tag;
              if (v === W || v === Z) {
                var y = p.stateNode.containerInfo;
                if (Z0(y, f))
                  break;
                if (v === Z)
                  for (var S = p.return; S !== null; ) {
                    var O = S.tag;
                    if (O === W || O === Z) {
                      var N = S.stateNode.containerInfo;
                      if (Z0(N, f))
                        return;
                    }
                    S = S.return;
                  }
                for (; y !== null; ) {
                  var U = Ps(y);
                  if (U === null)
                    return;
                  var F = U.tag;
                  if (F === q || F === fe) {
                    p = s = U;
                    continue e;
                  }
                  y = y.parentNode;
                }
              }
              p = p.return;
            }
        }
      }
      pd(function() {
        return p_(e, t, i, s);
      });
    }
    function sp(e, t, i) {
      return {
        instance: e,
        listener: t,
        currentTarget: i
      };
    }
    function v_(e, t, i, a, o, s) {
      for (var f = t !== null ? t + "Capture" : null, p = a ? f : t, v = [], y = e, S = null; y !== null; ) {
        var O = y, N = O.stateNode, U = O.tag;
        if (U === q && N !== null && (S = N, p !== null)) {
          var F = so(y, p);
          F != null && v.push(sp(y, F, S));
        }
        if (o)
          break;
        y = y.return;
      }
      return v;
    }
    function Cm(e, t) {
      for (var i = t + "Capture", a = [], o = e; o !== null; ) {
        var s = o, f = s.stateNode, p = s.tag;
        if (p === q && f !== null) {
          var v = f, y = so(o, i);
          y != null && a.unshift(sp(o, y, v));
          var S = so(o, t);
          S != null && a.push(sp(o, S, v));
        }
        o = o.return;
      }
      return a;
    }
    function yf(e) {
      if (e === null)
        return null;
      do
        e = e.return;
      while (e && e.tag !== q);
      return e || null;
    }
    function m_(e, t) {
      for (var i = e, a = t, o = 0, s = i; s; s = yf(s))
        o++;
      for (var f = 0, p = a; p; p = yf(p))
        f++;
      for (; o - f > 0; )
        i = yf(i), o--;
      for (; f - o > 0; )
        a = yf(a), f--;
      for (var v = o; v--; ) {
        if (i === a || a !== null && i === a.alternate)
          return i;
        i = yf(i), a = yf(a);
      }
      return null;
    }
    function J0(e, t, i, a, o) {
      for (var s = t._reactName, f = [], p = i; p !== null && p !== a; ) {
        var v = p, y = v.alternate, S = v.stateNode, O = v.tag;
        if (y !== null && y === a)
          break;
        if (O === q && S !== null) {
          var N = S;
          if (o) {
            var U = so(p, s);
            U != null && f.unshift(sp(p, U, N));
          } else if (!o) {
            var F = so(p, s);
            F != null && f.push(sp(p, F, N));
          }
        }
        p = p.return;
      }
      f.length !== 0 && e.push({
        event: t,
        listeners: f
      });
    }
    function h_(e, t, i, a, o) {
      var s = a && o ? m_(a, o) : null;
      a !== null && J0(e, t, a, s, false), o !== null && i !== null && J0(e, i, o, s, true);
    }
    function y_(e, t) {
      return e + "__bubble";
    }
    var Ii = false, cp = "dangerouslySetInnerHTML", _m = "suppressContentEditableWarning", zu = "suppressHydrationWarning", e2 = "autoFocus", Fs = "children", Hs = "style", Em = "__html", Iy, km, fp, t2, xm, n2, r2;
    Iy = {
      // There are working polyfills for <dialog>. Let people use it.
      dialog: true,
      // Electron ships a custom <webview> tag to display external web content in
      // an isolated frame and process.
      // This tag is not present in non Electron environments such as JSDom which
      // is often used for testing purposes.
      // @see https://electronjs.org/docs/api/webview-tag
      webview: true
    }, km = function(e, t) {
      vc(e, t), ud(e, t), Mv(e, t, {
        registrationNameDependencies: It,
        possibleRegistrationNames: Br
      });
    }, n2 = yn && !document.documentMode, fp = function(e, t, i) {
      if (!Ii) {
        var a = Rm(i), o = Rm(t);
        o !== a && (Ii = true, g("Prop `%s` did not match. Server: %s Client: %s", e, JSON.stringify(o), JSON.stringify(a)));
      }
    }, t2 = function(e) {
      if (!Ii) {
        Ii = true;
        var t = [];
        e.forEach(function(i) {
          t.push(i);
        }), g("Extra attributes from the server: %s", t);
      }
    }, xm = function(e, t) {
      t === false ? g("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", e, e, e) : g("Expected `%s` listener to be a function, instead got a value of `%s` type.", e, typeof t);
    }, r2 = function(e, t) {
      var i = e.namespaceURI === Va ? e.ownerDocument.createElement(e.tagName) : e.ownerDocument.createElementNS(e.namespaceURI, e.tagName);
      return i.innerHTML = t, i.innerHTML;
    };
    var g_ = /\r\n?/g, S_ = /\u0000|\uFFFD/g;
    function Rm(e) {
      Wr(e);
      var t = typeof e == "string" ? e : "" + e;
      return t.replace(g_, `
`).replace(S_, "");
    }
    function wm(e, t, i, a) {
      var o = Rm(t), s = Rm(e);
      if (s !== o && (a && (Ii || (Ii = true, g('Text content did not match. Server: "%s" Client: "%s"', s, o))), i && Ne))
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function i2(e) {
      return e.nodeType === ia ? e : e.ownerDocument;
    }
    function b_() {
    }
    function Tm(e) {
      e.onclick = b_;
    }
    function C_(e, t, i, a, o) {
      for (var s in a)
        if (a.hasOwnProperty(s)) {
          var f = a[s];
          if (s === Hs)
            f && Object.freeze(f), Ev(t, f);
          else if (s === cp) {
            var p = f ? f[Em] : void 0;
            p != null && dv(t, p);
          } else if (s === Fs)
            if (typeof f == "string") {
              var v = e !== "textarea" || f !== "";
              v && cc(t, f);
            } else
              typeof f == "number" && cc(t, "" + f);
          else
            s === _m || s === zu || s === e2 || (It.hasOwnProperty(s) ? f != null && (typeof f != "function" && xm(s, f), s === "onScroll" && xn("scroll", t)) : f != null && Ti(t, s, f, o));
        }
    }
    function __(e, t, i, a) {
      for (var o = 0; o < t.length; o += 2) {
        var s = t[o], f = t[o + 1];
        s === Hs ? Ev(e, f) : s === cp ? dv(e, f) : s === Fs ? cc(e, f) : Ti(e, s, f, a);
      }
    }
    function E_(e, t, i, a) {
      var o, s = i2(i), f, p = a;
      if (p === Va && (p = uc(e)), p === Va) {
        if (o = ja(e, t), !o && e !== e.toLowerCase() && g("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", e), e === "script") {
          var v = s.createElement("div");
          v.innerHTML = "<script></script>";
          var y = v.firstChild;
          f = v.removeChild(y);
        } else if (typeof t.is == "string")
          f = s.createElement(e, {
            is: t.is
          });
        else if (f = s.createElement(e), e === "select") {
          var S = f;
          t.multiple ? S.multiple = true : t.size && (S.size = t.size);
        }
      } else
        f = s.createElementNS(p, e);
      return p === Va && !o && Object.prototype.toString.call(f) === "[object HTMLUnknownElement]" && !Qn.call(Iy, e) && (Iy[e] = true, g("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", e)), f;
    }
    function k_(e, t) {
      return i2(t).createTextNode(e);
    }
    function x_(e, t, i, a) {
      var o = ja(t, i);
      km(t, i);
      var s;
      switch (t) {
        case "dialog":
          xn("cancel", e), xn("close", e), s = i;
          break;
        case "iframe":
        case "object":
        case "embed":
          xn("load", e), s = i;
          break;
        case "video":
        case "audio":
          for (var f = 0; f < op.length; f++)
            xn(op[f], e);
          s = i;
          break;
        case "source":
          xn("error", e), s = i;
          break;
        case "img":
        case "image":
        case "link":
          xn("error", e), xn("load", e), s = i;
          break;
        case "details":
          xn("toggle", e), s = i;
          break;
        case "input":
          k(e, i), s = m(e, i), xn("invalid", e);
          break;
        case "option":
          Jt(e, i), s = i;
          break;
        case "select":
          as(e, i), s = is(e, i), xn("invalid", e);
          break;
        case "textarea":
          sv(e, i), s = Jf(e, i), xn("invalid", e);
          break;
        default:
          s = i;
      }
      switch (dc(t, s), C_(t, e, a, s, o), t) {
        case "input":
          Di(e), ue(e, i, false);
          break;
        case "textarea":
          Di(e), fv(e);
          break;
        case "option":
          an(e, i);
          break;
        case "select":
          Kf(e, i);
          break;
        default:
          typeof s.onClick == "function" && Tm(e);
          break;
      }
    }
    function R_(e, t, i, a, o) {
      km(t, a);
      var s = null, f, p;
      switch (t) {
        case "input":
          f = m(e, i), p = m(e, a), s = [];
          break;
        case "select":
          f = is(e, i), p = is(e, a), s = [];
          break;
        case "textarea":
          f = Jf(e, i), p = Jf(e, a), s = [];
          break;
        default:
          f = i, p = a, typeof f.onClick != "function" && typeof p.onClick == "function" && Tm(e);
          break;
      }
      dc(t, p);
      var v, y, S = null;
      for (v in f)
        if (!(p.hasOwnProperty(v) || !f.hasOwnProperty(v) || f[v] == null))
          if (v === Hs) {
            var O = f[v];
            for (y in O)
              O.hasOwnProperty(y) && (S || (S = {}), S[y] = "");
          } else
            v === cp || v === Fs || v === _m || v === zu || v === e2 || (It.hasOwnProperty(v) ? s || (s = []) : (s = s || []).push(v, null));
      for (v in p) {
        var N = p[v], U = f != null ? f[v] : void 0;
        if (!(!p.hasOwnProperty(v) || N === U || N == null && U == null))
          if (v === Hs)
            if (N && Object.freeze(N), U) {
              for (y in U)
                U.hasOwnProperty(y) && (!N || !N.hasOwnProperty(y)) && (S || (S = {}), S[y] = "");
              for (y in N)
                N.hasOwnProperty(y) && U[y] !== N[y] && (S || (S = {}), S[y] = N[y]);
            } else
              S || (s || (s = []), s.push(v, S)), S = N;
          else if (v === cp) {
            var F = N ? N[Em] : void 0, I = U ? U[Em] : void 0;
            F != null && I !== F && (s = s || []).push(v, F);
          } else
            v === Fs ? (typeof N == "string" || typeof N == "number") && (s = s || []).push(v, "" + N) : v === _m || v === zu || (It.hasOwnProperty(v) ? (N != null && (typeof N != "function" && xm(v, N), v === "onScroll" && xn("scroll", e)), !s && U !== N && (s = [])) : (s = s || []).push(v, N));
      }
      return S && (os(S, p[Hs]), (s = s || []).push(Hs, S)), s;
    }
    function w_(e, t, i, a, o) {
      i === "input" && o.type === "radio" && o.name != null && j(e, o);
      var s = ja(i, a), f = ja(i, o);
      switch (__(e, t, s, f), i) {
        case "input":
          B(e, o);
          break;
        case "textarea":
          cv(e, o);
          break;
        case "select":
          ty(e, o);
          break;
      }
    }
    function T_(e) {
      {
        var t = e.toLowerCase();
        return pc.hasOwnProperty(t) && pc[t] || null;
      }
    }
    function N_(e, t, i, a, o, s, f) {
      var p, v;
      switch (p = ja(t, i), km(t, i), t) {
        case "dialog":
          xn("cancel", e), xn("close", e);
          break;
        case "iframe":
        case "object":
        case "embed":
          xn("load", e);
          break;
        case "video":
        case "audio":
          for (var y = 0; y < op.length; y++)
            xn(op[y], e);
          break;
        case "source":
          xn("error", e);
          break;
        case "img":
        case "image":
        case "link":
          xn("error", e), xn("load", e);
          break;
        case "details":
          xn("toggle", e);
          break;
        case "input":
          k(e, i), xn("invalid", e);
          break;
        case "option":
          Jt(e, i);
          break;
        case "select":
          as(e, i), xn("invalid", e);
          break;
        case "textarea":
          sv(e, i), xn("invalid", e);
          break;
      }
      dc(t, i);
      {
        v = /* @__PURE__ */ new Set();
        for (var S = e.attributes, O = 0; O < S.length; O++) {
          var N = S[O].name.toLowerCase();
          switch (N) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              v.add(S[O].name);
          }
        }
      }
      var U = null;
      for (var F in i)
        if (i.hasOwnProperty(F)) {
          var I = i[F];
          if (F === Fs)
            typeof I == "string" ? e.textContent !== I && (i[zu] !== true && wm(e.textContent, I, s, f), U = [Fs, I]) : typeof I == "number" && e.textContent !== "" + I && (i[zu] !== true && wm(e.textContent, I, s, f), U = [Fs, "" + I]);
          else if (It.hasOwnProperty(F))
            I != null && (typeof I != "function" && xm(F, I), F === "onScroll" && xn("scroll", e));
          else if (f && // Convince Flow we've calculated it (it's DEV-only in this method.)
          typeof p == "boolean") {
            var Re = void 0, Ye = p && it ? null : Tr(F);
            if (i[zu] !== true) {
              if (!(F === _m || F === zu || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              F === "value" || F === "checked" || F === "selected")) {
                if (F === cp) {
                  var Ue = e.innerHTML, Nt = I ? I[Em] : void 0;
                  if (Nt != null) {
                    var _t = r2(e, Nt);
                    _t !== Ue && fp(F, Ue, _t);
                  }
                } else if (F === Hs) {
                  if (v.delete(F), n2) {
                    var A = sy(I);
                    Re = e.getAttribute("style"), A !== Re && fp(F, Re, A);
                  }
                } else if (p && !it)
                  v.delete(F.toLowerCase()), Re = pa(e, F, I), I !== Re && fp(F, Re, I);
                else if (!Sn(F, Ye, p) && !Zt(F, I, Ye, p)) {
                  var $ = false;
                  if (Ye !== null)
                    v.delete(Ye.attributeName), Re = mi(e, F, I, Ye);
                  else {
                    var z = a;
                    if (z === Va && (z = uc(t)), z === Va)
                      v.delete(F.toLowerCase());
                    else {
                      var le = T_(F);
                      le !== null && le !== F && ($ = true, v.delete(le)), v.delete(F);
                    }
                    Re = pa(e, F, I);
                  }
                  var we = it;
                  !we && I !== Re && !$ && fp(F, Re, I);
                }
              }
            }
          }
        }
      switch (f && // $FlowFixMe - Should be inferred as not undefined.
      v.size > 0 && i[zu] !== true && t2(v), t) {
        case "input":
          Di(e), ue(e, i, true);
          break;
        case "textarea":
          Di(e), fv(e);
          break;
        case "select":
        case "option":
          break;
        default:
          typeof i.onClick == "function" && Tm(e);
          break;
      }
      return U;
    }
    function D_(e, t, i) {
      var a = e.nodeValue !== t;
      return a;
    }
    function $y(e, t) {
      {
        if (Ii)
          return;
        Ii = true, g("Did not expect server HTML to contain a <%s> in <%s>.", t.nodeName.toLowerCase(), e.nodeName.toLowerCase());
      }
    }
    function Yy(e, t) {
      {
        if (Ii)
          return;
        Ii = true, g('Did not expect server HTML to contain the text node "%s" in <%s>.', t.nodeValue, e.nodeName.toLowerCase());
      }
    }
    function Wy(e, t, i) {
      {
        if (Ii)
          return;
        Ii = true, g("Expected server HTML to contain a matching <%s> in <%s>.", t, e.nodeName.toLowerCase());
      }
    }
    function Qy(e, t) {
      {
        if (t === "" || Ii)
          return;
        Ii = true, g('Expected server HTML to contain a matching text node for "%s" in <%s>.', t, e.nodeName.toLowerCase());
      }
    }
    function O_(e, t, i) {
      switch (t) {
        case "input":
          Ge(e, i);
          return;
        case "textarea":
          ed(e, i);
          return;
        case "select":
          ny(e, i);
          return;
      }
    }
    var dp = function() {
    }, pp = function() {
    };
    {
      var L_ = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], a2 = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
      ], M_ = a2.concat(["button"]), A_ = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], l2 = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      pp = function(e, t) {
        var i = pt({}, e || l2), a = {
          tag: t
        };
        return a2.indexOf(t) !== -1 && (i.aTagInScope = null, i.buttonTagInScope = null, i.nobrTagInScope = null), M_.indexOf(t) !== -1 && (i.pTagInButtonScope = null), L_.indexOf(t) !== -1 && t !== "address" && t !== "div" && t !== "p" && (i.listItemTagAutoclosing = null, i.dlItemTagAutoclosing = null), i.current = a, t === "form" && (i.formTag = a), t === "a" && (i.aTagInScope = a), t === "button" && (i.buttonTagInScope = a), t === "nobr" && (i.nobrTagInScope = a), t === "p" && (i.pTagInButtonScope = a), t === "li" && (i.listItemTagAutoclosing = a), (t === "dd" || t === "dt") && (i.dlItemTagAutoclosing = a), i;
      };
      var z_ = function(e, t) {
        switch (t) {
          case "select":
            return e === "option" || e === "optgroup" || e === "#text";
          case "optgroup":
            return e === "option" || e === "#text";
          case "option":
            return e === "#text";
          case "tr":
            return e === "th" || e === "td" || e === "style" || e === "script" || e === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return e === "tr" || e === "style" || e === "script" || e === "template";
          case "colgroup":
            return e === "col" || e === "template";
          case "table":
            return e === "caption" || e === "colgroup" || e === "tbody" || e === "tfoot" || e === "thead" || e === "style" || e === "script" || e === "template";
          case "head":
            return e === "base" || e === "basefont" || e === "bgsound" || e === "link" || e === "meta" || e === "title" || e === "noscript" || e === "noframes" || e === "style" || e === "script" || e === "template";
          case "html":
            return e === "head" || e === "body" || e === "frameset";
          case "frameset":
            return e === "frame";
          case "#document":
            return e === "html";
        }
        switch (e) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return t !== "h1" && t !== "h2" && t !== "h3" && t !== "h4" && t !== "h5" && t !== "h6";
          case "rp":
          case "rt":
            return A_.indexOf(t) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return t == null;
        }
        return true;
      }, V_ = function(e, t) {
        switch (e) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return t.pTagInButtonScope;
          case "form":
            return t.formTag || t.pTagInButtonScope;
          case "li":
            return t.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return t.dlItemTagAutoclosing;
          case "button":
            return t.buttonTagInScope;
          case "a":
            return t.aTagInScope;
          case "nobr":
            return t.nobrTagInScope;
        }
        return null;
      }, o2 = {};
      dp = function(e, t, i) {
        i = i || l2;
        var a = i.current, o = a && a.tag;
        t != null && (e != null && g("validateDOMNesting: when childText is passed, childTag should be null"), e = "#text");
        var s = z_(e, o) ? null : a, f = s ? null : V_(e, i), p = s || f;
        if (p) {
          var v = p.tag, y = !!s + "|" + e + "|" + v;
          if (!o2[y]) {
            o2[y] = true;
            var S = e, O = "";
            if (e === "#text" ? /\S/.test(t) ? S = "Text nodes" : (S = "Whitespace text nodes", O = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : S = "<" + e + ">", s) {
              var N = "";
              v === "table" && e === "tr" && (N += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), g("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", S, v, O, N);
            } else
              g("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", S, v);
          }
        }
      };
    }
    var Nm = "suppressHydrationWarning", Dm = "$", Om = "/$", vp = "$?", mp = "$!", U_ = "style", Gy = null, qy = null;
    function j_(e) {
      var t, i, a = e.nodeType;
      switch (a) {
        case ia:
        case ao: {
          t = a === ia ? "#document" : "#fragment";
          var o = e.documentElement;
          i = o ? o.namespaceURI : nd(null, "");
          break;
        }
        default: {
          var s = a === zn ? e.parentNode : e, f = s.namespaceURI || null;
          t = s.tagName, i = nd(f, t);
          break;
        }
      }
      {
        var p = t.toLowerCase(), v = pp(null, p);
        return {
          namespace: i,
          ancestorInfo: v
        };
      }
    }
    function F_(e, t, i) {
      {
        var a = e, o = nd(a.namespace, t), s = pp(a.ancestorInfo, t);
        return {
          namespace: o,
          ancestorInfo: s
        };
      }
    }
    function C5(e) {
      return e;
    }
    function H_(e) {
      Gy = Ci(), qy = e_();
      var t = null;
      return er(false), t;
    }
    function P_(e) {
      t_(qy), er(Gy), Gy = null, qy = null;
    }
    function B_(e, t, i, a, o) {
      var s;
      {
        var f = a;
        if (dp(e, null, f.ancestorInfo), typeof t.children == "string" || typeof t.children == "number") {
          var p = "" + t.children, v = pp(f.ancestorInfo, e);
          dp(null, p, v);
        }
        s = f.namespace;
      }
      var y = E_(e, t, i, s);
      return gp(o, y), r1(y, t), y;
    }
    function I_(e, t) {
      e.appendChild(t);
    }
    function $_(e, t, i, a, o) {
      switch (x_(e, t, i, a), t) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!i.autoFocus;
        case "img":
          return true;
        default:
          return false;
      }
    }
    function Y_(e, t, i, a, o, s) {
      {
        var f = s;
        if (typeof a.children != typeof i.children && (typeof a.children == "string" || typeof a.children == "number")) {
          var p = "" + a.children, v = pp(f.ancestorInfo, t);
          dp(null, p, v);
        }
      }
      return R_(e, t, i, a);
    }
    function Xy(e, t) {
      return e === "textarea" || e === "noscript" || typeof t.children == "string" || typeof t.children == "number" || typeof t.dangerouslySetInnerHTML == "object" && t.dangerouslySetInnerHTML !== null && t.dangerouslySetInnerHTML.__html != null;
    }
    function W_(e, t, i, a) {
      {
        var o = i;
        dp(null, e, o.ancestorInfo);
      }
      var s = k_(e, t);
      return gp(a, s), s;
    }
    function Q_() {
      var e = window.event;
      return e === void 0 ? Wa : Lr(e.type);
    }
    var Ky = typeof setTimeout == "function" ? setTimeout : void 0, G_ = typeof clearTimeout == "function" ? clearTimeout : void 0, Zy = -1, u2 = typeof Promise == "function" ? Promise : void 0, q_ = typeof queueMicrotask == "function" ? queueMicrotask : typeof u2 < "u" ? function(e) {
      return u2.resolve(null).then(e).catch(X_);
    } : Ky;
    function X_(e) {
      setTimeout(function() {
        throw e;
      });
    }
    function K_(e, t, i, a) {
      switch (t) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          i.autoFocus && e.focus();
          return;
        case "img": {
          i.src && (e.src = i.src);
          return;
        }
      }
    }
    function Z_(e, t, i, a, o, s) {
      w_(e, t, i, a, o), r1(e, o);
    }
    function s2(e) {
      cc(e, "");
    }
    function J_(e, t, i) {
      e.nodeValue = i;
    }
    function eE(e, t) {
      e.appendChild(t);
    }
    function tE(e, t) {
      var i;
      e.nodeType === zn ? (i = e.parentNode, i.insertBefore(t, e)) : (i = e, i.appendChild(t));
      var a = e._reactRootContainer;
      a == null && i.onclick === null && Tm(i);
    }
    function nE(e, t, i) {
      e.insertBefore(t, i);
    }
    function rE(e, t, i) {
      e.nodeType === zn ? e.parentNode.insertBefore(t, i) : e.insertBefore(t, i);
    }
    function iE(e, t) {
      e.removeChild(t);
    }
    function aE(e, t) {
      e.nodeType === zn ? e.parentNode.removeChild(t) : e.removeChild(t);
    }
    function Jy(e, t) {
      var i = t, a = 0;
      do {
        var o = i.nextSibling;
        if (e.removeChild(i), o && o.nodeType === zn) {
          var s = o.data;
          if (s === Om)
            if (a === 0) {
              e.removeChild(o), Ct(t);
              return;
            } else
              a--;
          else
            (s === Dm || s === vp || s === mp) && a++;
        }
        i = o;
      } while (i);
      Ct(t);
    }
    function lE(e, t) {
      e.nodeType === zn ? Jy(e.parentNode, t) : e.nodeType === Zr && Jy(e, t), Ct(e);
    }
    function oE(e) {
      e = e;
      var t = e.style;
      typeof t.setProperty == "function" ? t.setProperty("display", "none", "important") : t.display = "none";
    }
    function uE(e) {
      e.nodeValue = "";
    }
    function sE(e, t) {
      e = e;
      var i = t[U_], a = i != null && i.hasOwnProperty("display") ? i.display : null;
      e.style.display = fc("display", a);
    }
    function cE(e, t) {
      e.nodeValue = t;
    }
    function fE(e) {
      e.nodeType === Zr ? e.textContent = "" : e.nodeType === ia && e.documentElement && e.removeChild(e.documentElement);
    }
    function dE(e, t, i) {
      return e.nodeType !== Zr || t.toLowerCase() !== e.nodeName.toLowerCase() ? null : e;
    }
    function pE(e, t) {
      return t === "" || e.nodeType !== Ua ? null : e;
    }
    function vE(e) {
      return e.nodeType !== zn ? null : e;
    }
    function c2(e) {
      return e.data === vp;
    }
    function e1(e) {
      return e.data === mp;
    }
    function mE(e) {
      var t = e.nextSibling && e.nextSibling.dataset, i, a, o;
      return t && (i = t.dgst, a = t.msg, o = t.stck), {
        message: a,
        digest: i,
        stack: o
      };
    }
    function hE(e, t) {
      e._reactRetry = t;
    }
    function Lm(e) {
      for (; e != null; e = e.nextSibling) {
        var t = e.nodeType;
        if (t === Zr || t === Ua)
          break;
        if (t === zn) {
          var i = e.data;
          if (i === Dm || i === mp || i === vp)
            break;
          if (i === Om)
            return null;
        }
      }
      return e;
    }
    function hp(e) {
      return Lm(e.nextSibling);
    }
    function yE(e) {
      return Lm(e.firstChild);
    }
    function gE(e) {
      return Lm(e.firstChild);
    }
    function SE(e) {
      return Lm(e.nextSibling);
    }
    function bE(e, t, i, a, o, s, f) {
      gp(s, e), r1(e, i);
      var p;
      {
        var v = o;
        p = v.namespace;
      }
      var y = (s.mode & mt) !== Qe;
      return N_(e, t, i, p, a, y, f);
    }
    function CE(e, t, i, a) {
      return gp(i, e), i.mode & mt, D_(e, t);
    }
    function _E(e, t) {
      gp(t, e);
    }
    function EE(e) {
      for (var t = e.nextSibling, i = 0; t; ) {
        if (t.nodeType === zn) {
          var a = t.data;
          if (a === Om) {
            if (i === 0)
              return hp(t);
            i--;
          } else
            (a === Dm || a === mp || a === vp) && i++;
        }
        t = t.nextSibling;
      }
      return null;
    }
    function f2(e) {
      for (var t = e.previousSibling, i = 0; t; ) {
        if (t.nodeType === zn) {
          var a = t.data;
          if (a === Dm || a === mp || a === vp) {
            if (i === 0)
              return t;
            i--;
          } else
            a === Om && i++;
        }
        t = t.previousSibling;
      }
      return null;
    }
    function kE(e) {
      Ct(e);
    }
    function xE(e) {
      Ct(e);
    }
    function RE(e) {
      return e !== "head" && e !== "body";
    }
    function wE(e, t, i, a) {
      var o = true;
      wm(t.nodeValue, i, a, o);
    }
    function TE(e, t, i, a, o, s) {
      if (t[Nm] !== true) {
        var f = true;
        wm(a.nodeValue, o, s, f);
      }
    }
    function NE(e, t) {
      t.nodeType === Zr ? $y(e, t) : t.nodeType === zn || Yy(e, t);
    }
    function DE(e, t) {
      {
        var i = e.parentNode;
        i !== null && (t.nodeType === Zr ? $y(i, t) : t.nodeType === zn || Yy(i, t));
      }
    }
    function OE(e, t, i, a, o) {
      (o || t[Nm] !== true) && (a.nodeType === Zr ? $y(i, a) : a.nodeType === zn || Yy(i, a));
    }
    function LE(e, t, i) {
      Wy(e, t);
    }
    function ME(e, t) {
      Qy(e, t);
    }
    function AE(e, t, i) {
      {
        var a = e.parentNode;
        a !== null && Wy(a, t);
      }
    }
    function zE(e, t) {
      {
        var i = e.parentNode;
        i !== null && Qy(i, t);
      }
    }
    function VE(e, t, i, a, o, s) {
      (s || t[Nm] !== true) && Wy(i, a);
    }
    function UE(e, t, i, a, o) {
      (o || t[Nm] !== true) && Qy(i, a);
    }
    function jE(e) {
      g("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", e.nodeName.toLowerCase());
    }
    function FE(e) {
      up(e);
    }
    var gf = Math.random().toString(36).slice(2), Sf = "__reactFiber$" + gf, t1 = "__reactProps$" + gf, yp = "__reactContainer$" + gf, n1 = "__reactEvents$" + gf, HE = "__reactListeners$" + gf, PE = "__reactHandles$" + gf;
    function BE(e) {
      delete e[Sf], delete e[t1], delete e[n1], delete e[HE], delete e[PE];
    }
    function gp(e, t) {
      t[Sf] = e;
    }
    function Mm(e, t) {
      t[yp] = e;
    }
    function d2(e) {
      e[yp] = null;
    }
    function Sp(e) {
      return !!e[yp];
    }
    function Ps(e) {
      var t = e[Sf];
      if (t)
        return t;
      for (var i = e.parentNode; i; ) {
        if (t = i[yp] || i[Sf], t) {
          var a = t.alternate;
          if (t.child !== null || a !== null && a.child !== null)
            for (var o = f2(e); o !== null; ) {
              var s = o[Sf];
              if (s)
                return s;
              o = f2(o);
            }
          return t;
        }
        e = i, i = e.parentNode;
      }
      return null;
    }
    function Vu(e) {
      var t = e[Sf] || e[yp];
      return t && (t.tag === q || t.tag === fe || t.tag === be || t.tag === W) ? t : null;
    }
    function bf(e) {
      if (e.tag === q || e.tag === fe)
        return e.stateNode;
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function Am(e) {
      return e[t1] || null;
    }
    function r1(e, t) {
      e[t1] = t;
    }
    function IE(e) {
      var t = e[n1];
      return t === void 0 && (t = e[n1] = /* @__PURE__ */ new Set()), t;
    }
    var p2 = {}, v2 = b.ReactDebugCurrentFrame;
    function zm(e) {
      if (e) {
        var t = e._owner, i = ha(e.type, e._source, t ? t.type : null);
        v2.setExtraStackFrame(i);
      } else
        v2.setExtraStackFrame(null);
    }
    function Ka(e, t, i, a, o) {
      {
        var s = Function.call.bind(Qn);
        for (var f in e)
          if (s(e, f)) {
            var p = void 0;
            try {
              if (typeof e[f] != "function") {
                var v = Error((a || "React class") + ": " + i + " type `" + f + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof e[f] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw v.name = "Invariant Violation", v;
              }
              p = e[f](t, f, a, i, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (y) {
              p = y;
            }
            p && !(p instanceof Error) && (zm(o), g("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", a || "React class", i, f, typeof p), zm(null)), p instanceof Error && !(p.message in p2) && (p2[p.message] = true, zm(o), g("Failed %s type: %s", i, p.message), zm(null));
          }
      }
    }
    var i1 = [], Vm;
    Vm = [];
    var Ao = -1;
    function Uu(e) {
      return {
        current: e
      };
    }
    function oi(e, t) {
      if (Ao < 0) {
        g("Unexpected pop.");
        return;
      }
      t !== Vm[Ao] && g("Unexpected Fiber popped."), e.current = i1[Ao], i1[Ao] = null, Vm[Ao] = null, Ao--;
    }
    function ui(e, t, i) {
      Ao++, i1[Ao] = e.current, Vm[Ao] = i, e.current = t;
    }
    var a1;
    a1 = {};
    var sa = {};
    Object.freeze(sa);
    var zo = Uu(sa), Il = Uu(false), l1 = sa;
    function Cf(e, t, i) {
      return i && $l(t) ? l1 : zo.current;
    }
    function m2(e, t, i) {
      {
        var a = e.stateNode;
        a.__reactInternalMemoizedUnmaskedChildContext = t, a.__reactInternalMemoizedMaskedChildContext = i;
      }
    }
    function _f(e, t) {
      {
        var i = e.type, a = i.contextTypes;
        if (!a)
          return sa;
        var o = e.stateNode;
        if (o && o.__reactInternalMemoizedUnmaskedChildContext === t)
          return o.__reactInternalMemoizedMaskedChildContext;
        var s = {};
        for (var f in a)
          s[f] = t[f];
        {
          var p = at(e) || "Unknown";
          Ka(a, s, "context", p);
        }
        return o && m2(e, t, s), s;
      }
    }
    function Um() {
      return Il.current;
    }
    function $l(e) {
      {
        var t = e.childContextTypes;
        return t != null;
      }
    }
    function jm(e) {
      oi(Il, e), oi(zo, e);
    }
    function o1(e) {
      oi(Il, e), oi(zo, e);
    }
    function h2(e, t, i) {
      {
        if (zo.current !== sa)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        ui(zo, t, e), ui(Il, i, e);
      }
    }
    function y2(e, t, i) {
      {
        var a = e.stateNode, o = t.childContextTypes;
        if (typeof a.getChildContext != "function") {
          {
            var s = at(e) || "Unknown";
            a1[s] || (a1[s] = true, g("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", s, s));
          }
          return i;
        }
        var f = a.getChildContext();
        for (var p in f)
          if (!(p in o))
            throw new Error((at(e) || "Unknown") + '.getChildContext(): key "' + p + '" is not defined in childContextTypes.');
        {
          var v = at(e) || "Unknown";
          Ka(o, f, "child context", v);
        }
        return pt({}, i, f);
      }
    }
    function Fm(e) {
      {
        var t = e.stateNode, i = t && t.__reactInternalMemoizedMergedChildContext || sa;
        return l1 = zo.current, ui(zo, i, e), ui(Il, Il.current, e), true;
      }
    }
    function g2(e, t, i) {
      {
        var a = e.stateNode;
        if (!a)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (i) {
          var o = y2(e, t, l1);
          a.__reactInternalMemoizedMergedChildContext = o, oi(Il, e), oi(zo, e), ui(zo, o, e), ui(Il, i, e);
        } else
          oi(Il, e), ui(Il, i, e);
      }
    }
    function $E(e) {
      {
        if (!_d(e) || e.tag !== Q)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var t = e;
        do {
          switch (t.tag) {
            case W:
              return t.stateNode.context;
            case Q: {
              var i = t.type;
              if ($l(i))
                return t.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          t = t.return;
        } while (t !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var ju = 0, Hm = 1, Vo = null, u1 = false, s1 = false;
    function S2(e) {
      Vo === null ? Vo = [e] : Vo.push(e);
    }
    function YE(e) {
      u1 = true, S2(e);
    }
    function b2() {
      u1 && Fu();
    }
    function Fu() {
      if (!s1 && Vo !== null) {
        s1 = true;
        var e = 0, t = Fi();
        try {
          var i = true, a = Vo;
          for (In(Cr); e < a.length; e++) {
            var o = a[e];
            do
              o = o(i);
            while (o !== null);
          }
          Vo = null, u1 = false;
        } catch (s) {
          throw Vo !== null && (Vo = Vo.slice(e + 1)), _c(kc, Fu), s;
        } finally {
          In(t), s1 = false;
        }
      }
      return null;
    }
    var Ef = [], kf = 0, Pm = null, Bm = 0, xa = [], Ra = 0, Bs = null, Uo = 1, jo = "";
    function WE(e) {
      return $s(), (e.flags & Sd) !== $e;
    }
    function QE(e) {
      return $s(), Bm;
    }
    function GE() {
      var e = jo, t = Uo, i = t & ~qE(t);
      return i.toString(32) + e;
    }
    function Is(e, t) {
      $s(), Ef[kf++] = Bm, Ef[kf++] = Pm, Pm = e, Bm = t;
    }
    function C2(e, t, i) {
      $s(), xa[Ra++] = Uo, xa[Ra++] = jo, xa[Ra++] = Bs, Bs = e;
      var a = Uo, o = jo, s = Im(a) - 1, f = a & ~(1 << s), p = i + 1, v = Im(t) + s;
      if (v > 30) {
        var y = s - s % 5, S = (1 << y) - 1, O = (f & S).toString(32), N = f >> y, U = s - y, F = Im(t) + U, I = p << U, Re = I | N, Ye = O + o;
        Uo = 1 << F | Re, jo = Ye;
      } else {
        var Ue = p << s, Nt = Ue | f, _t = o;
        Uo = 1 << v | Nt, jo = _t;
      }
    }
    function c1(e) {
      $s();
      var t = e.return;
      if (t !== null) {
        var i = 1, a = 0;
        Is(e, i), C2(e, i, a);
      }
    }
    function Im(e) {
      return 32 - Dc(e);
    }
    function qE(e) {
      return 1 << Im(e) - 1;
    }
    function f1(e) {
      for (; e === Pm; )
        Pm = Ef[--kf], Ef[kf] = null, Bm = Ef[--kf], Ef[kf] = null;
      for (; e === Bs; )
        Bs = xa[--Ra], xa[Ra] = null, jo = xa[--Ra], xa[Ra] = null, Uo = xa[--Ra], xa[Ra] = null;
    }
    function XE() {
      return $s(), Bs !== null ? {
        id: Uo,
        overflow: jo
      } : null;
    }
    function KE(e, t) {
      $s(), xa[Ra++] = Uo, xa[Ra++] = jo, xa[Ra++] = Bs, Uo = t.id, jo = t.overflow, Bs = e;
    }
    function $s() {
      Ar() || g("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var Mr = null, wa = null, Za = false, Ys = false, Hu = null;
    function ZE() {
      Za && g("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function _2() {
      Ys = true;
    }
    function JE() {
      return Ys;
    }
    function ek(e) {
      var t = e.stateNode.containerInfo;
      return wa = gE(t), Mr = e, Za = true, Hu = null, Ys = false, true;
    }
    function tk(e, t, i) {
      return wa = SE(t), Mr = e, Za = true, Hu = null, Ys = false, i !== null && KE(e, i), true;
    }
    function E2(e, t) {
      switch (e.tag) {
        case W: {
          NE(e.stateNode.containerInfo, t);
          break;
        }
        case q: {
          var i = (e.mode & mt) !== Qe;
          OE(
            e.type,
            e.memoizedProps,
            e.stateNode,
            t,
            // TODO: Delete this argument when we remove the legacy root API.
            i
          );
          break;
        }
        case be: {
          var a = e.memoizedState;
          a.dehydrated !== null && DE(a.dehydrated, t);
          break;
        }
      }
    }
    function k2(e, t) {
      E2(e, t);
      var i = iR();
      i.stateNode = t, i.return = e;
      var a = e.deletions;
      a === null ? (e.deletions = [i], e.flags |= Bt) : a.push(i);
    }
    function d1(e, t) {
      {
        if (Ys)
          return;
        switch (e.tag) {
          case W: {
            var i = e.stateNode.containerInfo;
            switch (t.tag) {
              case q:
                var a = t.type;
                t.pendingProps, LE(i, a);
                break;
              case fe:
                var o = t.pendingProps;
                ME(i, o);
                break;
            }
            break;
          }
          case q: {
            var s = e.type, f = e.memoizedProps, p = e.stateNode;
            switch (t.tag) {
              case q: {
                var v = t.type, y = t.pendingProps, S = (e.mode & mt) !== Qe;
                VE(
                  s,
                  f,
                  p,
                  v,
                  y,
                  // TODO: Delete this argument when we remove the legacy root API.
                  S
                );
                break;
              }
              case fe: {
                var O = t.pendingProps, N = (e.mode & mt) !== Qe;
                UE(
                  s,
                  f,
                  p,
                  O,
                  // TODO: Delete this argument when we remove the legacy root API.
                  N
                );
                break;
              }
            }
            break;
          }
          case be: {
            var U = e.memoizedState, F = U.dehydrated;
            if (F !== null)
              switch (t.tag) {
                case q:
                  var I = t.type;
                  t.pendingProps, AE(F, I);
                  break;
                case fe:
                  var Re = t.pendingProps;
                  zE(F, Re);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function x2(e, t) {
      t.flags = t.flags & ~Ai | sn, d1(e, t);
    }
    function R2(e, t) {
      switch (e.tag) {
        case q: {
          var i = e.type;
          e.pendingProps;
          var a = dE(t, i);
          return a !== null ? (e.stateNode = a, Mr = e, wa = yE(a), true) : false;
        }
        case fe: {
          var o = e.pendingProps, s = pE(t, o);
          return s !== null ? (e.stateNode = s, Mr = e, wa = null, true) : false;
        }
        case be: {
          var f = vE(t);
          if (f !== null) {
            var p = {
              dehydrated: f,
              treeContext: XE(),
              retryLane: ai
            };
            e.memoizedState = p;
            var v = aR(f);
            return v.return = e, e.child = v, Mr = e, wa = null, true;
          }
          return false;
        }
        default:
          return false;
      }
    }
    function p1(e) {
      return (e.mode & mt) !== Qe && (e.flags & tt) === $e;
    }
    function v1(e) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function m1(e) {
      if (Za) {
        var t = wa;
        if (!t) {
          p1(e) && (d1(Mr, e), v1()), x2(Mr, e), Za = false, Mr = e;
          return;
        }
        var i = t;
        if (!R2(e, t)) {
          p1(e) && (d1(Mr, e), v1()), t = hp(i);
          var a = Mr;
          if (!t || !R2(e, t)) {
            x2(Mr, e), Za = false, Mr = e;
            return;
          }
          k2(a, i);
        }
      }
    }
    function nk(e, t, i) {
      var a = e.stateNode, o = !Ys, s = bE(a, e.type, e.memoizedProps, t, i, e, o);
      return e.updateQueue = s, s !== null;
    }
    function rk(e) {
      var t = e.stateNode, i = e.memoizedProps, a = CE(t, i, e);
      if (a) {
        var o = Mr;
        if (o !== null)
          switch (o.tag) {
            case W: {
              var s = o.stateNode.containerInfo, f = (o.mode & mt) !== Qe;
              wE(
                s,
                t,
                i,
                // TODO: Delete this argument when we remove the legacy root API.
                f
              );
              break;
            }
            case q: {
              var p = o.type, v = o.memoizedProps, y = o.stateNode, S = (o.mode & mt) !== Qe;
              TE(
                p,
                v,
                y,
                t,
                i,
                // TODO: Delete this argument when we remove the legacy root API.
                S
              );
              break;
            }
          }
      }
      return a;
    }
    function ik(e) {
      var t = e.memoizedState, i = t !== null ? t.dehydrated : null;
      if (!i)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      _E(i, e);
    }
    function ak(e) {
      var t = e.memoizedState, i = t !== null ? t.dehydrated : null;
      if (!i)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return EE(i);
    }
    function w2(e) {
      for (var t = e.return; t !== null && t.tag !== q && t.tag !== W && t.tag !== be; )
        t = t.return;
      Mr = t;
    }
    function $m(e) {
      if (e !== Mr)
        return false;
      if (!Za)
        return w2(e), Za = true, false;
      if (e.tag !== W && (e.tag !== q || RE(e.type) && !Xy(e.type, e.memoizedProps))) {
        var t = wa;
        if (t)
          if (p1(e))
            T2(e), v1();
          else
            for (; t; )
              k2(e, t), t = hp(t);
      }
      return w2(e), e.tag === be ? wa = ak(e) : wa = Mr ? hp(e.stateNode) : null, true;
    }
    function lk() {
      return Za && wa !== null;
    }
    function T2(e) {
      for (var t = wa; t; )
        E2(e, t), t = hp(t);
    }
    function xf() {
      Mr = null, wa = null, Za = false, Ys = false;
    }
    function N2() {
      Hu !== null && (Eb(Hu), Hu = null);
    }
    function Ar() {
      return Za;
    }
    function h1(e) {
      Hu === null ? Hu = [e] : Hu.push(e);
    }
    var ok = b.ReactCurrentBatchConfig, uk = null;
    function sk() {
      return ok.transition;
    }
    var Ja = {
      recordUnsafeLifecycleWarnings: function(e, t) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(e, t) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var ck = function(e) {
        for (var t = null, i = e; i !== null; )
          i.mode & En && (t = i), i = i.return;
        return t;
      }, Ws = function(e) {
        var t = [];
        return e.forEach(function(i) {
          t.push(i);
        }), t.sort().join(", ");
      }, bp = [], Cp = [], _p = [], Ep = [], kp = [], xp = [], Qs = /* @__PURE__ */ new Set();
      Ja.recordUnsafeLifecycleWarnings = function(e, t) {
        Qs.has(e.type) || (typeof t.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        t.componentWillMount.__suppressDeprecationWarning !== true && bp.push(e), e.mode & En && typeof t.UNSAFE_componentWillMount == "function" && Cp.push(e), typeof t.componentWillReceiveProps == "function" && t.componentWillReceiveProps.__suppressDeprecationWarning !== true && _p.push(e), e.mode & En && typeof t.UNSAFE_componentWillReceiveProps == "function" && Ep.push(e), typeof t.componentWillUpdate == "function" && t.componentWillUpdate.__suppressDeprecationWarning !== true && kp.push(e), e.mode & En && typeof t.UNSAFE_componentWillUpdate == "function" && xp.push(e));
      }, Ja.flushPendingUnsafeLifecycleWarnings = function() {
        var e = /* @__PURE__ */ new Set();
        bp.length > 0 && (bp.forEach(function(N) {
          e.add(at(N) || "Component"), Qs.add(N.type);
        }), bp = []);
        var t = /* @__PURE__ */ new Set();
        Cp.length > 0 && (Cp.forEach(function(N) {
          t.add(at(N) || "Component"), Qs.add(N.type);
        }), Cp = []);
        var i = /* @__PURE__ */ new Set();
        _p.length > 0 && (_p.forEach(function(N) {
          i.add(at(N) || "Component"), Qs.add(N.type);
        }), _p = []);
        var a = /* @__PURE__ */ new Set();
        Ep.length > 0 && (Ep.forEach(function(N) {
          a.add(at(N) || "Component"), Qs.add(N.type);
        }), Ep = []);
        var o = /* @__PURE__ */ new Set();
        kp.length > 0 && (kp.forEach(function(N) {
          o.add(at(N) || "Component"), Qs.add(N.type);
        }), kp = []);
        var s = /* @__PURE__ */ new Set();
        if (xp.length > 0 && (xp.forEach(function(N) {
          s.add(at(N) || "Component"), Qs.add(N.type);
        }), xp = []), t.size > 0) {
          var f = Ws(t);
          g(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, f);
        }
        if (a.size > 0) {
          var p = Ws(a);
          g(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, p);
        }
        if (s.size > 0) {
          var v = Ws(s);
          g(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, v);
        }
        if (e.size > 0) {
          var y = Ws(e);
          P(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, y);
        }
        if (i.size > 0) {
          var S = Ws(i);
          P(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, S);
        }
        if (o.size > 0) {
          var O = Ws(o);
          P(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, O);
        }
      };
      var Ym = /* @__PURE__ */ new Map(), D2 = /* @__PURE__ */ new Set();
      Ja.recordLegacyContextWarning = function(e, t) {
        var i = ck(e);
        if (i === null) {
          g("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (!D2.has(e.type)) {
          var a = Ym.get(i);
          (e.type.contextTypes != null || e.type.childContextTypes != null || t !== null && typeof t.getChildContext == "function") && (a === void 0 && (a = [], Ym.set(i, a)), a.push(e));
        }
      }, Ja.flushLegacyContextWarning = function() {
        Ym.forEach(function(e, t) {
          if (e.length !== 0) {
            var i = e[0], a = /* @__PURE__ */ new Set();
            e.forEach(function(s) {
              a.add(at(s) || "Component"), D2.add(s.type);
            });
            var o = Ws(a);
            try {
              Gt(i), g(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, o);
            } finally {
              Rn();
            }
          }
        });
      }, Ja.discardPendingWarnings = function() {
        bp = [], Cp = [], _p = [], Ep = [], kp = [], xp = [], Ym = /* @__PURE__ */ new Map();
      };
    }
    function el(e, t) {
      if (e && e.defaultProps) {
        var i = pt({}, t), a = e.defaultProps;
        for (var o in a)
          i[o] === void 0 && (i[o] = a[o]);
        return i;
      }
      return t;
    }
    var y1 = Uu(null), g1;
    g1 = {};
    var Wm = null, Rf = null, S1 = null, Qm = false;
    function Gm() {
      Wm = null, Rf = null, S1 = null, Qm = false;
    }
    function O2() {
      Qm = true;
    }
    function L2() {
      Qm = false;
    }
    function M2(e, t, i) {
      ui(y1, t._currentValue, e), t._currentValue = i, t._currentRenderer !== void 0 && t._currentRenderer !== null && t._currentRenderer !== g1 && g("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), t._currentRenderer = g1;
    }
    function b1(e, t) {
      var i = y1.current;
      oi(y1, t), e._currentValue = i;
    }
    function C1(e, t, i) {
      for (var a = e; a !== null; ) {
        var o = a.alternate;
        if (Eo(a.childLanes, t) ? o !== null && !Eo(o.childLanes, t) && (o.childLanes = st(o.childLanes, t)) : (a.childLanes = st(a.childLanes, t), o !== null && (o.childLanes = st(o.childLanes, t))), a === i)
          break;
        a = a.return;
      }
      a !== i && g("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function fk(e, t, i) {
      dk(e, t, i);
    }
    function dk(e, t, i) {
      var a = e.child;
      for (a !== null && (a.return = e); a !== null; ) {
        var o = void 0, s = a.dependencies;
        if (s !== null) {
          o = a.child;
          for (var f = s.firstContext; f !== null; ) {
            if (f.context === t) {
              if (a.tag === Q) {
                var p = Bn(i), v = Fo(on, p);
                v.tag = Xm;
                var y = a.updateQueue;
                if (y !== null) {
                  var S = y.shared, O = S.pending;
                  O === null ? v.next = v : (v.next = O.next, O.next = v), S.pending = v;
                }
              }
              a.lanes = st(a.lanes, i);
              var N = a.alternate;
              N !== null && (N.lanes = st(N.lanes, i)), C1(a.return, i, e), s.lanes = st(s.lanes, i);
              break;
            }
            f = f.next;
          }
        } else if (a.tag === de)
          o = a.type === e.type ? null : a.child;
        else if (a.tag === Lt) {
          var U = a.return;
          if (U === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          U.lanes = st(U.lanes, i);
          var F = U.alternate;
          F !== null && (F.lanes = st(F.lanes, i)), C1(U, i, e), o = a.sibling;
        } else
          o = a.child;
        if (o !== null)
          o.return = a;
        else
          for (o = a; o !== null; ) {
            if (o === e) {
              o = null;
              break;
            }
            var I = o.sibling;
            if (I !== null) {
              I.return = o.return, o = I;
              break;
            }
            o = o.return;
          }
        a = o;
      }
    }
    function wf(e, t) {
      Wm = e, Rf = null, S1 = null;
      var i = e.dependencies;
      if (i !== null) {
        var a = i.firstContext;
        a !== null && (li(i.lanes, t) && Fp(), i.firstContext = null);
      }
    }
    function nr(e) {
      Qm && g("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var t = e._currentValue;
      if (S1 !== e) {
        var i = {
          context: e,
          memoizedValue: t,
          next: null
        };
        if (Rf === null) {
          if (Wm === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          Rf = i, Wm.dependencies = {
            lanes: Y,
            firstContext: i
          };
        } else
          Rf = Rf.next = i;
      }
      return t;
    }
    var Gs = null;
    function _1(e) {
      Gs === null ? Gs = [e] : Gs.push(e);
    }
    function pk() {
      if (Gs !== null) {
        for (var e = 0; e < Gs.length; e++) {
          var t = Gs[e], i = t.interleaved;
          if (i !== null) {
            t.interleaved = null;
            var a = i.next, o = t.pending;
            if (o !== null) {
              var s = o.next;
              o.next = a, i.next = s;
            }
            t.pending = i;
          }
        }
        Gs = null;
      }
    }
    function A2(e, t, i, a) {
      var o = t.interleaved;
      return o === null ? (i.next = i, _1(t)) : (i.next = o.next, o.next = i), t.interleaved = i, qm(e, a);
    }
    function vk(e, t, i, a) {
      var o = t.interleaved;
      o === null ? (i.next = i, _1(t)) : (i.next = o.next, o.next = i), t.interleaved = i;
    }
    function mk(e, t, i, a) {
      var o = t.interleaved;
      return o === null ? (i.next = i, _1(t)) : (i.next = o.next, o.next = i), t.interleaved = i, qm(e, a);
    }
    function $i(e, t) {
      return qm(e, t);
    }
    var hk = qm;
    function qm(e, t) {
      e.lanes = st(e.lanes, t);
      var i = e.alternate;
      i !== null && (i.lanes = st(i.lanes, t)), i === null && (e.flags & (sn | Ai)) !== $e && zb(e);
      for (var a = e, o = e.return; o !== null; )
        o.childLanes = st(o.childLanes, t), i = o.alternate, i !== null ? i.childLanes = st(i.childLanes, t) : (o.flags & (sn | Ai)) !== $e && zb(e), a = o, o = o.return;
      if (a.tag === W) {
        var s = a.stateNode;
        return s;
      } else
        return null;
    }
    var z2 = 0, V2 = 1, Xm = 2, E1 = 3, Km = false, k1, Zm;
    k1 = false, Zm = null;
    function x1(e) {
      var t = {
        baseState: e.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: Y
        },
        effects: null
      };
      e.updateQueue = t;
    }
    function U2(e, t) {
      var i = t.updateQueue, a = e.updateQueue;
      if (i === a) {
        var o = {
          baseState: a.baseState,
          firstBaseUpdate: a.firstBaseUpdate,
          lastBaseUpdate: a.lastBaseUpdate,
          shared: a.shared,
          effects: a.effects
        };
        t.updateQueue = o;
      }
    }
    function Fo(e, t) {
      var i = {
        eventTime: e,
        lane: t,
        tag: z2,
        payload: null,
        callback: null,
        next: null
      };
      return i;
    }
    function Pu(e, t, i) {
      var a = e.updateQueue;
      if (a === null)
        return null;
      var o = a.shared;
      if (Zm === o && !k1 && (g("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), k1 = true), h3()) {
        var s = o.pending;
        return s === null ? t.next = t : (t.next = s.next, s.next = t), o.pending = t, hk(e, i);
      } else
        return mk(e, o, t, i);
    }
    function Jm(e, t, i) {
      var a = t.updateQueue;
      if (a !== null) {
        var o = a.shared;
        if (zd(i)) {
          var s = o.lanes;
          s = Ud(s, e.pendingLanes);
          var f = st(s, i);
          o.lanes = f, Cu(e, f);
        }
      }
    }
    function R1(e, t) {
      var i = e.updateQueue, a = e.alternate;
      if (a !== null) {
        var o = a.updateQueue;
        if (i === o) {
          var s = null, f = null, p = i.firstBaseUpdate;
          if (p !== null) {
            var v = p;
            do {
              var y = {
                eventTime: v.eventTime,
                lane: v.lane,
                tag: v.tag,
                payload: v.payload,
                callback: v.callback,
                next: null
              };
              f === null ? s = f = y : (f.next = y, f = y), v = v.next;
            } while (v !== null);
            f === null ? s = f = t : (f.next = t, f = t);
          } else
            s = f = t;
          i = {
            baseState: o.baseState,
            firstBaseUpdate: s,
            lastBaseUpdate: f,
            shared: o.shared,
            effects: o.effects
          }, e.updateQueue = i;
          return;
        }
      }
      var S = i.lastBaseUpdate;
      S === null ? i.firstBaseUpdate = t : S.next = t, i.lastBaseUpdate = t;
    }
    function yk(e, t, i, a, o, s) {
      switch (i.tag) {
        case V2: {
          var f = i.payload;
          if (typeof f == "function") {
            O2();
            var p = f.call(s, a, o);
            {
              if (e.mode & En) {
                Pn(true);
                try {
                  f.call(s, a, o);
                } finally {
                  Pn(false);
                }
              }
              L2();
            }
            return p;
          }
          return f;
        }
        case E1:
          e.flags = e.flags & ~Kn | tt;
        case z2: {
          var v = i.payload, y;
          if (typeof v == "function") {
            O2(), y = v.call(s, a, o);
            {
              if (e.mode & En) {
                Pn(true);
                try {
                  v.call(s, a, o);
                } finally {
                  Pn(false);
                }
              }
              L2();
            }
          } else
            y = v;
          return y == null ? a : pt({}, a, y);
        }
        case Xm:
          return Km = true, a;
      }
      return a;
    }
    function eh(e, t, i, a) {
      var o = e.updateQueue;
      Km = false, Zm = o.shared;
      var s = o.firstBaseUpdate, f = o.lastBaseUpdate, p = o.shared.pending;
      if (p !== null) {
        o.shared.pending = null;
        var v = p, y = v.next;
        v.next = null, f === null ? s = y : f.next = y, f = v;
        var S = e.alternate;
        if (S !== null) {
          var O = S.updateQueue, N = O.lastBaseUpdate;
          N !== f && (N === null ? O.firstBaseUpdate = y : N.next = y, O.lastBaseUpdate = v);
        }
      }
      if (s !== null) {
        var U = o.baseState, F = Y, I = null, Re = null, Ye = null, Ue = s;
        do {
          var Nt = Ue.lane, _t = Ue.eventTime;
          if (Eo(a, Nt)) {
            if (Ye !== null) {
              var $ = {
                eventTime: _t,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: wt,
                tag: Ue.tag,
                payload: Ue.payload,
                callback: Ue.callback,
                next: null
              };
              Ye = Ye.next = $;
            }
            U = yk(e, o, Ue, U, t, i);
            var z = Ue.callback;
            if (z !== null && // If the update was already committed, we should not queue its
            // callback again.
            Ue.lane !== wt) {
              e.flags |= Sa;
              var le = o.effects;
              le === null ? o.effects = [Ue] : le.push(Ue);
            }
          } else {
            var A = {
              eventTime: _t,
              lane: Nt,
              tag: Ue.tag,
              payload: Ue.payload,
              callback: Ue.callback,
              next: null
            };
            Ye === null ? (Re = Ye = A, I = U) : Ye = Ye.next = A, F = st(F, Nt);
          }
          if (Ue = Ue.next, Ue === null) {
            if (p = o.shared.pending, p === null)
              break;
            var we = p, _e = we.next;
            we.next = null, Ue = _e, o.lastBaseUpdate = we, o.shared.pending = null;
          }
        } while (true);
        Ye === null && (I = U), o.baseState = I, o.firstBaseUpdate = Re, o.lastBaseUpdate = Ye;
        var et = o.shared.interleaved;
        if (et !== null) {
          var ot = et;
          do
            F = st(F, ot.lane), ot = ot.next;
          while (ot !== et);
        } else
          s === null && (o.shared.lanes = Y);
        Kp(F), e.lanes = F, e.memoizedState = U;
      }
      Zm = null;
    }
    function gk(e, t) {
      if (typeof e != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + e));
      e.call(t);
    }
    function j2() {
      Km = false;
    }
    function th() {
      return Km;
    }
    function F2(e, t, i) {
      var a = t.effects;
      if (t.effects = null, a !== null)
        for (var o = 0; o < a.length; o++) {
          var s = a[o], f = s.callback;
          f !== null && (s.callback = null, gk(f, i));
        }
    }
    var w1 = {}, H2 = new _.Component().refs, T1, N1, D1, O1, L1, P2, nh, M1, A1, z1;
    {
      T1 = /* @__PURE__ */ new Set(), N1 = /* @__PURE__ */ new Set(), D1 = /* @__PURE__ */ new Set(), O1 = /* @__PURE__ */ new Set(), M1 = /* @__PURE__ */ new Set(), L1 = /* @__PURE__ */ new Set(), A1 = /* @__PURE__ */ new Set(), z1 = /* @__PURE__ */ new Set();
      var B2 = /* @__PURE__ */ new Set();
      nh = function(e, t) {
        if (!(e === null || typeof e == "function")) {
          var i = t + "_" + e;
          B2.has(i) || (B2.add(i), g("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", t, e));
        }
      }, P2 = function(e, t) {
        if (t === void 0) {
          var i = Mt(e) || "Component";
          L1.has(i) || (L1.add(i), g("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", i));
        }
      }, Object.defineProperty(w1, "_processChildContext", {
        enumerable: false,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(w1);
    }
    function V1(e, t, i, a) {
      var o = e.memoizedState, s = i(a, o);
      {
        if (e.mode & En) {
          Pn(true);
          try {
            s = i(a, o);
          } finally {
            Pn(false);
          }
        }
        P2(t, s);
      }
      var f = s == null ? o : pt({}, o, s);
      if (e.memoizedState = f, e.lanes === Y) {
        var p = e.updateQueue;
        p.baseState = f;
      }
    }
    var U1 = {
      isMounted: gi,
      enqueueSetState: function(e, t, i) {
        var a = Li(e), o = ki(), s = qu(a), f = Fo(o, s);
        f.payload = t, i != null && (nh(i, "setState"), f.callback = i);
        var p = Pu(a, f, s);
        p !== null && (mr(p, a, s, o), Jm(p, a, s)), Al(a, s);
      },
      enqueueReplaceState: function(e, t, i) {
        var a = Li(e), o = ki(), s = qu(a), f = Fo(o, s);
        f.tag = V2, f.payload = t, i != null && (nh(i, "replaceState"), f.callback = i);
        var p = Pu(a, f, s);
        p !== null && (mr(p, a, s, o), Jm(p, a, s)), Al(a, s);
      },
      enqueueForceUpdate: function(e, t) {
        var i = Li(e), a = ki(), o = qu(i), s = Fo(a, o);
        s.tag = Xm, t != null && (nh(t, "forceUpdate"), s.callback = t);
        var f = Pu(i, s, o);
        f !== null && (mr(f, i, o, a), Jm(f, i, o)), Od(i, o);
      }
    };
    function I2(e, t, i, a, o, s, f) {
      var p = e.stateNode;
      if (typeof p.shouldComponentUpdate == "function") {
        var v = p.shouldComponentUpdate(a, s, f);
        {
          if (e.mode & En) {
            Pn(true);
            try {
              v = p.shouldComponentUpdate(a, s, f);
            } finally {
              Pn(false);
            }
          }
          v === void 0 && g("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", Mt(t) || "Component");
        }
        return v;
      }
      return t.prototype && t.prototype.isPureReactComponent ? !Pe(i, a) || !Pe(o, s) : true;
    }
    function Sk(e, t, i) {
      var a = e.stateNode;
      {
        var o = Mt(t) || "Component", s = a.render;
        s || (t.prototype && typeof t.prototype.render == "function" ? g("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", o) : g("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", o)), a.getInitialState && !a.getInitialState.isReactClassApproved && !a.state && g("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", o), a.getDefaultProps && !a.getDefaultProps.isReactClassApproved && g("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", o), a.propTypes && g("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", o), a.contextType && g("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", o), a.contextTypes && g("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", o), t.contextType && t.contextTypes && !A1.has(t) && (A1.add(t), g("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", o)), typeof a.componentShouldUpdate == "function" && g("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", o), t.prototype && t.prototype.isPureReactComponent && typeof a.shouldComponentUpdate < "u" && g("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", Mt(t) || "A pure component"), typeof a.componentDidUnmount == "function" && g("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", o), typeof a.componentDidReceiveProps == "function" && g("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", o), typeof a.componentWillRecieveProps == "function" && g("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", o), typeof a.UNSAFE_componentWillRecieveProps == "function" && g("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", o);
        var f = a.props !== i;
        a.props !== void 0 && f && g("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", o, o), a.defaultProps && g("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", o, o), typeof a.getSnapshotBeforeUpdate == "function" && typeof a.componentDidUpdate != "function" && !D1.has(t) && (D1.add(t), g("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", Mt(t))), typeof a.getDerivedStateFromProps == "function" && g("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", o), typeof a.getDerivedStateFromError == "function" && g("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", o), typeof t.getSnapshotBeforeUpdate == "function" && g("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", o);
        var p = a.state;
        p && (typeof p != "object" || kt(p)) && g("%s.state: must be set to an object or null", o), typeof a.getChildContext == "function" && typeof t.childContextTypes != "object" && g("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", o);
      }
    }
    function $2(e, t) {
      t.updater = U1, e.stateNode = t, fu(t, e), t._reactInternalInstance = w1;
    }
    function Y2(e, t, i) {
      var a = false, o = sa, s = sa, f = t.contextType;
      if ("contextType" in t) {
        var p = (
          // Allow null for conditional declaration
          f === null || f !== void 0 && f.$$typeof === zt && f._context === void 0
        );
        if (!p && !z1.has(t)) {
          z1.add(t);
          var v = "";
          f === void 0 ? v = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof f != "object" ? v = " However, it is set to a " + typeof f + "." : f.$$typeof === yt ? v = " Did you accidentally pass the Context.Provider instead?" : f._context !== void 0 ? v = " Did you accidentally pass the Context.Consumer instead?" : v = " However, it is set to an object with keys {" + Object.keys(f).join(", ") + "}.", g("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", Mt(t) || "Component", v);
        }
      }
      if (typeof f == "object" && f !== null)
        s = nr(f);
      else {
        o = Cf(e, t, true);
        var y = t.contextTypes;
        a = y != null, s = a ? _f(e, o) : sa;
      }
      var S = new t(i, s);
      if (e.mode & En) {
        Pn(true);
        try {
          S = new t(i, s);
        } finally {
          Pn(false);
        }
      }
      var O = e.memoizedState = S.state !== null && S.state !== void 0 ? S.state : null;
      $2(e, S);
      {
        if (typeof t.getDerivedStateFromProps == "function" && O === null) {
          var N = Mt(t) || "Component";
          N1.has(N) || (N1.add(N), g("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", N, S.state === null ? "null" : "undefined", N));
        }
        if (typeof t.getDerivedStateFromProps == "function" || typeof S.getSnapshotBeforeUpdate == "function") {
          var U = null, F = null, I = null;
          if (typeof S.componentWillMount == "function" && S.componentWillMount.__suppressDeprecationWarning !== true ? U = "componentWillMount" : typeof S.UNSAFE_componentWillMount == "function" && (U = "UNSAFE_componentWillMount"), typeof S.componentWillReceiveProps == "function" && S.componentWillReceiveProps.__suppressDeprecationWarning !== true ? F = "componentWillReceiveProps" : typeof S.UNSAFE_componentWillReceiveProps == "function" && (F = "UNSAFE_componentWillReceiveProps"), typeof S.componentWillUpdate == "function" && S.componentWillUpdate.__suppressDeprecationWarning !== true ? I = "componentWillUpdate" : typeof S.UNSAFE_componentWillUpdate == "function" && (I = "UNSAFE_componentWillUpdate"), U !== null || F !== null || I !== null) {
            var Re = Mt(t) || "Component", Ye = typeof t.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            O1.has(Re) || (O1.add(Re), g(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, Re, Ye, U !== null ? `
  ` + U : "", F !== null ? `
  ` + F : "", I !== null ? `
  ` + I : ""));
          }
        }
      }
      return a && m2(e, o, s), S;
    }
    function bk(e, t) {
      var i = t.state;
      typeof t.componentWillMount == "function" && t.componentWillMount(), typeof t.UNSAFE_componentWillMount == "function" && t.UNSAFE_componentWillMount(), i !== t.state && (g("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", at(e) || "Component"), U1.enqueueReplaceState(t, t.state, null));
    }
    function W2(e, t, i, a) {
      var o = t.state;
      if (typeof t.componentWillReceiveProps == "function" && t.componentWillReceiveProps(i, a), typeof t.UNSAFE_componentWillReceiveProps == "function" && t.UNSAFE_componentWillReceiveProps(i, a), t.state !== o) {
        {
          var s = at(e) || "Component";
          T1.has(s) || (T1.add(s), g("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", s));
        }
        U1.enqueueReplaceState(t, t.state, null);
      }
    }
    function j1(e, t, i, a) {
      Sk(e, t, i);
      var o = e.stateNode;
      o.props = i, o.state = e.memoizedState, o.refs = H2, x1(e);
      var s = t.contextType;
      if (typeof s == "object" && s !== null)
        o.context = nr(s);
      else {
        var f = Cf(e, t, true);
        o.context = _f(e, f);
      }
      {
        if (o.state === i) {
          var p = Mt(t) || "Component";
          M1.has(p) || (M1.add(p), g("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", p));
        }
        e.mode & En && Ja.recordLegacyContextWarning(e, o), Ja.recordUnsafeLifecycleWarnings(e, o);
      }
      o.state = e.memoizedState;
      var v = t.getDerivedStateFromProps;
      if (typeof v == "function" && (V1(e, t, v, i), o.state = e.memoizedState), typeof t.getDerivedStateFromProps != "function" && typeof o.getSnapshotBeforeUpdate != "function" && (typeof o.UNSAFE_componentWillMount == "function" || typeof o.componentWillMount == "function") && (bk(e, o), eh(e, i, o, a), o.state = e.memoizedState), typeof o.componentDidMount == "function") {
        var y = ut;
        y |= ei, (e.mode & Ui) !== Qe && (y |= ti), e.flags |= y;
      }
    }
    function Ck(e, t, i, a) {
      var o = e.stateNode, s = e.memoizedProps;
      o.props = s;
      var f = o.context, p = t.contextType, v = sa;
      if (typeof p == "object" && p !== null)
        v = nr(p);
      else {
        var y = Cf(e, t, true);
        v = _f(e, y);
      }
      var S = t.getDerivedStateFromProps, O = typeof S == "function" || typeof o.getSnapshotBeforeUpdate == "function";
      !O && (typeof o.UNSAFE_componentWillReceiveProps == "function" || typeof o.componentWillReceiveProps == "function") && (s !== i || f !== v) && W2(e, o, i, v), j2();
      var N = e.memoizedState, U = o.state = N;
      if (eh(e, i, o, a), U = e.memoizedState, s === i && N === U && !Um() && !th()) {
        if (typeof o.componentDidMount == "function") {
          var F = ut;
          F |= ei, (e.mode & Ui) !== Qe && (F |= ti), e.flags |= F;
        }
        return false;
      }
      typeof S == "function" && (V1(e, t, S, i), U = e.memoizedState);
      var I = th() || I2(e, t, s, i, N, U, v);
      if (I) {
        if (!O && (typeof o.UNSAFE_componentWillMount == "function" || typeof o.componentWillMount == "function") && (typeof o.componentWillMount == "function" && o.componentWillMount(), typeof o.UNSAFE_componentWillMount == "function" && o.UNSAFE_componentWillMount()), typeof o.componentDidMount == "function") {
          var Re = ut;
          Re |= ei, (e.mode & Ui) !== Qe && (Re |= ti), e.flags |= Re;
        }
      } else {
        if (typeof o.componentDidMount == "function") {
          var Ye = ut;
          Ye |= ei, (e.mode & Ui) !== Qe && (Ye |= ti), e.flags |= Ye;
        }
        e.memoizedProps = i, e.memoizedState = U;
      }
      return o.props = i, o.state = U, o.context = v, I;
    }
    function _k(e, t, i, a, o) {
      var s = t.stateNode;
      U2(e, t);
      var f = t.memoizedProps, p = t.type === t.elementType ? f : el(t.type, f);
      s.props = p;
      var v = t.pendingProps, y = s.context, S = i.contextType, O = sa;
      if (typeof S == "object" && S !== null)
        O = nr(S);
      else {
        var N = Cf(t, i, true);
        O = _f(t, N);
      }
      var U = i.getDerivedStateFromProps, F = typeof U == "function" || typeof s.getSnapshotBeforeUpdate == "function";
      !F && (typeof s.UNSAFE_componentWillReceiveProps == "function" || typeof s.componentWillReceiveProps == "function") && (f !== v || y !== O) && W2(t, s, a, O), j2();
      var I = t.memoizedState, Re = s.state = I;
      if (eh(t, a, s, o), Re = t.memoizedState, f === v && I === Re && !Um() && !th() && !je)
        return typeof s.componentDidUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= ut), typeof s.getSnapshotBeforeUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= Mi), false;
      typeof U == "function" && (V1(t, i, U, a), Re = t.memoizedState);
      var Ye = th() || I2(t, i, p, a, I, Re, O) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      je;
      return Ye ? (!F && (typeof s.UNSAFE_componentWillUpdate == "function" || typeof s.componentWillUpdate == "function") && (typeof s.componentWillUpdate == "function" && s.componentWillUpdate(a, Re, O), typeof s.UNSAFE_componentWillUpdate == "function" && s.UNSAFE_componentWillUpdate(a, Re, O)), typeof s.componentDidUpdate == "function" && (t.flags |= ut), typeof s.getSnapshotBeforeUpdate == "function" && (t.flags |= Mi)) : (typeof s.componentDidUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= ut), typeof s.getSnapshotBeforeUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= Mi), t.memoizedProps = a, t.memoizedState = Re), s.props = a, s.state = Re, s.context = O, Ye;
    }
    var F1, H1, P1, B1, I1, Q2 = function(e, t) {
    };
    F1 = false, H1 = false, P1 = {}, B1 = {}, I1 = {}, Q2 = function(e, t) {
      if (!(e === null || typeof e != "object") && !(!e._store || e._store.validated || e.key != null)) {
        if (typeof e._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        e._store.validated = true;
        var i = at(t) || "Component";
        B1[i] || (B1[i] = true, g('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    function Rp(e, t, i) {
      var a = i.ref;
      if (a !== null && typeof a != "function" && typeof a != "object") {
        if ((e.mode & En || Ze) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(i._owner && i._self && i._owner.stateNode !== i._self)) {
          var o = at(e) || "Component";
          P1[o] || (g('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', a), P1[o] = true);
        }
        if (i._owner) {
          var s = i._owner, f;
          if (s) {
            var p = s;
            if (p.tag !== Q)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            f = p.stateNode;
          }
          if (!f)
            throw new Error("Missing owner for string ref " + a + ". This error is likely caused by a bug in React. Please file an issue.");
          var v = f;
          Gn(a, "ref");
          var y = "" + a;
          if (t !== null && t.ref !== null && typeof t.ref == "function" && t.ref._stringRef === y)
            return t.ref;
          var S = function(O) {
            var N = v.refs;
            N === H2 && (N = v.refs = {}), O === null ? delete N[y] : N[y] = O;
          };
          return S._stringRef = y, S;
        } else {
          if (typeof a != "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!i._owner)
            throw new Error("Element ref was specified as a string (" + a + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
      return a;
    }
    function rh(e, t) {
      var i = Object.prototype.toString.call(t);
      throw new Error("Objects are not valid as a React child (found: " + (i === "[object Object]" ? "object with keys {" + Object.keys(t).join(", ") + "}" : i) + "). If you meant to render a collection of children, use an array instead.");
    }
    function ih(e) {
      {
        var t = at(e) || "Component";
        if (I1[t])
          return;
        I1[t] = true, g("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function G2(e) {
      var t = e._payload, i = e._init;
      return i(t);
    }
    function q2(e) {
      function t(A, $) {
        if (e) {
          var z = A.deletions;
          z === null ? (A.deletions = [$], A.flags |= Bt) : z.push($);
        }
      }
      function i(A, $) {
        if (!e)
          return null;
        for (var z = $; z !== null; )
          t(A, z), z = z.sibling;
        return null;
      }
      function a(A, $) {
        for (var z = /* @__PURE__ */ new Map(), le = $; le !== null; )
          le.key !== null ? z.set(le.key, le) : z.set(le.index, le), le = le.sibling;
        return z;
      }
      function o(A, $) {
        var z = nc(A, $);
        return z.index = 0, z.sibling = null, z;
      }
      function s(A, $, z) {
        if (A.index = z, !e)
          return A.flags |= Sd, $;
        var le = A.alternate;
        if (le !== null) {
          var we = le.index;
          return we < $ ? (A.flags |= sn, $) : we;
        } else
          return A.flags |= sn, $;
      }
      function f(A) {
        return e && A.alternate === null && (A.flags |= sn), A;
      }
      function p(A, $, z, le) {
        if ($ === null || $.tag !== fe) {
          var we = h0(z, A.mode, le);
          return we.return = A, we;
        } else {
          var _e = o($, z);
          return _e.return = A, _e;
        }
      }
      function v(A, $, z, le) {
        var we = z.type;
        if (we === te)
          return S(A, $, z.props.children, le, z.key);
        if ($ !== null && ($.elementType === we || // Keep this check inline so it only runs on the false path:
        Fb($, z) || // Lazy types should reconcile their resolved type.
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
        typeof we == "object" && we !== null && we.$$typeof === gt && G2(we) === $.type)) {
          var _e = o($, z.props);
          return _e.ref = Rp(A, $, z), _e.return = A, _e._debugSource = z._source, _e._debugOwner = z._owner, _e;
        }
        var et = m0(z, A.mode, le);
        return et.ref = Rp(A, $, z), et.return = A, et;
      }
      function y(A, $, z, le) {
        if ($ === null || $.tag !== Z || $.stateNode.containerInfo !== z.containerInfo || $.stateNode.implementation !== z.implementation) {
          var we = y0(z, A.mode, le);
          return we.return = A, we;
        } else {
          var _e = o($, z.children || []);
          return _e.return = A, _e;
        }
      }
      function S(A, $, z, le, we) {
        if ($ === null || $.tag !== ee) {
          var _e = Ku(z, A.mode, le, we);
          return _e.return = A, _e;
        } else {
          var et = o($, z);
          return et.return = A, et;
        }
      }
      function O(A, $, z) {
        if (typeof $ == "string" && $ !== "" || typeof $ == "number") {
          var le = h0("" + $, A.mode, z);
          return le.return = A, le;
        }
        if (typeof $ == "object" && $ !== null) {
          switch ($.$$typeof) {
            case va: {
              var we = m0($, A.mode, z);
              return we.ref = Rp(A, null, $), we.return = A, we;
            }
            case x: {
              var _e = y0($, A.mode, z);
              return _e.return = A, _e;
            }
            case gt: {
              var et = $._payload, ot = $._init;
              return O(A, ot(et), z);
            }
          }
          if (kt($) || ea($)) {
            var nn = Ku($, A.mode, z, null);
            return nn.return = A, nn;
          }
          rh(A, $);
        }
        return typeof $ == "function" && ih(A), null;
      }
      function N(A, $, z, le) {
        var we = $ !== null ? $.key : null;
        if (typeof z == "string" && z !== "" || typeof z == "number")
          return we !== null ? null : p(A, $, "" + z, le);
        if (typeof z == "object" && z !== null) {
          switch (z.$$typeof) {
            case va:
              return z.key === we ? v(A, $, z, le) : null;
            case x:
              return z.key === we ? y(A, $, z, le) : null;
            case gt: {
              var _e = z._payload, et = z._init;
              return N(A, $, et(_e), le);
            }
          }
          if (kt(z) || ea(z))
            return we !== null ? null : S(A, $, z, le, null);
          rh(A, z);
        }
        return typeof z == "function" && ih(A), null;
      }
      function U(A, $, z, le, we) {
        if (typeof le == "string" && le !== "" || typeof le == "number") {
          var _e = A.get(z) || null;
          return p($, _e, "" + le, we);
        }
        if (typeof le == "object" && le !== null) {
          switch (le.$$typeof) {
            case va: {
              var et = A.get(le.key === null ? z : le.key) || null;
              return v($, et, le, we);
            }
            case x: {
              var ot = A.get(le.key === null ? z : le.key) || null;
              return y($, ot, le, we);
            }
            case gt:
              var nn = le._payload, Ft = le._init;
              return U(A, $, z, Ft(nn), we);
          }
          if (kt(le) || ea(le)) {
            var Wn = A.get(z) || null;
            return S($, Wn, le, we, null);
          }
          rh($, le);
        }
        return typeof le == "function" && ih($), null;
      }
      function F(A, $, z) {
        {
          if (typeof A != "object" || A === null)
            return $;
          switch (A.$$typeof) {
            case va:
            case x:
              Q2(A, z);
              var le = A.key;
              if (typeof le != "string")
                break;
              if ($ === null) {
                $ = /* @__PURE__ */ new Set(), $.add(le);
                break;
              }
              if (!$.has(le)) {
                $.add(le);
                break;
              }
              g("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted â€” the behavior is unsupported and could change in a future version.", le);
              break;
            case gt:
              var we = A._payload, _e = A._init;
              F(_e(we), $, z);
              break;
          }
        }
        return $;
      }
      function I(A, $, z, le) {
        for (var we = null, _e = 0; _e < z.length; _e++) {
          var et = z[_e];
          we = F(et, we, A);
        }
        for (var ot = null, nn = null, Ft = $, Wn = 0, Ht = 0, jn = null; Ft !== null && Ht < z.length; Ht++) {
          Ft.index > Ht ? (jn = Ft, Ft = null) : jn = Ft.sibling;
          var ci = N(A, Ft, z[Ht], le);
          if (ci === null) {
            Ft === null && (Ft = jn);
            break;
          }
          e && Ft && ci.alternate === null && t(A, Ft), Wn = s(ci, Wn, Ht), nn === null ? ot = ci : nn.sibling = ci, nn = ci, Ft = jn;
        }
        if (Ht === z.length) {
          if (i(A, Ft), Ar()) {
            var Pr = Ht;
            Is(A, Pr);
          }
          return ot;
        }
        if (Ft === null) {
          for (; Ht < z.length; Ht++) {
            var fa = O(A, z[Ht], le);
            fa !== null && (Wn = s(fa, Wn, Ht), nn === null ? ot = fa : nn.sibling = fa, nn = fa);
          }
          if (Ar()) {
            var xi = Ht;
            Is(A, xi);
          }
          return ot;
        }
        for (var Ri = a(A, Ft); Ht < z.length; Ht++) {
          var fi = U(Ri, A, Ht, z[Ht], le);
          fi !== null && (e && fi.alternate !== null && Ri.delete(fi.key === null ? Ht : fi.key), Wn = s(fi, Wn, Ht), nn === null ? ot = fi : nn.sibling = fi, nn = fi);
        }
        if (e && Ri.forEach(function($f) {
          return t(A, $f);
        }), Ar()) {
          var Yo = Ht;
          Is(A, Yo);
        }
        return ot;
      }
      function Re(A, $, z, le) {
        var we = ea(z);
        if (typeof we != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          z[Symbol.toStringTag] === "Generator" && (H1 || g("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), H1 = true), z.entries === we && (F1 || g("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), F1 = true);
          var _e = we.call(z);
          if (_e)
            for (var et = null, ot = _e.next(); !ot.done; ot = _e.next()) {
              var nn = ot.value;
              et = F(nn, et, A);
            }
        }
        var Ft = we.call(z);
        if (Ft == null)
          throw new Error("An iterable object provided no iterator.");
        for (var Wn = null, Ht = null, jn = $, ci = 0, Pr = 0, fa = null, xi = Ft.next(); jn !== null && !xi.done; Pr++, xi = Ft.next()) {
          jn.index > Pr ? (fa = jn, jn = null) : fa = jn.sibling;
          var Ri = N(A, jn, xi.value, le);
          if (Ri === null) {
            jn === null && (jn = fa);
            break;
          }
          e && jn && Ri.alternate === null && t(A, jn), ci = s(Ri, ci, Pr), Ht === null ? Wn = Ri : Ht.sibling = Ri, Ht = Ri, jn = fa;
        }
        if (xi.done) {
          if (i(A, jn), Ar()) {
            var fi = Pr;
            Is(A, fi);
          }
          return Wn;
        }
        if (jn === null) {
          for (; !xi.done; Pr++, xi = Ft.next()) {
            var Yo = O(A, xi.value, le);
            Yo !== null && (ci = s(Yo, ci, Pr), Ht === null ? Wn = Yo : Ht.sibling = Yo, Ht = Yo);
          }
          if (Ar()) {
            var $f = Pr;
            Is(A, $f);
          }
          return Wn;
        }
        for (var nv = a(A, jn); !xi.done; Pr++, xi = Ft.next()) {
          var Zl = U(nv, A, Pr, xi.value, le);
          Zl !== null && (e && Zl.alternate !== null && nv.delete(Zl.key === null ? Pr : Zl.key), ci = s(Zl, ci, Pr), Ht === null ? Wn = Zl : Ht.sibling = Zl, Ht = Zl);
        }
        if (e && nv.forEach(function(VR) {
          return t(A, VR);
        }), Ar()) {
          var zR = Pr;
          Is(A, zR);
        }
        return Wn;
      }
      function Ye(A, $, z, le) {
        if ($ !== null && $.tag === fe) {
          i(A, $.sibling);
          var we = o($, z);
          return we.return = A, we;
        }
        i(A, $);
        var _e = h0(z, A.mode, le);
        return _e.return = A, _e;
      }
      function Ue(A, $, z, le) {
        for (var we = z.key, _e = $; _e !== null; ) {
          if (_e.key === we) {
            var et = z.type;
            if (et === te) {
              if (_e.tag === ee) {
                i(A, _e.sibling);
                var ot = o(_e, z.props.children);
                return ot.return = A, ot._debugSource = z._source, ot._debugOwner = z._owner, ot;
              }
            } else if (_e.elementType === et || // Keep this check inline so it only runs on the false path:
            Fb(_e, z) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof et == "object" && et !== null && et.$$typeof === gt && G2(et) === _e.type) {
              i(A, _e.sibling);
              var nn = o(_e, z.props);
              return nn.ref = Rp(A, _e, z), nn.return = A, nn._debugSource = z._source, nn._debugOwner = z._owner, nn;
            }
            i(A, _e);
            break;
          } else
            t(A, _e);
          _e = _e.sibling;
        }
        if (z.type === te) {
          var Ft = Ku(z.props.children, A.mode, le, z.key);
          return Ft.return = A, Ft;
        } else {
          var Wn = m0(z, A.mode, le);
          return Wn.ref = Rp(A, $, z), Wn.return = A, Wn;
        }
      }
      function Nt(A, $, z, le) {
        for (var we = z.key, _e = $; _e !== null; ) {
          if (_e.key === we)
            if (_e.tag === Z && _e.stateNode.containerInfo === z.containerInfo && _e.stateNode.implementation === z.implementation) {
              i(A, _e.sibling);
              var et = o(_e, z.children || []);
              return et.return = A, et;
            } else {
              i(A, _e);
              break;
            }
          else
            t(A, _e);
          _e = _e.sibling;
        }
        var ot = y0(z, A.mode, le);
        return ot.return = A, ot;
      }
      function _t(A, $, z, le) {
        var we = typeof z == "object" && z !== null && z.type === te && z.key === null;
        if (we && (z = z.props.children), typeof z == "object" && z !== null) {
          switch (z.$$typeof) {
            case va:
              return f(Ue(A, $, z, le));
            case x:
              return f(Nt(A, $, z, le));
            case gt:
              var _e = z._payload, et = z._init;
              return _t(A, $, et(_e), le);
          }
          if (kt(z))
            return I(A, $, z, le);
          if (ea(z))
            return Re(A, $, z, le);
          rh(A, z);
        }
        return typeof z == "string" && z !== "" || typeof z == "number" ? f(Ye(A, $, "" + z, le)) : (typeof z == "function" && ih(A), i(A, $));
      }
      return _t;
    }
    var Tf = q2(true), X2 = q2(false);
    function Ek(e, t) {
      if (e !== null && t.child !== e.child)
        throw new Error("Resuming work not yet implemented.");
      if (t.child !== null) {
        var i = t.child, a = nc(i, i.pendingProps);
        for (t.child = a, a.return = t; i.sibling !== null; )
          i = i.sibling, a = a.sibling = nc(i, i.pendingProps), a.return = t;
        a.sibling = null;
      }
    }
    function kk(e, t) {
      for (var i = e.child; i !== null; )
        J3(i, t), i = i.sibling;
    }
    var wp = {}, Bu = Uu(wp), Tp = Uu(wp), ah = Uu(wp);
    function lh(e) {
      if (e === wp)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return e;
    }
    function K2() {
      var e = lh(ah.current);
      return e;
    }
    function $1(e, t) {
      ui(ah, t, e), ui(Tp, e, e), ui(Bu, wp, e);
      var i = j_(t);
      oi(Bu, e), ui(Bu, i, e);
    }
    function Nf(e) {
      oi(Bu, e), oi(Tp, e), oi(ah, e);
    }
    function Y1() {
      var e = lh(Bu.current);
      return e;
    }
    function Z2(e) {
      lh(ah.current);
      var t = lh(Bu.current), i = F_(t, e.type);
      t !== i && (ui(Tp, e, e), ui(Bu, i, e));
    }
    function W1(e) {
      Tp.current === e && (oi(Bu, e), oi(Tp, e));
    }
    var xk = 0, J2 = 1, eS = 1, Np = 2, tl = Uu(xk);
    function Q1(e, t) {
      return (e & t) !== 0;
    }
    function Df(e) {
      return e & J2;
    }
    function G1(e, t) {
      return e & J2 | t;
    }
    function Rk(e, t) {
      return e | t;
    }
    function Iu(e, t) {
      ui(tl, t, e);
    }
    function Of(e) {
      oi(tl, e);
    }
    function wk(e, t) {
      var i = e.memoizedState;
      return i !== null ? i.dehydrated !== null : (e.memoizedProps, true);
    }
    function oh(e) {
      for (var t = e; t !== null; ) {
        if (t.tag === be) {
          var i = t.memoizedState;
          if (i !== null) {
            var a = i.dehydrated;
            if (a === null || c2(a) || e1(a))
              return t;
          }
        } else if (t.tag === Et && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        t.memoizedProps.revealOrder !== void 0) {
          var o = (t.flags & tt) !== $e;
          if (o)
            return t;
        } else if (t.child !== null) {
          t.child.return = t, t = t.child;
          continue;
        }
        if (t === e)
          return null;
        for (; t.sibling === null; ) {
          if (t.return === null || t.return === e)
            return null;
          t = t.return;
        }
        t.sibling.return = t.return, t = t.sibling;
      }
      return null;
    }
    var Yi = (
      /*   */
      0
    ), ur = (
      /* */
      1
    ), Yl = (
      /*  */
      2
    ), sr = (
      /*    */
      4
    ), zr = (
      /*   */
      8
    ), q1 = [];
    function X1() {
      for (var e = 0; e < q1.length; e++) {
        var t = q1[e];
        t._workInProgressVersionPrimary = null;
      }
      q1.length = 0;
    }
    function Tk(e, t) {
      var i = t._getVersion, a = i(t._source);
      e.mutableSourceEagerHydrationData == null ? e.mutableSourceEagerHydrationData = [t, a] : e.mutableSourceEagerHydrationData.push(t, a);
    }
    var ke = b.ReactCurrentDispatcher, Dp = b.ReactCurrentBatchConfig, K1, Lf;
    K1 = /* @__PURE__ */ new Set();
    var qs = Y, tn = null, cr = null, fr = null, uh = false, Op = false, Lp = 0, Nk = 0, Dk = 25, G = null, Ta = null, $u = -1, Z1 = false;
    function Xt() {
      {
        var e = G;
        Ta === null ? Ta = [e] : Ta.push(e);
      }
    }
    function ye() {
      {
        var e = G;
        Ta !== null && ($u++, Ta[$u] !== e && Ok(e));
      }
    }
    function Mf(e) {
      e != null && !kt(e) && g("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", G, typeof e);
    }
    function Ok(e) {
      {
        var t = at(tn);
        if (!K1.has(t) && (K1.add(t), Ta !== null)) {
          for (var i = "", a = 30, o = 0; o <= $u; o++) {
            for (var s = Ta[o], f = o === $u ? e : s, p = o + 1 + ". " + s; p.length < a; )
              p += " ";
            p += f + `
`, i += p;
          }
          g(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, t, i);
        }
      }
    }
    function si() {
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function J1(e, t) {
      if (Z1)
        return false;
      if (t === null)
        return g("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", G), false;
      e.length !== t.length && g(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, G, "[" + t.join(", ") + "]", "[" + e.join(", ") + "]");
      for (var i = 0; i < t.length && i < e.length; i++)
        if (!Me(e[i], t[i]))
          return false;
      return true;
    }
    function Af(e, t, i, a, o, s) {
      qs = s, tn = t, Ta = e !== null ? e._debugHookTypes : null, $u = -1, Z1 = e !== null && e.type !== t.type, t.memoizedState = null, t.updateQueue = null, t.lanes = Y, e !== null && e.memoizedState !== null ? ke.current = _S : Ta !== null ? ke.current = CS : ke.current = bS;
      var f = i(a, o);
      if (Op) {
        var p = 0;
        do {
          if (Op = false, Lp = 0, p >= Dk)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          p += 1, Z1 = false, cr = null, fr = null, t.updateQueue = null, $u = -1, ke.current = ES, f = i(a, o);
        } while (Op);
      }
      ke.current = Ch, t._debugHookTypes = Ta;
      var v = cr !== null && cr.next !== null;
      if (qs = Y, tn = null, cr = null, fr = null, G = null, Ta = null, $u = -1, e !== null && (e.flags & ar) !== (t.flags & ar) && // Disable this warning in legacy mode, because legacy Suspense is weird
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
      (e.mode & mt) !== Qe && g("Internal React error: Expected static flag was missing. Please notify the React team."), uh = false, v)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return f;
    }
    function zf() {
      var e = Lp !== 0;
      return Lp = 0, e;
    }
    function tS(e, t, i) {
      t.updateQueue = e.updateQueue, (t.mode & Ui) !== Qe ? t.flags &= ~(po | ti | mn | ut) : t.flags &= ~(mn | ut), e.lanes = bu(e.lanes, i);
    }
    function nS() {
      if (ke.current = Ch, uh) {
        for (var e = tn.memoizedState; e !== null; ) {
          var t = e.queue;
          t !== null && (t.pending = null), e = e.next;
        }
        uh = false;
      }
      qs = Y, tn = null, cr = null, fr = null, Ta = null, $u = -1, G = null, mS = false, Op = false, Lp = 0;
    }
    function Wl() {
      var e = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return fr === null ? tn.memoizedState = fr = e : fr = fr.next = e, fr;
    }
    function Na() {
      var e;
      if (cr === null) {
        var t = tn.alternate;
        t !== null ? e = t.memoizedState : e = null;
      } else
        e = cr.next;
      var i;
      if (fr === null ? i = tn.memoizedState : i = fr.next, i !== null)
        fr = i, i = fr.next, cr = e;
      else {
        if (e === null)
          throw new Error("Rendered more hooks than during the previous render.");
        cr = e;
        var a = {
          memoizedState: cr.memoizedState,
          baseState: cr.baseState,
          baseQueue: cr.baseQueue,
          queue: cr.queue,
          next: null
        };
        fr === null ? tn.memoizedState = fr = a : fr = fr.next = a;
      }
      return fr;
    }
    function rS() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function eg(e, t) {
      return typeof t == "function" ? t(e) : t;
    }
    function tg(e, t, i) {
      var a = Wl(), o;
      i !== void 0 ? o = i(t) : o = t, a.memoizedState = a.baseState = o;
      var s = {
        pending: null,
        interleaved: null,
        lanes: Y,
        dispatch: null,
        lastRenderedReducer: e,
        lastRenderedState: o
      };
      a.queue = s;
      var f = s.dispatch = zk.bind(null, tn, s);
      return [a.memoizedState, f];
    }
    function ng(e, t, i) {
      var a = Na(), o = a.queue;
      if (o === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      o.lastRenderedReducer = e;
      var s = cr, f = s.baseQueue, p = o.pending;
      if (p !== null) {
        if (f !== null) {
          var v = f.next, y = p.next;
          f.next = y, p.next = v;
        }
        s.baseQueue !== f && g("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), s.baseQueue = f = p, o.pending = null;
      }
      if (f !== null) {
        var S = f.next, O = s.baseState, N = null, U = null, F = null, I = S;
        do {
          var Re = I.lane;
          if (Eo(qs, Re)) {
            if (F !== null) {
              var Ue = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: wt,
                action: I.action,
                hasEagerState: I.hasEagerState,
                eagerState: I.eagerState,
                next: null
              };
              F = F.next = Ue;
            }
            if (I.hasEagerState)
              O = I.eagerState;
            else {
              var Nt = I.action;
              O = e(O, Nt);
            }
          } else {
            var Ye = {
              lane: Re,
              action: I.action,
              hasEagerState: I.hasEagerState,
              eagerState: I.eagerState,
              next: null
            };
            F === null ? (U = F = Ye, N = O) : F = F.next = Ye, tn.lanes = st(tn.lanes, Re), Kp(Re);
          }
          I = I.next;
        } while (I !== null && I !== S);
        F === null ? N = O : F.next = U, Me(O, a.memoizedState) || Fp(), a.memoizedState = O, a.baseState = N, a.baseQueue = F, o.lastRenderedState = O;
      }
      var _t = o.interleaved;
      if (_t !== null) {
        var A = _t;
        do {
          var $ = A.lane;
          tn.lanes = st(tn.lanes, $), Kp($), A = A.next;
        } while (A !== _t);
      } else
        f === null && (o.lanes = Y);
      var z = o.dispatch;
      return [a.memoizedState, z];
    }
    function rg(e, t, i) {
      var a = Na(), o = a.queue;
      if (o === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      o.lastRenderedReducer = e;
      var s = o.dispatch, f = o.pending, p = a.memoizedState;
      if (f !== null) {
        o.pending = null;
        var v = f.next, y = v;
        do {
          var S = y.action;
          p = e(p, S), y = y.next;
        } while (y !== v);
        Me(p, a.memoizedState) || Fp(), a.memoizedState = p, a.baseQueue === null && (a.baseState = p), o.lastRenderedState = p;
      }
      return [p, s];
    }
    function _5(e, t, i) {
    }
    function E5(e, t, i) {
    }
    function ig(e, t, i) {
      var a = tn, o = Wl(), s, f = Ar();
      if (f) {
        if (i === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        s = i(), Lf || s !== i() && (g("The result of getServerSnapshot should be cached to avoid an infinite loop"), Lf = true);
      } else {
        if (s = t(), !Lf) {
          var p = t();
          Me(s, p) || (g("The result of getSnapshot should be cached to avoid an infinite loop"), Lf = true);
        }
        var v = Fh();
        if (v === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        Rs(v, qs) || iS(a, t, s);
      }
      o.memoizedState = s;
      var y = {
        value: s,
        getSnapshot: t
      };
      return o.queue = y, ph(lS.bind(null, a, y, e), [e]), a.flags |= mn, Mp(ur | zr, aS.bind(null, a, y, s, t), void 0, null), s;
    }
    function sh(e, t, i) {
      var a = tn, o = Na(), s = t();
      if (!Lf) {
        var f = t();
        Me(s, f) || (g("The result of getSnapshot should be cached to avoid an infinite loop"), Lf = true);
      }
      var p = o.memoizedState, v = !Me(p, s);
      v && (o.memoizedState = s, Fp());
      var y = o.queue;
      if (zp(lS.bind(null, a, y, e), [e]), y.getSnapshot !== t || v || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      fr !== null && fr.memoizedState.tag & ur) {
        a.flags |= mn, Mp(ur | zr, aS.bind(null, a, y, s, t), void 0, null);
        var S = Fh();
        if (S === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        Rs(S, qs) || iS(a, t, s);
      }
      return s;
    }
    function iS(e, t, i) {
      e.flags |= ys;
      var a = {
        getSnapshot: t,
        value: i
      }, o = tn.updateQueue;
      if (o === null)
        o = rS(), tn.updateQueue = o, o.stores = [a];
      else {
        var s = o.stores;
        s === null ? o.stores = [a] : s.push(a);
      }
    }
    function aS(e, t, i, a) {
      t.value = i, t.getSnapshot = a, oS(t) && uS(e);
    }
    function lS(e, t, i) {
      var a = function() {
        oS(t) && uS(e);
      };
      return i(a);
    }
    function oS(e) {
      var t = e.getSnapshot, i = e.value;
      try {
        var a = t();
        return !Me(i, a);
      } catch {
        return true;
      }
    }
    function uS(e) {
      var t = $i(e, Ke);
      t !== null && mr(t, e, Ke, on);
    }
    function ch(e) {
      var t = Wl();
      typeof e == "function" && (e = e()), t.memoizedState = t.baseState = e;
      var i = {
        pending: null,
        interleaved: null,
        lanes: Y,
        dispatch: null,
        lastRenderedReducer: eg,
        lastRenderedState: e
      };
      t.queue = i;
      var a = i.dispatch = Vk.bind(null, tn, i);
      return [t.memoizedState, a];
    }
    function ag(e) {
      return ng(eg);
    }
    function lg(e) {
      return rg(eg);
    }
    function Mp(e, t, i, a) {
      var o = {
        tag: e,
        create: t,
        destroy: i,
        deps: a,
        // Circular
        next: null
      }, s = tn.updateQueue;
      if (s === null)
        s = rS(), tn.updateQueue = s, s.lastEffect = o.next = o;
      else {
        var f = s.lastEffect;
        if (f === null)
          s.lastEffect = o.next = o;
        else {
          var p = f.next;
          f.next = o, o.next = p, s.lastEffect = o;
        }
      }
      return o;
    }
    function og(e) {
      var t = Wl();
      {
        var i = {
          current: e
        };
        return t.memoizedState = i, i;
      }
    }
    function fh(e) {
      var t = Na();
      return t.memoizedState;
    }
    function Ap(e, t, i, a) {
      var o = Wl(), s = a === void 0 ? null : a;
      tn.flags |= e, o.memoizedState = Mp(ur | t, i, void 0, s);
    }
    function dh(e, t, i, a) {
      var o = Na(), s = a === void 0 ? null : a, f = void 0;
      if (cr !== null) {
        var p = cr.memoizedState;
        if (f = p.destroy, s !== null) {
          var v = p.deps;
          if (J1(s, v)) {
            o.memoizedState = Mp(t, i, f, s);
            return;
          }
        }
      }
      tn.flags |= e, o.memoizedState = Mp(ur | t, i, f, s);
    }
    function ph(e, t) {
      return (tn.mode & Ui) !== Qe ? Ap(po | mn | Tl, zr, e, t) : Ap(mn | Tl, zr, e, t);
    }
    function zp(e, t) {
      return dh(mn, zr, e, t);
    }
    function ug(e, t) {
      return Ap(ut, Yl, e, t);
    }
    function vh(e, t) {
      return dh(ut, Yl, e, t);
    }
    function sg(e, t) {
      var i = ut;
      return i |= ei, (tn.mode & Ui) !== Qe && (i |= ti), Ap(i, sr, e, t);
    }
    function mh(e, t) {
      return dh(ut, sr, e, t);
    }
    function sS(e, t) {
      if (typeof t == "function") {
        var i = t, a = e();
        return i(a), function() {
          i(null);
        };
      } else if (t != null) {
        var o = t;
        o.hasOwnProperty("current") || g("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(o).join(", ") + "}");
        var s = e();
        return o.current = s, function() {
          o.current = null;
        };
      }
    }
    function cg(e, t, i) {
      typeof t != "function" && g("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", t !== null ? typeof t : "null");
      var a = i != null ? i.concat([e]) : null, o = ut;
      return o |= ei, (tn.mode & Ui) !== Qe && (o |= ti), Ap(o, sr, sS.bind(null, t, e), a);
    }
    function hh(e, t, i) {
      typeof t != "function" && g("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", t !== null ? typeof t : "null");
      var a = i != null ? i.concat([e]) : null;
      return dh(ut, sr, sS.bind(null, t, e), a);
    }
    function Lk(e, t) {
    }
    var yh = Lk;
    function fg(e, t) {
      var i = Wl(), a = t === void 0 ? null : t;
      return i.memoizedState = [e, a], e;
    }
    function gh(e, t) {
      var i = Na(), a = t === void 0 ? null : t, o = i.memoizedState;
      if (o !== null && a !== null) {
        var s = o[1];
        if (J1(a, s))
          return o[0];
      }
      return i.memoizedState = [e, a], e;
    }
    function dg(e, t) {
      var i = Wl(), a = t === void 0 ? null : t, o = e();
      return i.memoizedState = [o, a], o;
    }
    function Sh(e, t) {
      var i = Na(), a = t === void 0 ? null : t, o = i.memoizedState;
      if (o !== null && a !== null) {
        var s = o[1];
        if (J1(a, s))
          return o[0];
      }
      var f = e();
      return i.memoizedState = [f, a], f;
    }
    function pg(e) {
      var t = Wl();
      return t.memoizedState = e, e;
    }
    function cS(e) {
      var t = Na(), i = cr, a = i.memoizedState;
      return dS(t, a, e);
    }
    function fS(e) {
      var t = Na();
      if (cr === null)
        return t.memoizedState = e, e;
      var i = cr.memoizedState;
      return dS(t, i, e);
    }
    function dS(e, t, i) {
      var a = !Sy(qs);
      if (a) {
        if (!Me(i, t)) {
          var o = Vd();
          tn.lanes = st(tn.lanes, o), Kp(o), e.baseState = true;
        }
        return t;
      } else
        return e.baseState && (e.baseState = false, Fp()), e.memoizedState = i, i;
    }
    function Mk(e, t, i) {
      var a = Fi();
      In(_r(a, or)), e(true);
      var o = Dp.transition;
      Dp.transition = {};
      var s = Dp.transition;
      Dp.transition._updatedFibers = /* @__PURE__ */ new Set();
      try {
        e(false), t();
      } finally {
        if (In(a), Dp.transition = o, o === null && s._updatedFibers) {
          var f = s._updatedFibers.size;
          f > 10 && P("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), s._updatedFibers.clear();
        }
      }
    }
    function vg() {
      var e = ch(false), t = e[0], i = e[1], a = Mk.bind(null, i), o = Wl();
      return o.memoizedState = a, [t, a];
    }
    function pS() {
      var e = ag(), t = e[0], i = Na(), a = i.memoizedState;
      return [t, a];
    }
    function vS() {
      var e = lg(), t = e[0], i = Na(), a = i.memoizedState;
      return [t, a];
    }
    var mS = false;
    function Ak() {
      return mS;
    }
    function mg() {
      var e = Wl(), t = Fh(), i = t.identifierPrefix, a;
      if (Ar()) {
        var o = GE();
        a = ":" + i + "R" + o;
        var s = Lp++;
        s > 0 && (a += "H" + s.toString(32)), a += ":";
      } else {
        var f = Nk++;
        a = ":" + i + "r" + f.toString(32) + ":";
      }
      return e.memoizedState = a, a;
    }
    function bh() {
      var e = Na(), t = e.memoizedState;
      return t;
    }
    function zk(e, t, i) {
      typeof arguments[3] == "function" && g("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var a = qu(e), o = {
        lane: a,
        action: i,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (hS(e))
        yS(t, o);
      else {
        var s = A2(e, t, o, a);
        if (s !== null) {
          var f = ki();
          mr(s, e, a, f), gS(s, t, a);
        }
      }
      SS(e, a);
    }
    function Vk(e, t, i) {
      typeof arguments[3] == "function" && g("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var a = qu(e), o = {
        lane: a,
        action: i,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (hS(e))
        yS(t, o);
      else {
        var s = e.alternate;
        if (e.lanes === Y && (s === null || s.lanes === Y)) {
          var f = t.lastRenderedReducer;
          if (f !== null) {
            var p;
            p = ke.current, ke.current = nl;
            try {
              var v = t.lastRenderedState, y = f(v, i);
              if (o.hasEagerState = true, o.eagerState = y, Me(y, v)) {
                vk(e, t, o, a);
                return;
              }
            } catch {
            } finally {
              ke.current = p;
            }
          }
        }
        var S = A2(e, t, o, a);
        if (S !== null) {
          var O = ki();
          mr(S, e, a, O), gS(S, t, a);
        }
      }
      SS(e, a);
    }
    function hS(e) {
      var t = e.alternate;
      return e === tn || t !== null && t === tn;
    }
    function yS(e, t) {
      Op = uh = true;
      var i = e.pending;
      i === null ? t.next = t : (t.next = i.next, i.next = t), e.pending = t;
    }
    function gS(e, t, i) {
      if (zd(i)) {
        var a = t.lanes;
        a = Ud(a, e.pendingLanes);
        var o = st(a, i);
        t.lanes = o, Cu(e, o);
      }
    }
    function SS(e, t, i) {
      Al(e, t);
    }
    var Ch = {
      readContext: nr,
      useCallback: si,
      useContext: si,
      useEffect: si,
      useImperativeHandle: si,
      useInsertionEffect: si,
      useLayoutEffect: si,
      useMemo: si,
      useReducer: si,
      useRef: si,
      useState: si,
      useDebugValue: si,
      useDeferredValue: si,
      useTransition: si,
      useMutableSource: si,
      useSyncExternalStore: si,
      useId: si,
      unstable_isNewReconciler: ce
    }, bS = null, CS = null, _S = null, ES = null, Ql = null, nl = null, _h = null;
    {
      var hg = function() {
        g("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, lt = function() {
        g("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      bS = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", Xt(), Mf(t), fg(e, t);
        },
        useContext: function(e) {
          return G = "useContext", Xt(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", Xt(), Mf(t), ph(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", Xt(), Mf(i), cg(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", Xt(), Mf(t), ug(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", Xt(), Mf(t), sg(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", Xt(), Mf(t);
          var i = ke.current;
          ke.current = Ql;
          try {
            return dg(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", Xt();
          var a = ke.current;
          ke.current = Ql;
          try {
            return tg(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", Xt(), og(e);
        },
        useState: function(e) {
          G = "useState", Xt();
          var t = ke.current;
          ke.current = Ql;
          try {
            return ch(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", Xt(), void 0;
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", Xt(), pg(e);
        },
        useTransition: function() {
          return G = "useTransition", Xt(), vg();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", Xt(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", Xt(), ig(e, t, i);
        },
        useId: function() {
          return G = "useId", Xt(), mg();
        },
        unstable_isNewReconciler: ce
      }, CS = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", ye(), fg(e, t);
        },
        useContext: function(e) {
          return G = "useContext", ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", ye(), ph(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", ye(), cg(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", ye(), ug(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", ye(), sg(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", ye();
          var i = ke.current;
          ke.current = Ql;
          try {
            return dg(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", ye();
          var a = ke.current;
          ke.current = Ql;
          try {
            return tg(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", ye(), og(e);
        },
        useState: function(e) {
          G = "useState", ye();
          var t = ke.current;
          ke.current = Ql;
          try {
            return ch(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", ye(), void 0;
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", ye(), pg(e);
        },
        useTransition: function() {
          return G = "useTransition", ye(), vg();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", ye(), ig(e, t, i);
        },
        useId: function() {
          return G = "useId", ye(), mg();
        },
        unstable_isNewReconciler: ce
      }, _S = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", ye();
          var i = ke.current;
          ke.current = nl;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", ye();
          var a = ke.current;
          ke.current = nl;
          try {
            return ng(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", ye(), fh();
        },
        useState: function(e) {
          G = "useState", ye();
          var t = ke.current;
          ke.current = nl;
          try {
            return ag(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", ye(), cS(e);
        },
        useTransition: function() {
          return G = "useTransition", ye(), pS();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", ye(), bh();
        },
        unstable_isNewReconciler: ce
      }, ES = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", ye();
          var i = ke.current;
          ke.current = _h;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", ye();
          var a = ke.current;
          ke.current = _h;
          try {
            return rg(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", ye(), fh();
        },
        useState: function(e) {
          G = "useState", ye();
          var t = ke.current;
          ke.current = _h;
          try {
            return lg(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", ye(), fS(e);
        },
        useTransition: function() {
          return G = "useTransition", ye(), vS();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", ye(), bh();
        },
        unstable_isNewReconciler: ce
      }, Ql = {
        readContext: function(e) {
          return hg(), nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", lt(), Xt(), fg(e, t);
        },
        useContext: function(e) {
          return G = "useContext", lt(), Xt(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", lt(), Xt(), ph(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", lt(), Xt(), cg(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", lt(), Xt(), ug(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", lt(), Xt(), sg(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", lt(), Xt();
          var i = ke.current;
          ke.current = Ql;
          try {
            return dg(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", lt(), Xt();
          var a = ke.current;
          ke.current = Ql;
          try {
            return tg(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", lt(), Xt(), og(e);
        },
        useState: function(e) {
          G = "useState", lt(), Xt();
          var t = ke.current;
          ke.current = Ql;
          try {
            return ch(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", lt(), Xt(), void 0;
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", lt(), Xt(), pg(e);
        },
        useTransition: function() {
          return G = "useTransition", lt(), Xt(), vg();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", lt(), Xt(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", lt(), Xt(), ig(e, t, i);
        },
        useId: function() {
          return G = "useId", lt(), Xt(), mg();
        },
        unstable_isNewReconciler: ce
      }, nl = {
        readContext: function(e) {
          return hg(), nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", lt(), ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", lt(), ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", lt(), ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", lt(), ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", lt(), ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", lt(), ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", lt(), ye();
          var i = ke.current;
          ke.current = nl;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", lt(), ye();
          var a = ke.current;
          ke.current = nl;
          try {
            return ng(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", lt(), ye(), fh();
        },
        useState: function(e) {
          G = "useState", lt(), ye();
          var t = ke.current;
          ke.current = nl;
          try {
            return ag(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", lt(), ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", lt(), ye(), cS(e);
        },
        useTransition: function() {
          return G = "useTransition", lt(), ye(), pS();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", lt(), ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", lt(), ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", lt(), ye(), bh();
        },
        unstable_isNewReconciler: ce
      }, _h = {
        readContext: function(e) {
          return hg(), nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", lt(), ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", lt(), ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", lt(), ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", lt(), ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", lt(), ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", lt(), ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", lt(), ye();
          var i = ke.current;
          ke.current = nl;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", lt(), ye();
          var a = ke.current;
          ke.current = nl;
          try {
            return rg(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", lt(), ye(), fh();
        },
        useState: function(e) {
          G = "useState", lt(), ye();
          var t = ke.current;
          ke.current = nl;
          try {
            return lg(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", lt(), ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", lt(), ye(), fS(e);
        },
        useTransition: function() {
          return G = "useTransition", lt(), ye(), vS();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", lt(), ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", lt(), ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", lt(), ye(), bh();
        },
        unstable_isNewReconciler: ce
      };
    }
    var Yu = C.unstable_now, kS = 0, Eh = -1, Vp = -1, kh = -1, yg = false, xh = false;
    function xS() {
      return yg;
    }
    function Uk() {
      xh = true;
    }
    function jk() {
      yg = false, xh = false;
    }
    function Fk() {
      yg = xh, xh = false;
    }
    function RS() {
      return kS;
    }
    function wS() {
      kS = Yu();
    }
    function gg(e) {
      Vp = Yu(), e.actualStartTime < 0 && (e.actualStartTime = Yu());
    }
    function TS(e) {
      Vp = -1;
    }
    function Rh(e, t) {
      if (Vp >= 0) {
        var i = Yu() - Vp;
        e.actualDuration += i, t && (e.selfBaseDuration = i), Vp = -1;
      }
    }
    function Gl(e) {
      if (Eh >= 0) {
        var t = Yu() - Eh;
        Eh = -1;
        for (var i = e.return; i !== null; ) {
          switch (i.tag) {
            case W:
              var a = i.stateNode;
              a.effectDuration += t;
              return;
            case xe:
              var o = i.stateNode;
              o.effectDuration += t;
              return;
          }
          i = i.return;
        }
      }
    }
    function Sg(e) {
      if (kh >= 0) {
        var t = Yu() - kh;
        kh = -1;
        for (var i = e.return; i !== null; ) {
          switch (i.tag) {
            case W:
              var a = i.stateNode;
              a !== null && (a.passiveEffectDuration += t);
              return;
            case xe:
              var o = i.stateNode;
              o !== null && (o.passiveEffectDuration += t);
              return;
          }
          i = i.return;
        }
      }
    }
    function ql() {
      Eh = Yu();
    }
    function bg() {
      kh = Yu();
    }
    function Cg(e) {
      for (var t = e.child; t; )
        e.actualDuration += t.actualDuration, t = t.sibling;
    }
    function Xs(e, t) {
      return {
        value: e,
        source: t,
        stack: Zo(t),
        digest: null
      };
    }
    function _g(e, t, i) {
      return {
        value: e,
        source: null,
        stack: i ?? null,
        digest: t ?? null
      };
    }
    function Hk(e, t) {
      return true;
    }
    function Eg(e, t) {
      try {
        var i = Hk(e, t);
        if (i === false)
          return;
        var a = t.value, o = t.source, s = t.stack, f = s !== null ? s : "";
        if (a != null && a._suppressLogging) {
          if (e.tag === Q)
            return;
          console.error(a);
        }
        var p = o ? at(o) : null, v = p ? "The above error occurred in the <" + p + "> component:" : "The above error occurred in one of your React components:", y;
        if (e.tag === W)
          y = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          var S = at(e) || "Anonymous";
          y = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + S + ".");
        }
        var O = v + `
` + f + `

` + ("" + y);
        console.error(O);
      } catch (N) {
        setTimeout(function() {
          throw N;
        });
      }
    }
    var Pk = typeof WeakMap == "function" ? WeakMap : Map;
    function NS(e, t, i) {
      var a = Fo(on, i);
      a.tag = E1, a.payload = {
        element: null
      };
      var o = t.value;
      return a.callback = function() {
        M3(o), Eg(e, t);
      }, a;
    }
    function kg(e, t, i) {
      var a = Fo(on, i);
      a.tag = E1;
      var o = e.type.getDerivedStateFromError;
      if (typeof o == "function") {
        var s = t.value;
        a.payload = function() {
          return o(s);
        }, a.callback = function() {
          Hb(e), Eg(e, t);
        };
      }
      var f = e.stateNode;
      return f !== null && typeof f.componentDidCatch == "function" && (a.callback = function() {
        Hb(e), Eg(e, t), typeof o != "function" && O3(this);
        var v = t.value, y = t.stack;
        this.componentDidCatch(v, {
          componentStack: y !== null ? y : ""
        }), typeof o != "function" && (li(e.lanes, Ke) || g("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", at(e) || "Unknown"));
      }), a;
    }
    function DS(e, t, i) {
      var a = e.pingCache, o;
      if (a === null ? (a = e.pingCache = new Pk(), o = /* @__PURE__ */ new Set(), a.set(t, o)) : (o = a.get(t), o === void 0 && (o = /* @__PURE__ */ new Set(), a.set(t, o))), !o.has(i)) {
        o.add(i);
        var s = A3.bind(null, e, t, i);
        lr && Zp(e, i), t.then(s, s);
      }
    }
    function Bk(e, t, i, a) {
      var o = e.updateQueue;
      if (o === null) {
        var s = /* @__PURE__ */ new Set();
        s.add(i), e.updateQueue = s;
      } else
        o.add(i);
    }
    function Ik(e, t) {
      var i = e.tag;
      if ((e.mode & mt) === Qe && (i === J || i === oe || i === De)) {
        var a = e.alternate;
        a ? (e.updateQueue = a.updateQueue, e.memoizedState = a.memoizedState, e.lanes = a.lanes) : (e.updateQueue = null, e.memoizedState = null);
      }
    }
    function OS(e) {
      var t = e;
      do {
        if (t.tag === be && wk(t))
          return t;
        t = t.return;
      } while (t !== null);
      return null;
    }
    function LS(e, t, i, a, o) {
      if ((e.mode & mt) === Qe) {
        if (e === t)
          e.flags |= Kn;
        else {
          if (e.flags |= tt, i.flags |= gs, i.flags &= ~(Sc | hi), i.tag === Q) {
            var s = i.alternate;
            if (s === null)
              i.tag = xt;
            else {
              var f = Fo(on, Ke);
              f.tag = Xm, Pu(i, f, Ke);
            }
          }
          i.lanes = st(i.lanes, Ke);
        }
        return e;
      }
      return e.flags |= Kn, e.lanes = o, e;
    }
    function $k(e, t, i, a, o) {
      if (i.flags |= hi, lr && Zp(e, o), a !== null && typeof a == "object" && typeof a.then == "function") {
        var s = a;
        Ik(i), Ar() && i.mode & mt && _2();
        var f = OS(t);
        if (f !== null) {
          f.flags &= ~wn, LS(f, t, i, e, o), f.mode & mt && DS(e, s, o), Bk(f, e, s);
          return;
        } else {
          if (!Su(o)) {
            DS(e, s, o), r0();
            return;
          }
          var p = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          a = p;
        }
      } else if (Ar() && i.mode & mt) {
        _2();
        var v = OS(t);
        if (v !== null) {
          (v.flags & Kn) === $e && (v.flags |= wn), LS(v, t, i, e, o), h1(Xs(a, i));
          return;
        }
      }
      a = Xs(a, i), E3(a);
      var y = t;
      do {
        switch (y.tag) {
          case W: {
            var S = a;
            y.flags |= Kn;
            var O = Bn(o);
            y.lanes = st(y.lanes, O);
            var N = NS(y, S, O);
            R1(y, N);
            return;
          }
          case Q:
            var U = a, F = y.type, I = y.stateNode;
            if ((y.flags & tt) === $e && (typeof F.getDerivedStateFromError == "function" || I !== null && typeof I.componentDidCatch == "function" && !Ob(I))) {
              y.flags |= Kn;
              var Re = Bn(o);
              y.lanes = st(y.lanes, Re);
              var Ye = kg(y, U, Re);
              R1(y, Ye);
              return;
            }
            break;
        }
        y = y.return;
      } while (y !== null);
    }
    function Yk() {
      return null;
    }
    var Up = b.ReactCurrentOwner, rl = false, xg, jp, Rg, wg, Tg, Ks, Ng, wh;
    xg = {}, jp = {}, Rg = {}, wg = {}, Tg = {}, Ks = false, Ng = {}, wh = {};
    function _i(e, t, i, a) {
      e === null ? t.child = X2(t, null, i, a) : t.child = Tf(t, e.child, i, a);
    }
    function Wk(e, t, i, a) {
      t.child = Tf(t, e.child, null, a), t.child = Tf(t, null, i, a);
    }
    function MS(e, t, i, a, o) {
      if (t.type !== t.elementType) {
        var s = i.propTypes;
        s && Ka(
          s,
          a,
          // Resolved props
          "prop",
          Mt(i)
        );
      }
      var f = i.render, p = t.ref, v, y;
      wf(t, o), Ml(t);
      {
        if (Up.current = t, Kr(true), v = Af(e, t, f, a, p, o), y = zf(), t.mode & En) {
          Pn(true);
          try {
            v = Af(e, t, f, a, p, o), y = zf();
          } finally {
            Pn(false);
          }
        }
        Kr(false);
      }
      return vo(), e !== null && !rl ? (tS(e, t, o), Ho(e, t, o)) : (Ar() && y && c1(t), t.flags |= Rl, _i(e, t, v, o), t.child);
    }
    function AS(e, t, i, a, o) {
      if (e === null) {
        var s = i.type;
        if (K3(s) && i.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        i.defaultProps === void 0) {
          var f = s;
          return f = If(s), t.tag = De, t.type = f, Lg(t, s), zS(e, t, f, a, o);
        }
        {
          var p = s.propTypes;
          p && Ka(
            p,
            a,
            // Resolved props
            "prop",
            Mt(s)
          );
        }
        var v = v0(i.type, null, a, t, t.mode, o);
        return v.ref = t.ref, v.return = t, t.child = v, v;
      }
      {
        var y = i.type, S = y.propTypes;
        S && Ka(
          S,
          a,
          // Resolved props
          "prop",
          Mt(y)
        );
      }
      var O = e.child, N = jg(e, o);
      if (!N) {
        var U = O.memoizedProps, F = i.compare;
        if (F = F !== null ? F : Pe, F(U, a) && e.ref === t.ref)
          return Ho(e, t, o);
      }
      t.flags |= Rl;
      var I = nc(O, a);
      return I.ref = t.ref, I.return = t, t.child = I, I;
    }
    function zS(e, t, i, a, o) {
      if (t.type !== t.elementType) {
        var s = t.elementType;
        if (s.$$typeof === gt) {
          var f = s, p = f._payload, v = f._init;
          try {
            s = v(p);
          } catch {
            s = null;
          }
          var y = s && s.propTypes;
          y && Ka(
            y,
            a,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
            Mt(s)
          );
        }
      }
      if (e !== null) {
        var S = e.memoizedProps;
        if (Pe(S, a) && e.ref === t.ref && // Prevent bailout if the implementation changed due to hot reload.
        t.type === e.type)
          if (rl = false, t.pendingProps = a = S, jg(e, o))
            (e.flags & gs) !== $e && (rl = true);
          else
            return t.lanes = e.lanes, Ho(e, t, o);
      }
      return Dg(e, t, i, a, o);
    }
    function VS(e, t, i) {
      var a = t.pendingProps, o = a.children, s = e !== null ? e.memoizedState : null;
      if (a.mode === "hidden" || R)
        if ((t.mode & mt) === Qe) {
          var f = {
            baseLanes: Y,
            cachePool: null,
            transitions: null
          };
          t.memoizedState = f, Hh(t, i);
        } else if (li(i, ai)) {
          var O = {
            baseLanes: Y,
            cachePool: null,
            transitions: null
          };
          t.memoizedState = O;
          var N = s !== null ? s.baseLanes : i;
          Hh(t, N);
        } else {
          var p = null, v;
          if (s !== null) {
            var y = s.baseLanes;
            v = st(y, i);
          } else
            v = i;
          t.lanes = t.childLanes = ai;
          var S = {
            baseLanes: v,
            cachePool: p,
            transitions: null
          };
          return t.memoizedState = S, t.updateQueue = null, Hh(t, v), null;
        }
      else {
        var U;
        s !== null ? (U = st(s.baseLanes, i), t.memoizedState = null) : U = i, Hh(t, U);
      }
      return _i(e, t, o, i), t.child;
    }
    function Qk(e, t, i) {
      var a = t.pendingProps;
      return _i(e, t, a, i), t.child;
    }
    function Gk(e, t, i) {
      var a = t.pendingProps.children;
      return _i(e, t, a, i), t.child;
    }
    function qk(e, t, i) {
      {
        t.flags |= ut;
        {
          var a = t.stateNode;
          a.effectDuration = 0, a.passiveEffectDuration = 0;
        }
      }
      var o = t.pendingProps, s = o.children;
      return _i(e, t, s, i), t.child;
    }
    function US(e, t) {
      var i = t.ref;
      (e === null && i !== null || e !== null && e.ref !== i) && (t.flags |= Jr, t.flags |= bd);
    }
    function Dg(e, t, i, a, o) {
      if (t.type !== t.elementType) {
        var s = i.propTypes;
        s && Ka(
          s,
          a,
          // Resolved props
          "prop",
          Mt(i)
        );
      }
      var f;
      {
        var p = Cf(t, i, true);
        f = _f(t, p);
      }
      var v, y;
      wf(t, o), Ml(t);
      {
        if (Up.current = t, Kr(true), v = Af(e, t, i, a, f, o), y = zf(), t.mode & En) {
          Pn(true);
          try {
            v = Af(e, t, i, a, f, o), y = zf();
          } finally {
            Pn(false);
          }
        }
        Kr(false);
      }
      return vo(), e !== null && !rl ? (tS(e, t, o), Ho(e, t, o)) : (Ar() && y && c1(t), t.flags |= Rl, _i(e, t, v, o), t.child);
    }
    function jS(e, t, i, a, o) {
      {
        switch (dR(t)) {
          case false: {
            var s = t.stateNode, f = t.type, p = new f(t.memoizedProps, s.context), v = p.state;
            s.updater.enqueueSetState(s, v, null);
            break;
          }
          case true: {
            t.flags |= tt, t.flags |= Kn;
            var y = new Error("Simulated error coming from DevTools"), S = Bn(o);
            t.lanes = st(t.lanes, S);
            var O = kg(t, Xs(y, t), S);
            R1(t, O);
            break;
          }
        }
        if (t.type !== t.elementType) {
          var N = i.propTypes;
          N && Ka(
            N,
            a,
            // Resolved props
            "prop",
            Mt(i)
          );
        }
      }
      var U;
      $l(i) ? (U = true, Fm(t)) : U = false, wf(t, o);
      var F = t.stateNode, I;
      F === null ? (Nh(e, t), Y2(t, i, a), j1(t, i, a, o), I = true) : e === null ? I = Ck(t, i, a, o) : I = _k(e, t, i, a, o);
      var Re = Og(e, t, i, I, U, o);
      {
        var Ye = t.stateNode;
        I && Ye.props !== a && (Ks || g("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", at(t) || "a component"), Ks = true);
      }
      return Re;
    }
    function Og(e, t, i, a, o, s) {
      US(e, t);
      var f = (t.flags & tt) !== $e;
      if (!a && !f)
        return o && g2(t, i, false), Ho(e, t, s);
      var p = t.stateNode;
      Up.current = t;
      var v;
      if (f && typeof i.getDerivedStateFromError != "function")
        v = null, TS();
      else {
        Ml(t);
        {
          if (Kr(true), v = p.render(), t.mode & En) {
            Pn(true);
            try {
              p.render();
            } finally {
              Pn(false);
            }
          }
          Kr(false);
        }
        vo();
      }
      return t.flags |= Rl, e !== null && f ? Wk(e, t, v, s) : _i(e, t, v, s), t.memoizedState = p.state, o && g2(t, i, true), t.child;
    }
    function FS(e) {
      var t = e.stateNode;
      t.pendingContext ? h2(e, t.pendingContext, t.pendingContext !== t.context) : t.context && h2(e, t.context, false), $1(e, t.containerInfo);
    }
    function Xk(e, t, i) {
      if (FS(t), e === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var a = t.pendingProps, o = t.memoizedState, s = o.element;
      U2(e, t), eh(t, a, null, i);
      var f = t.memoizedState;
      t.stateNode;
      var p = f.element;
      if (o.isDehydrated) {
        var v = {
          element: p,
          isDehydrated: false,
          cache: f.cache,
          pendingSuspenseBoundaries: f.pendingSuspenseBoundaries,
          transitions: f.transitions
        }, y = t.updateQueue;
        if (y.baseState = v, t.memoizedState = v, t.flags & wn) {
          var S = Xs(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), t);
          return HS(e, t, p, i, S);
        } else if (p !== s) {
          var O = Xs(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), t);
          return HS(e, t, p, i, O);
        } else {
          ek(t);
          var N = X2(t, null, p, i);
          t.child = N;
          for (var U = N; U; )
            U.flags = U.flags & ~sn | Ai, U = U.sibling;
        }
      } else {
        if (xf(), p === s)
          return Ho(e, t, i);
        _i(e, t, p, i);
      }
      return t.child;
    }
    function HS(e, t, i, a, o) {
      return xf(), h1(o), t.flags |= wn, _i(e, t, i, a), t.child;
    }
    function Kk(e, t, i) {
      Z2(t), e === null && m1(t);
      var a = t.type, o = t.pendingProps, s = e !== null ? e.memoizedProps : null, f = o.children, p = Xy(a, o);
      return p ? f = null : s !== null && Xy(a, s) && (t.flags |= qt), US(e, t), _i(e, t, f, i), t.child;
    }
    function Zk(e, t) {
      return e === null && m1(t), null;
    }
    function Jk(e, t, i, a) {
      Nh(e, t);
      var o = t.pendingProps, s = i, f = s._payload, p = s._init, v = p(f);
      t.type = v;
      var y = t.tag = Z3(v), S = el(v, o), O;
      switch (y) {
        case J:
          return Lg(t, v), t.type = v = If(v), O = Dg(null, t, v, S, a), O;
        case Q:
          return t.type = v = u0(v), O = jS(null, t, v, S, a), O;
        case oe:
          return t.type = v = s0(v), O = MS(null, t, v, S, a), O;
        case Te: {
          if (t.type !== t.elementType) {
            var N = v.propTypes;
            N && Ka(
              N,
              S,
              // Resolved for outer only
              "prop",
              Mt(v)
            );
          }
          return O = AS(
            null,
            t,
            v,
            el(v.type, S),
            // The inner type can have defaults too
            a
          ), O;
        }
      }
      var U = "";
      throw v !== null && typeof v == "object" && v.$$typeof === gt && (U = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + v + ". " + ("Lazy element type must resolve to a class or function." + U));
    }
    function ex(e, t, i, a, o) {
      Nh(e, t), t.tag = Q;
      var s;
      return $l(i) ? (s = true, Fm(t)) : s = false, wf(t, o), Y2(t, i, a), j1(t, i, a, o), Og(null, t, i, true, s, o);
    }
    function tx(e, t, i, a) {
      Nh(e, t);
      var o = t.pendingProps, s;
      {
        var f = Cf(t, i, false);
        s = _f(t, f);
      }
      wf(t, a);
      var p, v;
      Ml(t);
      {
        if (i.prototype && typeof i.prototype.render == "function") {
          var y = Mt(i) || "Unknown";
          xg[y] || (g("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", y, y), xg[y] = true);
        }
        t.mode & En && Ja.recordLegacyContextWarning(t, null), Kr(true), Up.current = t, p = Af(null, t, i, o, s, a), v = zf(), Kr(false);
      }
      if (vo(), t.flags |= Rl, typeof p == "object" && p !== null && typeof p.render == "function" && p.$$typeof === void 0) {
        var S = Mt(i) || "Unknown";
        jp[S] || (g("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", S, S, S), jp[S] = true);
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof p == "object" && p !== null && typeof p.render == "function" && p.$$typeof === void 0
      ) {
        {
          var O = Mt(i) || "Unknown";
          jp[O] || (g("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", O, O, O), jp[O] = true);
        }
        t.tag = Q, t.memoizedState = null, t.updateQueue = null;
        var N = false;
        return $l(i) ? (N = true, Fm(t)) : N = false, t.memoizedState = p.state !== null && p.state !== void 0 ? p.state : null, x1(t), $2(t, p), j1(t, i, o, a), Og(null, t, i, true, N, a);
      } else {
        if (t.tag = J, t.mode & En) {
          Pn(true);
          try {
            p = Af(null, t, i, o, s, a), v = zf();
          } finally {
            Pn(false);
          }
        }
        return Ar() && v && c1(t), _i(null, t, p, a), Lg(t, i), t.child;
      }
    }
    function Lg(e, t) {
      {
        if (t && t.childContextTypes && g("%s(...): childContextTypes cannot be defined on a function component.", t.displayName || t.name || "Component"), e.ref !== null) {
          var i = "", a = Or();
          a && (i += `

Check the render method of \`` + a + "`.");
          var o = a || "", s = e._debugSource;
          s && (o = s.fileName + ":" + s.lineNumber), Tg[o] || (Tg[o] = true, g("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", i));
        }
        if (typeof t.getDerivedStateFromProps == "function") {
          var f = Mt(t) || "Unknown";
          wg[f] || (g("%s: Function components do not support getDerivedStateFromProps.", f), wg[f] = true);
        }
        if (typeof t.contextType == "object" && t.contextType !== null) {
          var p = Mt(t) || "Unknown";
          Rg[p] || (g("%s: Function components do not support contextType.", p), Rg[p] = true);
        }
      }
    }
    var Mg = {
      dehydrated: null,
      treeContext: null,
      retryLane: wt
    };
    function Ag(e) {
      return {
        baseLanes: e,
        cachePool: Yk(),
        transitions: null
      };
    }
    function nx(e, t) {
      var i = null;
      return {
        baseLanes: st(e.baseLanes, t),
        cachePool: i,
        transitions: e.transitions
      };
    }
    function rx(e, t, i, a) {
      if (t !== null) {
        var o = t.memoizedState;
        if (o === null)
          return false;
      }
      return Q1(e, Np);
    }
    function ix(e, t) {
      return bu(e.childLanes, t);
    }
    function PS(e, t, i) {
      var a = t.pendingProps;
      pR(t) && (t.flags |= tt);
      var o = tl.current, s = false, f = (t.flags & tt) !== $e;
      if (f || rx(o, e) ? (s = true, t.flags &= ~tt) : (e === null || e.memoizedState !== null) && (o = Rk(o, eS)), o = Df(o), Iu(t, o), e === null) {
        m1(t);
        var p = t.memoizedState;
        if (p !== null) {
          var v = p.dehydrated;
          if (v !== null)
            return sx(t, v);
        }
        var y = a.children, S = a.fallback;
        if (s) {
          var O = ax(t, y, S, i), N = t.child;
          return N.memoizedState = Ag(i), t.memoizedState = Mg, O;
        } else
          return zg(t, y);
      } else {
        var U = e.memoizedState;
        if (U !== null) {
          var F = U.dehydrated;
          if (F !== null)
            return cx(e, t, f, a, F, U, i);
        }
        if (s) {
          var I = a.fallback, Re = a.children, Ye = ox(e, t, Re, I, i), Ue = t.child, Nt = e.child.memoizedState;
          return Ue.memoizedState = Nt === null ? Ag(i) : nx(Nt, i), Ue.childLanes = ix(e, i), t.memoizedState = Mg, Ye;
        } else {
          var _t = a.children, A = lx(e, t, _t, i);
          return t.memoizedState = null, A;
        }
      }
    }
    function zg(e, t, i) {
      var a = e.mode, o = {
        mode: "visible",
        children: t
      }, s = Vg(o, a);
      return s.return = e, e.child = s, s;
    }
    function ax(e, t, i, a) {
      var o = e.mode, s = e.child, f = {
        mode: "hidden",
        children: t
      }, p, v;
      return (o & mt) === Qe && s !== null ? (p = s, p.childLanes = Y, p.pendingProps = f, e.mode & qe && (p.actualDuration = 0, p.actualStartTime = -1, p.selfBaseDuration = 0, p.treeBaseDuration = 0), v = Ku(i, o, a, null)) : (p = Vg(f, o), v = Ku(i, o, a, null)), p.return = e, v.return = e, p.sibling = v, e.child = p, v;
    }
    function Vg(e, t, i) {
      return Bb(e, t, Y, null);
    }
    function BS(e, t) {
      return nc(e, t);
    }
    function lx(e, t, i, a) {
      var o = e.child, s = o.sibling, f = BS(o, {
        mode: "visible",
        children: i
      });
      if ((t.mode & mt) === Qe && (f.lanes = a), f.return = t, f.sibling = null, s !== null) {
        var p = t.deletions;
        p === null ? (t.deletions = [s], t.flags |= Bt) : p.push(s);
      }
      return t.child = f, f;
    }
    function ox(e, t, i, a, o) {
      var s = t.mode, f = e.child, p = f.sibling, v = {
        mode: "hidden",
        children: i
      }, y;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (s & mt) === Qe && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        t.child !== f
      ) {
        var S = t.child;
        y = S, y.childLanes = Y, y.pendingProps = v, t.mode & qe && (y.actualDuration = 0, y.actualStartTime = -1, y.selfBaseDuration = f.selfBaseDuration, y.treeBaseDuration = f.treeBaseDuration), t.deletions = null;
      } else
        y = BS(f, v), y.subtreeFlags = f.subtreeFlags & ar;
      var O;
      return p !== null ? O = nc(p, a) : (O = Ku(a, s, o, null), O.flags |= sn), O.return = t, y.return = t, y.sibling = O, t.child = y, O;
    }
    function Th(e, t, i, a) {
      a !== null && h1(a), Tf(t, e.child, null, i);
      var o = t.pendingProps, s = o.children, f = zg(t, s);
      return f.flags |= sn, t.memoizedState = null, f;
    }
    function ux(e, t, i, a, o) {
      var s = t.mode, f = {
        mode: "visible",
        children: i
      }, p = Vg(f, s), v = Ku(a, s, o, null);
      return v.flags |= sn, p.return = t, v.return = t, p.sibling = v, t.child = p, (t.mode & mt) !== Qe && Tf(t, e.child, null, o), v;
    }
    function sx(e, t, i) {
      return (e.mode & mt) === Qe ? (g("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), e.lanes = Ke) : e1(t) ? e.lanes = yo : e.lanes = ai, null;
    }
    function cx(e, t, i, a, o, s, f) {
      if (i)
        if (t.flags & wn) {
          t.flags &= ~wn;
          var A = _g(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return Th(e, t, f, A);
        } else {
          if (t.memoizedState !== null)
            return t.child = e.child, t.flags |= tt, null;
          var $ = a.children, z = a.fallback, le = ux(e, t, $, z, f), we = t.child;
          return we.memoizedState = Ag(f), t.memoizedState = Mg, le;
        }
      else {
        if (ZE(), (t.mode & mt) === Qe)
          return Th(
            e,
            t,
            f,
            // TODO: When we delete legacy mode, we should make this error argument
            // required â€” every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
        if (e1(o)) {
          var p, v, y;
          {
            var S = mE(o);
            p = S.digest, v = S.message, y = S.stack;
          }
          var O;
          v ? O = new Error(v) : O = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          var N = _g(O, p, y);
          return Th(e, t, f, N);
        }
        var U = li(f, e.childLanes);
        if (rl || U) {
          var F = Fh();
          if (F !== null) {
            var I = Cy(F, f);
            if (I !== wt && I !== s.retryLane) {
              s.retryLane = I;
              var Re = on;
              $i(e, I), mr(F, e, I, Re);
            }
          }
          r0();
          var Ye = _g(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return Th(e, t, f, Ye);
        } else if (c2(o)) {
          t.flags |= tt, t.child = e.child;
          var Ue = z3.bind(null, e);
          return hE(o, Ue), null;
        } else {
          tk(t, o, s.treeContext);
          var Nt = a.children, _t = zg(t, Nt);
          return _t.flags |= Ai, _t;
        }
      }
    }
    function IS(e, t, i) {
      e.lanes = st(e.lanes, t);
      var a = e.alternate;
      a !== null && (a.lanes = st(a.lanes, t)), C1(e.return, t, i);
    }
    function fx(e, t, i) {
      for (var a = t; a !== null; ) {
        if (a.tag === be) {
          var o = a.memoizedState;
          o !== null && IS(a, i, e);
        } else if (a.tag === Et)
          IS(a, i, e);
        else if (a.child !== null) {
          a.child.return = a, a = a.child;
          continue;
        }
        if (a === e)
          return;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === e)
            return;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
    }
    function dx(e) {
      for (var t = e, i = null; t !== null; ) {
        var a = t.alternate;
        a !== null && oh(a) === null && (i = t), t = t.sibling;
      }
      return i;
    }
    function px(e) {
      if (e !== void 0 && e !== "forwards" && e !== "backwards" && e !== "together" && !Ng[e])
        if (Ng[e] = true, typeof e == "string")
          switch (e.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              g('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', e, e.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              g('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', e, e.toLowerCase());
              break;
            }
            default:
              g('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', e);
              break;
          }
        else
          g('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', e);
    }
    function vx(e, t) {
      e !== void 0 && !wh[e] && (e !== "collapsed" && e !== "hidden" ? (wh[e] = true, g('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', e)) : t !== "forwards" && t !== "backwards" && (wh[e] = true, g('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', e)));
    }
    function $S(e, t) {
      {
        var i = kt(e), a = !i && typeof ea(e) == "function";
        if (i || a) {
          var o = i ? "array" : "iterable";
          return g("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", o, t, o), false;
        }
      }
      return true;
    }
    function mx(e, t) {
      if ((t === "forwards" || t === "backwards") && e !== void 0 && e !== null && e !== false)
        if (kt(e)) {
          for (var i = 0; i < e.length; i++)
            if (!$S(e[i], i))
              return;
        } else {
          var a = ea(e);
          if (typeof a == "function") {
            var o = a.call(e);
            if (o)
              for (var s = o.next(), f = 0; !s.done; s = o.next()) {
                if (!$S(s.value, f))
                  return;
                f++;
              }
          } else
            g('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', t);
        }
    }
    function Ug(e, t, i, a, o) {
      var s = e.memoizedState;
      s === null ? e.memoizedState = {
        isBackwards: t,
        rendering: null,
        renderingStartTime: 0,
        last: a,
        tail: i,
        tailMode: o
      } : (s.isBackwards = t, s.rendering = null, s.renderingStartTime = 0, s.last = a, s.tail = i, s.tailMode = o);
    }
    function YS(e, t, i) {
      var a = t.pendingProps, o = a.revealOrder, s = a.tail, f = a.children;
      px(o), vx(s, o), mx(f, o), _i(e, t, f, i);
      var p = tl.current, v = Q1(p, Np);
      if (v)
        p = G1(p, Np), t.flags |= tt;
      else {
        var y = e !== null && (e.flags & tt) !== $e;
        y && fx(t, t.child, i), p = Df(p);
      }
      if (Iu(t, p), (t.mode & mt) === Qe)
        t.memoizedState = null;
      else
        switch (o) {
          case "forwards": {
            var S = dx(t.child), O;
            S === null ? (O = t.child, t.child = null) : (O = S.sibling, S.sibling = null), Ug(
              t,
              false,
              // isBackwards
              O,
              S,
              s
            );
            break;
          }
          case "backwards": {
            var N = null, U = t.child;
            for (t.child = null; U !== null; ) {
              var F = U.alternate;
              if (F !== null && oh(F) === null) {
                t.child = U;
                break;
              }
              var I = U.sibling;
              U.sibling = N, N = U, U = I;
            }
            Ug(
              t,
              true,
              // isBackwards
              N,
              null,
              // last
              s
            );
            break;
          }
          case "together": {
            Ug(
              t,
              false,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            t.memoizedState = null;
        }
      return t.child;
    }
    function hx(e, t, i) {
      $1(t, t.stateNode.containerInfo);
      var a = t.pendingProps;
      return e === null ? t.child = Tf(t, null, a, i) : _i(e, t, a, i), t.child;
    }
    var WS = false;
    function yx(e, t, i) {
      var a = t.type, o = a._context, s = t.pendingProps, f = t.memoizedProps, p = s.value;
      {
        "value" in s || WS || (WS = true, g("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
        var v = t.type.propTypes;
        v && Ka(v, s, "prop", "Context.Provider");
      }
      if (M2(t, o, p), f !== null) {
        var y = f.value;
        if (Me(y, p)) {
          if (f.children === s.children && !Um())
            return Ho(e, t, i);
        } else
          fk(t, o, i);
      }
      var S = s.children;
      return _i(e, t, S, i), t.child;
    }
    var QS = false;
    function gx(e, t, i) {
      var a = t.type;
      a._context === void 0 ? a !== a.Consumer && (QS || (QS = true, g("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : a = a._context;
      var o = t.pendingProps, s = o.children;
      typeof s != "function" && g("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), wf(t, i);
      var f = nr(a);
      Ml(t);
      var p;
      return Up.current = t, Kr(true), p = s(f), Kr(false), vo(), t.flags |= Rl, _i(e, t, p, i), t.child;
    }
    function Fp() {
      rl = true;
    }
    function Nh(e, t) {
      (t.mode & mt) === Qe && e !== null && (e.alternate = null, t.alternate = null, t.flags |= sn);
    }
    function Ho(e, t, i) {
      return e !== null && (t.dependencies = e.dependencies), TS(), Kp(t.lanes), li(i, t.childLanes) ? (Ek(e, t), t.child) : null;
    }
    function Sx(e, t, i) {
      {
        var a = t.return;
        if (a === null)
          throw new Error("Cannot swap the root fiber.");
        if (e.alternate = null, t.alternate = null, i.index = t.index, i.sibling = t.sibling, i.return = t.return, i.ref = t.ref, t === a.child)
          a.child = i;
        else {
          var o = a.child;
          if (o === null)
            throw new Error("Expected parent to have a child.");
          for (; o.sibling !== t; )
            if (o = o.sibling, o === null)
              throw new Error("Expected to find the previous sibling.");
          o.sibling = i;
        }
        var s = a.deletions;
        return s === null ? (a.deletions = [e], a.flags |= Bt) : s.push(e), i.flags |= sn, i;
      }
    }
    function jg(e, t) {
      var i = e.lanes;
      return !!li(i, t);
    }
    function bx(e, t, i) {
      switch (t.tag) {
        case W:
          FS(t), t.stateNode, xf();
          break;
        case q:
          Z2(t);
          break;
        case Q: {
          var a = t.type;
          $l(a) && Fm(t);
          break;
        }
        case Z:
          $1(t, t.stateNode.containerInfo);
          break;
        case de: {
          var o = t.memoizedProps.value, s = t.type._context;
          M2(t, s, o);
          break;
        }
        case xe:
          {
            var f = li(i, t.childLanes);
            f && (t.flags |= ut);
            {
              var p = t.stateNode;
              p.effectDuration = 0, p.passiveEffectDuration = 0;
            }
          }
          break;
        case be: {
          var v = t.memoizedState;
          if (v !== null) {
            if (v.dehydrated !== null)
              return Iu(t, Df(tl.current)), t.flags |= tt, null;
            var y = t.child, S = y.childLanes;
            if (li(i, S))
              return PS(e, t, i);
            Iu(t, Df(tl.current));
            var O = Ho(e, t, i);
            return O !== null ? O.sibling : null;
          } else
            Iu(t, Df(tl.current));
          break;
        }
        case Et: {
          var N = (e.flags & tt) !== $e, U = li(i, t.childLanes);
          if (N) {
            if (U)
              return YS(e, t, i);
            t.flags |= tt;
          }
          var F = t.memoizedState;
          if (F !== null && (F.rendering = null, F.tail = null, F.lastEffect = null), Iu(t, tl.current), U)
            break;
          return null;
        }
        case Be:
        case rt:
          return t.lanes = Y, VS(e, t, i);
      }
      return Ho(e, t, i);
    }
    function GS(e, t, i) {
      if (t._debugNeedsRemount && e !== null)
        return Sx(e, t, v0(t.type, t.key, t.pendingProps, t._debugOwner || null, t.mode, t.lanes));
      if (e !== null) {
        var a = e.memoizedProps, o = t.pendingProps;
        if (a !== o || Um() || // Force a re-render if the implementation changed due to hot reload:
        t.type !== e.type)
          rl = true;
        else {
          var s = jg(e, i);
          if (!s && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (t.flags & tt) === $e)
            return rl = false, bx(e, t, i);
          (e.flags & gs) !== $e ? rl = true : rl = false;
        }
      } else if (rl = false, Ar() && WE(t)) {
        var f = t.index, p = QE();
        C2(t, p, f);
      }
      switch (t.lanes = Y, t.tag) {
        case ve:
          return tx(e, t, t.type, i);
        case St: {
          var v = t.elementType;
          return Jk(e, t, v, i);
        }
        case J: {
          var y = t.type, S = t.pendingProps, O = t.elementType === y ? S : el(y, S);
          return Dg(e, t, y, O, i);
        }
        case Q: {
          var N = t.type, U = t.pendingProps, F = t.elementType === N ? U : el(N, U);
          return jS(e, t, N, F, i);
        }
        case W:
          return Xk(e, t, i);
        case q:
          return Kk(e, t, i);
        case fe:
          return Zk(e, t);
        case be:
          return PS(e, t, i);
        case Z:
          return hx(e, t, i);
        case oe: {
          var I = t.type, Re = t.pendingProps, Ye = t.elementType === I ? Re : el(I, Re);
          return MS(e, t, I, Ye, i);
        }
        case ee:
          return Qk(e, t, i);
        case ie:
          return Gk(e, t, i);
        case xe:
          return qk(e, t, i);
        case de:
          return yx(e, t, i);
        case Xe:
          return gx(e, t, i);
        case Te: {
          var Ue = t.type, Nt = t.pendingProps, _t = el(Ue, Nt);
          if (t.type !== t.elementType) {
            var A = Ue.propTypes;
            A && Ka(
              A,
              _t,
              // Resolved for outer only
              "prop",
              Mt(Ue)
            );
          }
          return _t = el(Ue.type, _t), AS(e, t, Ue, _t, i);
        }
        case De:
          return zS(e, t, t.type, t.pendingProps, i);
        case xt: {
          var $ = t.type, z = t.pendingProps, le = t.elementType === $ ? z : el($, z);
          return ex(e, t, $, le, i);
        }
        case Et:
          return YS(e, t, i);
        case en:
          break;
        case Be:
          return VS(e, t, i);
      }
      throw new Error("Unknown unit of work tag (" + t.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function Vf(e) {
      e.flags |= ut;
    }
    function qS(e) {
      e.flags |= Jr, e.flags |= bd;
    }
    var XS, Fg, KS, ZS;
    XS = function(e, t, i, a) {
      for (var o = t.child; o !== null; ) {
        if (o.tag === q || o.tag === fe)
          I_(e, o.stateNode);
        else if (o.tag !== Z) {
          if (o.child !== null) {
            o.child.return = o, o = o.child;
            continue;
          }
        }
        if (o === t)
          return;
        for (; o.sibling === null; ) {
          if (o.return === null || o.return === t)
            return;
          o = o.return;
        }
        o.sibling.return = o.return, o = o.sibling;
      }
    }, Fg = function(e, t) {
    }, KS = function(e, t, i, a, o) {
      var s = e.memoizedProps;
      if (s !== a) {
        var f = t.stateNode, p = Y1(), v = Y_(f, i, s, a, o, p);
        t.updateQueue = v, v && Vf(t);
      }
    }, ZS = function(e, t, i, a) {
      i !== a && Vf(t);
    };
    function Hp(e, t) {
      if (!Ar())
        switch (e.tailMode) {
          case "hidden": {
            for (var i = e.tail, a = null; i !== null; )
              i.alternate !== null && (a = i), i = i.sibling;
            a === null ? e.tail = null : a.sibling = null;
            break;
          }
          case "collapsed": {
            for (var o = e.tail, s = null; o !== null; )
              o.alternate !== null && (s = o), o = o.sibling;
            s === null ? !t && e.tail !== null ? e.tail.sibling = null : e.tail = null : s.sibling = null;
            break;
          }
        }
    }
    function Vr(e) {
      var t = e.alternate !== null && e.alternate.child === e.child, i = Y, a = $e;
      if (t) {
        if ((e.mode & qe) !== Qe) {
          for (var v = e.selfBaseDuration, y = e.child; y !== null; )
            i = st(i, st(y.lanes, y.childLanes)), a |= y.subtreeFlags & ar, a |= y.flags & ar, v += y.treeBaseDuration, y = y.sibling;
          e.treeBaseDuration = v;
        } else
          for (var S = e.child; S !== null; )
            i = st(i, st(S.lanes, S.childLanes)), a |= S.subtreeFlags & ar, a |= S.flags & ar, S.return = e, S = S.sibling;
        e.subtreeFlags |= a;
      } else {
        if ((e.mode & qe) !== Qe) {
          for (var o = e.actualDuration, s = e.selfBaseDuration, f = e.child; f !== null; )
            i = st(i, st(f.lanes, f.childLanes)), a |= f.subtreeFlags, a |= f.flags, o += f.actualDuration, s += f.treeBaseDuration, f = f.sibling;
          e.actualDuration = o, e.treeBaseDuration = s;
        } else
          for (var p = e.child; p !== null; )
            i = st(i, st(p.lanes, p.childLanes)), a |= p.subtreeFlags, a |= p.flags, p.return = e, p = p.sibling;
        e.subtreeFlags |= a;
      }
      return e.childLanes = i, t;
    }
    function Cx(e, t, i) {
      if (lk() && (t.mode & mt) !== Qe && (t.flags & tt) === $e)
        return T2(t), xf(), t.flags |= wn | hi | Kn, false;
      var a = $m(t);
      if (i !== null && i.dehydrated !== null)
        if (e === null) {
          if (!a)
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          if (ik(t), Vr(t), (t.mode & qe) !== Qe) {
            var o = i !== null;
            if (o) {
              var s = t.child;
              s !== null && (t.treeBaseDuration -= s.treeBaseDuration);
            }
          }
          return false;
        } else {
          if (xf(), (t.flags & tt) === $e && (t.memoizedState = null), t.flags |= ut, Vr(t), (t.mode & qe) !== Qe) {
            var f = i !== null;
            if (f) {
              var p = t.child;
              p !== null && (t.treeBaseDuration -= p.treeBaseDuration);
            }
          }
          return false;
        }
      else
        return N2(), true;
    }
    function JS(e, t, i) {
      var a = t.pendingProps;
      switch (f1(t), t.tag) {
        case ve:
        case St:
        case De:
        case J:
        case oe:
        case ee:
        case ie:
        case xe:
        case Xe:
        case Te:
          return Vr(t), null;
        case Q: {
          var o = t.type;
          return $l(o) && jm(t), Vr(t), null;
        }
        case W: {
          var s = t.stateNode;
          if (Nf(t), o1(t), X1(), s.pendingContext && (s.context = s.pendingContext, s.pendingContext = null), e === null || e.child === null) {
            var f = $m(t);
            if (f)
              Vf(t);
            else if (e !== null) {
              var p = e.memoizedState;
              (!p.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (t.flags & wn) !== $e) && (t.flags |= Mi, N2());
            }
          }
          return Fg(e, t), Vr(t), null;
        }
        case q: {
          W1(t);
          var v = K2(), y = t.type;
          if (e !== null && t.stateNode != null)
            KS(e, t, y, a, v), e.ref !== t.ref && qS(t);
          else {
            if (!a) {
              if (t.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return Vr(t), null;
            }
            var S = Y1(), O = $m(t);
            if (O)
              nk(t, v, S) && Vf(t);
            else {
              var N = B_(y, a, v, S, t);
              XS(N, t, false, false), t.stateNode = N, $_(N, y, a, v) && Vf(t);
            }
            t.ref !== null && qS(t);
          }
          return Vr(t), null;
        }
        case fe: {
          var U = a;
          if (e && t.stateNode != null) {
            var F = e.memoizedProps;
            ZS(e, t, F, U);
          } else {
            if (typeof U != "string" && t.stateNode === null)
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            var I = K2(), Re = Y1(), Ye = $m(t);
            Ye ? rk(t) && Vf(t) : t.stateNode = W_(U, I, Re, t);
          }
          return Vr(t), null;
        }
        case be: {
          Of(t);
          var Ue = t.memoizedState;
          if (e === null || e.memoizedState !== null && e.memoizedState.dehydrated !== null) {
            var Nt = Cx(e, t, Ue);
            if (!Nt)
              return t.flags & Kn ? t : null;
          }
          if ((t.flags & tt) !== $e)
            return t.lanes = i, (t.mode & qe) !== Qe && Cg(t), t;
          var _t = Ue !== null, A = e !== null && e.memoizedState !== null;
          if (_t !== A && _t) {
            var $ = t.child;
            if ($.flags |= wl, (t.mode & mt) !== Qe) {
              var z = e === null && (t.memoizedProps.unstable_avoidThisFallback !== true || !K);
              z || Q1(tl.current, eS) ? _3() : r0();
            }
          }
          var le = t.updateQueue;
          if (le !== null && (t.flags |= ut), Vr(t), (t.mode & qe) !== Qe && _t) {
            var we = t.child;
            we !== null && (t.treeBaseDuration -= we.treeBaseDuration);
          }
          return null;
        }
        case Z:
          return Nf(t), Fg(e, t), e === null && FE(t.stateNode.containerInfo), Vr(t), null;
        case de:
          var _e = t.type._context;
          return b1(_e, t), Vr(t), null;
        case xt: {
          var et = t.type;
          return $l(et) && jm(t), Vr(t), null;
        }
        case Et: {
          Of(t);
          var ot = t.memoizedState;
          if (ot === null)
            return Vr(t), null;
          var nn = (t.flags & tt) !== $e, Ft = ot.rendering;
          if (Ft === null)
            if (nn)
              Hp(ot, false);
            else {
              var Wn = k3() && (e === null || (e.flags & tt) === $e);
              if (!Wn)
                for (var Ht = t.child; Ht !== null; ) {
                  var jn = oh(Ht);
                  if (jn !== null) {
                    nn = true, t.flags |= tt, Hp(ot, false);
                    var ci = jn.updateQueue;
                    return ci !== null && (t.updateQueue = ci, t.flags |= ut), t.subtreeFlags = $e, kk(t, i), Iu(t, G1(tl.current, Np)), t.child;
                  }
                  Ht = Ht.sibling;
                }
              ot.tail !== null && _n() > bb() && (t.flags |= tt, nn = true, Hp(ot, false), t.lanes = Md);
            }
          else {
            if (!nn) {
              var Pr = oh(Ft);
              if (Pr !== null) {
                t.flags |= tt, nn = true;
                var fa = Pr.updateQueue;
                if (fa !== null && (t.updateQueue = fa, t.flags |= ut), Hp(ot, true), ot.tail === null && ot.tailMode === "hidden" && !Ft.alternate && !Ar())
                  return Vr(t), null;
              } else
                _n() * 2 - ot.renderingStartTime > bb() && i !== ai && (t.flags |= tt, nn = true, Hp(ot, false), t.lanes = Md);
            }
            if (ot.isBackwards)
              Ft.sibling = t.child, t.child = Ft;
            else {
              var xi = ot.last;
              xi !== null ? xi.sibling = Ft : t.child = Ft, ot.last = Ft;
            }
          }
          if (ot.tail !== null) {
            var Ri = ot.tail;
            ot.rendering = Ri, ot.tail = Ri.sibling, ot.renderingStartTime = _n(), Ri.sibling = null;
            var fi = tl.current;
            return nn ? fi = G1(fi, Np) : fi = Df(fi), Iu(t, fi), Ri;
          }
          return Vr(t), null;
        }
        case en:
          break;
        case Be:
        case rt: {
          n0(t);
          var Yo = t.memoizedState, $f = Yo !== null;
          if (e !== null) {
            var nv = e.memoizedState, Zl = nv !== null;
            Zl !== $f && // LegacyHidden doesn't do any hiding â€” it only pre-renders.
            !R && (t.flags |= wl);
          }
          return !$f || (t.mode & mt) === Qe ? Vr(t) : li(Kl, ai) && (Vr(t), t.subtreeFlags & (sn | ut) && (t.flags |= wl)), null;
        }
        case Ut:
          return null;
        case ht:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + t.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function _x(e, t, i) {
      switch (f1(t), t.tag) {
        case Q: {
          var a = t.type;
          $l(a) && jm(t);
          var o = t.flags;
          return o & Kn ? (t.flags = o & ~Kn | tt, (t.mode & qe) !== Qe && Cg(t), t) : null;
        }
        case W: {
          t.stateNode, Nf(t), o1(t), X1();
          var s = t.flags;
          return (s & Kn) !== $e && (s & tt) === $e ? (t.flags = s & ~Kn | tt, t) : null;
        }
        case q:
          return W1(t), null;
        case be: {
          Of(t);
          var f = t.memoizedState;
          if (f !== null && f.dehydrated !== null) {
            if (t.alternate === null)
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            xf();
          }
          var p = t.flags;
          return p & Kn ? (t.flags = p & ~Kn | tt, (t.mode & qe) !== Qe && Cg(t), t) : null;
        }
        case Et:
          return Of(t), null;
        case Z:
          return Nf(t), null;
        case de:
          var v = t.type._context;
          return b1(v, t), null;
        case Be:
        case rt:
          return n0(t), null;
        case Ut:
          return null;
        default:
          return null;
      }
    }
    function eb(e, t, i) {
      switch (f1(t), t.tag) {
        case Q: {
          var a = t.type.childContextTypes;
          a != null && jm(t);
          break;
        }
        case W: {
          t.stateNode, Nf(t), o1(t), X1();
          break;
        }
        case q: {
          W1(t);
          break;
        }
        case Z:
          Nf(t);
          break;
        case be:
          Of(t);
          break;
        case Et:
          Of(t);
          break;
        case de:
          var o = t.type._context;
          b1(o, t);
          break;
        case Be:
        case rt:
          n0(t);
          break;
      }
    }
    var tb = null;
    tb = /* @__PURE__ */ new Set();
    var Dh = false, Ur = false, Ex = typeof WeakSet == "function" ? WeakSet : Set, Ae = null, Uf = null, jf = null;
    function kx(e) {
      fo(null, function() {
        throw e;
      }), gd();
    }
    var xx = function(e, t) {
      if (t.props = e.memoizedProps, t.state = e.memoizedState, e.mode & qe)
        try {
          ql(), t.componentWillUnmount();
        } finally {
          Gl(e);
        }
      else
        t.componentWillUnmount();
    };
    function nb(e, t) {
      try {
        Wu(sr, e);
      } catch (i) {
        pn(e, t, i);
      }
    }
    function Hg(e, t, i) {
      try {
        xx(e, i);
      } catch (a) {
        pn(e, t, a);
      }
    }
    function Rx(e, t, i) {
      try {
        i.componentDidMount();
      } catch (a) {
        pn(e, t, a);
      }
    }
    function rb(e, t) {
      try {
        ab(e);
      } catch (i) {
        pn(e, t, i);
      }
    }
    function Ff(e, t) {
      var i = e.ref;
      if (i !== null)
        if (typeof i == "function") {
          var a;
          try {
            if (ct && bt && e.mode & qe)
              try {
                ql(), a = i(null);
              } finally {
                Gl(e);
              }
            else
              a = i(null);
          } catch (o) {
            pn(e, t, o);
          }
          typeof a == "function" && g("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", at(e));
        } else
          i.current = null;
    }
    function Oh(e, t, i) {
      try {
        i();
      } catch (a) {
        pn(e, t, a);
      }
    }
    var ib = false;
    function wx(e, t) {
      H_(e.containerInfo), Ae = t, Tx();
      var i = ib;
      return ib = false, i;
    }
    function Tx() {
      for (; Ae !== null; ) {
        var e = Ae, t = e.child;
        (e.subtreeFlags & du) !== $e && t !== null ? (t.return = e, Ae = t) : Nx();
      }
    }
    function Nx() {
      for (; Ae !== null; ) {
        var e = Ae;
        Gt(e);
        try {
          Dx(e);
        } catch (i) {
          pn(e, e.return, i);
        }
        Rn();
        var t = e.sibling;
        if (t !== null) {
          t.return = e.return, Ae = t;
          return;
        }
        Ae = e.return;
      }
    }
    function Dx(e) {
      var t = e.alternate, i = e.flags;
      if ((i & Mi) !== $e) {
        switch (Gt(e), e.tag) {
          case J:
          case oe:
          case De:
            break;
          case Q: {
            if (t !== null) {
              var a = t.memoizedProps, o = t.memoizedState, s = e.stateNode;
              e.type === e.elementType && !Ks && (s.props !== e.memoizedProps && g("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(e) || "instance"), s.state !== e.memoizedState && g("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(e) || "instance"));
              var f = s.getSnapshotBeforeUpdate(e.elementType === e.type ? a : el(e.type, a), o);
              {
                var p = tb;
                f === void 0 && !p.has(e.type) && (p.add(e.type), g("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", at(e)));
              }
              s.__reactInternalSnapshotBeforeUpdate = f;
            }
            break;
          }
          case W: {
            {
              var v = e.stateNode;
              fE(v.containerInfo);
            }
            break;
          }
          case q:
          case fe:
          case Z:
          case xt:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        Rn();
      }
    }
    function il(e, t, i) {
      var a = t.updateQueue, o = a !== null ? a.lastEffect : null;
      if (o !== null) {
        var s = o.next, f = s;
        do {
          if ((f.tag & e) === e) {
            var p = f.destroy;
            f.destroy = void 0, p !== void 0 && ((e & zr) !== Yi ? wc(t) : (e & sr) !== Yi && Tc(t), (e & Yl) !== Yi && Jp(true), Oh(t, i, p), (e & Yl) !== Yi && Jp(false), (e & zr) !== Yi ? Iv() : (e & sr) !== Yi && pu());
          }
          f = f.next;
        } while (f !== s);
      }
    }
    function Wu(e, t) {
      var i = t.updateQueue, a = i !== null ? i.lastEffect : null;
      if (a !== null) {
        var o = a.next, s = o;
        do {
          if ((s.tag & e) === e) {
            (e & zr) !== Yi ? Bv(t) : (e & sr) !== Yi && $v(t);
            var f = s.create;
            (e & Yl) !== Yi && Jp(true), s.destroy = f(), (e & Yl) !== Yi && Jp(false), (e & zr) !== Yi ? Dd() : (e & sr) !== Yi && Yv();
            {
              var p = s.destroy;
              if (p !== void 0 && typeof p != "function") {
                var v = void 0;
                (s.tag & sr) !== $e ? v = "useLayoutEffect" : (s.tag & Yl) !== $e ? v = "useInsertionEffect" : v = "useEffect";
                var y = void 0;
                p === null ? y = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof p.then == "function" ? y = `

It looks like you wrote ` + v + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + v + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : y = " You returned: " + p, g("%s must not return anything besides a function, which is used for clean-up.%s", v, y);
              }
            }
          }
          s = s.next;
        } while (s !== o);
      }
    }
    function Ox(e, t) {
      if ((t.flags & ut) !== $e)
        switch (t.tag) {
          case xe: {
            var i = t.stateNode.passiveEffectDuration, a = t.memoizedProps, o = a.id, s = a.onPostCommit, f = RS(), p = t.alternate === null ? "mount" : "update";
            xS() && (p = "nested-update"), typeof s == "function" && s(o, p, i, f);
            var v = t.return;
            e:
              for (; v !== null; ) {
                switch (v.tag) {
                  case W:
                    var y = v.stateNode;
                    y.passiveEffectDuration += i;
                    break e;
                  case xe:
                    var S = v.stateNode;
                    S.passiveEffectDuration += i;
                    break e;
                }
                v = v.return;
              }
            break;
          }
        }
    }
    function Lx(e, t, i, a) {
      if ((i.flags & br) !== $e)
        switch (i.tag) {
          case J:
          case oe:
          case De: {
            if (!Ur)
              if (i.mode & qe)
                try {
                  ql(), Wu(sr | ur, i);
                } finally {
                  Gl(i);
                }
              else
                Wu(sr | ur, i);
            break;
          }
          case Q: {
            var o = i.stateNode;
            if (i.flags & ut && !Ur)
              if (t === null)
                if (i.type === i.elementType && !Ks && (o.props !== i.memoizedProps && g("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(i) || "instance"), o.state !== i.memoizedState && g("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(i) || "instance")), i.mode & qe)
                  try {
                    ql(), o.componentDidMount();
                  } finally {
                    Gl(i);
                  }
                else
                  o.componentDidMount();
              else {
                var s = i.elementType === i.type ? t.memoizedProps : el(i.type, t.memoizedProps), f = t.memoizedState;
                if (i.type === i.elementType && !Ks && (o.props !== i.memoizedProps && g("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(i) || "instance"), o.state !== i.memoizedState && g("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(i) || "instance")), i.mode & qe)
                  try {
                    ql(), o.componentDidUpdate(s, f, o.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    Gl(i);
                  }
                else
                  o.componentDidUpdate(s, f, o.__reactInternalSnapshotBeforeUpdate);
              }
            var p = i.updateQueue;
            p !== null && (i.type === i.elementType && !Ks && (o.props !== i.memoizedProps && g("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(i) || "instance"), o.state !== i.memoizedState && g("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(i) || "instance")), F2(i, p, o));
            break;
          }
          case W: {
            var v = i.updateQueue;
            if (v !== null) {
              var y = null;
              if (i.child !== null)
                switch (i.child.tag) {
                  case q:
                    y = i.child.stateNode;
                    break;
                  case Q:
                    y = i.child.stateNode;
                    break;
                }
              F2(i, v, y);
            }
            break;
          }
          case q: {
            var S = i.stateNode;
            if (t === null && i.flags & ut) {
              var O = i.type, N = i.memoizedProps;
              K_(S, O, N);
            }
            break;
          }
          case fe:
            break;
          case Z:
            break;
          case xe: {
            {
              var U = i.memoizedProps, F = U.onCommit, I = U.onRender, Re = i.stateNode.effectDuration, Ye = RS(), Ue = t === null ? "mount" : "update";
              xS() && (Ue = "nested-update"), typeof I == "function" && I(i.memoizedProps.id, Ue, i.actualDuration, i.treeBaseDuration, i.actualStartTime, Ye);
              {
                typeof F == "function" && F(i.memoizedProps.id, Ue, Re, Ye), N3(i);
                var Nt = i.return;
                e:
                  for (; Nt !== null; ) {
                    switch (Nt.tag) {
                      case W:
                        var _t = Nt.stateNode;
                        _t.effectDuration += Re;
                        break e;
                      case xe:
                        var A = Nt.stateNode;
                        A.effectDuration += Re;
                        break e;
                    }
                    Nt = Nt.return;
                  }
              }
            }
            break;
          }
          case be: {
            Hx(e, i);
            break;
          }
          case Et:
          case xt:
          case en:
          case Be:
          case rt:
          case ht:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      Ur || i.flags & Jr && ab(i);
    }
    function Mx(e) {
      switch (e.tag) {
        case J:
        case oe:
        case De: {
          if (e.mode & qe)
            try {
              ql(), nb(e, e.return);
            } finally {
              Gl(e);
            }
          else
            nb(e, e.return);
          break;
        }
        case Q: {
          var t = e.stateNode;
          typeof t.componentDidMount == "function" && Rx(e, e.return, t), rb(e, e.return);
          break;
        }
        case q: {
          rb(e, e.return);
          break;
        }
      }
    }
    function Ax(e, t) {
      for (var i = null, a = e; ; ) {
        if (a.tag === q) {
          if (i === null) {
            i = a;
            try {
              var o = a.stateNode;
              t ? oE(o) : sE(a.stateNode, a.memoizedProps);
            } catch (f) {
              pn(e, e.return, f);
            }
          }
        } else if (a.tag === fe) {
          if (i === null)
            try {
              var s = a.stateNode;
              t ? uE(s) : cE(s, a.memoizedProps);
            } catch (f) {
              pn(e, e.return, f);
            }
        } else if (!((a.tag === Be || a.tag === rt) && a.memoizedState !== null && a !== e)) {
          if (a.child !== null) {
            a.child.return = a, a = a.child;
            continue;
          }
        }
        if (a === e)
          return;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === e)
            return;
          i === a && (i = null), a = a.return;
        }
        i === a && (i = null), a.sibling.return = a.return, a = a.sibling;
      }
    }
    function ab(e) {
      var t = e.ref;
      if (t !== null) {
        var i = e.stateNode, a;
        switch (e.tag) {
          case q:
            a = i;
            break;
          default:
            a = i;
        }
        if (typeof t == "function") {
          var o;
          if (e.mode & qe)
            try {
              ql(), o = t(a);
            } finally {
              Gl(e);
            }
          else
            o = t(a);
          typeof o == "function" && g("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", at(e));
        } else
          t.hasOwnProperty("current") || g("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", at(e)), t.current = a;
      }
    }
    function zx(e) {
      var t = e.alternate;
      t !== null && (t.return = null), e.return = null;
    }
    function lb(e) {
      var t = e.alternate;
      t !== null && (e.alternate = null, lb(t));
      {
        if (e.child = null, e.deletions = null, e.sibling = null, e.tag === q) {
          var i = e.stateNode;
          i !== null && BE(i);
        }
        e.stateNode = null, e._debugOwner = null, e.return = null, e.dependencies = null, e.memoizedProps = null, e.memoizedState = null, e.pendingProps = null, e.stateNode = null, e.updateQueue = null;
      }
    }
    function Vx(e) {
      for (var t = e.return; t !== null; ) {
        if (ob(t))
          return t;
        t = t.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function ob(e) {
      return e.tag === q || e.tag === W || e.tag === Z;
    }
    function ub(e) {
      var t = e;
      e:
        for (; ; ) {
          for (; t.sibling === null; ) {
            if (t.return === null || ob(t.return))
              return null;
            t = t.return;
          }
          for (t.sibling.return = t.return, t = t.sibling; t.tag !== q && t.tag !== fe && t.tag !== Lt; ) {
            if (t.flags & sn || t.child === null || t.tag === Z)
              continue e;
            t.child.return = t, t = t.child;
          }
          if (!(t.flags & sn))
            return t.stateNode;
        }
    }
    function Ux(e) {
      var t = Vx(e);
      switch (t.tag) {
        case q: {
          var i = t.stateNode;
          t.flags & qt && (s2(i), t.flags &= ~qt);
          var a = ub(e);
          Bg(e, a, i);
          break;
        }
        case W:
        case Z: {
          var o = t.stateNode.containerInfo, s = ub(e);
          Pg(e, s, o);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function Pg(e, t, i) {
      var a = e.tag, o = a === q || a === fe;
      if (o) {
        var s = e.stateNode;
        t ? rE(i, s, t) : tE(i, s);
      } else if (a !== Z) {
        var f = e.child;
        if (f !== null) {
          Pg(f, t, i);
          for (var p = f.sibling; p !== null; )
            Pg(p, t, i), p = p.sibling;
        }
      }
    }
    function Bg(e, t, i) {
      var a = e.tag, o = a === q || a === fe;
      if (o) {
        var s = e.stateNode;
        t ? nE(i, s, t) : eE(i, s);
      } else if (a !== Z) {
        var f = e.child;
        if (f !== null) {
          Bg(f, t, i);
          for (var p = f.sibling; p !== null; )
            Bg(p, t, i), p = p.sibling;
        }
      }
    }
    var jr = null, al = false;
    function jx(e, t, i) {
      {
        var a = t;
        e:
          for (; a !== null; ) {
            switch (a.tag) {
              case q: {
                jr = a.stateNode, al = false;
                break e;
              }
              case W: {
                jr = a.stateNode.containerInfo, al = true;
                break e;
              }
              case Z: {
                jr = a.stateNode.containerInfo, al = true;
                break e;
              }
            }
            a = a.return;
          }
        if (jr === null)
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        sb(e, t, i), jr = null, al = false;
      }
      zx(i);
    }
    function Qu(e, t, i) {
      for (var a = i.child; a !== null; )
        sb(e, t, a), a = a.sibling;
    }
    function sb(e, t, i) {
      switch (Td(i), i.tag) {
        case q:
          Ur || Ff(i, t);
        case fe: {
          {
            var a = jr, o = al;
            jr = null, Qu(e, t, i), jr = a, al = o, jr !== null && (al ? aE(jr, i.stateNode) : iE(jr, i.stateNode));
          }
          return;
        }
        case Lt: {
          jr !== null && (al ? lE(jr, i.stateNode) : Jy(jr, i.stateNode));
          return;
        }
        case Z: {
          {
            var s = jr, f = al;
            jr = i.stateNode.containerInfo, al = true, Qu(e, t, i), jr = s, al = f;
          }
          return;
        }
        case J:
        case oe:
        case Te:
        case De: {
          if (!Ur) {
            var p = i.updateQueue;
            if (p !== null) {
              var v = p.lastEffect;
              if (v !== null) {
                var y = v.next, S = y;
                do {
                  var O = S, N = O.destroy, U = O.tag;
                  N !== void 0 && ((U & Yl) !== Yi ? Oh(i, t, N) : (U & sr) !== Yi && (Tc(i), i.mode & qe ? (ql(), Oh(i, t, N), Gl(i)) : Oh(i, t, N), pu())), S = S.next;
                } while (S !== y);
              }
            }
          }
          Qu(e, t, i);
          return;
        }
        case Q: {
          if (!Ur) {
            Ff(i, t);
            var F = i.stateNode;
            typeof F.componentWillUnmount == "function" && Hg(i, t, F);
          }
          Qu(e, t, i);
          return;
        }
        case en: {
          Qu(e, t, i);
          return;
        }
        case Be: {
          if (
            // TODO: Remove this dead flag
            i.mode & mt
          ) {
            var I = Ur;
            Ur = I || i.memoizedState !== null, Qu(e, t, i), Ur = I;
          } else
            Qu(e, t, i);
          break;
        }
        default: {
          Qu(e, t, i);
          return;
        }
      }
    }
    function Fx(e) {
      e.memoizedState;
    }
    function Hx(e, t) {
      var i = t.memoizedState;
      if (i === null) {
        var a = t.alternate;
        if (a !== null) {
          var o = a.memoizedState;
          if (o !== null) {
            var s = o.dehydrated;
            s !== null && xE(s);
          }
        }
      }
    }
    function cb(e) {
      var t = e.updateQueue;
      if (t !== null) {
        e.updateQueue = null;
        var i = e.stateNode;
        i === null && (i = e.stateNode = new Ex()), t.forEach(function(a) {
          var o = V3.bind(null, e, a);
          if (!i.has(a)) {
            if (i.add(a), lr)
              if (Uf !== null && jf !== null)
                Zp(jf, Uf);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            a.then(o, o);
          }
        });
      }
    }
    function Px(e, t, i) {
      Uf = i, jf = e, Gt(t), fb(t, e), Gt(t), Uf = null, jf = null;
    }
    function ll(e, t, i) {
      var a = t.deletions;
      if (a !== null)
        for (var o = 0; o < a.length; o++) {
          var s = a[o];
          try {
            jx(e, t, s);
          } catch (v) {
            pn(s, t, v);
          }
        }
      var f = ac();
      if (t.subtreeFlags & ni)
        for (var p = t.child; p !== null; )
          Gt(p), fb(p, e), p = p.sibling;
      Gt(f);
    }
    function fb(e, t, i) {
      var a = e.alternate, o = e.flags;
      switch (e.tag) {
        case J:
        case oe:
        case Te:
        case De: {
          if (ll(t, e), Xl(e), o & ut) {
            try {
              il(Yl | ur, e, e.return), Wu(Yl | ur, e);
            } catch (et) {
              pn(e, e.return, et);
            }
            if (e.mode & qe) {
              try {
                ql(), il(sr | ur, e, e.return);
              } catch (et) {
                pn(e, e.return, et);
              }
              Gl(e);
            } else
              try {
                il(sr | ur, e, e.return);
              } catch (et) {
                pn(e, e.return, et);
              }
          }
          return;
        }
        case Q: {
          ll(t, e), Xl(e), o & Jr && a !== null && Ff(a, a.return);
          return;
        }
        case q: {
          ll(t, e), Xl(e), o & Jr && a !== null && Ff(a, a.return);
          {
            if (e.flags & qt) {
              var s = e.stateNode;
              try {
                s2(s);
              } catch (et) {
                pn(e, e.return, et);
              }
            }
            if (o & ut) {
              var f = e.stateNode;
              if (f != null) {
                var p = e.memoizedProps, v = a !== null ? a.memoizedProps : p, y = e.type, S = e.updateQueue;
                if (e.updateQueue = null, S !== null)
                  try {
                    Z_(f, S, y, v, p, e);
                  } catch (et) {
                    pn(e, e.return, et);
                  }
              }
            }
          }
          return;
        }
        case fe: {
          if (ll(t, e), Xl(e), o & ut) {
            if (e.stateNode === null)
              throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            var O = e.stateNode, N = e.memoizedProps, U = a !== null ? a.memoizedProps : N;
            try {
              J_(O, U, N);
            } catch (et) {
              pn(e, e.return, et);
            }
          }
          return;
        }
        case W: {
          if (ll(t, e), Xl(e), o & ut && a !== null) {
            var F = a.memoizedState;
            if (F.isDehydrated)
              try {
                kE(t.containerInfo);
              } catch (et) {
                pn(e, e.return, et);
              }
          }
          return;
        }
        case Z: {
          ll(t, e), Xl(e);
          return;
        }
        case be: {
          ll(t, e), Xl(e);
          var I = e.child;
          if (I.flags & wl) {
            var Re = I.stateNode, Ye = I.memoizedState, Ue = Ye !== null;
            if (Re.isHidden = Ue, Ue) {
              var Nt = I.alternate !== null && I.alternate.memoizedState !== null;
              Nt || C3();
            }
          }
          if (o & ut) {
            try {
              Fx(e);
            } catch (et) {
              pn(e, e.return, et);
            }
            cb(e);
          }
          return;
        }
        case Be: {
          var _t = a !== null && a.memoizedState !== null;
          if (
            // TODO: Remove this dead flag
            e.mode & mt
          ) {
            var A = Ur;
            Ur = A || _t, ll(t, e), Ur = A;
          } else
            ll(t, e);
          if (Xl(e), o & wl) {
            var $ = e.stateNode, z = e.memoizedState, le = z !== null, we = e;
            if ($.isHidden = le, le && !_t && (we.mode & mt) !== Qe) {
              Ae = we;
              for (var _e = we.child; _e !== null; )
                Ae = _e, Ix(_e), _e = _e.sibling;
            }
            Ax(we, le);
          }
          return;
        }
        case Et: {
          ll(t, e), Xl(e), o & ut && cb(e);
          return;
        }
        case en:
          return;
        default: {
          ll(t, e), Xl(e);
          return;
        }
      }
    }
    function Xl(e) {
      var t = e.flags;
      if (t & sn) {
        try {
          Ux(e);
        } catch (i) {
          pn(e, e.return, i);
        }
        e.flags &= ~sn;
      }
      t & Ai && (e.flags &= ~Ai);
    }
    function Bx(e, t, i) {
      Uf = i, jf = t, Ae = e, db(e, t, i), Uf = null, jf = null;
    }
    function db(e, t, i) {
      for (var a = (e.mode & mt) !== Qe; Ae !== null; ) {
        var o = Ae, s = o.child;
        if (o.tag === Be && a) {
          var f = o.memoizedState !== null, p = f || Dh;
          if (p) {
            Ig(e, t, i);
            continue;
          } else {
            var v = o.alternate, y = v !== null && v.memoizedState !== null, S = y || Ur, O = Dh, N = Ur;
            Dh = p, Ur = S, Ur && !N && (Ae = o, $x(o));
            for (var U = s; U !== null; )
              Ae = U, db(
                U,
                // New root; bubble back up to here and stop.
                t,
                i
              ), U = U.sibling;
            Ae = o, Dh = O, Ur = N, Ig(e, t, i);
            continue;
          }
        }
        (o.subtreeFlags & br) !== $e && s !== null ? (s.return = o, Ae = s) : Ig(e, t, i);
      }
    }
    function Ig(e, t, i) {
      for (; Ae !== null; ) {
        var a = Ae;
        if ((a.flags & br) !== $e) {
          var o = a.alternate;
          Gt(a);
          try {
            Lx(t, o, a, i);
          } catch (f) {
            pn(a, a.return, f);
          }
          Rn();
        }
        if (a === e) {
          Ae = null;
          return;
        }
        var s = a.sibling;
        if (s !== null) {
          s.return = a.return, Ae = s;
          return;
        }
        Ae = a.return;
      }
    }
    function Ix(e) {
      for (; Ae !== null; ) {
        var t = Ae, i = t.child;
        switch (t.tag) {
          case J:
          case oe:
          case Te:
          case De: {
            if (t.mode & qe)
              try {
                ql(), il(sr, t, t.return);
              } finally {
                Gl(t);
              }
            else
              il(sr, t, t.return);
            break;
          }
          case Q: {
            Ff(t, t.return);
            var a = t.stateNode;
            typeof a.componentWillUnmount == "function" && Hg(t, t.return, a);
            break;
          }
          case q: {
            Ff(t, t.return);
            break;
          }
          case Be: {
            var o = t.memoizedState !== null;
            if (o) {
              pb(e);
              continue;
            }
            break;
          }
        }
        i !== null ? (i.return = t, Ae = i) : pb(e);
      }
    }
    function pb(e) {
      for (; Ae !== null; ) {
        var t = Ae;
        if (t === e) {
          Ae = null;
          return;
        }
        var i = t.sibling;
        if (i !== null) {
          i.return = t.return, Ae = i;
          return;
        }
        Ae = t.return;
      }
    }
    function $x(e) {
      for (; Ae !== null; ) {
        var t = Ae, i = t.child;
        if (t.tag === Be) {
          var a = t.memoizedState !== null;
          if (a) {
            vb(e);
            continue;
          }
        }
        i !== null ? (i.return = t, Ae = i) : vb(e);
      }
    }
    function vb(e) {
      for (; Ae !== null; ) {
        var t = Ae;
        Gt(t);
        try {
          Mx(t);
        } catch (a) {
          pn(t, t.return, a);
        }
        if (Rn(), t === e) {
          Ae = null;
          return;
        }
        var i = t.sibling;
        if (i !== null) {
          i.return = t.return, Ae = i;
          return;
        }
        Ae = t.return;
      }
    }
    function Yx(e, t, i, a) {
      Ae = t, Wx(t, e, i, a);
    }
    function Wx(e, t, i, a) {
      for (; Ae !== null; ) {
        var o = Ae, s = o.child;
        (o.subtreeFlags & zi) !== $e && s !== null ? (s.return = o, Ae = s) : Qx(e, t, i, a);
      }
    }
    function Qx(e, t, i, a) {
      for (; Ae !== null; ) {
        var o = Ae;
        if ((o.flags & mn) !== $e) {
          Gt(o);
          try {
            Gx(t, o, i, a);
          } catch (f) {
            pn(o, o.return, f);
          }
          Rn();
        }
        if (o === e) {
          Ae = null;
          return;
        }
        var s = o.sibling;
        if (s !== null) {
          s.return = o.return, Ae = s;
          return;
        }
        Ae = o.return;
      }
    }
    function Gx(e, t, i, a) {
      switch (t.tag) {
        case J:
        case oe:
        case De: {
          if (t.mode & qe) {
            bg();
            try {
              Wu(zr | ur, t);
            } finally {
              Sg(t);
            }
          } else
            Wu(zr | ur, t);
          break;
        }
      }
    }
    function qx(e) {
      Ae = e, Xx();
    }
    function Xx() {
      for (; Ae !== null; ) {
        var e = Ae, t = e.child;
        if ((Ae.flags & Bt) !== $e) {
          var i = e.deletions;
          if (i !== null) {
            for (var a = 0; a < i.length; a++) {
              var o = i[a];
              Ae = o, Jx(o, e);
            }
            {
              var s = e.alternate;
              if (s !== null) {
                var f = s.child;
                if (f !== null) {
                  s.child = null;
                  do {
                    var p = f.sibling;
                    f.sibling = null, f = p;
                  } while (f !== null);
                }
              }
            }
            Ae = e;
          }
        }
        (e.subtreeFlags & zi) !== $e && t !== null ? (t.return = e, Ae = t) : Kx();
      }
    }
    function Kx() {
      for (; Ae !== null; ) {
        var e = Ae;
        (e.flags & mn) !== $e && (Gt(e), Zx(e), Rn());
        var t = e.sibling;
        if (t !== null) {
          t.return = e.return, Ae = t;
          return;
        }
        Ae = e.return;
      }
    }
    function Zx(e) {
      switch (e.tag) {
        case J:
        case oe:
        case De: {
          e.mode & qe ? (bg(), il(zr | ur, e, e.return), Sg(e)) : il(zr | ur, e, e.return);
          break;
        }
      }
    }
    function Jx(e, t) {
      for (; Ae !== null; ) {
        var i = Ae;
        Gt(i), t3(i, t), Rn();
        var a = i.child;
        a !== null ? (a.return = i, Ae = a) : e3(e);
      }
    }
    function e3(e) {
      for (; Ae !== null; ) {
        var t = Ae, i = t.sibling, a = t.return;
        if (lb(t), t === e) {
          Ae = null;
          return;
        }
        if (i !== null) {
          i.return = a, Ae = i;
          return;
        }
        Ae = a;
      }
    }
    function t3(e, t) {
      switch (e.tag) {
        case J:
        case oe:
        case De: {
          e.mode & qe ? (bg(), il(zr, e, t), Sg(e)) : il(zr, e, t);
          break;
        }
      }
    }
    function n3(e) {
      switch (e.tag) {
        case J:
        case oe:
        case De: {
          try {
            Wu(sr | ur, e);
          } catch (i) {
            pn(e, e.return, i);
          }
          break;
        }
        case Q: {
          var t = e.stateNode;
          try {
            t.componentDidMount();
          } catch (i) {
            pn(e, e.return, i);
          }
          break;
        }
      }
    }
    function r3(e) {
      switch (e.tag) {
        case J:
        case oe:
        case De: {
          try {
            Wu(zr | ur, e);
          } catch (t) {
            pn(e, e.return, t);
          }
          break;
        }
      }
    }
    function i3(e) {
      switch (e.tag) {
        case J:
        case oe:
        case De: {
          try {
            il(sr | ur, e, e.return);
          } catch (i) {
            pn(e, e.return, i);
          }
          break;
        }
        case Q: {
          var t = e.stateNode;
          typeof t.componentWillUnmount == "function" && Hg(e, e.return, t);
          break;
        }
      }
    }
    function a3(e) {
      switch (e.tag) {
        case J:
        case oe:
        case De:
          try {
            il(zr | ur, e, e.return);
          } catch (t) {
            pn(e, e.return, t);
          }
      }
    }
    if (typeof Symbol == "function" && Symbol.for) {
      var Pp = Symbol.for;
      Pp("selector.component"), Pp("selector.has_pseudo_class"), Pp("selector.role"), Pp("selector.test_id"), Pp("selector.text");
    }
    var l3 = [];
    function o3() {
      l3.forEach(function(e) {
        return e();
      });
    }
    var u3 = b.ReactCurrentActQueue;
    function s3(e) {
      {
        var t = (
          // $FlowExpectedError â€“ Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        ), i = typeof jest < "u";
        return i && t !== false;
      }
    }
    function mb() {
      {
        var e = (
          // $FlowExpectedError â€“ Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        return !e && u3.current !== null && g("The current testing environment is not configured to support act(...)"), e;
      }
    }
    var c3 = Math.ceil, $g = b.ReactCurrentDispatcher, Yg = b.ReactCurrentOwner, Fr = b.ReactCurrentBatchConfig, ol = b.ReactCurrentActQueue, dr = (
      /*             */
      0
    ), hb = (
      /*               */
      1
    ), Hr = (
      /*                */
      2
    ), Da = (
      /*                */
      4
    ), Po = 0, Bp = 1, Zs = 2, Lh = 3, Ip = 4, yb = 5, Wg = 6, Tt = dr, Ei = null, An = null, pr = Y, Kl = Y, Qg = Uu(Y), vr = Po, $p = null, Mh = Y, Yp = Y, Ah = Y, Wp = null, Wi = null, Gg = 0, gb = 500, Sb = 1 / 0, f3 = 500, Bo = null;
    function Qp() {
      Sb = _n() + f3;
    }
    function bb() {
      return Sb;
    }
    var zh = false, qg = null, Hf = null, Js = false, Gu = null, Gp = Y, Xg = [], Kg = null, d3 = 50, qp = 0, Zg = null, Jg = false, Vh = false, p3 = 50, Pf = 0, Uh = null, Xp = on, jh = Y, Cb = false;
    function Fh() {
      return Ei;
    }
    function ki() {
      return (Tt & (Hr | Da)) !== dr ? _n() : (Xp !== on || (Xp = _n()), Xp);
    }
    function qu(e) {
      var t = e.mode;
      if ((t & mt) === Qe)
        return Ke;
      if ((Tt & Hr) !== dr && pr !== Y)
        return Bn(pr);
      var i = sk() !== uk;
      if (i) {
        if (Fr.transition !== null) {
          var a = Fr.transition;
          a._updatedFibers || (a._updatedFibers = /* @__PURE__ */ new Set()), a._updatedFibers.add(e);
        }
        return jh === wt && (jh = Vd()), jh;
      }
      var o = Fi();
      if (o !== wt)
        return o;
      var s = Q_();
      return s;
    }
    function v3(e) {
      var t = e.mode;
      return (t & mt) === Qe ? Ke : by();
    }
    function mr(e, t, i, a) {
      j3(), Cb && g("useInsertionEffect must not schedule updates."), Jg && (Vh = true), ko(e, i, a), (Tt & Hr) !== Y && e === Ei ? P3(t) : (lr && Pd(e, t, i), B3(t), e === Ei && ((Tt & Hr) === dr && (Yp = st(Yp, i)), vr === Ip && Xu(e, pr)), Qi(e, a), i === Ke && Tt === dr && (t.mode & mt) === Qe && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
      !ol.isBatchingLegacy && (Qp(), b2()));
    }
    function m3(e, t, i) {
      var a = e.current;
      a.lanes = t, ko(e, t, i), Qi(e, i);
    }
    function h3(e) {
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
        (Tt & Hr) !== dr
      );
    }
    function Qi(e, t) {
      var i = e.callbackNode;
      yy(e, t);
      var a = ks(e, e === Ei ? pr : Y);
      if (a === Y) {
        i !== null && Ub(i), e.callbackNode = null, e.callbackPriority = wt;
        return;
      }
      var o = Vn(a), s = e.callbackPriority;
      if (s === o && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(ol.current !== null && i !== l0)) {
        i == null && s !== Ke && g("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      i != null && Ub(i);
      var f;
      if (o === Ke)
        e.tag === ju ? (ol.isBatchingLegacy !== null && (ol.didScheduleLegacyUpdate = true), YE(kb.bind(null, e))) : S2(kb.bind(null, e)), ol.current !== null ? ol.current.push(Fu) : q_(function() {
          (Tt & (Hr | Da)) === dr && Fu();
        }), f = null;
      else {
        var p;
        switch (Ns(a)) {
          case Cr:
            p = kc;
            break;
          case or:
            p = Si;
            break;
          case Wa:
            p = ba;
            break;
          case ws:
            p = Nl;
            break;
          default:
            p = ba;
            break;
        }
        f = o0(p, _b.bind(null, e));
      }
      e.callbackPriority = o, e.callbackNode = f;
    }
    function _b(e, t) {
      if (jk(), Xp = on, jh = Y, (Tt & (Hr | Da)) !== dr)
        throw new Error("Should not already be working.");
      var i = e.callbackNode, a = $o();
      if (a && e.callbackNode !== i)
        return null;
      var o = ks(e, e === Ei ? pr : Y);
      if (o === Y)
        return null;
      var s = !Rs(e, o) && !Kv(e, o) && !t, f = s ? R3(e, o) : Ph(e, o);
      if (f !== Po) {
        if (f === Zs) {
          var p = Ad(e);
          p !== Y && (o = p, f = e0(e, p));
        }
        if (f === Bp) {
          var v = $p;
          throw ec(e, Y), Xu(e, o), Qi(e, _n()), v;
        }
        if (f === Wg)
          Xu(e, o);
        else {
          var y = !Rs(e, o), S = e.current.alternate;
          if (y && !g3(S)) {
            if (f = Ph(e, o), f === Zs) {
              var O = Ad(e);
              O !== Y && (o = O, f = e0(e, O));
            }
            if (f === Bp) {
              var N = $p;
              throw ec(e, Y), Xu(e, o), Qi(e, _n()), N;
            }
          }
          e.finishedWork = S, e.finishedLanes = o, y3(e, f, o);
        }
      }
      return Qi(e, _n()), e.callbackNode === i ? _b.bind(null, e) : null;
    }
    function e0(e, t) {
      var i = Wp;
      if ($n(e)) {
        var a = ec(e, t);
        a.flags |= wn, jE(e.containerInfo);
      }
      var o = Ph(e, t);
      if (o !== Zs) {
        var s = Wi;
        Wi = i, s !== null && Eb(s);
      }
      return o;
    }
    function Eb(e) {
      Wi === null ? Wi = e : Wi.push.apply(Wi, e);
    }
    function y3(e, t, i) {
      switch (t) {
        case Po:
        case Bp:
          throw new Error("Root did not complete. This is a bug in React.");
        case Zs: {
          tc(e, Wi, Bo);
          break;
        }
        case Lh: {
          if (Xu(e, i), Gc(i) && // do not delay if we're inside an act() scope
          !jb()) {
            var a = Gg + gb - _n();
            if (a > 10) {
              var o = ks(e, Y);
              if (o !== Y)
                break;
              var s = e.suspendedLanes;
              if (!Eo(s, i)) {
                ki(), Fd(e, s);
                break;
              }
              e.timeoutHandle = Ky(tc.bind(null, e, Wi, Bo), a);
              break;
            }
          }
          tc(e, Wi, Bo);
          break;
        }
        case Ip: {
          if (Xu(e, i), Xv(i))
            break;
          if (!jb()) {
            var f = qv(e, i), p = f, v = _n() - p, y = U3(v) - v;
            if (y > 10) {
              e.timeoutHandle = Ky(tc.bind(null, e, Wi, Bo), y);
              break;
            }
          }
          tc(e, Wi, Bo);
          break;
        }
        case yb: {
          tc(e, Wi, Bo);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function g3(e) {
      for (var t = e; ; ) {
        if (t.flags & ys) {
          var i = t.updateQueue;
          if (i !== null) {
            var a = i.stores;
            if (a !== null)
              for (var o = 0; o < a.length; o++) {
                var s = a[o], f = s.getSnapshot, p = s.value;
                try {
                  if (!Me(f(), p))
                    return false;
                } catch {
                  return false;
                }
              }
          }
        }
        var v = t.child;
        if (t.subtreeFlags & ys && v !== null) {
          v.return = t, t = v;
          continue;
        }
        if (t === e)
          return true;
        for (; t.sibling === null; ) {
          if (t.return === null || t.return === e)
            return true;
          t = t.return;
        }
        t.sibling.return = t.return, t = t.sibling;
      }
      return true;
    }
    function Xu(e, t) {
      t = bu(t, Ah), t = bu(t, Yp), jd(e, t);
    }
    function kb(e) {
      if (Fk(), (Tt & (Hr | Da)) !== dr)
        throw new Error("Should not already be working.");
      $o();
      var t = ks(e, Y);
      if (!li(t, Ke))
        return Qi(e, _n()), null;
      var i = Ph(e, t);
      if (e.tag !== ju && i === Zs) {
        var a = Ad(e);
        a !== Y && (t = a, i = e0(e, a));
      }
      if (i === Bp) {
        var o = $p;
        throw ec(e, Y), Xu(e, t), Qi(e, _n()), o;
      }
      if (i === Wg)
        throw new Error("Root did not complete. This is a bug in React.");
      var s = e.current.alternate;
      return e.finishedWork = s, e.finishedLanes = t, tc(e, Wi, Bo), Qi(e, _n()), null;
    }
    function S3(e, t) {
      t !== Y && (Cu(e, st(t, Ke)), Qi(e, _n()), (Tt & (Hr | Da)) === dr && (Qp(), Fu()));
    }
    function t0(e, t) {
      var i = Tt;
      Tt |= hb;
      try {
        return e(t);
      } finally {
        Tt = i, Tt === dr && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ol.isBatchingLegacy && (Qp(), b2());
      }
    }
    function b3(e, t, i, a, o) {
      var s = Fi(), f = Fr.transition;
      try {
        return Fr.transition = null, In(Cr), e(t, i, a, o);
      } finally {
        In(s), Fr.transition = f, Tt === dr && Qp();
      }
    }
    function Io(e) {
      Gu !== null && Gu.tag === ju && (Tt & (Hr | Da)) === dr && $o();
      var t = Tt;
      Tt |= hb;
      var i = Fr.transition, a = Fi();
      try {
        return Fr.transition = null, In(Cr), e ? e() : void 0;
      } finally {
        In(a), Fr.transition = i, Tt = t, (Tt & (Hr | Da)) === dr && Fu();
      }
    }
    function xb() {
      return (Tt & (Hr | Da)) !== dr;
    }
    function Hh(e, t) {
      ui(Qg, Kl, e), Kl = st(Kl, t);
    }
    function n0(e) {
      Kl = Qg.current, oi(Qg, e);
    }
    function ec(e, t) {
      e.finishedWork = null, e.finishedLanes = Y;
      var i = e.timeoutHandle;
      if (i !== Zy && (e.timeoutHandle = Zy, G_(i)), An !== null)
        for (var a = An.return; a !== null; ) {
          var o = a.alternate;
          eb(o, a), a = a.return;
        }
      Ei = e;
      var s = nc(e.current, null);
      return An = s, pr = Kl = t, vr = Po, $p = null, Mh = Y, Yp = Y, Ah = Y, Wp = null, Wi = null, pk(), Ja.discardPendingWarnings(), s;
    }
    function Rb(e, t) {
      do {
        var i = An;
        try {
          if (Gm(), nS(), Rn(), Yg.current = null, i === null || i.return === null) {
            vr = Bp, $p = t, An = null;
            return;
          }
          if (ct && i.mode & qe && Rh(i, true), Rt)
            if (vo(), t !== null && typeof t == "object" && typeof t.then == "function") {
              var a = t;
              Wv(i, a, pr);
            } else
              Nc(i, t, pr);
          $k(e, i.return, i, t, pr), Db(i);
        } catch (o) {
          t = o, An === i && i !== null ? (i = i.return, An = i) : i = An;
          continue;
        }
        return;
      } while (true);
    }
    function wb() {
      var e = $g.current;
      return $g.current = Ch, e === null ? Ch : e;
    }
    function Tb(e) {
      $g.current = e;
    }
    function C3() {
      Gg = _n();
    }
    function Kp(e) {
      Mh = st(e, Mh);
    }
    function _3() {
      vr === Po && (vr = Lh);
    }
    function r0() {
      (vr === Po || vr === Lh || vr === Zs) && (vr = Ip), Ei !== null && (xs(Mh) || xs(Yp)) && Xu(Ei, pr);
    }
    function E3(e) {
      vr !== Ip && (vr = Zs), Wp === null ? Wp = [e] : Wp.push(e);
    }
    function k3() {
      return vr === Po;
    }
    function Ph(e, t) {
      var i = Tt;
      Tt |= Hr;
      var a = wb();
      if (Ei !== e || pr !== t) {
        if (lr) {
          var o = e.memoizedUpdaters;
          o.size > 0 && (Zp(e, pr), o.clear()), Kc(e, t);
        }
        Bo = Bd(), ec(e, t);
      }
      oa(t);
      do
        try {
          x3();
          break;
        } catch (s) {
          Rb(e, s);
        }
      while (true);
      if (Gm(), Tt = i, Tb(a), An !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return mu(), Ei = null, pr = Y, vr;
    }
    function x3() {
      for (; An !== null; )
        Nb(An);
    }
    function R3(e, t) {
      var i = Tt;
      Tt |= Hr;
      var a = wb();
      if (Ei !== e || pr !== t) {
        if (lr) {
          var o = e.memoizedUpdaters;
          o.size > 0 && (Zp(e, pr), o.clear()), Kc(e, t);
        }
        Bo = Bd(), Qp(), ec(e, t);
      }
      oa(t);
      do
        try {
          w3();
          break;
        } catch (s) {
          Rb(e, s);
        }
      while (true);
      return Gm(), Tb(a), Tt = i, An !== null ? (bs(), Po) : (mu(), Ei = null, pr = Y, vr);
    }
    function w3() {
      for (; An !== null && !Ec(); )
        Nb(An);
    }
    function Nb(e) {
      var t = e.alternate;
      Gt(e);
      var i;
      (e.mode & qe) !== Qe ? (gg(e), i = i0(t, e, Kl), Rh(e, true)) : i = i0(t, e, Kl), Rn(), e.memoizedProps = e.pendingProps, i === null ? Db(e) : An = i, Yg.current = null;
    }
    function Db(e) {
      var t = e;
      do {
        var i = t.alternate, a = t.return;
        if ((t.flags & hi) === $e) {
          Gt(t);
          var o = void 0;
          if ((t.mode & qe) === Qe ? o = JS(i, t, Kl) : (gg(t), o = JS(i, t, Kl), Rh(t, false)), Rn(), o !== null) {
            An = o;
            return;
          }
        } else {
          var s = _x(i, t);
          if (s !== null) {
            s.flags &= Uv, An = s;
            return;
          }
          if ((t.mode & qe) !== Qe) {
            Rh(t, false);
            for (var f = t.actualDuration, p = t.child; p !== null; )
              f += p.actualDuration, p = p.sibling;
            t.actualDuration = f;
          }
          if (a !== null)
            a.flags |= hi, a.subtreeFlags = $e, a.deletions = null;
          else {
            vr = Wg, An = null;
            return;
          }
        }
        var v = t.sibling;
        if (v !== null) {
          An = v;
          return;
        }
        t = a, An = t;
      } while (t !== null);
      vr === Po && (vr = yb);
    }
    function tc(e, t, i) {
      var a = Fi(), o = Fr.transition;
      try {
        Fr.transition = null, In(Cr), T3(e, t, i, a);
      } finally {
        Fr.transition = o, In(a);
      }
      return null;
    }
    function T3(e, t, i, a) {
      do
        $o();
      while (Gu !== null);
      if (F3(), (Tt & (Hr | Da)) !== dr)
        throw new Error("Should not already be working.");
      var o = e.finishedWork, s = e.finishedLanes;
      if (Rc(s), o === null)
        return Nd(), null;
      if (s === Y && g("root.finishedLanes should not be empty during a commit. This is a bug in React."), e.finishedWork = null, e.finishedLanes = Y, o === e.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      e.callbackNode = null, e.callbackPriority = wt;
      var f = st(o.lanes, o.childLanes);
      Hd(e, f), e === Ei && (Ei = null, An = null, pr = Y), ((o.subtreeFlags & zi) !== $e || (o.flags & zi) !== $e) && (Js || (Js = true, Kg = i, o0(ba, function() {
        return $o(), null;
      })));
      var p = (o.subtreeFlags & (du | ni | br | zi)) !== $e, v = (o.flags & (du | ni | br | zi)) !== $e;
      if (p || v) {
        var y = Fr.transition;
        Fr.transition = null;
        var S = Fi();
        In(Cr);
        var O = Tt;
        Tt |= Da, Yg.current = null, wx(e, o), wS(), Px(e, o, s), P_(e.containerInfo), e.current = o, Qv(s), Bx(o, e, s), vu(), Hv(), Tt = O, In(S), Fr.transition = y;
      } else
        e.current = o, wS();
      var N = Js;
      if (Js ? (Js = false, Gu = e, Gp = s) : (Pf = 0, Uh = null), f = e.pendingLanes, f === Y && (Hf = null), N || Ab(e.current, false), Ia(o.stateNode, a), lr && e.memoizedUpdaters.clear(), o3(), Qi(e, _n()), t !== null)
        for (var U = e.onRecoverableError, F = 0; F < t.length; F++) {
          var I = t[F], Re = I.stack, Ye = I.digest;
          U(I.value, {
            componentStack: Re,
            digest: Ye
          });
        }
      if (zh) {
        zh = false;
        var Ue = qg;
        throw qg = null, Ue;
      }
      return li(Gp, Ke) && e.tag !== ju && $o(), f = e.pendingLanes, li(f, Ke) ? (Uk(), e === Zg ? qp++ : (qp = 0, Zg = e)) : qp = 0, Fu(), Nd(), null;
    }
    function $o() {
      if (Gu !== null) {
        var e = Ns(Gp), t = _y(Wa, e), i = Fr.transition, a = Fi();
        try {
          return Fr.transition = null, In(t), D3();
        } finally {
          In(a), Fr.transition = i;
        }
      }
      return false;
    }
    function N3(e) {
      Xg.push(e), Js || (Js = true, o0(ba, function() {
        return $o(), null;
      }));
    }
    function D3() {
      if (Gu === null)
        return false;
      var e = Kg;
      Kg = null;
      var t = Gu, i = Gp;
      if (Gu = null, Gp = Y, (Tt & (Hr | Da)) !== dr)
        throw new Error("Cannot flush passive effects while already rendering.");
      Jg = true, Vh = false, Gv(i);
      var a = Tt;
      Tt |= Da, qx(t.current), Yx(t, t.current, i, e);
      {
        var o = Xg;
        Xg = [];
        for (var s = 0; s < o.length; s++) {
          var f = o[s];
          Ox(t, f);
        }
      }
      Ss(), Ab(t.current, true), Tt = a, Fu(), Vh ? t === Uh ? Pf++ : (Pf = 0, Uh = t) : Pf = 0, Jg = false, Vh = false, Ol(t);
      {
        var p = t.current.stateNode;
        p.effectDuration = 0, p.passiveEffectDuration = 0;
      }
      return true;
    }
    function Ob(e) {
      return Hf !== null && Hf.has(e);
    }
    function O3(e) {
      Hf === null ? Hf = /* @__PURE__ */ new Set([e]) : Hf.add(e);
    }
    function L3(e) {
      zh || (zh = true, qg = e);
    }
    var M3 = L3;
    function Lb(e, t, i) {
      var a = Xs(i, t), o = NS(e, a, Ke), s = Pu(e, o, Ke), f = ki();
      s !== null && (ko(s, Ke, f), Qi(s, f));
    }
    function pn(e, t, i) {
      if (kx(i), Jp(false), e.tag === W) {
        Lb(e, e, i);
        return;
      }
      var a = null;
      for (a = t; a !== null; ) {
        if (a.tag === W) {
          Lb(a, e, i);
          return;
        } else if (a.tag === Q) {
          var o = a.type, s = a.stateNode;
          if (typeof o.getDerivedStateFromError == "function" || typeof s.componentDidCatch == "function" && !Ob(s)) {
            var f = Xs(i, e), p = kg(a, f, Ke), v = Pu(a, p, Ke), y = ki();
            v !== null && (ko(v, Ke, y), Qi(v, y));
            return;
          }
        }
        a = a.return;
      }
      g(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, i);
    }
    function A3(e, t, i) {
      var a = e.pingCache;
      a !== null && a.delete(t);
      var o = ki();
      Fd(e, i), I3(e), Ei === e && Eo(pr, i) && (vr === Ip || vr === Lh && Gc(pr) && _n() - Gg < gb ? ec(e, Y) : Ah = st(Ah, i)), Qi(e, o);
    }
    function Mb(e, t) {
      t === wt && (t = v3(e));
      var i = ki(), a = $i(e, t);
      a !== null && (ko(a, t, i), Qi(a, i));
    }
    function z3(e) {
      var t = e.memoizedState, i = wt;
      t !== null && (i = t.retryLane), Mb(e, i);
    }
    function V3(e, t) {
      var i = wt, a;
      switch (e.tag) {
        case be:
          a = e.stateNode;
          var o = e.memoizedState;
          o !== null && (i = o.retryLane);
          break;
        case Et:
          a = e.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      a !== null && a.delete(t), Mb(e, i);
    }
    function U3(e) {
      return e < 120 ? 120 : e < 480 ? 480 : e < 1080 ? 1080 : e < 1920 ? 1920 : e < 3e3 ? 3e3 : e < 4320 ? 4320 : c3(e / 1960) * 1960;
    }
    function j3() {
      if (qp > d3)
        throw qp = 0, Zg = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      Pf > p3 && (Pf = 0, Uh = null, g("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
    }
    function F3() {
      Ja.flushLegacyContextWarning(), Ja.flushPendingUnsafeLifecycleWarnings();
    }
    function Ab(e, t) {
      Gt(e), Bh(e, ti, i3), t && Bh(e, po, a3), Bh(e, ti, n3), t && Bh(e, po, r3), Rn();
    }
    function Bh(e, t, i) {
      for (var a = e, o = null; a !== null; ) {
        var s = a.subtreeFlags & t;
        a !== o && a.child !== null && s !== $e ? a = a.child : ((a.flags & t) !== $e && i(a), a.sibling !== null ? a = a.sibling : a = o = a.return);
      }
    }
    var Ih = null;
    function zb(e) {
      {
        if ((Tt & Hr) !== dr || !(e.mode & mt))
          return;
        var t = e.tag;
        if (t !== ve && t !== W && t !== Q && t !== J && t !== oe && t !== Te && t !== De)
          return;
        var i = at(e) || "ReactComponent";
        if (Ih !== null) {
          if (Ih.has(i))
            return;
          Ih.add(i);
        } else
          Ih = /* @__PURE__ */ new Set([i]);
        var a = Cn;
        try {
          Gt(e), g("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          a ? Gt(e) : Rn();
        }
      }
    }
    var i0;
    {
      var H3 = null;
      i0 = function(e, t, i) {
        var a = Ib(H3, t);
        try {
          return GS(e, t, i);
        } catch (s) {
          if (JE() || s !== null && typeof s == "object" && typeof s.then == "function")
            throw s;
          if (Gm(), nS(), eb(e, t), Ib(t, a), t.mode & qe && gg(t), fo(null, GS, null, e, t, i), my()) {
            var o = gd();
            typeof o == "object" && o !== null && o._suppressLogging && typeof s == "object" && s !== null && !s._suppressLogging && (s._suppressLogging = true);
          }
          throw s;
        }
      };
    }
    var Vb = false, a0;
    a0 = /* @__PURE__ */ new Set();
    function P3(e) {
      if (Xr && !Ak())
        switch (e.tag) {
          case J:
          case oe:
          case De: {
            var t = An && at(An) || "Unknown", i = t;
            if (!a0.has(i)) {
              a0.add(i);
              var a = at(e) || "Unknown";
              g("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", a, t, t);
            }
            break;
          }
          case Q: {
            Vb || (g("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), Vb = true);
            break;
          }
        }
    }
    function Zp(e, t) {
      if (lr) {
        var i = e.memoizedUpdaters;
        i.forEach(function(a) {
          Pd(e, a, t);
        });
      }
    }
    var l0 = {};
    function o0(e, t) {
      {
        var i = ol.current;
        return i !== null ? (i.push(t), l0) : _c(e, t);
      }
    }
    function Ub(e) {
      if (e !== l0)
        return Fv(e);
    }
    function jb() {
      return ol.current !== null;
    }
    function B3(e) {
      {
        if (e.mode & mt) {
          if (!mb())
            return;
        } else if (!s3() || Tt !== dr || e.tag !== J && e.tag !== oe && e.tag !== De)
          return;
        if (ol.current === null) {
          var t = Cn;
          try {
            Gt(e), g(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, at(e));
          } finally {
            t ? Gt(e) : Rn();
          }
        }
      }
    }
    function I3(e) {
      e.tag !== ju && mb() && ol.current === null && g(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    function Jp(e) {
      Cb = e;
    }
    var Oa = null, Bf = null, $3 = function(e) {
      Oa = e;
    };
    function If(e) {
      {
        if (Oa === null)
          return e;
        var t = Oa(e);
        return t === void 0 ? e : t.current;
      }
    }
    function u0(e) {
      return If(e);
    }
    function s0(e) {
      {
        if (Oa === null)
          return e;
        var t = Oa(e);
        if (t === void 0) {
          if (e != null && typeof e.render == "function") {
            var i = If(e.render);
            if (e.render !== i) {
              var a = {
                $$typeof: He,
                render: i
              };
              return e.displayName !== void 0 && (a.displayName = e.displayName), a;
            }
          }
          return e;
        }
        return t.current;
      }
    }
    function Fb(e, t) {
      {
        if (Oa === null)
          return false;
        var i = e.elementType, a = t.type, o = false, s = typeof a == "object" && a !== null ? a.$$typeof : null;
        switch (e.tag) {
          case Q: {
            typeof a == "function" && (o = true);
            break;
          }
          case J: {
            (typeof a == "function" || s === gt) && (o = true);
            break;
          }
          case oe: {
            (s === He || s === gt) && (o = true);
            break;
          }
          case Te:
          case De: {
            (s === Qt || s === gt) && (o = true);
            break;
          }
          default:
            return false;
        }
        if (o) {
          var f = Oa(i);
          if (f !== void 0 && f === Oa(a))
            return true;
        }
        return false;
      }
    }
    function Hb(e) {
      {
        if (Oa === null || typeof WeakSet != "function")
          return;
        Bf === null && (Bf = /* @__PURE__ */ new WeakSet()), Bf.add(e);
      }
    }
    var Y3 = function(e, t) {
      {
        if (Oa === null)
          return;
        var i = t.staleFamilies, a = t.updatedFamilies;
        $o(), Io(function() {
          c0(e.current, a, i);
        });
      }
    }, W3 = function(e, t) {
      {
        if (e.context !== sa)
          return;
        $o(), Io(function() {
          ev(t, e, null, null);
        });
      }
    };
    function c0(e, t, i) {
      {
        var a = e.alternate, o = e.child, s = e.sibling, f = e.tag, p = e.type, v = null;
        switch (f) {
          case J:
          case De:
          case Q:
            v = p;
            break;
          case oe:
            v = p.render;
            break;
        }
        if (Oa === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var y = false, S = false;
        if (v !== null) {
          var O = Oa(v);
          O !== void 0 && (i.has(O) ? S = true : t.has(O) && (f === Q ? S = true : y = true));
        }
        if (Bf !== null && (Bf.has(e) || a !== null && Bf.has(a)) && (S = true), S && (e._debugNeedsRemount = true), S || y) {
          var N = $i(e, Ke);
          N !== null && mr(N, e, Ke, on);
        }
        o !== null && !S && c0(o, t, i), s !== null && c0(s, t, i);
      }
    }
    var Q3 = function(e, t) {
      {
        var i = /* @__PURE__ */ new Set(), a = new Set(t.map(function(o) {
          return o.current;
        }));
        return f0(e.current, a, i), i;
      }
    };
    function f0(e, t, i) {
      {
        var a = e.child, o = e.sibling, s = e.tag, f = e.type, p = null;
        switch (s) {
          case J:
          case De:
          case Q:
            p = f;
            break;
          case oe:
            p = f.render;
            break;
        }
        var v = false;
        p !== null && t.has(p) && (v = true), v ? G3(e, i) : a !== null && f0(a, t, i), o !== null && f0(o, t, i);
      }
    }
    function G3(e, t) {
      {
        var i = q3(e, t);
        if (i)
          return;
        for (var a = e; ; ) {
          switch (a.tag) {
            case q:
              t.add(a.stateNode);
              return;
            case Z:
              t.add(a.stateNode.containerInfo);
              return;
            case W:
              t.add(a.stateNode.containerInfo);
              return;
          }
          if (a.return === null)
            throw new Error("Expected to reach root first.");
          a = a.return;
        }
      }
    }
    function q3(e, t) {
      for (var i = e, a = false; ; ) {
        if (i.tag === q)
          a = true, t.add(i.stateNode);
        else if (i.child !== null) {
          i.child.return = i, i = i.child;
          continue;
        }
        if (i === e)
          return a;
        for (; i.sibling === null; ) {
          if (i.return === null || i.return === e)
            return a;
          i = i.return;
        }
        i.sibling.return = i.return, i = i.sibling;
      }
      return false;
    }
    var d0;
    {
      d0 = false;
      try {
        var Pb = Object.preventExtensions({});
      } catch {
        d0 = true;
      }
    }
    function X3(e, t, i, a) {
      this.tag = e, this.key = i, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = t, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = a, this.flags = $e, this.subtreeFlags = $e, this.deletions = null, this.lanes = Y, this.childLanes = Y, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = false, this._debugHookTypes = null, !d0 && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
    }
    var ca = function(e, t, i, a) {
      return new X3(e, t, i, a);
    };
    function p0(e) {
      var t = e.prototype;
      return !!(t && t.isReactComponent);
    }
    function K3(e) {
      return typeof e == "function" && !p0(e) && e.defaultProps === void 0;
    }
    function Z3(e) {
      if (typeof e == "function")
        return p0(e) ? Q : J;
      if (e != null) {
        var t = e.$$typeof;
        if (t === He)
          return oe;
        if (t === Qt)
          return Te;
      }
      return ve;
    }
    function nc(e, t) {
      var i = e.alternate;
      i === null ? (i = ca(e.tag, t, e.key, e.mode), i.elementType = e.elementType, i.type = e.type, i.stateNode = e.stateNode, i._debugSource = e._debugSource, i._debugOwner = e._debugOwner, i._debugHookTypes = e._debugHookTypes, i.alternate = e, e.alternate = i) : (i.pendingProps = t, i.type = e.type, i.flags = $e, i.subtreeFlags = $e, i.deletions = null, i.actualDuration = 0, i.actualStartTime = -1), i.flags = e.flags & ar, i.childLanes = e.childLanes, i.lanes = e.lanes, i.child = e.child, i.memoizedProps = e.memoizedProps, i.memoizedState = e.memoizedState, i.updateQueue = e.updateQueue;
      var a = e.dependencies;
      switch (i.dependencies = a === null ? null : {
        lanes: a.lanes,
        firstContext: a.firstContext
      }, i.sibling = e.sibling, i.index = e.index, i.ref = e.ref, i.selfBaseDuration = e.selfBaseDuration, i.treeBaseDuration = e.treeBaseDuration, i._debugNeedsRemount = e._debugNeedsRemount, i.tag) {
        case ve:
        case J:
        case De:
          i.type = If(e.type);
          break;
        case Q:
          i.type = u0(e.type);
          break;
        case oe:
          i.type = s0(e.type);
          break;
      }
      return i;
    }
    function J3(e, t) {
      e.flags &= ar | sn;
      var i = e.alternate;
      if (i === null)
        e.childLanes = Y, e.lanes = t, e.child = null, e.subtreeFlags = $e, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null, e.stateNode = null, e.selfBaseDuration = 0, e.treeBaseDuration = 0;
      else {
        e.childLanes = i.childLanes, e.lanes = i.lanes, e.child = i.child, e.subtreeFlags = $e, e.deletions = null, e.memoizedProps = i.memoizedProps, e.memoizedState = i.memoizedState, e.updateQueue = i.updateQueue, e.type = i.type;
        var a = i.dependencies;
        e.dependencies = a === null ? null : {
          lanes: a.lanes,
          firstContext: a.firstContext
        }, e.selfBaseDuration = i.selfBaseDuration, e.treeBaseDuration = i.treeBaseDuration;
      }
      return e;
    }
    function eR(e, t, i) {
      var a;
      return e === Hm ? (a = mt, t === true && (a |= En, a |= Ui)) : a = Qe, lr && (a |= qe), ca(W, null, null, a);
    }
    function v0(e, t, i, a, o, s) {
      var f = ve, p = e;
      if (typeof e == "function")
        p0(e) ? (f = Q, p = u0(p)) : p = If(p);
      else if (typeof e == "string")
        f = q;
      else
        e:
          switch (e) {
            case te:
              return Ku(i.children, o, s, t);
            case me:
              f = ie, o |= En, (o & mt) !== Qe && (o |= Ui);
              break;
            case Ie:
              return tR(i, o, s, t);
            case Je:
              return nR(i, o, s, t);
            case bn:
              return rR(i, o, s, t);
            case cl:
              return Bb(i, o, s, t);
            case Gr:
            case ir:
            case Wf:
            case Qf:
            case Ji:
            default: {
              if (typeof e == "object" && e !== null)
                switch (e.$$typeof) {
                  case yt:
                    f = de;
                    break e;
                  case zt:
                    f = Xe;
                    break e;
                  case He:
                    f = oe, p = s0(p);
                    break e;
                  case Qt:
                    f = Te;
                    break e;
                  case gt:
                    f = St, p = null;
                    break e;
                }
              var v = "";
              {
                (e === void 0 || typeof e == "object" && e !== null && Object.keys(e).length === 0) && (v += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                var y = a ? at(a) : null;
                y && (v += `

Check the render method of \`` + y + "`.");
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (e == null ? e : typeof e) + "." + v));
            }
          }
      var S = ca(f, i, t, o);
      return S.elementType = e, S.type = p, S.lanes = s, S._debugOwner = a, S;
    }
    function m0(e, t, i) {
      var a = null;
      a = e._owner;
      var o = e.type, s = e.key, f = e.props, p = v0(o, s, f, a, t, i);
      return p._debugSource = e._source, p._debugOwner = e._owner, p;
    }
    function Ku(e, t, i, a) {
      var o = ca(ee, e, a, t);
      return o.lanes = i, o;
    }
    function tR(e, t, i, a) {
      typeof e.id != "string" && g('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof e.id);
      var o = ca(xe, e, a, t | qe);
      return o.elementType = Ie, o.lanes = i, o.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, o;
    }
    function nR(e, t, i, a) {
      var o = ca(be, e, a, t);
      return o.elementType = Je, o.lanes = i, o;
    }
    function rR(e, t, i, a) {
      var o = ca(Et, e, a, t);
      return o.elementType = bn, o.lanes = i, o;
    }
    function Bb(e, t, i, a) {
      var o = ca(Be, e, a, t);
      o.elementType = cl, o.lanes = i;
      var s = {
        isHidden: false
      };
      return o.stateNode = s, o;
    }
    function h0(e, t, i) {
      var a = ca(fe, e, null, t);
      return a.lanes = i, a;
    }
    function iR() {
      var e = ca(q, null, null, Qe);
      return e.elementType = "DELETED", e;
    }
    function aR(e) {
      var t = ca(Lt, null, null, Qe);
      return t.stateNode = e, t;
    }
    function y0(e, t, i) {
      var a = e.children !== null ? e.children : [], o = ca(Z, a, e.key, t);
      return o.lanes = i, o.stateNode = {
        containerInfo: e.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: e.implementation
      }, o;
    }
    function Ib(e, t) {
      return e === null && (e = ca(ve, null, null, Qe)), e.tag = t.tag, e.key = t.key, e.elementType = t.elementType, e.type = t.type, e.stateNode = t.stateNode, e.return = t.return, e.child = t.child, e.sibling = t.sibling, e.index = t.index, e.ref = t.ref, e.pendingProps = t.pendingProps, e.memoizedProps = t.memoizedProps, e.updateQueue = t.updateQueue, e.memoizedState = t.memoizedState, e.dependencies = t.dependencies, e.mode = t.mode, e.flags = t.flags, e.subtreeFlags = t.subtreeFlags, e.deletions = t.deletions, e.lanes = t.lanes, e.childLanes = t.childLanes, e.alternate = t.alternate, e.actualDuration = t.actualDuration, e.actualStartTime = t.actualStartTime, e.selfBaseDuration = t.selfBaseDuration, e.treeBaseDuration = t.treeBaseDuration, e._debugSource = t._debugSource, e._debugOwner = t._debugOwner, e._debugNeedsRemount = t._debugNeedsRemount, e._debugHookTypes = t._debugHookTypes, e;
    }
    function lR(e, t, i, a, o) {
      this.tag = t, this.containerInfo = e, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = Zy, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = wt, this.eventTimes = Xc(Y), this.expirationTimes = Xc(on), this.pendingLanes = Y, this.suspendedLanes = Y, this.pingedLanes = Y, this.expiredLanes = Y, this.mutableReadLanes = Y, this.finishedLanes = Y, this.entangledLanes = Y, this.entanglements = Xc(Y), this.identifierPrefix = a, this.onRecoverableError = o, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        for (var s = this.pendingUpdatersLaneMap = [], f = 0; f < fn; f++)
          s.push(/* @__PURE__ */ new Set());
      }
      switch (t) {
        case Hm:
          this._debugRootType = i ? "hydrateRoot()" : "createRoot()";
          break;
        case ju:
          this._debugRootType = i ? "hydrate()" : "render()";
          break;
      }
    }
    function $b(e, t, i, a, o, s, f, p, v, y) {
      var S = new lR(e, t, i, p, v), O = eR(t, s);
      S.current = O, O.stateNode = S;
      {
        var N = {
          element: a,
          isDehydrated: i,
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        O.memoizedState = N;
      }
      return x1(O), S;
    }
    var g0 = "18.2.0";
    function oR(e, t, i) {
      var a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return Yr(a), {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: x,
        key: a == null ? null : "" + a,
        children: e,
        containerInfo: t,
        implementation: i
      };
    }
    var S0, b0;
    S0 = false, b0 = {};
    function Yb(e) {
      if (!e)
        return sa;
      var t = Li(e), i = $E(t);
      if (t.tag === Q) {
        var a = t.type;
        if ($l(a))
          return y2(t, a, i);
      }
      return i;
    }
    function uR(e, t) {
      {
        var i = Li(e);
        if (i === void 0) {
          if (typeof e.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
          var a = Object.keys(e).join(",");
          throw new Error("Argument appears to not be a ReactComponent. Keys: " + a);
        }
        var o = Vi(i);
        if (o === null)
          return null;
        if (o.mode & En) {
          var s = at(i) || "Component";
          if (!b0[s]) {
            b0[s] = true;
            var f = Cn;
            try {
              Gt(o), i.mode & En ? g("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", t, t, s) : g("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", t, t, s);
            } finally {
              f ? Gt(f) : Rn();
            }
          }
        }
        return o.stateNode;
      }
    }
    function Wb(e, t, i, a, o, s, f, p) {
      var v = false, y = null;
      return $b(e, t, v, y, i, a, o, s, f);
    }
    function Qb(e, t, i, a, o, s, f, p, v, y) {
      var S = true, O = $b(i, a, S, e, o, s, f, p, v);
      O.context = Yb(null);
      var N = O.current, U = ki(), F = qu(N), I = Fo(U, F);
      return I.callback = t ?? null, Pu(N, I, F), m3(O, F, U), O;
    }
    function ev(e, t, i, a) {
      Pv(t, e);
      var o = t.current, s = ki(), f = qu(o);
      mo(f);
      var p = Yb(i);
      t.context === null ? t.context = p : t.pendingContext = p, Xr && Cn !== null && !S0 && (S0 = true, g(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, at(Cn) || "Unknown"));
      var v = Fo(s, f);
      v.payload = {
        element: e
      }, a = a === void 0 ? null : a, a !== null && (typeof a != "function" && g("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", a), v.callback = a);
      var y = Pu(o, v, f);
      return y !== null && (mr(y, o, f, s), Jm(y, o, f)), f;
    }
    function $h(e) {
      var t = e.current;
      if (!t.child)
        return null;
      switch (t.child.tag) {
        case q:
          return t.child.stateNode;
        default:
          return t.child.stateNode;
      }
    }
    function sR(e) {
      switch (e.tag) {
        case W: {
          var t = e.stateNode;
          if ($n(t)) {
            var i = gy(t);
            S3(t, i);
          }
          break;
        }
        case be: {
          Io(function() {
            var o = $i(e, Ke);
            if (o !== null) {
              var s = ki();
              mr(o, e, Ke, s);
            }
          });
          var a = Ke;
          C0(e, a);
          break;
        }
      }
    }
    function Gb(e, t) {
      var i = e.memoizedState;
      i !== null && i.dehydrated !== null && (i.retryLane = Jv(i.retryLane, t));
    }
    function C0(e, t) {
      Gb(e, t);
      var i = e.alternate;
      i && Gb(i, t);
    }
    function cR(e) {
      if (e.tag === be) {
        var t = hu, i = $i(e, t);
        if (i !== null) {
          var a = ki();
          mr(i, e, t, a);
        }
        C0(e, t);
      }
    }
    function fR(e) {
      if (e.tag === be) {
        var t = qu(e), i = $i(e, t);
        if (i !== null) {
          var a = ki();
          mr(i, e, t, a);
        }
        C0(e, t);
      }
    }
    function qb(e) {
      var t = jv(e);
      return t === null ? null : t.stateNode;
    }
    var Xb = function(e) {
      return null;
    };
    function dR(e) {
      return Xb(e);
    }
    var Kb = function(e) {
      return false;
    };
    function pR(e) {
      return Kb(e);
    }
    var Zb = null, Jb = null, eC = null, tC = null, nC = null, rC = null, iC = null, aC = null, lC = null;
    {
      var oC = function(e, t, i) {
        var a = t[i], o = kt(e) ? e.slice() : pt({}, e);
        return i + 1 === t.length ? (kt(o) ? o.splice(a, 1) : delete o[a], o) : (o[a] = oC(e[a], t, i + 1), o);
      }, uC = function(e, t) {
        return oC(e, t, 0);
      }, sC = function(e, t, i, a) {
        var o = t[a], s = kt(e) ? e.slice() : pt({}, e);
        if (a + 1 === t.length) {
          var f = i[a];
          s[f] = s[o], kt(s) ? s.splice(o, 1) : delete s[o];
        } else
          s[o] = sC(
            // $FlowFixMe number or string is fine here
            e[o],
            t,
            i,
            a + 1
          );
        return s;
      }, cC = function(e, t, i) {
        if (t.length !== i.length) {
          P("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var a = 0; a < i.length - 1; a++)
            if (t[a] !== i[a]) {
              P("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return sC(e, t, i, 0);
      }, fC = function(e, t, i, a) {
        if (i >= t.length)
          return a;
        var o = t[i], s = kt(e) ? e.slice() : pt({}, e);
        return s[o] = fC(e[o], t, i + 1, a), s;
      }, dC = function(e, t, i) {
        return fC(e, t, 0, i);
      }, _0 = function(e, t) {
        for (var i = e.memoizedState; i !== null && t > 0; )
          i = i.next, t--;
        return i;
      };
      Zb = function(e, t, i, a) {
        var o = _0(e, t);
        if (o !== null) {
          var s = dC(o.memoizedState, i, a);
          o.memoizedState = s, o.baseState = s, e.memoizedProps = pt({}, e.memoizedProps);
          var f = $i(e, Ke);
          f !== null && mr(f, e, Ke, on);
        }
      }, Jb = function(e, t, i) {
        var a = _0(e, t);
        if (a !== null) {
          var o = uC(a.memoizedState, i);
          a.memoizedState = o, a.baseState = o, e.memoizedProps = pt({}, e.memoizedProps);
          var s = $i(e, Ke);
          s !== null && mr(s, e, Ke, on);
        }
      }, eC = function(e, t, i, a) {
        var o = _0(e, t);
        if (o !== null) {
          var s = cC(o.memoizedState, i, a);
          o.memoizedState = s, o.baseState = s, e.memoizedProps = pt({}, e.memoizedProps);
          var f = $i(e, Ke);
          f !== null && mr(f, e, Ke, on);
        }
      }, tC = function(e, t, i) {
        e.pendingProps = dC(e.memoizedProps, t, i), e.alternate && (e.alternate.pendingProps = e.pendingProps);
        var a = $i(e, Ke);
        a !== null && mr(a, e, Ke, on);
      }, nC = function(e, t) {
        e.pendingProps = uC(e.memoizedProps, t), e.alternate && (e.alternate.pendingProps = e.pendingProps);
        var i = $i(e, Ke);
        i !== null && mr(i, e, Ke, on);
      }, rC = function(e, t, i) {
        e.pendingProps = cC(e.memoizedProps, t, i), e.alternate && (e.alternate.pendingProps = e.pendingProps);
        var a = $i(e, Ke);
        a !== null && mr(a, e, Ke, on);
      }, iC = function(e) {
        var t = $i(e, Ke);
        t !== null && mr(t, e, Ke, on);
      }, aC = function(e) {
        Xb = e;
      }, lC = function(e) {
        Kb = e;
      };
    }
    function vR(e) {
      var t = Vi(e);
      return t === null ? null : t.stateNode;
    }
    function mR(e) {
      return null;
    }
    function hR() {
      return Cn;
    }
    function yR(e) {
      var t = e.findFiberByHostInstance, i = b.ReactCurrentDispatcher;
      return wd({
        bundleType: e.bundleType,
        version: e.version,
        rendererPackageName: e.rendererPackageName,
        rendererConfig: e.rendererConfig,
        overrideHookState: Zb,
        overrideHookStateDeletePath: Jb,
        overrideHookStateRenamePath: eC,
        overrideProps: tC,
        overridePropsDeletePath: nC,
        overridePropsRenamePath: rC,
        setErrorHandler: aC,
        setSuspenseHandler: lC,
        scheduleUpdate: iC,
        currentDispatcherRef: i,
        findHostInstanceByFiber: vR,
        findFiberByHostInstance: t || mR,
        // React Refresh
        findHostInstancesForRefresh: Q3,
        scheduleRefresh: Y3,
        scheduleRoot: W3,
        setRefreshHandler: $3,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: hR,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: g0
      });
    }
    var pC = typeof reportError == "function" ? (
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(e) {
      console.error(e);
    };
    function E0(e) {
      this._internalRoot = e;
    }
    Yh.prototype.render = E0.prototype.render = function(e) {
      var t = this._internalRoot;
      if (t === null)
        throw new Error("Cannot update an unmounted root.");
      {
        typeof arguments[1] == "function" ? g("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : Wh(arguments[1]) ? g("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && g("You passed a second argument to root.render(...) but it only accepts one argument.");
        var i = t.containerInfo;
        if (i.nodeType !== zn) {
          var a = qb(t.current);
          a && a.parentNode !== i && g("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
        }
      }
      ev(e, t, null, null);
    }, Yh.prototype.unmount = E0.prototype.unmount = function() {
      typeof arguments[0] == "function" && g("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      var e = this._internalRoot;
      if (e !== null) {
        this._internalRoot = null;
        var t = e.containerInfo;
        xb() && g("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), Io(function() {
          ev(null, e, null, null);
        }), d2(t);
      }
    };
    function gR(e, t) {
      if (!Wh(e))
        throw new Error("createRoot(...): Target container is not a DOM element.");
      vC(e);
      var i = false, a = false, o = "", s = pC;
      t != null && (t.hydrate ? P("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof t == "object" && t !== null && t.$$typeof === va && g(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), t.unstable_strictMode === true && (i = true), t.identifierPrefix !== void 0 && (o = t.identifierPrefix), t.onRecoverableError !== void 0 && (s = t.onRecoverableError), t.transitionCallbacks !== void 0 && t.transitionCallbacks);
      var f = Wb(e, Hm, null, i, a, o, s);
      Mm(f.current, e);
      var p = e.nodeType === zn ? e.parentNode : e;
      return up(p), new E0(f);
    }
    function Yh(e) {
      this._internalRoot = e;
    }
    function SR(e) {
      e && om(e);
    }
    Yh.prototype.unstable_scheduleHydration = SR;
    function bR(e, t, i) {
      if (!Wh(e))
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      vC(e), t === void 0 && g("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
      var a = i ?? null, o = i != null && i.hydratedSources || null, s = false, f = false, p = "", v = pC;
      i != null && (i.unstable_strictMode === true && (s = true), i.identifierPrefix !== void 0 && (p = i.identifierPrefix), i.onRecoverableError !== void 0 && (v = i.onRecoverableError));
      var y = Qb(t, null, e, Hm, a, s, f, p, v);
      if (Mm(y.current, e), up(e), o)
        for (var S = 0; S < o.length; S++) {
          var O = o[S];
          Tk(y, O);
        }
      return new Yh(y);
    }
    function Wh(e) {
      return !!(e && (e.nodeType === Zr || e.nodeType === ia || e.nodeType === ao || !Ce));
    }
    function tv(e) {
      return !!(e && (e.nodeType === Zr || e.nodeType === ia || e.nodeType === ao || e.nodeType === zn && e.nodeValue === " react-mount-point-unstable "));
    }
    function vC(e) {
      e.nodeType === Zr && e.tagName && e.tagName.toUpperCase() === "BODY" && g("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), Sp(e) && (e._reactRootContainer ? g("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : g("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
    }
    var CR = b.ReactCurrentOwner, mC;
    mC = function(e) {
      if (e._reactRootContainer && e.nodeType !== zn) {
        var t = qb(e._reactRootContainer.current);
        t && t.parentNode !== e && g("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
      }
      var i = !!e._reactRootContainer, a = k0(e), o = !!(a && Vu(a));
      o && !i && g("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), e.nodeType === Zr && e.tagName && e.tagName.toUpperCase() === "BODY" && g("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function k0(e) {
      return e ? e.nodeType === ia ? e.documentElement : e.firstChild : null;
    }
    function hC() {
    }
    function _R(e, t, i, a, o) {
      if (o) {
        if (typeof a == "function") {
          var s = a;
          a = function() {
            var N = $h(f);
            s.call(N);
          };
        }
        var f = Qb(
          t,
          a,
          e,
          ju,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          hC
        );
        e._reactRootContainer = f, Mm(f.current, e);
        var p = e.nodeType === zn ? e.parentNode : e;
        return up(p), Io(), f;
      } else {
        for (var v; v = e.lastChild; )
          e.removeChild(v);
        if (typeof a == "function") {
          var y = a;
          a = function() {
            var N = $h(S);
            y.call(N);
          };
        }
        var S = Wb(
          e,
          ju,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          hC
        );
        e._reactRootContainer = S, Mm(S.current, e);
        var O = e.nodeType === zn ? e.parentNode : e;
        return up(O), Io(function() {
          ev(t, S, i, a);
        }), S;
      }
    }
    function ER(e, t) {
      e !== null && typeof e != "function" && g("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", t, e);
    }
    function Qh(e, t, i, a, o) {
      mC(i), ER(o === void 0 ? null : o, "render");
      var s = i._reactRootContainer, f;
      if (!s)
        f = _R(i, t, e, o, a);
      else {
        if (f = s, typeof o == "function") {
          var p = o;
          o = function() {
            var v = $h(f);
            p.call(v);
          };
        }
        ev(t, f, e, o);
      }
      return $h(f);
    }
    function kR(e) {
      {
        var t = CR.current;
        if (t !== null && t.stateNode !== null) {
          var i = t.stateNode._warnedAboutRefsInRender;
          i || g("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", Mt(t.type) || "A component"), t.stateNode._warnedAboutRefsInRender = true;
        }
      }
      return e == null ? null : e.nodeType === Zr ? e : uR(e, "findDOMNode");
    }
    function xR(e, t, i) {
      if (g("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !tv(t))
        throw new Error("Target container is not a DOM element.");
      {
        var a = Sp(t) && t._reactRootContainer === void 0;
        a && g("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
      }
      return Qh(null, e, t, true, i);
    }
    function RR(e, t, i) {
      if (g("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !tv(t))
        throw new Error("Target container is not a DOM element.");
      {
        var a = Sp(t) && t._reactRootContainer === void 0;
        a && g("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
      }
      return Qh(null, e, t, false, i);
    }
    function wR(e, t, i, a) {
      if (g("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !tv(i))
        throw new Error("Target container is not a DOM element.");
      if (e == null || !hs(e))
        throw new Error("parentComponent must be a valid React Component");
      return Qh(e, t, i, false, a);
    }
    function TR(e) {
      if (!tv(e))
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      {
        var t = Sp(e) && e._reactRootContainer === void 0;
        t && g("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
      }
      if (e._reactRootContainer) {
        {
          var i = k0(e), a = i && !Vu(i);
          a && g("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
        }
        return Io(function() {
          Qh(null, null, e, false, function() {
            e._reactRootContainer = null, d2(e);
          });
        }), true;
      } else {
        {
          var o = k0(e), s = !!(o && Vu(o)), f = e.nodeType === Zr && tv(e.parentNode) && !!e.parentNode._reactRootContainer;
          s && g("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", f ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
        }
        return false;
      }
    }
    Oe(sR), tm(cR), Os(fR), $d(Fi), rm(Ts), (typeof Map != "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && g("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), zv(O_), yc(t0, b3, Io);
    function NR(e, t) {
      var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!Wh(t))
        throw new Error("Target container is not a DOM element.");
      return oR(e, t, null, i);
    }
    function DR(e, t, i, a) {
      return wR(e, t, i, a);
    }
    var x0 = {
      usingClientEntryPoint: false,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
      Events: [Vu, bf, Am, hc, ps, t0]
    };
    function OR(e, t) {
      return x0.usingClientEntryPoint || g('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), gR(e, t);
    }
    function LR(e, t, i) {
      return x0.usingClientEntryPoint || g('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), bR(e, t, i);
    }
    function MR(e) {
      return xb() && g("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), Io(e);
    }
    var AR = yR({
      findFiberByHostInstance: Ps,
      bundleType: 1,
      version: g0,
      rendererPackageName: "react-dom"
    });
    if (!AR && yn && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
      var yC = window.location.protocol;
      /^(https?|file):$/.test(yC) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (yC === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
    }
    qi.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = x0, qi.createPortal = NR, qi.createRoot = OR, qi.findDOMNode = kR, qi.flushSync = MR, qi.hydrate = xR, qi.hydrateRoot = LR, qi.render = RR, qi.unmountComponentAtNode = TR, qi.unstable_batchedUpdates = t0, qi.unstable_renderSubtreeIntoContainer = DR, qi.version = g0, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), qi;
}
function $C() {
  if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function")) {
    if (true)
      throw new Error("^_^");
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE($C);
    } catch (_) {
      console.error(_);
    }
  }
}
false ? ($C(), M0.exports = YR()) : M0.exports = WR();
var QR = M0.exports, rv = QR;
if (false)
  av.createRoot = rv.createRoot, av.hydrateRoot = rv.hydrateRoot;
else {
  var Zh = rv.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  av.createRoot = function(_, C) {
    Zh.usingClientEntryPoint = true;
    try {
      return rv.createRoot(_, C);
    } finally {
      Zh.usingClientEntryPoint = false;
    }
  }, av.hydrateRoot = function(_, C, b) {
    Zh.usingClientEntryPoint = true;
    try {
      return rv.hydrateRoot(_, C, b);
    } finally {
      Zh.usingClientEntryPoint = false;
    }
  };
}
var Kt = Zu();
const GR = /* @__PURE__ */ BC(Kt);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
var qR = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const XR = (_) => _.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ot = (_, C) => {
  const b = Kt.forwardRef(
    ({
      color: T = "currentColor",
      size: X = 24,
      strokeWidth: P = 2,
      absoluteStrokeWidth: g,
      className: ge = "",
      children: J,
      ...Q
    }, ve) => Kt.createElement(
      "svg",
      {
        ref: ve,
        ...qR,
        width: X,
        height: X,
        stroke: T,
        strokeWidth: g ? Number(P) * 24 / Number(X) : P,
        className: ["lucide", `lucide-${XR(_)}`, ge].join(" "),
        ...Q
      },
      [
        ...C.map(([W, Z]) => Kt.createElement(W, Z)),
        ...Array.isArray(J) ? J : [J]
      ]
    )
  );
  return b.displayName = `${_}`, b;
};
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const KR = Ot("AArrowUp", [
  ["path", { d: "M3.5 13h6", key: "p1my2r" }],
  ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
  ["path", { d: "M18 16V7", key: "ty0viw" }],
  ["path", { d: "m14 11 4-4 4 4", key: "1pu57t" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ZR = Ot("Accessibility", [
  ["circle", { cx: "16", cy: "4", r: "1", key: "1grugj" }],
  ["path", { d: "m18 19 1-7-6 1", key: "r0i19z" }],
  ["path", { d: "m5 8 3-3 5.5 3-2.36 3.5", key: "9ptxx2" }],
  ["path", { d: "M4.24 14.5a5 5 0 0 0 6.88 6", key: "10kmtu" }],
  ["path", { d: "M13.76 17.5a5 5 0 0 0-6.88-6", key: "2qq6rc" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const JR = Ot("AlignCenter", [
  ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
  ["line", { x1: "17", x2: "7", y1: "12", y2: "12", key: "rsh8ii" }],
  ["line", { x1: "19", x2: "5", y1: "18", y2: "18", key: "1t0tuv" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ew = Ot("AlignJustify", [
  ["line", { x1: "3", x2: "21", y1: "6", y2: "6", key: "4m8b97" }],
  ["line", { x1: "3", x2: "21", y1: "12", y2: "12", key: "10d38w" }],
  ["line", { x1: "3", x2: "21", y1: "18", y2: "18", key: "kwyyxn" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const tw = Ot("AlignLeft", [
  ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
  ["line", { x1: "15", x2: "3", y1: "12", y2: "12", key: "v6grx8" }],
  ["line", { x1: "17", x2: "3", y1: "18", y2: "18", key: "1awlsn" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const nw = Ot("AlignRight", [
  ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
  ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }],
  ["line", { x1: "21", x2: "7", y1: "18", y2: "18", key: "1g9eri" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const rw = Ot("ArrowLeft", [
  ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
  ["path", { d: "M19 12H5", key: "x3x0zl" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const iw = Ot("ArrowRightLeft", [
  ["path", { d: "m16 3 4 4-4 4", key: "1x1c3m" }],
  ["path", { d: "M20 7H4", key: "zbl0bi" }],
  ["path", { d: "m8 21-4-4 4-4", key: "h9nckh" }],
  ["path", { d: "M4 17h16", key: "g4d7ey" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const aw = Ot("ArrowRight", [
  ["path", { d: "M5 12h14", key: "1ays0h" }],
  ["path", { d: "m12 5 7 7-7 7", key: "xquz4c" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const lw = Ot("AudioWaveform", [
  [
    "path",
    {
      d: "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2",
      key: "57tc96"
    }
  ]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ow = Ot("Brain", [
  [
    "path",
    {
      d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
      key: "l5xja"
    }
  ],
  [
    "path",
    {
      d: "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z",
      key: "ep3f8r"
    }
  ],
  ["path", { d: "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4", key: "1p4c4q" }],
  ["path", { d: "M17.599 6.5a3 3 0 0 0 .399-1.375", key: "tmeiqw" }],
  ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
  ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
  ["path", { d: "M19.938 10.5a4 4 0 0 1 .585.396", key: "1qfode" }],
  ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
  ["path", { d: "M19.967 17.484A4 4 0 0 1 18 18", key: "159ez6" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const uw = Ot("CaseSensitive", [
  ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
  ["path", { d: "M4 13h6", key: "1r9ots" }],
  ["circle", { cx: "18", cy: "12", r: "3", key: "1kchzo" }],
  ["path", { d: "M21 9v6", key: "anns31" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const sw = Ot("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const cw = Ot("ChevronRight", [
  ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const fw = Ot("ChevronsLeftRight", [
  ["path", { d: "m9 7-5 5 5 5", key: "j5w590" }],
  ["path", { d: "m15 7 5 5-5 5", key: "1bl6da" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const dw = Ot("ChevronsUpDown", [
  ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
  ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const pw = Ot("CircleDotDashed", [
  ["path", { d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0", key: "1qdqn0" }],
  ["path", { d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7", key: "1bq7p6" }],
  ["path", { d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8", key: "1rlaqf" }],
  ["path", { d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69", key: "1xk03u" }],
  ["path", { d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0", key: "l7re25" }],
  ["path", { d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7", key: "1v18p6" }],
  ["path", { d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8", key: "xdo6bj" }],
  ["path", { d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69", key: "1jjmaz" }],
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const vw = Ot("CircleDot", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TC = Ot("Droplet", [
  [
    "path",
    {
      d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
      key: "c7niix"
    }
  ]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const mw = Ot("Eclipse", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M12 2a7 7 0 1 0 10 10", key: "1yuj32" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const hw = Ot("Eye", [
  ["path", { d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z", key: "rwhkz3" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const yw = Ot("Highlighter", [
  ["path", { d: "m9 11-6 6v3h9l3-3", key: "1a3l36" }],
  ["path", { d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4", key: "14a9rk" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const gw = Ot("ImageOff", [
  ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
  ["path", { d: "M10.41 10.41a2 2 0 1 1-2.83-2.83", key: "1bzlo9" }],
  ["line", { x1: "13.5", x2: "6", y1: "13.5", y2: "21", key: "1q0aeu" }],
  ["line", { x1: "18", x2: "21", y1: "12", y2: "15", key: "5mozeu" }],
  [
    "path",
    {
      d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
      key: "mmje98"
    }
  ],
  ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Sw = Ot("Lamp", [
  ["path", { d: "M8 2h8l4 10H4L8 2Z", key: "9dma5w" }],
  ["path", { d: "M12 12v6", key: "3ahymv" }],
  ["path", { d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z", key: "mwf4oh" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const bw = Ot("Ligature", [
  ["path", { d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2", key: "1rtphz" }],
  ["path", { d: "M6 12h4", key: "a4o3ry" }],
  ["path", { d: "M14 12h2v8", key: "c1fccl" }],
  ["path", { d: "M6 20h4", key: "1i6q5t" }],
  ["path", { d: "M14 20h4", key: "lzx1xo" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Cw = Ot("Link2", [
  ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
  ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
  ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const _w = Ot("MousePointer", [
  ["path", { d: "m3 3 7.07 16.97 2.51-7.39 7.39-2.51L3 3z", key: "y2ucgo" }],
  ["path", { d: "m13 13 6 6", key: "1nhxnf" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ew = Ot("PanelRight", [
  ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
  ["path", { d: "M15 3v18", key: "14nvp0" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const kw = Ot("PersonStanding", [
  ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
  ["path", { d: "m9 20 3-6 3 6", key: "se2kox" }],
  ["path", { d: "m6 8 6 2 6-2", key: "4o3us4" }],
  ["path", { d: "M12 10v4", key: "1kjpxc" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const xw = Ot("RefreshCcw", [
  ["path", { d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "14sxne" }],
  ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
  ["path", { d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16", key: "1hlbsb" }],
  ["path", { d: "M16 16h5v5", key: "ccwih5" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Rw = Ot("ScanLine", [
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
  ["path", { d: "M7 12h10", key: "b7w52i" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ww = Ot("Settings", [
  [
    "path",
    {
      d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
      key: "1qme2f"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Tw = Ot("Shapes", [
  [
    "path",
    {
      d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z",
      key: "1bo67w"
    }
  ],
  ["rect", { x: "3", y: "14", width: "7", height: "7", rx: "1", key: "1bkyp8" }],
  ["circle", { cx: "17.5", cy: "17.5", r: "3.5", key: "w3z12y" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Nw = Ot("Text", [
  ["path", { d: "M17 6.1H3", key: "wptmhv" }],
  ["path", { d: "M21 12.1H3", key: "1j38uz" }],
  ["path", { d: "M15.1 18H3", key: "1nb16a" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const NC = Ot("Type", [
  ["polyline", { points: "4 7 4 4 20 4 20 7", key: "1nosan" }],
  ["line", { x1: "9", x2: "15", y1: "20", y2: "20", key: "swin9y" }],
  ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const YC = Ot("User", [
  ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
  ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Dw = Ot("X", [
  ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
  ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
]);
var Ow = { VITE_USER_NODE_ENV: "development", BASE_URL: "/", MODE: "production", DEV: true, PROD: false, SSR: false };
const DC = (_) => {
  let C;
  const b = /* @__PURE__ */ new Set(), T = (ve, W) => {
    const Z = typeof ve == "function" ? ve(C) : ve;
    if (!Object.is(Z, C)) {
      const q = C;
      C = W ?? (typeof Z != "object" || Z === null) ? Z : Object.assign({}, C, Z), b.forEach((fe) => fe(C, q));
    }
  }, X = () => C, J = { setState: T, getState: X, getInitialState: () => Q, subscribe: (ve) => (b.add(ve), () => b.delete(ve)), destroy: () => {
    (Ow ? "production" : void 0) !== "production" && console.warn(
      "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
    ), b.clear();
  } }, Q = C = _(T, X, J);
  return J;
}, Lw = (_) => _ ? DC(_) : DC;
var A0 = { exports: {} }, T0 = {}, Jh = { exports: {} }, N0 = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var OC;
function Mw() {
  if (OC)
    return N0;
  OC = 1;
  var _ = Zu();
  function C(W, Z) {
    return W === Z && (W !== 0 || 1 / W === 1 / Z) || W !== W && Z !== Z;
  }
  var b = typeof Object.is == "function" ? Object.is : C, T = _.useState, X = _.useEffect, P = _.useLayoutEffect, g = _.useDebugValue;
  function ge(W, Z) {
    var q = Z(), fe = T({ inst: { value: q, getSnapshot: Z } }), ee = fe[0].inst, ie = fe[1];
    return P(function() {
      ee.value = q, ee.getSnapshot = Z, J(ee) && ie({ inst: ee });
    }, [W, q, Z]), X(function() {
      return J(ee) && ie({ inst: ee }), W(function() {
        J(ee) && ie({ inst: ee });
      });
    }, [W]), g(q), q;
  }
  function J(W) {
    var Z = W.getSnapshot;
    W = W.value;
    try {
      var q = Z();
      return !b(W, q);
    } catch {
      return true;
    }
  }
  function Q(W, Z) {
    return Z();
  }
  var ve = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? Q : ge;
  return N0.useSyncExternalStore = _.useSyncExternalStore !== void 0 ? _.useSyncExternalStore : ve, N0;
}
var D0 = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var LC;
function Aw() {
  return LC || (LC = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var _ = Zu(), C = _.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function b(oe) {
      {
        for (var xe = arguments.length, be = new Array(xe > 1 ? xe - 1 : 0), Te = 1; Te < xe; Te++)
          be[Te - 1] = arguments[Te];
        T("error", oe, be);
      }
    }
    function T(oe, xe, be) {
      {
        var Te = C.ReactDebugCurrentFrame, De = Te.getStackAddendum();
        De !== "" && (xe += "%s", be = be.concat([De]));
        var St = be.map(function(xt) {
          return String(xt);
        });
        St.unshift("Warning: " + xe), Function.prototype.apply.call(console[oe], console, St);
      }
    }
    function X(oe, xe) {
      return oe === xe && (oe !== 0 || 1 / oe === 1 / xe) || oe !== oe && xe !== xe;
    }
    var P = typeof Object.is == "function" ? Object.is : X, g = _.useState, ge = _.useEffect, J = _.useLayoutEffect, Q = _.useDebugValue, ve = false, W = false;
    function Z(oe, xe, be) {
      ve || _.startTransition !== void 0 && (ve = true, b("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var Te = xe();
      if (!W) {
        var De = xe();
        P(Te, De) || (b("The result of getSnapshot should be cached to avoid an infinite loop"), W = true);
      }
      var St = g({
        inst: {
          value: Te,
          getSnapshot: xe
        }
      }), xt = St[0].inst, Lt = St[1];
      return J(function() {
        xt.value = Te, xt.getSnapshot = xe, q(xt) && Lt({
          inst: xt
        });
      }, [oe, Te, xe]), ge(function() {
        q(xt) && Lt({
          inst: xt
        });
        var Et = function() {
          q(xt) && Lt({
            inst: xt
          });
        };
        return oe(Et);
      }, [oe]), Q(Te), Te;
    }
    function q(oe) {
      var xe = oe.getSnapshot, be = oe.value;
      try {
        var Te = xe();
        return !P(be, Te);
      } catch {
        return true;
      }
    }
    function fe(oe, xe, be) {
      return xe();
    }
    var ee = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", ie = !ee, Xe = ie ? fe : Z, de = _.useSyncExternalStore !== void 0 ? _.useSyncExternalStore : Xe;
    D0.useSyncExternalStore = de, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), D0;
}
var MC;
function WC() {
  return MC || (MC = 1, false ? Jh.exports = Mw() : Jh.exports = Aw()), Jh.exports;
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var AC;
function zw() {
  if (AC)
    return T0;
  AC = 1;
  var _ = Zu(), C = WC();
  function b(Q, ve) {
    return Q === ve && (Q !== 0 || 1 / Q === 1 / ve) || Q !== Q && ve !== ve;
  }
  var T = typeof Object.is == "function" ? Object.is : b, X = C.useSyncExternalStore, P = _.useRef, g = _.useEffect, ge = _.useMemo, J = _.useDebugValue;
  return T0.useSyncExternalStoreWithSelector = function(Q, ve, W, Z, q) {
    var fe = P(null);
    if (fe.current === null) {
      var ee = { hasValue: false, value: null };
      fe.current = ee;
    } else
      ee = fe.current;
    fe = ge(function() {
      function Xe(Te) {
        if (!de) {
          if (de = true, oe = Te, Te = Z(Te), q !== void 0 && ee.hasValue) {
            var De = ee.value;
            if (q(De, Te))
              return xe = De;
          }
          return xe = Te;
        }
        if (De = xe, T(oe, Te))
          return De;
        var St = Z(Te);
        return q !== void 0 && q(De, St) ? De : (oe = Te, xe = St);
      }
      var de = false, oe, xe, be = W === void 0 ? null : W;
      return [function() {
        return Xe(ve());
      }, be === null ? void 0 : function() {
        return Xe(be());
      }];
    }, [ve, W, Z, q]);
    var ie = X(Q, fe[0], fe[1]);
    return g(function() {
      ee.hasValue = true, ee.value = ie;
    }, [ie]), J(ie), ie;
  }, T0;
}
var O0 = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var zC;
function Vw() {
  return zC || (zC = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var _ = Zu(), C = WC();
    function b(ve, W) {
      return ve === W && (ve !== 0 || 1 / ve === 1 / W) || ve !== ve && W !== W;
    }
    var T = typeof Object.is == "function" ? Object.is : b, X = C.useSyncExternalStore, P = _.useRef, g = _.useEffect, ge = _.useMemo, J = _.useDebugValue;
    function Q(ve, W, Z, q, fe) {
      var ee = P(null), ie;
      ee.current === null ? (ie = {
        hasValue: false,
        value: null
      }, ee.current = ie) : ie = ee.current;
      var Xe = ge(function() {
        var be = false, Te, De, St = function(en) {
          if (!be) {
            be = true, Te = en;
            var Be = q(en);
            if (fe !== void 0 && ie.hasValue) {
              var rt = ie.value;
              if (fe(rt, Be))
                return De = rt, rt;
            }
            return De = Be, Be;
          }
          var Ut = Te, ht = De;
          if (T(Ut, en))
            return ht;
          var Ne = q(en);
          return fe !== void 0 && fe(ht, Ne) ? ht : (Te = en, De = Ne, Ne);
        }, xt = Z === void 0 ? null : Z, Lt = function() {
          return St(W());
        }, Et = xt === null ? void 0 : function() {
          return St(xt());
        };
        return [Lt, Et];
      }, [W, Z, q, fe]), de = Xe[0], oe = Xe[1], xe = X(ve, de, oe);
      return g(function() {
        ie.hasValue = true, ie.value = xe;
      }, [xe]), J(xe), xe;
    }
    O0.useSyncExternalStoreWithSelector = Q, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), O0;
}
false ? A0.exports = zw() : A0.exports = Vw();
var Uw = A0.exports;
const jw = /* @__PURE__ */ BC(Uw);
var QC = { VITE_USER_NODE_ENV: "development", BASE_URL: "/", MODE: "production", DEV: true, PROD: false, SSR: false };
const { useDebugValue: Fw } = GR, { useSyncExternalStoreWithSelector: Hw } = jw;
let VC = false;
const Pw = (_) => _;
function Bw(_, C = Pw, b) {
  (QC ? "production" : void 0) !== "production" && b && !VC && (console.warn(
    "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
  ), VC = true);
  const T = Hw(
    _.subscribe,
    _.getState,
    _.getServerState || _.getInitialState,
    C,
    b
  );
  return Fw(T), T;
}
const UC = (_) => {
  (QC ? "production" : void 0) !== "production" && typeof _ != "function" && console.warn(
    "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
  );
  const C = typeof _ == "function" ? Lw(_) : _, b = (T, X) => Bw(C, T, X);
  return Object.assign(b, C), b;
}, z0 = (_) => _ ? UC(_) : UC;
var Iw = { VITE_USER_NODE_ENV: "development", BASE_URL: "/", MODE: "production", DEV: true, PROD: false, SSR: false };
function $w(_, C) {
  let b;
  try {
    b = _();
  } catch {
    return;
  }
  return {
    getItem: (X) => {
      var P;
      const g = (J) => J === null ? null : JSON.parse(J, void 0), ge = (P = b.getItem(X)) != null ? P : null;
      return ge instanceof Promise ? ge.then(g) : g(ge);
    },
    setItem: (X, P) => b.setItem(
      X,
      JSON.stringify(P, void 0)
    ),
    removeItem: (X) => b.removeItem(X)
  };
}
const lv = (_) => (C) => {
  try {
    const b = _(C);
    return b instanceof Promise ? b : {
      then(T) {
        return lv(T)(b);
      },
      catch(T) {
        return this;
      }
    };
  } catch (b) {
    return {
      then(T) {
        return this;
      },
      catch(T) {
        return lv(T)(b);
      }
    };
  }
}, Yw = (_, C) => (b, T, X) => {
  let P = {
    getStorage: () => localStorage,
    serialize: JSON.stringify,
    deserialize: JSON.parse,
    partialize: (ie) => ie,
    version: 0,
    merge: (ie, Xe) => ({
      ...Xe,
      ...ie
    }),
    ...C
  }, g = false;
  const ge = /* @__PURE__ */ new Set(), J = /* @__PURE__ */ new Set();
  let Q;
  try {
    Q = P.getStorage();
  } catch {
  }
  if (!Q)
    return _(
      (...ie) => {
        console.warn(
          `[zustand persist middleware] Unable to update item '${P.name}', the given storage is currently unavailable.`
        ), b(...ie);
      },
      T,
      X
    );
  const ve = lv(P.serialize), W = () => {
    const ie = P.partialize({ ...T() });
    let Xe;
    const de = ve({ state: ie, version: P.version }).then(
      (oe) => Q.setItem(P.name, oe)
    ).catch((oe) => {
      Xe = oe;
    });
    if (Xe)
      throw Xe;
    return de;
  }, Z = X.setState;
  X.setState = (ie, Xe) => {
    Z(ie, Xe), W();
  };
  const q = _(
    (...ie) => {
      b(...ie), W();
    },
    T,
    X
  );
  let fe;
  const ee = () => {
    var ie;
    if (!Q)
      return;
    g = false, ge.forEach((de) => de(T()));
    const Xe = ((ie = P.onRehydrateStorage) == null ? void 0 : ie.call(P, T())) || void 0;
    return lv(Q.getItem.bind(Q))(P.name).then((de) => {
      if (de)
        return P.deserialize(de);
    }).then((de) => {
      if (de)
        if (typeof de.version == "number" && de.version !== P.version) {
          if (P.migrate)
            return P.migrate(
              de.state,
              de.version
            );
          console.error(
            "State loaded from storage couldn't be migrated since no migrate function was provided"
          );
        } else
          return de.state;
    }).then((de) => {
      var oe;
      return fe = P.merge(
        de,
        (oe = T()) != null ? oe : q
      ), b(fe, true), W();
    }).then(() => {
      Xe == null || Xe(fe, void 0), g = true, J.forEach((de) => de(fe));
    }).catch((de) => {
      Xe == null || Xe(void 0, de);
    });
  };
  return X.persist = {
    setOptions: (ie) => {
      P = {
        ...P,
        ...ie
      }, ie.getStorage && (Q = ie.getStorage());
    },
    clearStorage: () => {
      Q == null || Q.removeItem(P.name);
    },
    getOptions: () => P,
    rehydrate: () => ee(),
    hasHydrated: () => g,
    onHydrate: (ie) => (ge.add(ie), () => {
      ge.delete(ie);
    }),
    onFinishHydration: (ie) => (J.add(ie), () => {
      J.delete(ie);
    })
  }, ee(), fe || q;
}, Ww = (_, C) => (b, T, X) => {
  let P = {
    storage: $w(() => localStorage),
    partialize: (ee) => ee,
    version: 0,
    merge: (ee, ie) => ({
      ...ie,
      ...ee
    }),
    ...C
  }, g = false;
  const ge = /* @__PURE__ */ new Set(), J = /* @__PURE__ */ new Set();
  let Q = P.storage;
  if (!Q)
    return _(
      (...ee) => {
        console.warn(
          `[zustand persist middleware] Unable to update item '${P.name}', the given storage is currently unavailable.`
        ), b(...ee);
      },
      T,
      X
    );
  const ve = () => {
    const ee = P.partialize({ ...T() });
    return Q.setItem(P.name, {
      state: ee,
      version: P.version
    });
  }, W = X.setState;
  X.setState = (ee, ie) => {
    W(ee, ie), ve();
  };
  const Z = _(
    (...ee) => {
      b(...ee), ve();
    },
    T,
    X
  );
  X.getInitialState = () => Z;
  let q;
  const fe = () => {
    var ee, ie;
    if (!Q)
      return;
    g = false, ge.forEach((de) => {
      var oe;
      return de((oe = T()) != null ? oe : Z);
    });
    const Xe = ((ie = P.onRehydrateStorage) == null ? void 0 : ie.call(P, (ee = T()) != null ? ee : Z)) || void 0;
    return lv(Q.getItem.bind(Q))(P.name).then((de) => {
      if (de)
        if (typeof de.version == "number" && de.version !== P.version) {
          if (P.migrate)
            return P.migrate(
              de.state,
              de.version
            );
          console.error(
            "State loaded from storage couldn't be migrated since no migrate function was provided"
          );
        } else
          return de.state;
    }).then((de) => {
      var oe;
      return q = P.merge(
        de,
        (oe = T()) != null ? oe : Z
      ), b(q, true), ve();
    }).then(() => {
      Xe == null || Xe(q, void 0), q = T(), g = true, J.forEach((de) => de(q));
    }).catch((de) => {
      Xe == null || Xe(void 0, de);
    });
  };
  return X.persist = {
    setOptions: (ee) => {
      P = {
        ...P,
        ...ee
      }, ee.storage && (Q = ee.storage);
    },
    clearStorage: () => {
      Q == null || Q.removeItem(P.name);
    },
    getOptions: () => P,
    rehydrate: () => fe(),
    hasHydrated: () => g,
    onHydrate: (ee) => (ge.add(ee), () => {
      ge.delete(ee);
    }),
    onFinishHydration: (ee) => (J.add(ee), () => {
      J.delete(ee);
    })
  }, P.skipHydration || fe(), q || Z;
}, Qw = (_, C) => "getStorage" in C || "serialize" in C || "deserialize" in C ? ((Iw ? "production" : void 0) !== "production" && console.warn(
  "[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."
), Yw(_, C)) : Ww(_, C), V0 = Qw, ey = {
  textSize: 0,
  lineHeight: 0,
  wordSpacing: 0,
  textAlign: null,
  highlightTitles: false,
  highlightLinks: false,
  hiddenImages: false,
  invertColors: false,
  saturation: null,
  noTransitions: false,
  monochrome: false,
  readingGuide: false,
  bigCursor: false,
  fonts: null
}, ov = z0(
  V0(
    (_, C) => ({
      features: { ...ey },
      getFeature: (b) => C().features[b],
      setFeatures: (b) => _((T) => ({
        features: { ...T.features, ...b }
      })),
      isSomeFeaturesSelected: () => {
        const { features: b } = C();
        return Object.keys(b).some((T) => b[T] !== ey[T]);
      },
      applyProfileFeatures: (b) => _(() => ({
        features: { ...ey, ...b }
      })),
      isProfileChecked: (b) => {
        const { features: T } = C();
        return Object.entries(b).every(([X, P]) => T[X] === P);
      },
      reset: () => _({ features: { ...ey } }),
      set: (b) => _((T) => ({ ...T, ...b }))
    }),
    { name: "tkFeaturesStore" }
  )
), Gw = {
  en: {
    "global.back": "Back",
    "global.title": "Wosool Accessibility Solution",
    "global.description": "Adapt this site according to your preferences.",
    "global.resetAllSettings": "Reset all settings",
    "feature.textSize": "Text size",
    "feature.lineHeight": "Line height",
    "feature.wordSpacing": "Word spacing",
    "feature.invertColors": "Invert colors",
    "feature.textAlign": "Text align",
    "feature.highlightTitles": "Highlight titles",
    "feature.highlightLinks": "Highlight links",
    "feature.hiddenImages": "Hide images",
    "feature.noTransitions": "Stop Animations",
    "feature.monochrome": "Monochrome mode",
    "feature.saturation": "Saturation",
    "feature.readingGuide": "Reading guide",
    "feature.bigCursor": "Big Cursor",
    "feature.modeDyslexie": "Dyslexia mode",
    "feature.fonts": "Readable Font",
    "profile.section.title": "Accessibility Profiles",
    "settings.option.display": "Aside display",
    "settings.option.oversized": "Oversized widget",
    "settings.option.font": "Widget font",
    "view.about.title": "Our accessibility statement",
    "view.about.subtitle": "Turnkey",
    "view.settings.title": "Widget Settings",
    "view.settings.subtitle": "Activate keyboard shortcuts, Dark theme, and Other settings",
    "view.settings.interface.title": "Interface",
    "view.translater.title": "Choose your Preferred Language",
    "view.translater.subtitle": "This will change the widget language only."
  },
  ar: {
    "global.back": "Ø±Ø¬ÙˆØ¹",
    "global.title": "Wosool Accessibility Solution",
    "global.description": "Ù‚Ù… Ø¨ØªÙƒÙŠÙŠÙ Ù‡Ø°Ø§ Ø§Ù„Ù…ÙˆÙ‚Ø¹ ÙˆÙÙ‚Ù‹Ø§ Ù„ØªÙØ¶ÙŠÙ„Ø§ØªÙƒ.",
    "global.resetAllSettings": "Ø§Ù…Ø³Ø­ ÙƒÙ„ Ø§Ù„Ø§Ø¹Ø¯Ø§Ø¯Øª",
    "feature.textSize": "Ø­Ø¬Ù… Ø§Ù„Ø®Ø·",
    "feature.lineHeight": "Ø§Ø±ØªÙØ§Ø¹ Ø®Ø·",
    "feature.wordSpacing": "ØªØ¨Ø§Ø¹Ø¯ Ø§Ù„ÙƒÙ„Ù…Ø§Øª",
    "feature.invertColors": "Ø¹ÙƒØ³ Ø§Ù„Ø£Ù„ÙˆØ§Ù†",
    "feature.textAlign": "Ù…Ø­Ø§Ø°Ø§Ø© Ø§Ù„Ù†Øµ",
    "feature.highlightTitles": "ØªØ³Ù„ÙŠØ· Ø§Ù„Ø¶ÙˆØ¡ Ø¹Ù„Ù‰ Ø§Ù„Ø¹Ù†Ø§ÙˆÙŠÙ†",
    "feature.highlightLinks": "ØªØ³Ù„ÙŠØ· Ø§Ù„Ø¶ÙˆØ¡ Ø¹Ù„Ù‰ Ø§Ù„Ø±ÙˆØ§Ø¨Ø·",
    "feature.hiddenImages": "Ø¥Ø®ÙØ§Ø¡ Ø§Ù„ØµÙˆØ±",
    "feature.noTransitions": "ÙˆÙ‚Ù Ø§Ù„ØªØ­Ø±Ùƒ",
    "feature.monochrome": "ÙˆØ¶Ø¹ Ø£Ø­Ø§Ø¯ÙŠ Ø§Ù„Ù„ÙˆÙ†",
    "feature.saturation": "Ø§Ù„ØªØ´Ø¨Ø¹",
    "feature.readingGuide": "Ø¯Ù„ÙŠÙ„ Ø§Ù„Ù‚Ø±Ø§Ø¡Ø©",
    "feature.bigCursor": "Ø§Ù„Ù…Ø¤Ø´Ø± Ø§Ù„ÙƒØ¨ÙŠØ±",
    "feature.modeDyslexie": "ÙˆØ¶Ø¹ Ø¹Ø³Ø± Ø§Ù„Ù‚Ø±Ø§Ø¡Ø©",
    "feature.fonts": "Ø®Ø· Ù‚Ø§Ø¨Ù„ Ù„Ù„Ù‚Ø±Ø§Ø¡Ø©",
    "profile.section.title": "Ø¥Ø¹Ø¯Ø§Ø¯Øª Ù…Ø³Ø¨Ù‚Ø© Ù„Ù„Ø§Ø®ØªÙŠØ§Ø±",
    "settings.option.display": "Ø¹Ø±Ø¶ Ø¬Ø§Ù†Ø¨Ø§",
    "settings.option.oversized": "Ø§Ù„Ù‚Ø·Ø¹Ø© Ø§Ù„Ù…ØªØ¶Ø®Ù…",
    "settings.option.font": "Ø®Ø· Ø§Ù„Ù‚Ø·Ø¹Ø©",
    "view.about.title": "Ø¨ÙŠØ§Ù† Ø¥Ù…ÙƒØ§Ù†ÙŠØ© Ø§Ù„ÙˆØµÙˆÙ„ Ù„Ø¯ÙŠÙ†Ø§",
    "view.about.subtitle": "Ø¬Ø§Ù‡Ø²Ø© Ù„Ù„Ø§Ø³ØªØºÙ„Ø§Ù„",
    "view.settings.title": "Ø¥Ø¹Ø¯Ø§Ø¯Ø§Øª",
    "view.settings.subtitle": "Ù‚Ù… Ø¨ØªÙ†Ø´ÙŠØ· Ø§Ø®ØªØµØ§Ø±Ø§Øª Ù„ÙˆØ­Ø© Ø§Ù„Ù…ÙØ§ØªÙŠØ­ ÙˆØ§Ù„Ù…Ø¸Ù‡Ø± Ø§Ù„Ø¯Ø§ÙƒÙ† ÙˆØ§Ù„Ø¥Ø¹Ø¯Ø§Ø¯Ø§Øª Ø§Ù„Ø£Ø®Ø±Ù‰",
    "view.settings.interface.title": "ÙˆØ§Ø¬Ù‡Ù‡ Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…",
    "view.translater.title": "Ø§Ø®ØªØ± Ù„ØºØªÙƒ Ø§Ù„Ù…ÙØ¶Ù„Ø©",
    "view.translater.subtitle": "Ø³ÙŠØ¤Ø¯ÙŠ Ù‡Ø°Ø§ Ø¥Ù„Ù‰ ØªØºÙŠÙŠØ± Ù„ØºØ© Ø§Ù„Ù‚Ø·Ø¹Ø© ÙÙ‚Ø·."
  },
  fr: {
    "global.back": "Retour",
    "global.title": "Wosool Accessibility Solution",
    "global.description": "Adaptez ce site selon vos prÃ©fÃ©rences.",
    "global.resetAllSettings": "RÃ©initialiser tous les rÃ©glages",
    "feature.textSize": "Taille du texte",
    "feature.lineHeight": "Hauteur de la ligne",
    "feature.wordSpacing": "Espacement des mots",
    "feature.invertColors": "Invert colors",
    "feature.textAlign": "Aligner le texte",
    "feature.highlightTitles": "Mettre en surbrillance les titres",
    "feature.highlightLinks": "Mettre en surbrillance les liens",
    "feature.hiddenImages": "Masquer les images",
    "feature.noTransitions": "ArrÃªter les animations",
    "feature.monochrome": "Mode monochrome",
    "feature.saturation": "Saturation",
    "feature.readingGuide": "Guide de lecture",
    "feature.bigCursor": "Gros curseur",
    "feature.modeDyslexie": "Mode dyslexie",
    "feature.fonts": "Police lisible",
    "profile.section.title": "Profils d'accessibilitÃ©",
    "settings.option.display": "Affichage latÃ©ral",
    "settings.option.oversized": "Widget surdimensionnÃ©",
    "settings.option.font": "Police du widget",
    "view.about.title": "Notre dÃ©claration d'accessibilitÃ©",
    "view.about.subtitle": "ClÃ© en main",
    "view.settings.title": "ParamÃ¨tres du widget",
    "view.settings.subtitle": "Activer les raccourcis clavier, le thÃ¨me sombre et d'autres paramÃ¨tres",
    "view.settings.interface.title": "Interface",
    "view.translater.title": "Choisissez votre langue prÃ©fÃ©rÃ©e",
    "view.translater.subtitle": "Cela modifiera uniquement la langue du widget."
  }
}, qw = (_) => /* @__PURE__ */ L.jsxDEV("svg", { xmlns: "http://www.w3.org/2000/svg", width: "1.25em", height: "1.25em", viewBox: "0 0 512 512", ..._, children: [
  /* @__PURE__ */ L.jsxDEV("mask", { id: "circleFlagsFr0", children: /* @__PURE__ */ L.jsxDEV("circle", { cx: "256", cy: "256", r: "256", fill: "#fff" }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
    lineNumber: 6,
    columnNumber: 33
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
    lineNumber: 6,
    columnNumber: 7
  }, void 0),
  /* @__PURE__ */ L.jsxDEV("g", { mask: "url(#circleFlagsFr0)", children: [
    /* @__PURE__ */ L.jsxDEV("path", { fill: "#eee", d: "M167 0h178l25.9 252.3L345 512H167l-29.8-253.4z" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
      lineNumber: 8,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { fill: "#0052b4", d: "M0 0h167v512H0z" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
      lineNumber: 9,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { fill: "#d80027", d: "M345 0h167v512H345z" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
      lineNumber: 10,
      columnNumber: 9
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
    lineNumber: 7,
    columnNumber: 7
  }, void 0)
] }, void 0, true, {
  fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
  lineNumber: 5,
  columnNumber: 5
}, void 0);
function Xw(_) {
  return /* @__PURE__ */ L.jsxDEV("svg", { width: "1.25em", height: "1.25em", viewBox: "0 0 512 512", fill: "none", xmlns: "http://www.w3.org/2000/svg", ..._, children: [
    /* @__PURE__ */ L.jsxDEV("g", { clipPath: "url(#clip0_582_5480)", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z", fill: "#F0F0F0" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
        lineNumber: 7,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M512 256C512 114.616 397.384 0 256 0C205.92 0 159.206 14.395 119.748 39.251L175.861 63.092L100.174 95.25L175.861 127.407L100.174 159.563L175.861 191.718L100.174 223.869L175.861 256.018L100.174 288.174L175.861 320.328L100.174 352.479L175.861 384.633L100.174 416.789L175.861 448.94L119.773 472.768C159.226 497.612 205.93 512 256 512C397.384 512 512 397.384 512 256Z", fill: "#751A46" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
        lineNumber: 8,
        columnNumber: 7
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 6,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ L.jsxDEV("defs", { children: /* @__PURE__ */ L.jsxDEV("clipPath", { id: "clip0_582_5480", children: /* @__PURE__ */ L.jsxDEV("rect", { width: "512", height: "512", fill: "white" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 12,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 11,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 10,
      columnNumber: 5
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
    lineNumber: 5,
    columnNumber: 5
  }, this);
}
function Kw(_) {
  return /* @__PURE__ */ L.jsxDEV("svg", { width: "1.25em", height: "1.25em", viewBox: "0 0 512 512", fill: "none", xmlns: "http://www.w3.org/2000/svg", ..._, children: [
    /* @__PURE__ */ L.jsxDEV("g", { clipPath: "url(#clip0_582_5992)", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z", fill: "#F0F0F0" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 7,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M244.87 255.999H512C512 232.893 508.92 210.509 503.181 189.216H244.87V255.999Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 8,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M244.87 122.434H474.426C458.755 96.8619 438.718 74.2589 415.356 55.6509H244.87V122.434Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 9,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M256 511.999C316.249 511.999 371.626 491.175 415.356 456.347H96.644C140.374 491.175 195.751 511.999 256 511.999Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 10,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M37.574 389.564H474.426C487.007 369.035 496.764 346.595 503.181 322.781H8.819C15.236 346.595 24.993 369.035 37.574 389.564Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 11,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M118.584 39.977H141.913L120.213 55.742L128.502 81.251L106.803 65.486L85.104 81.251L92.264 59.214C73.158 75.129 56.412 93.775 42.612 114.551H50.087L36.274 124.586C34.122 128.176 32.058 131.823 30.08 135.524L36.676 155.825L24.37 146.884C21.311 153.365 18.513 159.992 15.998 166.757L23.265 189.125H50.087L28.387 204.89L36.676 230.399L14.977 214.634L1.979 224.078C0.678 234.536 0 245.188 0 255.999H256C256 114.615 256 97.947 256 -0.000976562C205.428 -0.000976562 158.285 14.669 118.584 39.977ZM128.502 230.399L106.803 214.634L85.104 230.399L93.393 204.89L71.693 189.125H98.515L106.803 163.616L115.091 189.125H141.913L120.213 204.89L128.502 230.399ZM120.213 130.316L128.502 155.825L106.803 140.06L85.104 155.825L93.393 130.316L71.693 114.551H98.515L106.803 89.042L115.091 114.551H141.913L120.213 130.316ZM220.328 230.399L198.629 214.634L176.93 230.399L185.219 204.89L163.519 189.125H190.341L198.629 163.616L206.917 189.125H233.739L212.039 204.89L220.328 230.399ZM212.039 130.316L220.328 155.825L198.629 140.06L176.93 155.825L185.219 130.316L163.519 114.551H190.341L198.629 89.042L206.917 114.551H233.739L212.039 130.316ZM212.039 55.742L220.328 81.251L198.629 65.486L176.93 81.251L185.219 55.742L163.519 39.977H190.341L198.629 14.468L206.917 39.977H233.739L212.039 55.742Z", fill: "#0052B4" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 12,
        columnNumber: 7
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 6,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ L.jsxDEV("defs", { children: /* @__PURE__ */ L.jsxDEV("clipPath", { id: "clip0_582_5992", children: /* @__PURE__ */ L.jsxDEV("rect", { y: "-0.000976562", width: "512", height: "512", fill: "white" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 16,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 15,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 14,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
    lineNumber: 5,
    columnNumber: 5
  }, this);
}
const U0 = [
  {
    name: "English",
    key: "en",
    Flag: Kw
  },
  {
    name: "Arabic",
    key: "ar",
    direction: "rtl",
    Flag: Xw
  },
  {
    name: "FranÃ§ais",
    key: "fr",
    Flag: qw
  }
], Zw = "en", eo = z0(
  V0(
    (_, C) => ({
      locale: Zw,
      setLocale: (b) => _((T) => ({ ...T, locale: b })),
      isRTL: () => {
        const b = C(), T = U0.find((X) => X.key === b.locale);
        return T != null && T.direction ? T.direction === "rtl" : false;
      },
      t: (b) => {
        const T = C();
        return Gw[T.locale][b] || b;
      }
    }),
    { name: "tkTransStore" }
  )
);
function GC(_) {
  var C, b, T = "";
  if (typeof _ == "string" || typeof _ == "number")
    T += _;
  else if (typeof _ == "object")
    if (Array.isArray(_)) {
      var X = _.length;
      for (C = 0; C < X; C++)
        _[C] && (b = GC(_[C])) && (T && (T += " "), T += b);
    } else
      for (b in _)
        _[b] && (T && (T += " "), T += b);
  return T;
}
function di() {
  for (var _, C, b = 0, T = "", X = arguments.length; b < X; b++)
    (_ = arguments[b]) && (C = GC(_)) && (T && (T += " "), T += C);
  return T;
}
const Jw = () => {
  const { t: _, locale: C, setLocale: b } = eo();
  return /* @__PURE__ */ L.jsxDEV("div", { id: "translaterView", className: "view-container", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { children: _("view.translater.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
        lineNumber: 10,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: _("view.translater.subtitle") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
        lineNumber: 11,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
      lineNumber: 9,
      columnNumber: 7
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("div", { className: "tk-languages", children: /* @__PURE__ */ L.jsxDEV("ul", { children: U0.map(
      (T) => /* @__PURE__ */ L.jsxDEV("li", { children: /* @__PURE__ */ L.jsxDEV(
        "button",
        {
          className: di("tk-languages-item", T.key === C && "selected"),
          onClick: () => b(T.key),
          children: [
            T.Flag && /* @__PURE__ */ L.jsxDEV(T.Flag, {}, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
              lineNumber: 22,
              columnNumber: 35
            }, void 0),
            T.name
          ]
        },
        void 0,
        true,
        {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
          lineNumber: 18,
          columnNumber: 15
        },
        void 0
      ) }, T.key, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
        lineNumber: 17,
        columnNumber: 13
      }, void 0)
    ) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
      lineNumber: 15,
      columnNumber: 9
    }, void 0) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
      lineNumber: 14,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
    lineNumber: 8,
    columnNumber: 5
  }, void 0);
}, e5 = () => {
  const { t: _ } = eo();
  return /* @__PURE__ */ L.jsxDEV("div", { id: "aboutView", className: "view-container", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { children: _("view.about.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 10,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: _("view.about.subtitle") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 11,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
      lineNumber: 9,
      columnNumber: 7
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-content", children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: "Introduction" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 18,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 17,
          columnNumber: 11
        }, void 0),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body", children: /* @__PURE__ */ L.jsxDEV("p", { children: "We understand that the internet should be accessible to anyone and weâ€™re committed to maintaining standards that enable accessibility for everyone, in spite of their situation or ability.In line with our vision to make the web accessible for everyone, we strive to maintain the best possible accessibility standards by using the Web Content Accessibility Guidelines 2.1 (WCAG 2.1) level AA success criteria as our model.The WCAG is a set of guidelines that were established by the World Wide Web Consortiumâ€™s (W3C) Web Accessibility Initiative, that describe how to make all web content accessible to a broad range of people with disabilities.We use a web accessibility interface that helps people with disabilities to adjust our websiteâ€™s UI and design to meet their specific needs." }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 21,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 20,
          columnNumber: 11
        }, void 0)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 16,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: "Disclaimer" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 27,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 26,
          columnNumber: 11
        }, void 0),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body", children: /* @__PURE__ */ L.jsxDEV("p", { children: "We aim to provide the highest standards of accessibility on our website, because we understand the moral and practical importance of being compliant with the WCAG 2.1 AA standards. We perform regular scans to identify and fix any accessibility issues that may arise. Despite our best efforts to uphold the highest possible accessibility standards on our website, you may find that there may be some pages or components of our website that may fall short of accessibility standards. This may be because we have not yet identified, or are currently in the process of identifying the best possible solution for such a problem." }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 30,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 29,
          columnNumber: 11
        }, void 0)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 25,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: "Accessibility Assistant" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 36,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 35,
          columnNumber: 11
        }, void 0),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body", children: /* @__PURE__ */ L.jsxDEV("p", { children: "To enable the accessibility assistant on our website, navigate to the accessibility icon at the corner of the page and click it. The menu will appear. You can then interact with the icons and options to suit your specific needs.We are able to make websites accessible to people with disabilities by providing specialized profiles through the Accessibility Assistant. The disability profiles supported on our website are:Blind (screen reader/braille):This profile enables people who are blind to use the website by eliminating non-essential elements from the accessibility tree. It also adjusts the website to be compatible with screen-readers such as JAWS, NVDA, and VoiceOver.Vision Impaired Profile:This profile adjusts the website so that it is accessible to people who have visual impairments by making the onscreen features more prominent and easy to read. It helps people with Glaucoma, age-related eyesight degradation, etc.Seizure secure:This profile provides various assistive features to help users with seizure disorders including pausing/stopping all animations, flashes, and multimedia.Motor Impaired:This profile significantly reduces the hassle involved in navigating a website with a keyboard. Your customers can easily use the keyboard Tab, Shift+Tab, and the Enter keys to access website elements.Focus (ADHD):This profile reduces distractions and noise, so people with ADHD and neurodevelopmental disorders can browse, read, and focus on the essential elements of a website.Dyslexia:This profile makes it easier for people with learning difficulties like Dyslexia can easily understand the content of web pages." }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 39,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 38,
          columnNumber: 11
        }, void 0)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 34,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
      lineNumber: 14,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
    lineNumber: 8,
    columnNumber: 5
  }, void 0);
}, jC = {
  displayAsAside: false,
  oversizedWidget: false,
  widgetFamilyFont: null
}, uv = z0(
  V0(
    (_, C) => ({
      settings: { ...jC },
      getSetting: (b) => C().settings[b],
      setSettings: (b) => _((T) => ({
        settings: { ...T.settings, ...b }
      })),
      reset: () => _({ settings: { ...jC } }),
      set: (b) => _((T) => ({ ...T, ...b }))
    }),
    { name: "tkSettingsStore" }
  )
);
function qC({
  Icon: _,
  iconSize: C = 16,
  label: b,
  steps: T,
  selectedStep: X,
  isActive: P,
  next: g,
  className: ge,
  children: J
}) {
  const Q = Kt.useId(), ve = (X == null ? void 0 : X.Icon) || _, W = (X == null ? void 0 : X.iconSize) || C;
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-steps-controller", P && "tk-steps-controller--active", ge), onClick: g, children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__container", children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__icon", children: ve && /* @__PURE__ */ L.jsxDEV(ve, { size: W }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
        lineNumber: 46,
        columnNumber: 24
      }, this) }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
        lineNumber: 45,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__content tk-steps-controller__content", children: b }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
        lineNumber: 49,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 44,
      columnNumber: 7
    }, this),
    J && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__more", children: J }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 54,
      columnNumber: 20
    }, this),
    T.length && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__steps", children: T.map((Z, q) => /* @__PURE__ */ L.jsxDEV("div", { className: di("step-item", X && X.value === Z.value && "step-item--selected"), children: /* @__PURE__ */ L.jsxDEV("span", { className: "step-item__name", children: Z.name }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 59,
      columnNumber: 13
    }, this) }, `step-${Q}-${q}`, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 58,
      columnNumber: 11
    }, this)) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 56,
      columnNumber: 25
    }, this),
    X && P && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__selected-item", children: X.name }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 63,
      columnNumber: 38
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
    lineNumber: 42,
    columnNumber: 5
  }, this);
}
const Ki = {
  global: {
    layoutIconSize: 18,
    featuresIconSize: 24,
    settingsIconSize: 24
  },
  features: {
    textSize: {
      label: "feature.textSize",
      Icon: NC
    },
    lineHeight: {
      label: "feature.lineHeight",
      Icon: dw
    },
    wordSpacing: {
      label: "feature.wordSpacing",
      Icon: fw
    },
    textAlign: {
      label: "feature.textAlign",
      Icon: Nw
    },
    highlightTitles: {
      label: "feature.highlightTitles",
      Icon: yw
    },
    highlightLinks: {
      label: "feature.highlightLinks",
      Icon: Cw
    },
    saturation: {
      label: "feature.saturation",
      Icon: TC
    },
    noTransitions: {
      label: "feature.noTransitions",
      Icon: pw
    },
    hiddenImages: {
      label: "feature.hiddenImages",
      Icon: gw
    },
    invertColors: {
      label: "feature.invertColors",
      Icon: Sw
    },
    monochrome: {
      label: "feature.monochrome",
      Icon: TC
    },
    readingGuide: {
      label: "feature.readingGuide",
      Icon: Rw
    },
    bigCursor: {
      label: "feature.bigCursor",
      Icon: _w
    },
    fonts: {
      label: "feature.fonts",
      Icon: uw
    }
  },
  settings: {
    displayAsAside: {
      label: "settings.option.display",
      Icon: Ew
    },
    oversizedWidget: {
      label: "settings.option.oversized",
      Icon: KR
    },
    widgetFamilyFont: {
      label: "settings.option.font",
      Icon: NC
    }
  }
};
function t5({
  settingKey: _,
  steps: C,
  initValue: b = null,
  className: T = null
}) {
  const { t: X } = eo(), { getSetting: P, setSettings: g } = uv();
  Kt.useEffect(() => {
    g({ [_]: b });
  }, [b]);
  const ge = C.find((ee) => ee.value === P(_)) || null, J = Ki.settings[_].label, Q = Ki.settings[_].Icon, ve = Ki.global.settingsIconSize, W = (ee) => ee < C.length - 1 ? C[ee + 1] : C[0], Z = (ee) => C.findIndex((ie) => ie.value === ee), q = b && ge ? ge.value == b : false, fe = () => {
    const ee = P(_);
    if ((ee ?? null) === null)
      g({ [_]: C[0].value });
    else {
      const ie = Z(ee);
      g({ [_]: W(ie).value });
    }
  };
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-cell", T), children: /* @__PURE__ */ L.jsxDEV(
    qC,
    {
      Icon: Q,
      iconSize: ve,
      label: X(J),
      steps: C,
      selectedStep: ge,
      isActive: q,
      next: fe,
      className: "tk-steps-controller--inline"
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/SettingsStepsController.tsx",
      lineNumber: 58,
      columnNumber: 7
    },
    this
  ) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/SettingsStepsController.tsx",
    lineNumber: 57,
    columnNumber: 5
  }, this);
}
function XC({
  Icon: _,
  iconSize: C = 16,
  label: b,
  isChecked: T,
  handleToggleChange: X,
  className: P = null,
  children: g
}) {
  const ge = Kt.useId();
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-toggle-controller", T && "tk-toggle-controller--active", P), onClick: (J) => J.stopPropagation(), children: [
    /* @__PURE__ */ L.jsxDEV("input", { type: "checkbox", id: ge, checked: T, onChange: X }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
      lineNumber: 28,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ L.jsxDEV("label", { htmlFor: ge, children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-toggle-controller__container", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__icon", children: _ && /* @__PURE__ */ L.jsxDEV(_, { size: C }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 33,
          columnNumber: 20
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 32,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__content tk-toggle-controller__content", children: b }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 36,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "indicator", children: /* @__PURE__ */ L.jsxDEV("div", { className: "indicator__puce" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 41,
          columnNumber: 11
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 40,
          columnNumber: 9
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
        lineNumber: 31,
        columnNumber: 7
      }, this),
      g && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-toggle-controller__more", children: g }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
        lineNumber: 45,
        columnNumber: 20
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
      lineNumber: 29,
      columnNumber: 5
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
    lineNumber: 27,
    columnNumber: 10
  }, this);
}
function FC({
  settingKey: _,
  initValue: C = false,
  className: b = null
}) {
  const { t: T } = eo(), { getSetting: X, setSettings: P } = uv(), g = Ki.settings[_].label, ge = Ki.settings[_].Icon, J = Ki.global.settingsIconSize;
  Kt.useEffect(() => {
    P({ [_]: C });
  }, [C]);
  const Q = () => P({ [_]: !X(_) });
  return /* @__PURE__ */ L.jsxDEV(
    XC,
    {
      Icon: ge,
      iconSize: J,
      label: T(g),
      isChecked: X(_),
      handleToggleChange: Q,
      className: di("tk-cell", b)
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/SettingsToggleController.tsx",
      lineNumber: 35,
      columnNumber: 5
    },
    this
  );
}
const n5 = () => {
  const { t: _ } = eo(), { settings: C } = uv(), b = [
    { name: "System", value: "" },
    { name: "Roboto", value: "roboto" },
    { name: "Montserrat", value: "montserrat" }
  ];
  return /* @__PURE__ */ L.jsxDEV("div", { id: "settingsView", className: "view-container", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { children: _("view.settings.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 21,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: _("view.settings.subtitle") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 22,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
      lineNumber: 20,
      columnNumber: 7
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: _("view.settings.interface.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 27,
        columnNumber: 11
      }, void 0) }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 26,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body tk-cells-column", children: [
        /* @__PURE__ */ L.jsxDEV(
          FC,
          {
            settingKey: "displayAsAside",
            initValue: C.displayAsAside
          },
          void 0,
          false,
          {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
            lineNumber: 31,
            columnNumber: 11
          },
          void 0
        ),
        /* @__PURE__ */ L.jsxDEV(
          FC,
          {
            settingKey: "oversizedWidget",
            initValue: C.oversizedWidget
          },
          void 0,
          false,
          {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
            lineNumber: 35,
            columnNumber: 11
          },
          void 0
        ),
        /* @__PURE__ */ L.jsxDEV(
          t5,
          {
            settingKey: "widgetFamilyFont",
            steps: b,
            initValue: C.widgetFamilyFont
          },
          void 0,
          false,
          {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
            lineNumber: 39,
            columnNumber: 11
          },
          void 0
        )
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 30,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
      lineNumber: 25,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
    lineNumber: 19,
    columnNumber: 5
  }, void 0);
};
function r5({
  profile: _,
  className: C = null
}) {
  const { applyProfileFeatures: b, isProfileChecked: T, reset: X } = ov(), P = Kt.useId(), g = Ki.global.featuresIconSize, ge = T(_.features), J = () => ge ? X() : b(_.features);
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-cell tk-profile-switch highlight-if-has-checked", C), onClick: (Q) => Q.stopPropagation(), children: [
    /* @__PURE__ */ L.jsxDEV("input", { type: "checkbox", id: P, checked: ge, onChange: J }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
      lineNumber: 29,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ L.jsxDEV("label", { htmlFor: P, children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__container", children: [
        _.Icon ? /* @__PURE__ */ L.jsxDEV(_.Icon, { size: g }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 32,
          columnNumber: 25
        }, this) : /* @__PURE__ */ L.jsxDEV(YC, { size: g }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 32,
          columnNumber: 60
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__content tk-flex tk-flex-col tk-gap-1", children: [
          /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__title tk-font-semibold", children: _.title }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
            lineNumber: 34,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ L.jsxDEV("div", { children: _.shortDescription }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
            lineNumber: 35,
            columnNumber: 11
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 33,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "indicator", children: /* @__PURE__ */ L.jsxDEV("div", { className: "indicator__puce" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 38,
          columnNumber: 11
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 37,
          columnNumber: 9
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
        lineNumber: 31,
        columnNumber: 7
      }, this),
      ge && _.description && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__more", children: _.description }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
        lineNumber: 41,
        columnNumber: 45
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
      lineNumber: 30,
      columnNumber: 5
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
    lineNumber: 28,
    columnNumber: 10
  }, this);
}
const i5 = ({ title: _, Icon: C, className: b, children: T }) => {
  const [X, P] = Kt.useState(false);
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-accordion", "rounded-md p-2 mb-1", b), children: [
    /* @__PURE__ */ L.jsxDEV(
      "div",
      {
        className: "tk-accordion__head tk-text-lg tk-p-2 tk-flex tk-items-center tk-justify-between",
        onClick: () => P(!X),
        children: [
          /* @__PURE__ */ L.jsxDEV("h3", { className: "tk-accordion__head__title", children: [
            C && /* @__PURE__ */ L.jsxDEV(C, { size: 18 }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
              lineNumber: 23,
              columnNumber: 23
            }, void 0),
            _
          ] }, void 0, true, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
            lineNumber: 22,
            columnNumber: 11
          }, void 0),
          /* @__PURE__ */ L.jsxDEV(cw, { className: di("tk-origin-center", X && "tk-rotate-90") }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
            lineNumber: 26,
            columnNumber: 11
          }, void 0)
        ]
      },
      void 0,
      true,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
        lineNumber: 18,
        columnNumber: 7
      },
      void 0
    ),
    X && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-accordion__content tk-mt-2", children: T }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
      lineNumber: 28,
      columnNumber: 20
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
    lineNumber: 17,
    columnNumber: 5
  }, void 0);
}, a5 = [
  {
    id: 1,
    title: "Motor Impaired",
    shortDescription: "Manipulating a mouse and keyboard to navigate sites",
    description: "Manipulating a mouse and keyboard to navigate sites isnâ€™t always easy for people with motor impairments. UserWay consults with motor-impaired individuals to develop tools that can help. This profile provides options that can make site navigation much less complicated.",
    Icon: ZR,
    checked: false,
    enable: true,
    // Play Animation | Tooltips!
    features: { noTransitions: true }
  },
  {
    id: 2,
    title: "Blind",
    shortDescription: "Optimize website for screen-readers",
    description: "When a website isnâ€™t structured properly, the assistive technologies the blind rely upon arenâ€™t effective. And if navigation and shopping carts present barriers to access, these visitors have no choice but to abandon inaccessible sites.",
    Icon: lw,
    checked: false,
    enable: true,
    // Read Normal!
    features: { readingGuide: true }
  },
  {
    id: 3,
    title: "Color Blind",
    shortDescription: "",
    description: "Since everyone doesnâ€™t see colors the same way, UserWay works with color blind individuals to determine what features they find helpful, then groups them together in this profile to provide relevant suggestions.",
    Icon: mw,
    checked: false,
    enable: true,
    // Smart Contrast! | High Saturation
    features: { textSize: -1, wordSpacing: 1, saturation: "high", fonts: "dyslexia" }
  },
  {
    id: 4,
    title: "Dyslexia",
    shortDescription: "",
    description: "It is estimated that 1 in 5 people worldwide have dyslexia, but many have not been diagnosed. This profile provides customization options that can help improve reading comprehension and fluency.",
    Icon: bw,
    checked: false,
    enable: true,
    features: { noTransitions: true, fonts: "dyslexia" }
  },
  {
    id: 5,
    title: "Visually-impaired",
    shortDescription: "",
    description: "There are a number of adjustments that can make websites easier to navigate and read for people with impaired vision. This profile provides suggestions that can be helpful for a variety of conditions.",
    Icon: hw,
    checked: false,
    enable: true,
    // Bigger Text | Play animation | Legible font | Big Cursor | Tooltips! | High Saturation
    features: { bigCursor: true, noTransitions: true, textSize: 2, saturation: "high", fonts: "legible" }
  },
  {
    id: 6,
    title: "Cognitive & Learning",
    shortDescription: "Assists with reading & focusing",
    description: "Cognitive impairments and learning disabilities can have a profound effect on reading comprehension. The tools included in this profile can help improve reading experiences and help viewers identify relevant information.",
    Icon: Tw,
    checked: false,
    enable: true,
    // Smart Contrast! | Bigger Text | Play Animation | Reading Guide | Tooltips!
    features: { textSize: 2, noTransitions: true, readingGuide: true }
  },
  {
    id: 7,
    title: "Seizure & Epileptic",
    shortDescription: "Clear flashes & reduces color",
    description: "Flashing page elements, animations, and videos can sometimes trigger seizures in people with epilepsy and similar conditions. This profile provides a way to pause animations and other helpful customizations.",
    Icon: ow,
    checked: false,
    enable: true,
    // Play Animation | Low Saturation!
    features: { monochrome: true, noTransitions: true }
  },
  {
    id: 8,
    title: "ADHD Friendly Profile",
    shortDescription: "More focus & fewer distractions",
    description: "A number of tools are available that can help visitors stay focused as they move through a webpage. The recommendations included in this profile may help alleviate distractions to improve reading comprehension.",
    Icon: vw,
    checked: false,
    enable: true,
    // Play Animation | Reading Mask | Low saturation!
    features: { monochrome: true, noTransitions: true, readingGuide: true }
  }
], l5 = ({ className: _ }) => {
  const { t: C } = eo(), b = a5.filter((T) => T.enable);
  return /* @__PURE__ */ L.jsxDEV(i5, { className: di("widget-section", _), title: C("profile.section.title"), Icon: YC, children: /* @__PURE__ */ L.jsxDEV("div", { className: "tk-cells-column", children: b.map(
    (T) => /* @__PURE__ */ L.jsxDEV(r5, { profile: T }, T.id, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfilesSection.tsx",
      lineNumber: 34,
      columnNumber: 22
    }, void 0)
  ) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfilesSection.tsx",
    lineNumber: 32,
    columnNumber: 7
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfilesSection.tsx",
    lineNumber: 31,
    columnNumber: 5
  }, void 0);
};
function rc({
  featureKey: _,
  initValue: C = false,
  className: b = null
}) {
  const { t: T } = eo(), { getFeature: X, setFeatures: P } = ov(), g = Ki.features[_].label, ge = Ki.features[_].Icon, J = Ki.global.featuresIconSize;
  Kt.useEffect(() => {
    P({ [_]: C });
  }, [C]);
  const Q = X(_), ve = () => P({ [_]: !X(_) });
  return /* @__PURE__ */ L.jsxDEV(
    XC,
    {
      Icon: ge,
      iconSize: J,
      label: T(g),
      isChecked: Q,
      handleToggleChange: ve,
      className: di("tk-feature-cell", Q && "tk-active", b)
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeatureToggleController.tsx",
      lineNumber: 35,
      columnNumber: 8
    },
    this
  );
}
class o5 {
  warn(C) {
    const b = "Accessibility: ";
    console.warn ? console.warn(b + C) : console.log(b + C);
  }
  getDataInitAttr(C) {
    return `data-init-${C.toLowerCase()}`;
  }
  // return height in percentage
  getElementLineHeightInPercent(C) {
    const b = getComputedStyle(C).fontSize, X = getComputedStyle(C).lineHeight.replace("px", ""), P = b.replace("px", "");
    return parseInt(X) * 100 / parseInt(P);
  }
  getFormattedDim(C) {
    C = String(C);
    const b = function(T, X) {
      return {
        size: T.substring(0, T.indexOf(X)),
        suffix: X
      };
    };
    if (C.indexOf("%") > -1)
      return b(C, "%");
    if (C.indexOf("px") > -1)
      return b(C, "px");
    if (C.indexOf("em") > -1)
      return b(C, "em");
    if (C.indexOf("rem") > -1)
      return b(C, "rem");
    if (C.indexOf("pt") > -1)
      return b(C, "pt");
    if (C === "auto")
      return b(C, "");
    throw Error(`Invalid dimension format ${C}`);
  }
}
class u5 {
  constructor(C = {}) {
    Jl(this, "_html");
    Jl(this, "_body");
    Jl(this, "_allElms");
    Jl(this, "_options");
    Jl(this, "options");
    Jl(this, "_initValues");
    Jl(this, "_defaultStateValues");
    Jl(this, "_sessionState");
    Jl(this, "_common");
    this._html = document.documentElement || document.getElementsByTagName("html")[0], this._body = document.body || document.getElementsByTagName("body")[0], this._allElms = document.querySelectorAll("body :not(#a11yRoot, #a11yRoot *, script, style)"), this._common = new o5(), this._options = this.defaultOptions, this.options = { ...this._options, ...C }, this._initValues = {
      html: {},
      body: {}
    }, this._defaultStateValues = {
      textSize: 0,
      textSpace: 0,
      lineHeight: 0,
      filter: {
        saturation: "default",
        invertColors: false,
        grayscale: false
      },
      underlineLinks: false,
      bigCursor: false,
      readingGuide: false
    }, this._sessionState = {
      textSize: 0,
      textSpace: 0,
      lineHeight: 0,
      filter: {
        saturation: "default",
        invertColors: false,
        grayscale: false
      },
      underlineLinks: false,
      bigCursor: false,
      readingGuide: false
    }, this.initData();
  }
  get defaultOptions() {
    return {
      textSizeMode: "PIXEL"
    };
  }
  get sessionState() {
    return this._sessionState;
  }
  set sessionState(C) {
    this._sessionState = C;
  }
  initData() {
    this.initFontSize(), this.initLineHeight(), this.initBg();
  }
  initFontSize() {
    if (this.options.textSizeMode === "EM") {
      const C = this._common.getFormattedDim(getComputedStyle(this._html).fontSize), b = this._common.getFormattedDim(getComputedStyle(this._body).fontSize);
      if (C && b) {
        const T = String(C.size / 16 * 100);
        this._initValues.html && (this._initValues.html.fontSize = `${T}%`), this._html.style.fontSize = `${T}%`;
      }
    }
  }
  initLineHeight() {
    const C = this._common.getElementLineHeightInPercent(this._html);
    this.options.textSizeMode === "EM" && C && (this._html.style.lineHeight = `${C}%`, this._initValues.html && (this._initValues.html.lineHeight = `${C}%`));
  }
  initBg() {
    this._html.style.backgroundColor = "rgba(255, 255, 255, 100)";
  }
  // fontSize | lineHeight | wordSpacing...........................................
  alterProperty(C, b = 0) {
    var X;
    const T = {
      fontSize: { PIXEL: { factor: 2, default: 100 }, EM: { factor: 10, default: 100 } },
      lineHeight: { PIXEL: { factor: 2, default: 100 }, EM: { factor: 10, default: 150 } },
      wordSpacing: { PIXEL: { factor: 1, default: 0 }, EM: { factor: 1, default: 0 } }
    };
    if (this.options.textSizeMode === "PIXEL" || ["wordSpacing"].includes(C))
      for (let P = 0; P < this._allElms.length; P++) {
        const g = getComputedStyle(this._allElms[P])[C];
        if (g && g.indexOf("px") > -1) {
          const ge = this._common.getDataInitAttr(C);
          this._allElms[P].getAttribute(ge) || this._allElms[P].setAttribute(ge, g);
          const J = ((X = this._allElms[P].getAttribute(ge)) == null ? void 0 : X.replace("px", "")) || g, Q = parseInt(J) + b * T[C].PIXEL.factor;
          this._allElms[P].style[C] = `${String(Q)}px`;
        }
      }
    else if (this.options.textSizeMode === "EM") {
      const g = 1 * T[C].EM.default + b * T[C].EM.factor;
      this._html.style[C] = `${g}%`;
    }
  }
  alterFilter(C, b) {
    this._sessionState.filter[C] = b;
    const T = this.getFilterValues();
    this.rootElementToggleClass(T.filters !== "", "tk-no-trans"), this._html.style.filter = T.filters, document.querySelector(".a11y-turnkey") && (document.querySelector(".a11y-turnkey").style.filter = T.invertFilter);
  }
  getFilterValues() {
    const C = [], b = [], T = {
      default: 1,
      low: 0.5,
      high: 3,
      desaturate: 0
    };
    return this._sessionState.filter.saturation !== this._defaultStateValues.filter.saturation && C.push(`saturate(${T[this._sessionState.filter.saturation]})`), this._sessionState.filter.invertColors !== this._defaultStateValues.filter.invertColors && (C.push(`invert(${this._sessionState.filter.invertColors ? "1" : "0"})`), b.push(`invert(${this._sessionState.filter.invertColors ? "1" : "0"})`)), this._sessionState.filter.grayscale !== this._defaultStateValues.filter.grayscale && C.push(`grayscale(${this._sessionState.filter.grayscale ? "1" : "0"})`), {
      filters: C.join(" "),
      invertFilter: b.join(" ")
    };
  }
  enableReadingGuide(C = false) {
    let b = document.querySelector(".access-read-guide-bar");
    b || (b = document.createElement("div"), b.classList.add("access-read-guide-bar"), document.body.appendChild(b)), b.style.display = C ? "block" : "none";
    const T = (X) => {
      if (b) {
        const P = X.pageY + 2;
        b.style.top = P + "px";
      }
    };
    C ? document.addEventListener("mousemove", T) : document.removeEventListener("mousemove", T);
  }
  enableBigCursor(C = false) {
    this.rootElementToggleClass(C, "_access_cursor");
  }
  enableEnableDyslexie(C = false) {
    this.rootElementToggleClass(C, "tk-dy");
  }
  enableHighlightTitles(C = false) {
    this.rootElementToggleClass(C, "tk-hltl");
  }
  enableHighlightLinks(C = false) {
    this.rootElementToggleClass(C, "tk-hllk");
  }
  enableHiddenImages(C = false) {
    this.rootElementToggleClass(C, "tk-hidden-img");
  }
  enableNoTransitions(C = false) {
    this.rootElementToggleClass(C, "tk-no-trans");
  }
  rootElementToggleClass(C = false, b) {
    C ? this._html.classList.add(b) : this._html.classList.remove(b);
  }
  alterFonts(C) {
    const b = ["tk-fonts--dyslexia", "tk-fonts--legible"];
    this.useOneOfClassList(`tk-fonts--${C}`, b);
  }
  textAlignSwitchClass(C) {
    const b = ["tk-align-initial", "tk-align-justify", "tk-align-left", "tk-align-right", "tk-align-center"];
    this.useOneOfClassList(`tk-align-${C}`, b);
  }
  useOneOfClassList(C, b) {
    this._html.classList.remove(...b), C && this._html.classList.add(C);
  }
}
function Yf({
  featureKey: _,
  steps: C,
  initValue: b = null,
  className: T = null
}) {
  const { t: X } = eo(), { getFeature: P, setFeatures: g } = ov(), ge = Ki.features[_].label, J = Ki.features[_].Icon, Q = Ki.global.featuresIconSize;
  Kt.useEffect(() => {
    g({ [_]: b });
  }, [b]);
  const ve = C.find((ee) => ee.value === P(_)) || null, W = (ee) => ee < C.length - 1 ? C[ee + 1] : C[0], Z = (ee) => C.findIndex((ie) => ie.value === ee), q = b && ve ? ve.value == b : false, fe = () => {
    const ee = P(_);
    if ((ee ?? null) === null)
      g({ [_]: C[0].value });
    else {
      const ie = Z(ee);
      g({ [_]: W(ie).value });
    }
  };
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-feature-cell", q && "tk-active", T), children: /* @__PURE__ */ L.jsxDEV(
    qC,
    {
      Icon: J,
      iconSize: Q,
      label: X(ge),
      steps: C,
      selectedStep: ve,
      isActive: q,
      next: fe,
      className: "tk-steps-controller--vertical-demo"
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeatureStepsController.tsx",
      lineNumber: 57,
      columnNumber: 5
    },
    this
  ) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeatureStepsController.tsx",
    lineNumber: 56,
    columnNumber: 10
  }, this);
}
const s5 = (window == null ? void 0 : window.AccessibilityTurnkeyOptions) || {}, Xi = new u5(s5), c5 = () => {
  const { settings: _ } = uv(), [C, b] = Kt.useState(false);
  Kt.useEffect(() => {
    b(_.oversizedWidget);
  }, [_.oversizedWidget]);
  const { features: T } = ov();
  Kt.useEffect(() => {
    Xi.alterProperty("fontSize", T.textSize);
  }, [T.textSize]), Kt.useEffect(() => {
    Xi.alterProperty("lineHeight", T.lineHeight);
  }, [T.lineHeight]), Kt.useEffect(() => {
    Xi.alterProperty("wordSpacing", T.wordSpacing);
  }, [T.wordSpacing]), Kt.useEffect(() => {
    Xi.enableHighlightTitles(T.highlightTitles);
  }, [T.highlightTitles]), Kt.useEffect(() => {
    Xi.enableHighlightLinks(T.highlightLinks);
  }, [T.highlightLinks]), Kt.useEffect(() => {
    Xi.textAlignSwitchClass(T.textAlign);
  }, [T.textAlign]), Kt.useEffect(() => {
    Xi.enableHiddenImages(T.hiddenImages);
  }, [T.hiddenImages]), Kt.useEffect(() => {
    Xi.alterFilter("invertColors", T.invertColors);
  }, [T.invertColors]), Kt.useEffect(() => {
    Xi.alterFilter("grayscale", T.monochrome);
  }, [T.monochrome]), Kt.useEffect(() => {
    Xi.alterFilter("saturation", T.saturation || "default");
  }, [T.saturation]), Kt.useEffect(() => {
    Xi.enableReadingGuide(T.readingGuide);
  }, [T.readingGuide]), Kt.useEffect(() => {
    Xi.alterFonts(T.fonts);
  }, [T.fonts]), Kt.useEffect(() => {
    Xi.enableNoTransitions(T.noTransitions);
  }, [T.noTransitions]), Kt.useEffect(() => {
    Xi.enableBigCursor(T.bigCursor);
  }, [T.bigCursor]);
  const X = [
    { name: "Small", value: -2, iconSize: 14 },
    { name: "", value: 0, iconSize: 16 },
    { name: "Big", value: 2, iconSize: 18 },
    { name: "Bigger", value: 4, iconSize: 20 }
  ], P = [
    { name: "Small", value: -2, iconSize: 14 },
    { name: "", value: 0, iconSize: 16 },
    { name: "Big", value: 2, iconSize: 18 },
    { name: "Bigger", value: 4, iconSize: 20 }
  ], g = [
    { name: "Small", value: -2, iconSize: 14 },
    { name: "", value: 0, iconSize: 16 },
    { name: "Big", value: 2, iconSize: 18 },
    { name: "Bigger", value: 4, iconSize: 20 }
  ], ge = [
    { name: "Left", value: "left", Icon: tw },
    { name: "Right", value: "right", Icon: nw },
    { name: "Center", value: "center", Icon: JR },
    { name: "Justify", value: "justify", Icon: ew }
  ], J = [
    { name: "Low", value: "low" },
    { name: "High", value: "high" },
    { name: "Desaturate", value: "desaturate" },
    { name: "Default", value: "default" }
  ], Q = [
    { name: "Dyslexia", value: "dyslexia" },
    { name: "Legible", value: "legible" }
  ];
  return /* @__PURE__ */ L.jsxDEV("div", { className: "widget-section", children: /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-grid", C && "tk-grid--xl"), children: [
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "textSize",
        steps: X,
        initValue: T.textSize
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 138,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "lineHeight",
        steps: P,
        initValue: T.lineHeight
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 144,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "wordSpacing",
        steps: g,
        initValue: T.wordSpacing
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 150,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "highlightTitles",
        initValue: T.highlightTitles,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 156,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "textAlign",
        steps: ge,
        initValue: T.textAlign
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 162,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "highlightLinks",
        initValue: T.highlightLinks,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 168,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "invertColors",
        initValue: T.invertColors,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 174,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "saturation",
        initValue: T.saturation,
        steps: J,
        className: "tk-span-2"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 180,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "noTransitions",
        initValue: T.noTransitions,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 187,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "fonts",
        initValue: T.fonts,
        steps: Q
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 193,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "hiddenImages",
        initValue: T.hiddenImages,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 199,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "bigCursor",
        initValue: T.bigCursor,
        className: "compact tk-span-2"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 205,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "readingGuide",
        initValue: T.readingGuide,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 211,
        columnNumber: 9
      },
      void 0
    )
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
    lineNumber: 137,
    columnNumber: 7
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
    lineNumber: 136,
    columnNumber: 5
  }, void 0);
}, f5 = ({ enableProfiles: _ = true }) => {
  const { t: C } = eo();
  return /* @__PURE__ */ L.jsxDEV("div", { id: "mainView", className: "view-container view-container--full", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { className: "widget__body__title", children: C("global.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
        lineNumber: 16,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: C("global.description") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
        lineNumber: 17,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
      lineNumber: 15,
      columnNumber: 7
    }, void 0),
    _ && /* @__PURE__ */ L.jsxDEV(l5, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
      lineNumber: 20,
      columnNumber: 26
    }, void 0),
    /* @__PURE__ */ L.jsxDEV(c5, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
      lineNumber: 22,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
    lineNumber: 14,
    columnNumber: 5
  }, void 0);
}, d5 = "#1e74e9", p5 = "#f2f7fa", v5 = "#EFEFEF", m5 = "#FFFFFF", h5 = "#100F0F", Wo = {
  primaryColor: d5,
  secondaryColor: p5,
  tertiaryColor: v5,
  quaternaryColor: m5,
  textColor: h5,
  xPosEntrypoint: 12,
  yPosEntrypoint: 12
}, y5 = ({
  primaryColor: _ = Wo.primaryColor,
  secondaryColor: C = Wo.secondaryColor,
  tertiaryColor: b = Wo.tertiaryColor,
  quaternaryColor: T = Wo.quaternaryColor,
  textColor: X = Wo.textColor,
  xPosEntrypoint: P = Wo.xPosEntrypoint,
  yPosEntrypoint: g = Wo.yPosEntrypoint
}) => {
  document.documentElement.style.setProperty("--tk-primary-color", _), document.documentElement.style.setProperty("--tk-secondary-color", C), document.documentElement.style.setProperty("--tk-tertiary-color", b), document.documentElement.style.setProperty("--tk-quaternary-color", T), document.documentElement.style.setProperty("--tk-text-color", X), document.documentElement.style.setProperty("--tk-entrypoint-x", `${P}px`), document.documentElement.style.setProperty("--tk-entrypoint-y", `${g}px`);
}, g5 = (_) => /* @__PURE__ */ L.jsxDEV("svg", { width: "104", height: "35", viewBox: "0 0 130 35", fill: "none", xmlns: "http://www.w3.org/2000/svg", ..._, children: [
  /* @__PURE__ */ L.jsxDEV("g", { clipPath: "url(#clip0_1136_982)", children: [
    /* @__PURE__ */ L.jsxDEV("path", { d: "M17.151 34.6565C26.6233 34.6565 34.3021 26.9777 34.3021 17.5054C34.3021 8.03316 26.6233 0.35437 17.151 0.35437C7.67873 0.35437 -6.10352e-05 8.03316 -6.10352e-05 17.5054C-6.10352e-05 26.9777 7.67873 34.6565 17.151 34.6565Z", fill: "#6869FF" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 7,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M16.5349 22.5525C15.7459 24.5626 14.9786 26.4971 14.2221 28.4208C13.9411 29.1449 13.6601 29.8798 13.3792 30.6038C13.0549 31.4576 12.6226 31.7278 11.9094 31.5225C11.0556 31.2739 10.5369 30.539 10.7638 29.7501C11.0664 28.7234 11.4339 27.7183 11.7797 26.7241C12.3309 25.1246 12.9036 23.5467 13.4332 21.9365C13.5737 21.4934 13.6709 21.007 13.6818 20.5315C13.7034 18.6294 13.6818 16.7166 13.6818 14.8145C13.6818 14.4146 13.5521 14.2741 13.1738 14.1769C11.0232 13.6149 8.88335 13.0313 6.74352 12.4369C5.97621 12.2316 5.63037 11.6048 5.87894 10.9455C6.09509 10.3619 6.65706 10.1134 7.39195 10.3079C8.6672 10.6321 9.93165 10.9671 11.2069 11.2913C12.3741 11.5939 13.5305 11.9722 14.7192 12.1775C16.5889 12.5018 18.4369 12.2208 20.2525 11.7128C22.0682 11.2157 23.9054 10.751 25.721 10.2863C26.337 10.1242 26.8233 10.2863 27.0935 10.7186C27.3637 11.1617 27.3745 11.6372 27.0179 12.0046C26.8017 12.2316 26.4667 12.3937 26.1533 12.4801C24.0675 13.0637 21.9709 13.6365 19.8743 14.1769C19.5068 14.2741 19.388 14.4471 19.3772 14.7929C19.3015 16.2843 19.107 17.7757 19.1502 19.2779C19.1826 20.3802 19.388 21.515 19.7122 22.5741C20.4255 24.8004 21.2792 26.9942 22.0465 29.2097C22.1654 29.5339 22.2195 29.9014 22.2195 30.2472C22.2087 31.155 21.5062 31.6305 20.6524 31.3387C20.0472 31.1334 19.6581 30.7011 19.4312 30.0851C18.5558 27.7616 17.6588 25.438 16.7726 23.1144C16.7078 22.9523 16.6321 22.7902 16.5241 22.5525H16.5349Z", fill: "white" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 8,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M19.1504 8.21125C19.1504 9.70264 17.9832 10.9022 16.5026 10.9022C15.0545 10.9022 13.844 9.71345 13.8224 8.26528C13.8008 6.81711 15.0436 5.56348 16.4918 5.56348C17.94 5.56348 19.1396 6.75227 19.1504 8.21125Z", fill: "white" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 9,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("g", { opacity: "0.1", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M17.2591 22.5523C16.4702 24.5625 15.7028 26.497 14.9463 28.4207C14.6653 29.1448 14.3844 29.8796 14.1034 30.6037C13.7792 31.4575 13.3469 31.7277 12.6336 31.5223C11.7798 31.2738 11.2611 30.5389 11.488 29.75C11.7906 28.7233 12.1581 27.7182 12.5039 26.7239C13.0551 25.1245 13.6279 23.5466 14.1574 21.9363C14.2979 21.4932 14.3952 21.0069 14.406 20.5314C14.4276 18.6293 14.406 16.7164 14.406 14.8144C14.406 14.4145 14.2763 14.274 13.898 14.1768C11.7474 13.6148 9.60757 13.0312 7.46774 12.4368C6.70043 12.2315 6.3546 11.6046 6.60316 10.9454C6.81931 10.3618 7.38128 10.1132 8.11617 10.3078C9.39142 10.632 10.6559 10.967 11.9311 11.2912C13.0983 11.5938 14.2547 11.9721 15.4435 12.1774C17.3131 12.5016 19.1612 12.2206 20.9768 11.7127C22.7924 11.2156 24.6296 10.7509 26.4452 10.2861C27.0612 10.124 27.5476 10.2862 27.8177 10.7184C28.0879 11.1615 28.0987 11.6371 27.7421 12.0045C27.5259 12.2314 27.1909 12.3936 26.8775 12.48C24.7917 13.0636 22.6951 13.6364 20.5985 14.1768C20.2311 14.274 20.1122 14.4469 20.1014 14.7928C20.0257 16.2842 19.8312 17.7756 19.8744 19.2778C19.9069 20.3801 20.1122 21.5149 20.4364 22.574C21.1497 24.8002 22.0035 26.9941 22.7708 29.2096C22.8896 29.5338 22.9437 29.9013 22.9437 30.2471C22.9329 31.1549 22.2304 31.6304 21.3766 31.3386C20.7714 31.1333 20.3824 30.701 20.1554 30.085C19.28 27.7614 18.383 25.4379 17.4968 23.1143C17.432 22.9522 17.3563 22.7901 17.2483 22.5523H17.2591Z", fill: "white" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
        lineNumber: 11,
        columnNumber: 11
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M19.8743 8.21112C19.8743 9.70252 18.7072 10.9021 17.2266 10.9021C15.7784 10.9021 14.568 9.71333 14.5464 8.26516C14.5248 6.81699 15.7676 5.56335 17.2158 5.56335C18.6639 5.56335 19.8635 6.75215 19.8743 8.21112Z", fill: "white" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
        lineNumber: 12,
        columnNumber: 11
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 10,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("g", { opacity: "0.2", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M17.2591 22.5523C16.4702 24.5625 15.7028 26.497 14.9463 28.4207C14.6653 29.1448 14.3844 29.8796 14.1034 30.6037C13.7792 31.4575 13.3469 31.7277 12.6336 31.5223C11.7798 31.2738 11.2611 30.5389 11.488 29.75C11.7906 28.7233 12.1581 27.7182 12.5039 26.7239C13.0551 25.1245 13.6279 23.5466 14.1574 21.9363C14.2979 21.4932 14.3952 21.0069 14.406 20.5314C14.4276 18.6293 14.406 16.7164 14.406 14.8144C14.406 14.4145 14.2763 14.274 13.898 14.1768C11.7474 13.6148 9.60757 13.0312 7.46774 12.4368C6.70043 12.2315 6.3546 11.6046 6.60316 10.9454C6.81931 10.3618 7.38128 10.1132 8.11617 10.3078C9.39142 10.632 10.6559 10.967 11.9311 11.2912C13.0983 11.5938 14.2547 11.9721 15.4435 12.1774C17.3131 12.5016 19.1612 12.2206 20.9768 11.7127C22.7924 11.2156 24.6296 10.7509 26.4452 10.2861C27.0612 10.124 27.5476 10.2862 27.8177 10.7184C28.0879 11.1615 28.0987 11.6371 27.7421 12.0045C27.5259 12.2314 27.1909 12.3936 26.8775 12.48C24.7917 13.0636 22.6951 13.6364 20.5985 14.1768C20.2311 14.274 20.1122 14.4469 20.1014 14.7928C20.0257 16.2842 19.8312 17.7756 19.8744 19.2778C19.9069 20.3801 20.1122 21.5149 20.4364 22.574C21.1497 24.8002 22.0035 26.9941 22.7708 29.2096C22.8896 29.5338 22.9437 29.9013 22.9437 30.2471C22.9329 31.1549 22.2304 31.6304 21.3766 31.3386C20.7714 31.1333 20.3824 30.701 20.1554 30.085C19.28 27.7614 18.383 25.4379 17.4968 23.1143C17.432 22.9522 17.3563 22.7901 17.2483 22.5523H17.2591Z", fill: "white" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
        lineNumber: 15,
        columnNumber: 11
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M19.8743 8.21112C19.8743 9.70252 18.7072 10.9021 17.2266 10.9021C15.7784 10.9021 14.568 9.71333 14.5464 8.26516C14.5248 6.81699 15.7676 5.56335 17.2158 5.56335C18.6639 5.56335 19.8635 6.75215 19.8743 8.21112Z", fill: "white" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
        lineNumber: 16,
        columnNumber: 11
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 14,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("g", { opacity: "0.3", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M17.9939 22.5523C17.2049 24.5625 16.4376 26.497 15.6811 28.4207C15.4001 29.1448 15.1191 29.8796 14.8381 30.6037C14.5139 31.4575 14.0816 31.7277 13.3684 31.5223C12.5146 31.2738 11.9958 30.5389 12.2228 29.75C12.5254 28.7233 12.8928 27.7182 13.2387 26.7239C13.7898 25.1245 14.3626 23.5466 14.8922 21.9363C15.0327 21.4932 15.1299 21.0069 15.1407 20.5314C15.1624 18.6293 15.1407 16.7164 15.1407 14.8144C15.1407 14.4145 15.0111 14.274 14.6328 14.1768C12.4822 13.6148 10.3423 13.0312 8.20251 12.4368C7.4352 12.2315 7.08937 11.6046 7.33793 10.9454C7.55408 10.3618 8.11605 10.1132 8.85094 10.3078C10.1262 10.632 11.3906 10.967 12.6659 11.2912C13.8331 11.5938 14.9894 11.9721 16.1782 12.1774C18.0479 12.5016 19.8959 12.2206 21.7115 11.7127C23.5272 11.2156 25.3644 10.7509 27.18 10.2861C27.796 10.124 28.2823 10.2862 28.5525 10.7184C28.8227 11.1615 28.8335 11.6371 28.4769 12.0045C28.2607 12.2314 27.9257 12.3936 27.6123 12.48C25.5265 13.0636 23.4299 13.6364 21.3333 14.1768C20.9658 14.274 20.847 14.4469 20.8362 14.7928C20.7605 16.2842 20.566 17.7756 20.6092 19.2778C20.6416 20.3801 20.847 21.5149 21.1712 22.574C21.8845 24.8002 22.7382 26.9941 23.5055 29.2096C23.6244 29.5338 23.6785 29.9013 23.6785 30.2471C23.6676 31.1549 22.9652 31.6304 22.1114 31.3386C21.5062 31.1333 21.1171 30.701 20.8902 30.085C20.0148 27.7614 19.1178 25.4379 18.2316 23.1143C18.1668 22.9522 18.0911 22.7901 17.983 22.5523H17.9939Z", fill: "white" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
        lineNumber: 19,
        columnNumber: 11
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M20.5983 8.21112C20.5983 9.70252 19.4311 10.9021 17.9505 10.9021C16.5024 10.9021 15.292 9.71333 15.2703 8.26516C15.2487 6.81699 16.4916 5.56335 17.9397 5.56335C19.3879 5.56335 20.5875 6.75215 20.5983 8.21112Z", fill: "white" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
        lineNumber: 20,
        columnNumber: 11
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 18,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M48.7191 27.7725L43.3587 9.2489H45.7471L49.8647 23.9035L53.9714 9.25971H56.3814L60.499 23.9035L64.6057 9.2489H67.0157L61.6553 27.7725H59.3642L55.1926 13.2476L51.021 27.7725H48.7299H48.7191Z", fill: "#020202" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 22,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M73.5649 28.1615C72.1816 28.1615 70.9928 27.8481 69.9985 27.2213C69.0042 26.5944 68.2261 25.7299 67.6858 24.6275C67.1454 23.5252 66.8752 22.2499 66.8752 20.8126C66.8752 19.3752 67.1454 18.0892 67.6966 16.9868C68.2477 15.8845 69.0259 15.0307 70.0201 14.4147C71.0252 13.7987 72.2032 13.4961 73.5541 13.4961C74.905 13.4961 76.137 13.8095 77.1421 14.4363C78.1472 15.0631 78.9145 15.9277 79.4548 17.0192C79.9952 18.1216 80.2546 19.386 80.2546 20.8126C80.2546 22.2391 79.9844 23.536 79.444 24.6383C78.9037 25.7407 78.1364 26.6053 77.1313 27.2213C76.1262 27.8481 74.9374 28.1507 73.5541 28.1507L73.5649 28.1615ZM73.5649 25.9892C75.0023 25.9892 76.0614 25.5137 76.7746 24.5519C77.4879 23.59 77.8337 22.3472 77.8337 20.8234C77.8337 19.2996 77.4771 18.0135 76.7638 17.0841C76.0506 16.1439 74.9806 15.6792 73.5649 15.6792C72.5922 15.6792 71.8033 15.8953 71.1765 16.3384C70.5497 16.7707 70.085 17.3759 69.7716 18.154C69.4582 18.9321 69.3068 19.8183 69.3068 20.8342C69.3068 22.3904 69.6635 23.6441 70.3876 24.5951C71.1117 25.5353 72.1708 26.0109 73.5649 26.0109V25.9892Z", fill: "#020202" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 23,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M88.1545 28.1507C86.501 28.1507 85.1393 27.7832 84.0802 27.0592C83.0211 26.3351 82.3726 25.3192 82.1349 24.0223L84.4801 23.6441C84.6638 24.4006 85.1069 24.995 85.7769 25.4381C86.4578 25.8812 87.2899 26.0973 88.295 26.0973C89.2352 26.0973 89.9809 25.9028 90.5321 25.5029C91.0725 25.1139 91.3534 24.5735 91.3534 23.8926C91.3534 23.5036 91.267 23.1902 91.0833 22.9416C90.8995 22.693 90.5321 22.4661 89.9701 22.25C89.4081 22.0338 88.5652 21.7744 87.4304 21.461C86.1984 21.1368 85.2366 20.8018 84.5341 20.456C83.8316 20.1101 83.3237 19.6994 83.0319 19.2455C82.7293 18.7808 82.578 18.2189 82.578 17.5488C82.578 16.7383 82.8049 16.025 83.248 15.409C83.6911 14.793 84.3179 14.3283 85.1177 13.9824C85.9174 13.6474 86.8468 13.4745 87.9167 13.4745C88.9867 13.4745 89.9161 13.6366 90.7482 13.9716C91.5804 14.3066 92.2504 14.7822 92.7584 15.3982C93.2663 16.0142 93.5689 16.7275 93.6662 17.538L91.321 17.9595C91.213 17.2246 90.8455 16.641 90.2403 16.2087C89.6351 15.7764 88.857 15.5495 87.9167 15.5171C87.0198 15.4954 86.2849 15.6575 85.7229 16.0034C85.1609 16.36 84.8799 16.8247 84.8799 17.4191C84.8799 17.765 84.988 18.0459 85.1933 18.2837C85.3987 18.5215 85.7985 18.7484 86.3605 18.9537C86.9225 19.1591 87.7654 19.4077 88.8462 19.6886C90.0674 20.002 91.04 20.3371 91.7425 20.6937C92.445 21.0612 92.9529 21.4826 93.2555 21.9798C93.5581 22.4769 93.7094 23.0821 93.7094 23.7954C93.7094 25.1355 93.2123 26.1838 92.2288 26.9511C91.2454 27.7184 89.8837 28.1075 88.1545 28.1075V28.1507Z", fill: "#020202" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 24,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M102.474 28.1615C101.091 28.1615 99.9021 27.8481 98.9078 27.2213C97.9136 26.5944 97.1354 25.7299 96.5951 24.6275C96.0547 23.5252 95.7845 22.2499 95.7845 20.8126C95.7845 19.3752 96.0547 18.0892 96.6059 16.9868C97.1571 15.8845 97.9352 15.0307 98.9295 14.4147C99.9345 13.7987 101.113 13.4961 102.463 13.4961C103.814 13.4961 105.046 13.8095 106.051 14.4363C107.056 15.0631 107.824 15.9277 108.364 17.0192C108.905 18.1216 109.164 19.386 109.164 20.8126C109.164 22.2391 108.894 23.536 108.353 24.6383C107.813 25.7407 107.046 26.6053 106.041 27.2213C105.036 27.8481 103.847 28.1507 102.463 28.1507L102.474 28.1615ZM102.474 25.9892C103.912 25.9892 104.971 25.5137 105.684 24.5519C106.397 23.59 106.743 22.3472 106.743 20.8234C106.743 19.2996 106.386 18.0135 105.673 17.0841C104.96 16.1439 103.89 15.6792 102.474 15.6792C101.502 15.6792 100.713 15.8953 100.086 16.3384C99.459 16.7707 98.9943 17.3759 98.6809 18.154C98.3675 18.9321 98.2162 19.8183 98.2162 20.8342C98.2162 22.3904 98.5728 23.6441 99.2969 24.5951C100.021 25.5353 101.08 26.0109 102.474 26.0109V25.9892Z", fill: "#020202" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 25,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M117.918 28.1615C116.534 28.1615 115.346 27.8481 114.351 27.2213C113.357 26.5944 112.579 25.7299 112.039 24.6275C111.498 23.5252 111.228 22.2499 111.228 20.8126C111.228 19.3752 111.498 18.0892 112.049 16.9868C112.601 15.8845 113.379 15.0307 114.373 14.4147C115.378 13.7987 116.556 13.4961 117.907 13.4961C119.258 13.4961 120.49 13.8095 121.495 14.4363C122.5 15.0631 123.267 15.9277 123.808 17.0192C124.348 18.1216 124.607 19.386 124.607 20.8126C124.607 22.2391 124.337 23.536 123.797 24.6383C123.257 25.7407 122.489 26.6053 121.484 27.2213C120.479 27.8481 119.29 28.1507 117.907 28.1507L117.918 28.1615ZM117.918 25.9892C119.355 25.9892 120.414 25.5137 121.128 24.5519C121.841 23.59 122.187 22.3472 122.187 20.8234C122.187 19.2996 121.83 18.0135 121.117 17.0841C120.403 16.1439 119.334 15.6792 117.918 15.6792C116.945 15.6792 116.156 15.8953 115.529 16.3384C114.903 16.7707 114.438 17.3759 114.124 18.154C113.811 18.9321 113.66 19.8183 113.66 20.8342C113.66 22.3904 114.016 23.6441 114.74 24.5951C115.465 25.5353 116.524 26.0109 117.918 26.0109V25.9892Z", fill: "#020202" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 26,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { d: "M127.709 27.7724V8.85974H130V27.7724H127.709Z", fill: "#020202" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
      lineNumber: 27,
      columnNumber: 9
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
    lineNumber: 6,
    columnNumber: 7
  }, void 0),
  /* @__PURE__ */ L.jsxDEV("defs", { children: /* @__PURE__ */ L.jsxDEV("clipPath", { id: "clip0_1136_982", children: /* @__PURE__ */ L.jsxDEV("rect", { width: "130", height: "34.2913", fill: "white", transform: "translate(-6.10352e-05 0.35437)" }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
    lineNumber: 31,
    columnNumber: 11
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
    lineNumber: 30,
    columnNumber: 9
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
    lineNumber: 29,
    columnNumber: 7
  }, void 0)
] }, void 0, true, {
  fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/WosoolLogo.tsx",
  lineNumber: 5,
  columnNumber: 5
}, void 0);
function S5({
  enableProfiles: _ = true,
  enableAboutView: C = true,
  theme: b = Wo
}) {
  Kt.useLayoutEffect(() => y5(b), [b]);
  const { locale: T, t: X, isRTL: P } = eo(), g = U0.find((oe) => oe.key === T), { settings: ge } = uv(), J = Ki.global.layoutIconSize, [Q, ve] = Kt.useState(false), [W, Z] = Kt.useState(false), [q, fe] = Kt.useState("main"), { isSomeFeaturesSelected: ee, reset: ie } = ov(), Xe = () => {
    ie();
  }, de = () => ({
    main: /* @__PURE__ */ L.jsxDEV(f5, { enableProfiles: _ }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 48,
      columnNumber: 13
    }, this),
    translater: /* @__PURE__ */ L.jsxDEV(Jw, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 49,
      columnNumber: 19
    }, this),
    settings: /* @__PURE__ */ L.jsxDEV(n5, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 50,
      columnNumber: 17
    }, this),
    about: /* @__PURE__ */ L.jsxDEV(e5, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 51,
      columnNumber: 14
    }, this)
  })[q];
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("a11y-turnkey", W && "left-display", P() && "tk-rtl"), children: [
    /* @__PURE__ */ L.jsxDEV("button", { className: "a11y-turnkey__entrypoint", onClick: () => ve((oe) => !oe), children: [
      /* @__PURE__ */ L.jsxDEV(kw, { color: "white", size: 32 }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 60,
        columnNumber: 9
      }, this),
      ee() && /* @__PURE__ */ L.jsxDEV("span", { className: "a11y-turnkey__entrypoint__ischeck", children: /* @__PURE__ */ L.jsxDEV(sw, { size: 12, color: "#1e74e9" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 62,
        columnNumber: 11
      }, this) }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 61,
        columnNumber: 38
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 59,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ L.jsxDEV("div", { className: di("overlay", ge.displayAsAside && "overlay--aside", Q && "overlay--active"), children: /* @__PURE__ */ L.jsxDEV("div", { className: di("widget", ge.oversizedWidget && "widget--xl", ge.widgetFamilyFont && `use-${ge.widgetFamilyFont}`, Q && "widget--active"), children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "widget__header", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-left", children: [
          q !== "main" && /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => fe("main"), children: [
            (g == null ? void 0 : g.direction) === "rtl" ? /* @__PURE__ */ L.jsxDEV(aw, { size: J }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 72,
              columnNumber: 61
            }, this) : /* @__PURE__ */ L.jsxDEV(rw, { size: J }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 72,
              columnNumber: 94
            }, this),
            /* @__PURE__ */ L.jsxDEV("span", { children: X("global.back") }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 73,
              columnNumber: 19
            }, this)
          ] }, void 0, true, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 71,
            columnNumber: 17
          }, this),
          q !== "translater" && g && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-btn", onClick: () => fe("translater"), children: [
            g.Flag && /* @__PURE__ */ L.jsxDEV(g.Flag, {}, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 77,
              columnNumber: 45
            }, this),
            /* @__PURE__ */ L.jsxDEV("span", { children: g.name }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 78,
              columnNumber: 19
            }, this)
          ] }, void 0, true, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 76,
            columnNumber: 17
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 69,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-right", children: [
          /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => Z((oe) => !oe), children: /* @__PURE__ */ L.jsxDEV(iw, { size: J }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 83,
            columnNumber: 17
          }, this) }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 82,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => fe("settings"), children: /* @__PURE__ */ L.jsxDEV(ww, { size: J }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 86,
            columnNumber: 17
          }, this) }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 85,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => ve((oe) => !oe), children: /* @__PURE__ */ L.jsxDEV(Dw, { size: J }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 89,
            columnNumber: 17
          }, this) }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 88,
            columnNumber: 15
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 81,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 68,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ L.jsxDEV("div", { className: "widget__body", children: de() }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 94,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ L.jsxDEV("div", { className: "widget__footer", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-left", children: q === "main" && /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: Xe, children: [
          /* @__PURE__ */ L.jsxDEV(xw, { size: J }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 101,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ L.jsxDEV("span", { children: X("global.resetAllSettings") }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 102,
            columnNumber: 17
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 100,
          columnNumber: 37
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 99,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-right", children: C && /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn as-link", onClick: () => fe("about"), children: /* @__PURE__ */ L.jsxDEV(g5, {}, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 107,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 106,
          columnNumber: 35
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 105,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 98,
        columnNumber: 11
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 66,
      columnNumber: 9
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 65,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
    lineNumber: 58,
    columnNumber: 5
  }, this);
}
const HC = "a11yRoot", PC = {
  appSettings: {
    enableProfiles: true,
    enableAboutView: true,
    theme: {
      ...Wo
    }
  }
}, b5 = (_) => {
  const C = document.querySelector(`#${HC}`);
  C && C.remove();
  const b = {
    appSettings: {
      ...PC.appSettings,
      ..._ && _.appSettings,
      theme: {
        ...PC.appSettings.theme,
        ..._ && _.appSettings.theme
      }
    }
  };
  b && (window.AccessibilityTurnkeyOptions = b);
  const T = document.createElement("div");
  T.setAttribute("id", HC), T.setAttribute("style", "position:relative; z-index:99999;"), document.body.appendChild(T), av.createRoot(T).render(/* @__PURE__ */ L.jsxDEV(S5, { ...b.appSettings }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/main.tsx",
    lineNumber: 72,
    columnNumber: 47
  }, void 0));
};
b5();
export {
  S5 as default,
  b5 as loadAccessibilityTurnkey
};

//# sourceMappingURL=data:application/json;base64,