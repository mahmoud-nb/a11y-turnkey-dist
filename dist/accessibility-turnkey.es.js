var Uw = Object.defineProperty;
var jw = (E, _, b) => _ in E ? Uw(E, _, { enumerable: true, configurable: true, writable: true, value: b }) : E[_] = b;
var Jl = (E, _, b) => (jw(E, typeof _ != "symbol" ? _ + "" : _, b), b);
function BE(E) {
  return E && E.__esModule && Object.prototype.hasOwnProperty.call(E, "default") ? E.default : E;
}
var L1 = { exports: {} }, Gh = {};
/**
 * @license React
 * react-jsx-dev-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var gE;
function Fw() {
  if (gE)
    return Gh;
  gE = 1;
  var E = Symbol.for("react.fragment");
  return Gh.Fragment = E, Gh.jsxDEV = void 0, Gh;
}
var qh = {}, Xh = { exports: {} }, Ot = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var SE;
function Hw() {
  if (SE)
    return Ot;
  SE = 1;
  var E = Symbol.for("react.element"), _ = Symbol.for("react.portal"), b = Symbol.for("react.fragment"), w = Symbol.for("react.strict_mode"), X = Symbol.for("react.profiler"), P = Symbol.for("react.provider"), g = Symbol.for("react.context"), ge = Symbol.for("react.forward_ref"), Z = Symbol.for("react.suspense"), Q = Symbol.for("react.memo"), ve = Symbol.for("react.lazy"), W = Symbol.iterator;
  function J(R) {
    return R === null || typeof R != "object" ? null : (R = W && R[W] || R["@@iterator"], typeof R == "function" ? R : null);
  }
  var q = { isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, fe = Object.assign, ee = {};
  function ie(R, K, _e) {
    this.props = R, this.context = K, this.refs = ee, this.updater = _e || q;
  }
  ie.prototype.isReactComponent = {}, ie.prototype.setState = function(R, K) {
    if (typeof R != "object" && typeof R != "function" && R != null)
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, R, K, "setState");
  }, ie.prototype.forceUpdate = function(R) {
    this.updater.enqueueForceUpdate(this, R, "forceUpdate");
  };
  function Xe() {
  }
  Xe.prototype = ie.prototype;
  function de(R, K, _e) {
    this.props = R, this.context = K, this.refs = ee, this.updater = _e || q;
  }
  var oe = de.prototype = new Xe();
  oe.constructor = de, fe(oe, ie.prototype), oe.isPureReactComponent = true;
  var xe = Array.isArray, be = Object.prototype.hasOwnProperty, we = { current: null }, De = { key: true, ref: true, __self: true, __source: true };
  function St(R, K, _e) {
    var it, Ze = {}, Tt = null, ct = null;
    if (K != null)
      for (it in K.ref !== void 0 && (ct = K.ref), K.key !== void 0 && (Tt = "" + K.key), K)
        be.call(K, it) && !De.hasOwnProperty(it) && (Ze[it] = K[it]);
    var bt = arguments.length - 2;
    if (bt === 1)
      Ze.children = _e;
    else if (1 < bt) {
      for (var ft = Array(bt), It = 0; It < bt; It++)
        ft[It] = arguments[It + 2];
      Ze.children = ft;
    }
    if (R && R.defaultProps)
      for (it in bt = R.defaultProps, bt)
        Ze[it] === void 0 && (Ze[it] = bt[it]);
    return { $$typeof: E, type: R, key: Tt, ref: ct, props: Ze, _owner: we.current };
  }
  function Rt(R, K) {
    return { $$typeof: E, type: R.type, key: K, ref: R.ref, props: R.props, _owner: R._owner };
  }
  function Lt(R) {
    return typeof R == "object" && R !== null && R.$$typeof === E;
  }
  function Ct(R) {
    var K = { "=": "=0", ":": "=2" };
    return "$" + R.replace(/[=:]/g, function(_e) {
      return K[_e];
    });
  }
  var en = /\/+/g;
  function Be(R, K) {
    return typeof R == "object" && R !== null && R.key != null ? Ct("" + R.key) : K.toString(36);
  }
  function rt(R, K, _e, it, Ze) {
    var Tt = typeof R;
    (Tt === "undefined" || Tt === "boolean") && (R = null);
    var ct = false;
    if (R === null)
      ct = true;
    else
      switch (Tt) {
        case "string":
        case "number":
          ct = true;
          break;
        case "object":
          switch (R.$$typeof) {
            case E:
            case _:
              ct = true;
          }
      }
    if (ct)
      return ct = R, Ze = Ze(ct), R = it === "" ? "." + Be(ct, 0) : it, xe(Ze) ? (_e = "", R != null && (_e = R.replace(en, "$&/") + "/"), rt(Ze, K, _e, "", function(It) {
        return It;
      })) : Ze != null && (Lt(Ze) && (Ze = Rt(Ze, _e + (!Ze.key || ct && ct.key === Ze.key ? "" : ("" + Ze.key).replace(en, "$&/") + "/") + R)), K.push(Ze)), 1;
    if (ct = 0, it = it === "" ? "." : it + ":", xe(R))
      for (var bt = 0; bt < R.length; bt++) {
        Tt = R[bt];
        var ft = it + Be(Tt, bt);
        ct += rt(Tt, K, _e, ft, Ze);
      }
    else if (ft = J(R), typeof ft == "function")
      for (R = ft.call(R), bt = 0; !(Tt = R.next()).done; )
        Tt = Tt.value, ft = it + Be(Tt, bt++), ct += rt(Tt, K, _e, ft, Ze);
    else if (Tt === "object")
      throw K = String(R), Error("Objects are not valid as a React child (found: " + (K === "[object Object]" ? "object with keys {" + Object.keys(R).join(", ") + "}" : K) + "). If you meant to render a collection of children, use an array instead.");
    return ct;
  }
  function Ut(R, K, _e) {
    if (R == null)
      return R;
    var it = [], Ze = 0;
    return rt(R, it, "", "", function(Tt) {
      return K.call(_e, Tt, Ze++);
    }), it;
  }
  function ht(R) {
    if (R._status === -1) {
      var K = R._result;
      K = K(), K.then(function(_e) {
        (R._status === 0 || R._status === -1) && (R._status = 1, R._result = _e);
      }, function(_e) {
        (R._status === 0 || R._status === -1) && (R._status = 2, R._result = _e);
      }), R._status === -1 && (R._status = 0, R._result = K);
    }
    if (R._status === 1)
      return R._result.default;
    throw R._result;
  }
  var Ne = { current: null }, ce = { transition: null }, je = { ReactCurrentDispatcher: Ne, ReactCurrentBatchConfig: ce, ReactCurrentOwner: we };
  return Ot.Children = { map: Ut, forEach: function(R, K, _e) {
    Ut(R, function() {
      K.apply(this, arguments);
    }, _e);
  }, count: function(R) {
    var K = 0;
    return Ut(R, function() {
      K++;
    }), K;
  }, toArray: function(R) {
    return Ut(R, function(K) {
      return K;
    }) || [];
  }, only: function(R) {
    if (!Lt(R))
      throw Error("React.Children.only expected to receive a single React element child.");
    return R;
  } }, Ot.Component = ie, Ot.Fragment = b, Ot.Profiler = X, Ot.PureComponent = de, Ot.StrictMode = w, Ot.Suspense = Z, Ot.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = je, Ot.cloneElement = function(R, K, _e) {
    if (R == null)
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + R + ".");
    var it = fe({}, R.props), Ze = R.key, Tt = R.ref, ct = R._owner;
    if (K != null) {
      if (K.ref !== void 0 && (Tt = K.ref, ct = we.current), K.key !== void 0 && (Ze = "" + K.key), R.type && R.type.defaultProps)
        var bt = R.type.defaultProps;
      for (ft in K)
        be.call(K, ft) && !De.hasOwnProperty(ft) && (it[ft] = K[ft] === void 0 && bt !== void 0 ? bt[ft] : K[ft]);
    }
    var ft = arguments.length - 2;
    if (ft === 1)
      it.children = _e;
    else if (1 < ft) {
      bt = Array(ft);
      for (var It = 0; It < ft; It++)
        bt[It] = arguments[It + 2];
      it.children = bt;
    }
    return { $$typeof: E, type: R.type, key: Ze, ref: Tt, props: it, _owner: ct };
  }, Ot.createContext = function(R) {
    return R = { $$typeof: g, _currentValue: R, _currentValue2: R, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, R.Provider = { $$typeof: P, _context: R }, R.Consumer = R;
  }, Ot.createElement = St, Ot.createFactory = function(R) {
    var K = St.bind(null, R);
    return K.type = R, K;
  }, Ot.createRef = function() {
    return { current: null };
  }, Ot.forwardRef = function(R) {
    return { $$typeof: ge, render: R };
  }, Ot.isValidElement = Lt, Ot.lazy = function(R) {
    return { $$typeof: ve, _payload: { _status: -1, _result: R }, _init: ht };
  }, Ot.memo = function(R, K) {
    return { $$typeof: Q, type: R, compare: K === void 0 ? null : K };
  }, Ot.startTransition = function(R) {
    var K = ce.transition;
    ce.transition = {};
    try {
      R();
    } finally {
      ce.transition = K;
    }
  }, Ot.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
  }, Ot.useCallback = function(R, K) {
    return Ne.current.useCallback(R, K);
  }, Ot.useContext = function(R) {
    return Ne.current.useContext(R);
  }, Ot.useDebugValue = function() {
  }, Ot.useDeferredValue = function(R) {
    return Ne.current.useDeferredValue(R);
  }, Ot.useEffect = function(R, K) {
    return Ne.current.useEffect(R, K);
  }, Ot.useId = function() {
    return Ne.current.useId();
  }, Ot.useImperativeHandle = function(R, K, _e) {
    return Ne.current.useImperativeHandle(R, K, _e);
  }, Ot.useInsertionEffect = function(R, K) {
    return Ne.current.useInsertionEffect(R, K);
  }, Ot.useLayoutEffect = function(R, K) {
    return Ne.current.useLayoutEffect(R, K);
  }, Ot.useMemo = function(R, K) {
    return Ne.current.useMemo(R, K);
  }, Ot.useReducer = function(R, K, _e) {
    return Ne.current.useReducer(R, K, _e);
  }, Ot.useRef = function(R) {
    return Ne.current.useRef(R);
  }, Ot.useState = function(R) {
    return Ne.current.useState(R);
  }, Ot.useSyncExternalStore = function(R, K, _e) {
    return Ne.current.useSyncExternalStore(R, K, _e);
  }, Ot.useTransition = function() {
    return Ne.current.useTransition();
  }, Ot.version = "18.2.0", Ot;
}
var iv = { exports: {} };
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
iv.exports;
var bE;
function Pw() {
  return bE || (bE = 1, function(E, _) {
    (function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var b = "18.2.0", w = Symbol.for("react.element"), X = Symbol.for("react.portal"), P = Symbol.for("react.fragment"), g = Symbol.for("react.strict_mode"), ge = Symbol.for("react.profiler"), Z = Symbol.for("react.provider"), Q = Symbol.for("react.context"), ve = Symbol.for("react.forward_ref"), W = Symbol.for("react.suspense"), J = Symbol.for("react.suspense_list"), q = Symbol.for("react.memo"), fe = Symbol.for("react.lazy"), ee = Symbol.for("react.offscreen"), ie = Symbol.iterator, Xe = "@@iterator";
      function de(m) {
        if (m === null || typeof m != "object")
          return null;
        var k = ie && m[ie] || m[Xe];
        return typeof k == "function" ? k : null;
      }
      var oe = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, xe = {
        transition: null
      }, be = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      }, we = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, De = {}, St = null;
      function Rt(m) {
        St = m;
      }
      De.setExtraStackFrame = function(m) {
        St = m;
      }, De.getCurrentStack = null, De.getStackAddendum = function() {
        var m = "";
        St && (m += St);
        var k = De.getCurrentStack;
        return k && (m += k() || ""), m;
      };
      var Lt = false, Ct = false, en = false, Be = false, rt = false, Ut = {
        ReactCurrentDispatcher: oe,
        ReactCurrentBatchConfig: xe,
        ReactCurrentOwner: we
      };
      Ut.ReactDebugCurrentFrame = De, Ut.ReactCurrentActQueue = be;
      function ht(m) {
        {
          for (var k = arguments.length, j = new Array(k > 1 ? k - 1 : 0), B = 1; B < k; B++)
            j[B - 1] = arguments[B];
          ce("warn", m, j);
        }
      }
      function Ne(m) {
        {
          for (var k = arguments.length, j = new Array(k > 1 ? k - 1 : 0), B = 1; B < k; B++)
            j[B - 1] = arguments[B];
          ce("error", m, j);
        }
      }
      function ce(m, k, j) {
        {
          var B = Ut.ReactDebugCurrentFrame, ue = B.getStackAddendum();
          ue !== "" && (k += "%s", j = j.concat([ue]));
          var Ge = j.map(function(Se) {
            return String(Se);
          });
          Ge.unshift("Warning: " + k), Function.prototype.apply.call(console[m], console, Ge);
        }
      }
      var je = {};
      function R(m, k) {
        {
          var j = m.constructor, B = j && (j.displayName || j.name) || "ReactClass", ue = B + "." + k;
          if (je[ue])
            return;
          Ne("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", k, B), je[ue] = true;
        }
      }
      var K = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(m) {
          return false;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(m, k, j) {
          R(m, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(m, k, j, B) {
          R(m, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(m, k, j, B) {
          R(m, "setState");
        }
      }, _e = Object.assign, it = {};
      Object.freeze(it);
      function Ze(m, k, j) {
        this.props = m, this.context = k, this.refs = it, this.updater = j || K;
      }
      Ze.prototype.isReactComponent = {}, Ze.prototype.setState = function(m, k) {
        if (typeof m != "object" && typeof m != "function" && m != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, m, k, "setState");
      }, Ze.prototype.forceUpdate = function(m) {
        this.updater.enqueueForceUpdate(this, m, "forceUpdate");
      };
      {
        var Tt = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, ct = function(m, k) {
          Object.defineProperty(Ze.prototype, m, {
            get: function() {
              ht("%s(...) is deprecated in plain JavaScript React classes. %s", k[0], k[1]);
            }
          });
        };
        for (var bt in Tt)
          Tt.hasOwnProperty(bt) && ct(bt, Tt[bt]);
      }
      function ft() {
      }
      ft.prototype = Ze.prototype;
      function It(m, k, j) {
        this.props = m, this.context = k, this.refs = it, this.updater = j || K;
      }
      var Br = It.prototype = new ft();
      Br.constructor = It, _e(Br, Ze.prototype), Br.isPureReactComponent = true;
      function hr() {
        var m = {
          current: null
        };
        return Object.seal(m), m;
      }
      var Ir = Array.isArray;
      function yn(m) {
        return Ir(m);
      }
      function Qn(m) {
        {
          var k = typeof Symbol == "function" && Symbol.toStringTag, j = k && m[Symbol.toStringTag] || m.constructor.name || "Object";
          return j;
        }
      }
      function Fn(m) {
        try {
          return Hn(m), false;
        } catch {
          return true;
        }
      }
      function Hn(m) {
        return "" + m;
      }
      function Dn(m) {
        if (Fn(m))
          return Ne("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Qn(m)), Hn(m);
      }
      function $r(m, k, j) {
        var B = m.displayName;
        if (B)
          return B;
        var ue = k.displayName || k.name || "";
        return ue !== "" ? j + "(" + ue + ")" : j;
      }
      function Yr(m) {
        return m.displayName || "Context";
      }
      function Gn(m) {
        if (m == null)
          return null;
        if (typeof m.tag == "number" && Ne("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof m == "function")
          return m.displayName || m.name || null;
        if (typeof m == "string")
          return m;
        switch (m) {
          case P:
            return "Fragment";
          case X:
            return "Portal";
          case ge:
            return "Profiler";
          case g:
            return "StrictMode";
          case W:
            return "Suspense";
          case J:
            return "SuspenseList";
        }
        if (typeof m == "object")
          switch (m.$$typeof) {
            case Q:
              var k = m;
              return Yr(k) + ".Consumer";
            case Z:
              var j = m;
              return Yr(j._context) + ".Provider";
            case ve:
              return $r(m, m.render, "ForwardRef");
            case q:
              var B = m.displayName || null;
              return B !== null ? B : Gn(m.type) || "Memo";
            case fe: {
              var ue = m, Ge = ue._payload, Se = ue._init;
              try {
                return Gn(Se(Ge));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var yr = Object.prototype.hasOwnProperty, Wr = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      }, gr, pi, rr;
      rr = {};
      function Qr(m) {
        if (yr.call(m, "ref")) {
          var k = Object.getOwnPropertyDescriptor(m, "ref").get;
          if (k && k.isReactWarning)
            return false;
        }
        return m.ref !== void 0;
      }
      function gn(m) {
        if (yr.call(m, "key")) {
          var k = Object.getOwnPropertyDescriptor(m, "key").get;
          if (k && k.isReactWarning)
            return false;
        }
        return m.key !== void 0;
      }
      function Tr(m, k) {
        var j = function() {
          gr || (gr = true, Ne("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", k));
        };
        j.isReactWarning = true, Object.defineProperty(m, "key", {
          get: j,
          configurable: true
        });
      }
      function da(m, k) {
        var j = function() {
          pi || (pi = true, Ne("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", k));
        };
        j.isReactWarning = true, Object.defineProperty(m, "ref", {
          get: j,
          configurable: true
        });
      }
      function vi(m) {
        if (typeof m.ref == "string" && we.current && m.__self && we.current.stateNode !== m.__self) {
          var k = Gn(we.current.type);
          rr[k] || (Ne('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', k, m.ref), rr[k] = true);
        }
      }
      var pe = function(m, k, j, B, ue, Ge, Se) {
        var We = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: w,
          // Built-in properties that belong on the element
          type: m,
          key: k,
          ref: j,
          props: Se,
          // Record the component responsible for creating this element.
          _owner: Ge
        };
        return We._store = {}, Object.defineProperty(We._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }), Object.defineProperty(We, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: B
        }), Object.defineProperty(We, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: ue
        }), Object.freeze && (Object.freeze(We.props), Object.freeze(We)), We;
      };
      function Fe(m, k, j) {
        var B, ue = {}, Ge = null, Se = null, We = null, vt = null;
        if (k != null) {
          Qr(k) && (Se = k.ref, vi(k)), gn(k) && (Dn(k.key), Ge = "" + k.key), We = k.__self === void 0 ? null : k.__self, vt = k.__source === void 0 ? null : k.__source;
          for (B in k)
            yr.call(k, B) && !Wr.hasOwnProperty(B) && (ue[B] = k[B]);
        }
        var At = arguments.length - 2;
        if (At === 1)
          ue.children = j;
        else if (At > 1) {
          for (var rn = Array(At), Jt = 0; Jt < At; Jt++)
            rn[Jt] = arguments[Jt + 2];
          Object.freeze && Object.freeze(rn), ue.children = rn;
        }
        if (m && m.defaultProps) {
          var an = m.defaultProps;
          for (B in an)
            ue[B] === void 0 && (ue[B] = an[B]);
        }
        if (Ge || Se) {
          var un = typeof m == "function" ? m.displayName || m.name || "Unknown" : m;
          Ge && Tr(ue, un), Se && da(ue, un);
        }
        return pe(m, Ge, Se, We, vt, we.current, ue);
      }
      function dt(m, k) {
        var j = pe(m.type, k, m.ref, m._self, m._source, m._owner, m.props);
        return j;
      }
      function Pt(m, k, j) {
        if (m == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + m + ".");
        var B, ue = _e({}, m.props), Ge = m.key, Se = m.ref, We = m._self, vt = m._source, At = m._owner;
        if (k != null) {
          Qr(k) && (Se = k.ref, At = we.current), gn(k) && (Dn(k.key), Ge = "" + k.key);
          var rn;
          m.type && m.type.defaultProps && (rn = m.type.defaultProps);
          for (B in k)
            yr.call(k, B) && !Wr.hasOwnProperty(B) && (k[B] === void 0 && rn !== void 0 ? ue[B] = rn[B] : ue[B] = k[B]);
        }
        var Jt = arguments.length - 2;
        if (Jt === 1)
          ue.children = j;
        else if (Jt > 1) {
          for (var an = Array(Jt), un = 0; un < Jt; un++)
            an[un] = arguments[un + 2];
          ue.children = an;
        }
        return pe(m.type, Ge, Se, We, vt, At, ue);
      }
      function $t(m) {
        return typeof m == "object" && m !== null && m.$$typeof === w;
      }
      var On = ".", Sn = ":";
      function Sr(m) {
        var k = /[=:]/g, j = {
          "=": "=0",
          ":": "=2"
        }, B = m.replace(k, function(ue) {
          return j[ue];
        });
        return "$" + B;
      }
      var Zt = false, wr = /\/+/g;
      function Yt(m) {
        return m.replace(wr, "$&/");
      }
      function Wt(m, k) {
        return typeof m == "object" && m !== null && m.key != null ? (Dn(m.key), Sr("" + m.key)) : k.toString(36);
      }
      function Zi(m, k, j, B, ue) {
        var Ge = typeof m;
        (Ge === "undefined" || Ge === "boolean") && (m = null);
        var Se = false;
        if (m === null)
          Se = true;
        else
          switch (Ge) {
            case "string":
            case "number":
              Se = true;
              break;
            case "object":
              switch (m.$$typeof) {
                case w:
                case X:
                  Se = true;
              }
          }
        if (Se) {
          var We = m, vt = ue(We), At = B === "" ? On + Wt(We, 0) : B;
          if (yn(vt)) {
            var rn = "";
            At != null && (rn = Yt(At) + "/"), Zi(vt, k, rn, "", function(Kf) {
              return Kf;
            });
          } else
            vt != null && ($t(vt) && (vt.key && (!We || We.key !== vt.key) && Dn(vt.key), vt = dt(
              vt,
              // Keep both the (mapped) and old keys if they differ, just as
              // traverseAllChildren used to do for objects as children
              j + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              (vt.key && (!We || We.key !== vt.key) ? (
                // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                // eslint-disable-next-line react-internal/safe-string-coercion
                Yt("" + vt.key) + "/"
              ) : "") + At
            )), k.push(vt));
          return 1;
        }
        var Jt, an, un = 0, kt = B === "" ? On : B + Sn;
        if (yn(m))
          for (var za = 0; za < m.length; za++)
            Jt = m[za], an = kt + Wt(Jt, za), un += Zi(Jt, k, j, an, ue);
        else {
          var iu = de(m);
          if (typeof iu == "function") {
            var rs = m;
            iu === rs.entries && (Zt || ht("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), Zt = true);
            for (var Xf = iu.call(rs), ra, is = 0; !(ra = Xf.next()).done; )
              Jt = ra.value, an = kt + Wt(Jt, is++), un += Zi(Jt, k, j, an, ue);
          } else if (Ge === "object") {
            var as = String(m);
            throw new Error("Objects are not valid as a React child (found: " + (as === "[object Object]" ? "object with keys {" + Object.keys(m).join(", ") + "}" : as) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return un;
      }
      function Ti(m, k, j) {
        if (m == null)
          return m;
        var B = [], ue = 0;
        return Zi(m, B, "", "", function(Ge) {
          return k.call(j, Ge, ue++);
        }), B;
      }
      function ul(m) {
        var k = 0;
        return Ti(m, function() {
          k++;
        }), k;
      }
      function to(m, k, j) {
        Ti(m, function() {
          k.apply(this, arguments);
        }, j);
      }
      function Qo(m) {
        return Ti(m, function(k) {
          return k;
        }) || [];
      }
      function La(m) {
        if (!$t(m))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return m;
      }
      function sl(m) {
        var k = {
          $$typeof: Q,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: m,
          _currentValue2: m,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        k.Provider = {
          $$typeof: Z,
          _context: k
        };
        var j = false, B = false, ue = false;
        {
          var Ge = {
            $$typeof: Q,
            _context: k
          };
          Object.defineProperties(Ge, {
            Provider: {
              get: function() {
                return B || (B = true, Ne("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), k.Provider;
              },
              set: function(Se) {
                k.Provider = Se;
              }
            },
            _currentValue: {
              get: function() {
                return k._currentValue;
              },
              set: function(Se) {
                k._currentValue = Se;
              }
            },
            _currentValue2: {
              get: function() {
                return k._currentValue2;
              },
              set: function(Se) {
                k._currentValue2 = Se;
              }
            },
            _threadCount: {
              get: function() {
                return k._threadCount;
              },
              set: function(Se) {
                k._threadCount = Se;
              }
            },
            Consumer: {
              get: function() {
                return j || (j = true, Ne("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), k.Consumer;
              }
            },
            displayName: {
              get: function() {
                return k.displayName;
              },
              set: function(Se) {
                ue || (ht("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", Se), ue = true);
              }
            }
          }), k.Consumer = Ge;
        }
        return k._currentRenderer = null, k._currentRenderer2 = null, k;
      }
      var mi = -1, pa = 0, wi = 1, va = 2;
      function x(m) {
        if (m._status === mi) {
          var k = m._result, j = k();
          if (j.then(function(Ge) {
            if (m._status === pa || m._status === mi) {
              var Se = m;
              Se._status = wi, Se._result = Ge;
            }
          }, function(Ge) {
            if (m._status === pa || m._status === mi) {
              var Se = m;
              Se._status = va, Se._result = Ge;
            }
          }), m._status === mi) {
            var B = m;
            B._status = pa, B._result = j;
          }
        }
        if (m._status === wi) {
          var ue = m._result;
          return ue === void 0 && Ne(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, ue), "default" in ue || Ne(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, ue), ue.default;
        } else
          throw m._result;
      }
      function te(m) {
        var k = {
          // We use these fields to store the result.
          _status: mi,
          _result: m
        }, j = {
          $$typeof: fe,
          _payload: k,
          _init: x
        };
        {
          var B, ue;
          Object.defineProperties(j, {
            defaultProps: {
              configurable: true,
              get: function() {
                return B;
              },
              set: function(Ge) {
                Ne("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), B = Ge, Object.defineProperty(j, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return ue;
              },
              set: function(Ge) {
                Ne("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), ue = Ge, Object.defineProperty(j, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return j;
      }
      function me(m) {
        m != null && m.$$typeof === q ? Ne("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof m != "function" ? Ne("forwardRef requires a render function but was given %s.", m === null ? "null" : typeof m) : m.length !== 0 && m.length !== 2 && Ne("forwardRef render functions accept exactly two parameters: props and ref. %s", m.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), m != null && (m.defaultProps != null || m.propTypes != null) && Ne("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var k = {
          $$typeof: ve,
          render: m
        };
        {
          var j;
          Object.defineProperty(k, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return j;
            },
            set: function(B) {
              j = B, !m.name && !m.displayName && (m.displayName = B);
            }
          });
        }
        return k;
      }
      var Ie;
      Ie = Symbol.for("react.module.reference");
      function yt(m) {
        return !!(typeof m == "string" || typeof m == "function" || m === P || m === ge || rt || m === g || m === W || m === J || Be || m === ee || Lt || Ct || en || typeof m == "object" && m !== null && (m.$$typeof === fe || m.$$typeof === q || m.$$typeof === Z || m.$$typeof === Q || m.$$typeof === ve || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        m.$$typeof === Ie || m.getModuleId !== void 0));
      }
      function zt(m, k) {
        yt(m) || Ne("memo: The first argument must be a component. Instead received: %s", m === null ? "null" : typeof m);
        var j = {
          $$typeof: q,
          type: m,
          compare: k === void 0 ? null : k
        };
        {
          var B;
          Object.defineProperty(j, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return B;
            },
            set: function(ue) {
              B = ue, !m.name && !m.displayName && (m.displayName = ue);
            }
          });
        }
        return j;
      }
      function He() {
        var m = oe.current;
        return m === null && Ne(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), m;
      }
      function Je(m) {
        var k = He();
        if (m._context !== void 0) {
          var j = m._context;
          j.Consumer === m ? Ne("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : j.Provider === m && Ne("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return k.useContext(m);
      }
      function bn(m) {
        var k = He();
        return k.useState(m);
      }
      function Qt(m, k, j) {
        var B = He();
        return B.useReducer(m, k, j);
      }
      function gt(m) {
        var k = He();
        return k.useRef(m);
      }
      function ir(m, k) {
        var j = He();
        return j.useEffect(m, k);
      }
      function Ji(m, k) {
        var j = He();
        return j.useInsertionEffect(m, k);
      }
      function cl(m, k) {
        var j = He();
        return j.useLayoutEffect(m, k);
      }
      function Gr(m, k) {
        var j = He();
        return j.useCallback(m, k);
      }
      function Wf(m, k) {
        var j = He();
        return j.useMemo(m, k);
      }
      function Qf(m, k, j) {
        var B = He();
        return B.useImperativeHandle(m, k, j);
      }
      function vn(m, k) {
        {
          var j = He();
          return j.useDebugValue(m, k);
        }
      }
      function Gf() {
        var m = He();
        return m.useTransition();
      }
      function ea(m) {
        var k = He();
        return k.useDeferredValue(m);
      }
      function pt() {
        var m = He();
        return m.useId();
      }
      function ma(m, k, j) {
        var B = He();
        return B.useSyncExternalStore(m, k, j);
      }
      var fl = 0, Go, dl, qr, Ju, Nr, es, ts;
      function ic() {
      }
      ic.__reactDisabledLog = true;
      function qo() {
        {
          if (fl === 0) {
            Go = console.log, dl = console.info, qr = console.warn, Ju = console.error, Nr = console.group, es = console.groupCollapsed, ts = console.groupEnd;
            var m = {
              configurable: true,
              enumerable: true,
              value: ic,
              writable: true
            };
            Object.defineProperties(console, {
              info: m,
              log: m,
              warn: m,
              error: m,
              group: m,
              groupCollapsed: m,
              groupEnd: m
            });
          }
          fl++;
        }
      }
      function pl() {
        {
          if (fl--, fl === 0) {
            var m = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _e({}, m, {
                value: Go
              }),
              info: _e({}, m, {
                value: dl
              }),
              warn: _e({}, m, {
                value: qr
              }),
              error: _e({}, m, {
                value: Ju
              }),
              group: _e({}, m, {
                value: Nr
              }),
              groupCollapsed: _e({}, m, {
                value: es
              }),
              groupEnd: _e({}, m, {
                value: ts
              })
            });
          }
          fl < 0 && Ne("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ta = Ut.ReactCurrentDispatcher, Dr;
      function vl(m, k, j) {
        {
          if (Dr === void 0)
            try {
              throw Error();
            } catch (ue) {
              var B = ue.stack.trim().match(/\n( *(at )?)/);
              Dr = B && B[1] || "";
            }
          return `
` + Dr + m;
        }
      }
      var ml = false, hl;
      {
        var Xo = typeof WeakMap == "function" ? WeakMap : Map;
        hl = new Xo();
      }
      function Ko(m, k) {
        if (!m || ml)
          return "";
        {
          var j = hl.get(m);
          if (j !== void 0)
            return j;
        }
        var B;
        ml = true;
        var ue = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var Ge;
        Ge = ta.current, ta.current = null, qo();
        try {
          if (k) {
            var Se = function() {
              throw Error();
            };
            if (Object.defineProperty(Se.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Se, []);
              } catch (kt) {
                B = kt;
              }
              Reflect.construct(m, [], Se);
            } else {
              try {
                Se.call();
              } catch (kt) {
                B = kt;
              }
              m.call(Se.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (kt) {
              B = kt;
            }
            m();
          }
        } catch (kt) {
          if (kt && B && typeof kt.stack == "string") {
            for (var We = kt.stack.split(`
`), vt = B.stack.split(`
`), At = We.length - 1, rn = vt.length - 1; At >= 1 && rn >= 0 && We[At] !== vt[rn]; )
              rn--;
            for (; At >= 1 && rn >= 0; At--, rn--)
              if (We[At] !== vt[rn]) {
                if (At !== 1 || rn !== 1)
                  do
                    if (At--, rn--, rn < 0 || We[At] !== vt[rn]) {
                      var Jt = `
` + We[At].replace(" at new ", " at ");
                      return m.displayName && Jt.includes("<anonymous>") && (Jt = Jt.replace("<anonymous>", m.displayName)), typeof m == "function" && hl.set(m, Jt), Jt;
                    }
                  while (At >= 1 && rn >= 0);
                break;
              }
          }
        } finally {
          ml = false, ta.current = Ge, pl(), Error.prepareStackTrace = ue;
        }
        var an = m ? m.displayName || m.name : "", un = an ? vl(an) : "";
        return typeof m == "function" && hl.set(m, un), un;
      }
      function Ma(m, k, j) {
        return Ko(m, false);
      }
      function qf(m) {
        var k = m.prototype;
        return !!(k && k.isReactComponent);
      }
      function ha(m, k, j) {
        if (m == null)
          return "";
        if (typeof m == "function")
          return Ko(m, qf(m));
        if (typeof m == "string")
          return vl(m);
        switch (m) {
          case W:
            return vl("Suspense");
          case J:
            return vl("SuspenseList");
        }
        if (typeof m == "object")
          switch (m.$$typeof) {
            case ve:
              return Ma(m.render);
            case q:
              return ha(m.type, k, j);
            case fe: {
              var B = m, ue = B._payload, Ge = B._init;
              try {
                return ha(Ge(ue), k, j);
              } catch {
              }
            }
          }
        return "";
      }
      var jt = {}, Zo = Ut.ReactDebugCurrentFrame;
      function no(m) {
        if (m) {
          var k = m._owner, j = ha(m.type, m._source, k ? k.type : null);
          Zo.setExtraStackFrame(j);
        } else
          Zo.setExtraStackFrame(null);
      }
      function Jo(m, k, j, B, ue) {
        {
          var Ge = Function.call.bind(yr);
          for (var Se in m)
            if (Ge(m, Se)) {
              var We = void 0;
              try {
                if (typeof m[Se] != "function") {
                  var vt = Error((B || "React class") + ": " + j + " type `" + Se + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof m[Se] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw vt.name = "Invariant Violation", vt;
                }
                We = m[Se](k, Se, B, j, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (At) {
                We = At;
              }
              We && !(We instanceof Error) && (no(ue), Ne("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", B || "React class", j, Se, typeof We), no(null)), We instanceof Error && !(We.message in jt) && (jt[We.message] = true, no(ue), Ne("Failed %s type: %s", j, We.message), no(null));
            }
        }
      }
      function Mt(m) {
        if (m) {
          var k = m._owner, j = ha(m.type, m._source, k ? k.type : null);
          Rt(j);
        } else
          Rt(null);
      }
      var eu;
      eu = false;
      function tu() {
        if (we.current) {
          var m = Gn(we.current.type);
          if (m)
            return `

Check the render method of \`` + m + "`.";
        }
        return "";
      }
      function at(m) {
        if (m !== void 0) {
          var k = m.fileName.replace(/^.*[\\\/]/, ""), j = m.lineNumber;
          return `

Check your code at ` + k + ":" + j + ".";
        }
        return "";
      }
      function ro(m) {
        return m != null ? at(m.__source) : "";
      }
      var _n = {};
      function Xr(m) {
        var k = tu();
        if (!k) {
          var j = typeof m == "string" ? m : m.displayName || m.name;
          j && (k = `

Check the top-level render call using <` + j + ">.");
        }
        return k;
      }
      function Or(m, k) {
        if (!(!m._store || m._store.validated || m.key != null)) {
          m._store.validated = true;
          var j = Xr(k);
          if (!_n[j]) {
            _n[j] = true;
            var B = "";
            m && m._owner && m._owner !== we.current && (B = " It was passed a child from " + Gn(m._owner.type) + "."), Mt(m), Ne('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', j, B), Mt(null);
          }
        }
      }
      function yl(m, k) {
        if (typeof m == "object") {
          if (yn(m))
            for (var j = 0; j < m.length; j++) {
              var B = m[j];
              $t(B) && Or(B, k);
            }
          else if ($t(m))
            m._store && (m._store.validated = true);
          else if (m) {
            var ue = de(m);
            if (typeof ue == "function" && ue !== m.entries)
              for (var Ge = ue.call(m), Se; !(Se = Ge.next()).done; )
                $t(Se.value) && Or(Se.value, k);
          }
        }
      }
      function Rn(m) {
        {
          var k = m.type;
          if (k == null || typeof k == "string")
            return;
          var j;
          if (typeof k == "function")
            j = k.propTypes;
          else if (typeof k == "object" && (k.$$typeof === ve || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          k.$$typeof === q))
            j = k.propTypes;
          else
            return;
          if (j) {
            var B = Gn(k);
            Jo(j, m.props, "prop", B, m);
          } else if (k.PropTypes !== void 0 && !eu) {
            eu = true;
            var ue = Gn(k);
            Ne("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", ue || "Unknown");
          }
          typeof k.getDefaultProps == "function" && !k.getDefaultProps.isReactClassApproved && Ne("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function Gt(m) {
        {
          for (var k = Object.keys(m.props), j = 0; j < k.length; j++) {
            var B = k[j];
            if (B !== "children" && B !== "key") {
              Mt(m), Ne("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", B), Mt(null);
              break;
            }
          }
          m.ref !== null && (Mt(m), Ne("Invalid attribute `ref` supplied to `React.Fragment`."), Mt(null));
        }
      }
      function ac(m, k, j) {
        var B = yt(m);
        if (!B) {
          var ue = "";
          (m === void 0 || typeof m == "object" && m !== null && Object.keys(m).length === 0) && (ue += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var Ge = ro(k);
          Ge ? ue += Ge : ue += tu();
          var Se;
          m === null ? Se = "null" : yn(m) ? Se = "array" : m !== void 0 && m.$$typeof === w ? (Se = "<" + (Gn(m.type) || "Unknown") + " />", ue = " Did you accidentally export a JSX literal instead of a component?") : Se = typeof m, Ne("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", Se, ue);
        }
        var We = Fe.apply(this, arguments);
        if (We == null)
          return We;
        if (B)
          for (var vt = 2; vt < arguments.length; vt++)
            yl(arguments[vt], m);
        return m === P ? Gt(We) : Rn(We), We;
      }
      var Kr = false;
      function qn(m) {
        var k = ac.bind(null, m);
        return k.type = m, Kr || (Kr = true, ht("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(k, "type", {
          enumerable: false,
          get: function() {
            return ht("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: m
            }), m;
          }
        }), k;
      }
      function ya(m, k, j) {
        for (var B = Pt.apply(this, arguments), ue = 2; ue < arguments.length; ue++)
          yl(arguments[ue], B.type);
        return Rn(B), B;
      }
      function lc(m, k) {
        var j = xe.transition;
        xe.transition = {};
        var B = xe.transition;
        xe.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          m();
        } finally {
          if (xe.transition = j, j === null && B._updatedFibers) {
            var ue = B._updatedFibers.size;
            ue > 10 && ht("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), B._updatedFibers.clear();
          }
        }
      }
      var Aa = false, gl = null;
      function oc(m) {
        if (gl === null)
          try {
            var k = ("require" + Math.random()).slice(0, 7), j = E && E[k];
            gl = j.call(E, "timers").setImmediate;
          } catch {
            gl = function(ue) {
              Aa === false && (Aa = true, typeof MessageChannel > "u" && Ne("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var Ge = new MessageChannel();
              Ge.port1.onmessage = ue, Ge.port2.postMessage(void 0);
            };
          }
        return gl(m);
      }
      var Ni = 0, Sl = false;
      function bl(m) {
        {
          var k = Ni;
          Ni++, be.current === null && (be.current = []);
          var j = be.isBatchingLegacy, B;
          try {
            if (be.isBatchingLegacy = true, B = m(), !j && be.didScheduleLegacyUpdate) {
              var ue = be.current;
              ue !== null && (be.didScheduleLegacyUpdate = false, El(ue));
            }
          } catch (an) {
            throw Di(k), an;
          } finally {
            be.isBatchingLegacy = j;
          }
          if (B !== null && typeof B == "object" && typeof B.then == "function") {
            var Ge = B, Se = false, We = {
              then: function(an, un) {
                Se = true, Ge.then(function(kt) {
                  Di(k), Ni === 0 ? nu(kt, an, un) : an(kt);
                }, function(kt) {
                  Di(k), un(kt);
                });
              }
            };
            return !Sl && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              Se || (Sl = true, Ne("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), We;
          } else {
            var vt = B;
            if (Di(k), Ni === 0) {
              var At = be.current;
              At !== null && (El(At), be.current = null);
              var rn = {
                then: function(an, un) {
                  be.current === null ? (be.current = [], nu(vt, an, un)) : an(vt);
                }
              };
              return rn;
            } else {
              var Jt = {
                then: function(an, un) {
                  an(vt);
                }
              };
              return Jt;
            }
          }
        }
      }
      function Di(m) {
        m !== Ni - 1 && Ne("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), Ni = m;
      }
      function nu(m, k, j) {
        {
          var B = be.current;
          if (B !== null)
            try {
              El(B), oc(function() {
                B.length === 0 ? (be.current = null, k(m)) : nu(m, k, j);
              });
            } catch (ue) {
              j(ue);
            }
          else
            k(m);
        }
      }
      var _l = false;
      function El(m) {
        if (!_l) {
          _l = true;
          var k = 0;
          try {
            for (; k < m.length; k++) {
              var j = m[k];
              do
                j = j(true);
              while (j !== null);
            }
            m.length = 0;
          } catch (B) {
            throw m = m.slice(k + 1), B;
          } finally {
            _l = false;
          }
        }
      }
      var io = ac, ru = ya, ns = qn, na = {
        map: Ti,
        forEach: to,
        count: ul,
        toArray: Qo,
        only: La
      };
      _.Children = na, _.Component = Ze, _.Fragment = P, _.Profiler = ge, _.PureComponent = It, _.StrictMode = g, _.Suspense = W, _.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Ut, _.cloneElement = ru, _.createContext = sl, _.createElement = io, _.createFactory = ns, _.createRef = hr, _.forwardRef = me, _.isValidElement = $t, _.lazy = te, _.memo = zt, _.startTransition = lc, _.unstable_act = bl, _.useCallback = Gr, _.useContext = Je, _.useDebugValue = vn, _.useDeferredValue = ea, _.useEffect = ir, _.useId = pt, _.useImperativeHandle = Qf, _.useInsertionEffect = Ji, _.useLayoutEffect = cl, _.useMemo = Wf, _.useReducer = Qt, _.useRef = gt, _.useState = bn, _.useSyncExternalStore = ma, _.useTransition = Gf, _.version = b, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }(iv, iv.exports)), iv.exports;
}
var _E;
function Zu() {
  return _E || (_E = 1, false ? Xh.exports = Hw() : Xh.exports = Pw()), Xh.exports;
}
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var EE;
function Bw() {
  return EE || (EE = 1, function() {
    var E = Zu(), _ = Symbol.for("react.element"), b = Symbol.for("react.portal"), w = Symbol.for("react.fragment"), X = Symbol.for("react.strict_mode"), P = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), ge = Symbol.for("react.context"), Z = Symbol.for("react.forward_ref"), Q = Symbol.for("react.suspense"), ve = Symbol.for("react.suspense_list"), W = Symbol.for("react.memo"), J = Symbol.for("react.lazy"), q = Symbol.for("react.offscreen"), fe = Symbol.iterator, ee = "@@iterator";
    function ie(x) {
      if (x === null || typeof x != "object")
        return null;
      var te = fe && x[fe] || x[ee];
      return typeof te == "function" ? te : null;
    }
    var Xe = E.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function de(x) {
      {
        for (var te = arguments.length, me = new Array(te > 1 ? te - 1 : 0), Ie = 1; Ie < te; Ie++)
          me[Ie - 1] = arguments[Ie];
        oe("error", x, me);
      }
    }
    function oe(x, te, me) {
      {
        var Ie = Xe.ReactDebugCurrentFrame, yt = Ie.getStackAddendum();
        yt !== "" && (te += "%s", me = me.concat([yt]));
        var zt = me.map(function(He) {
          return String(He);
        });
        zt.unshift("Warning: " + te), Function.prototype.apply.call(console[x], console, zt);
      }
    }
    var xe = false, be = false, we = false, De = false, St = false, Rt;
    Rt = Symbol.for("react.module.reference");
    function Lt(x) {
      return !!(typeof x == "string" || typeof x == "function" || x === w || x === P || St || x === X || x === Q || x === ve || De || x === q || xe || be || we || typeof x == "object" && x !== null && (x.$$typeof === J || x.$$typeof === W || x.$$typeof === g || x.$$typeof === ge || x.$$typeof === Z || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      x.$$typeof === Rt || x.getModuleId !== void 0));
    }
    function Ct(x, te, me) {
      var Ie = x.displayName;
      if (Ie)
        return Ie;
      var yt = te.displayName || te.name || "";
      return yt !== "" ? me + "(" + yt + ")" : me;
    }
    function en(x) {
      return x.displayName || "Context";
    }
    function Be(x) {
      if (x == null)
        return null;
      if (typeof x.tag == "number" && de("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof x == "function")
        return x.displayName || x.name || null;
      if (typeof x == "string")
        return x;
      switch (x) {
        case w:
          return "Fragment";
        case b:
          return "Portal";
        case P:
          return "Profiler";
        case X:
          return "StrictMode";
        case Q:
          return "Suspense";
        case ve:
          return "SuspenseList";
      }
      if (typeof x == "object")
        switch (x.$$typeof) {
          case ge:
            var te = x;
            return en(te) + ".Consumer";
          case g:
            var me = x;
            return en(me._context) + ".Provider";
          case Z:
            return Ct(x, x.render, "ForwardRef");
          case W:
            var Ie = x.displayName || null;
            return Ie !== null ? Ie : Be(x.type) || "Memo";
          case J: {
            var yt = x, zt = yt._payload, He = yt._init;
            try {
              return Be(He(zt));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var rt = Object.assign, Ut = 0, ht, Ne, ce, je, R, K, _e;
    function it() {
    }
    it.__reactDisabledLog = true;
    function Ze() {
      {
        if (Ut === 0) {
          ht = console.log, Ne = console.info, ce = console.warn, je = console.error, R = console.group, K = console.groupCollapsed, _e = console.groupEnd;
          var x = {
            configurable: true,
            enumerable: true,
            value: it,
            writable: true
          };
          Object.defineProperties(console, {
            info: x,
            log: x,
            warn: x,
            error: x,
            group: x,
            groupCollapsed: x,
            groupEnd: x
          });
        }
        Ut++;
      }
    }
    function Tt() {
      {
        if (Ut--, Ut === 0) {
          var x = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: rt({}, x, {
              value: ht
            }),
            info: rt({}, x, {
              value: Ne
            }),
            warn: rt({}, x, {
              value: ce
            }),
            error: rt({}, x, {
              value: je
            }),
            group: rt({}, x, {
              value: R
            }),
            groupCollapsed: rt({}, x, {
              value: K
            }),
            groupEnd: rt({}, x, {
              value: _e
            })
          });
        }
        Ut < 0 && de("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var ct = Xe.ReactCurrentDispatcher, bt;
    function ft(x, te, me) {
      {
        if (bt === void 0)
          try {
            throw Error();
          } catch (yt) {
            var Ie = yt.stack.trim().match(/\n( *(at )?)/);
            bt = Ie && Ie[1] || "";
          }
        return `
` + bt + x;
      }
    }
    var It = false, Br;
    {
      var hr = typeof WeakMap == "function" ? WeakMap : Map;
      Br = new hr();
    }
    function Ir(x, te) {
      if (!x || It)
        return "";
      {
        var me = Br.get(x);
        if (me !== void 0)
          return me;
      }
      var Ie;
      It = true;
      var yt = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var zt;
      zt = ct.current, ct.current = null, Ze();
      try {
        if (te) {
          var He = function() {
            throw Error();
          };
          if (Object.defineProperty(He.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(He, []);
            } catch (Gr) {
              Ie = Gr;
            }
            Reflect.construct(x, [], He);
          } else {
            try {
              He.call();
            } catch (Gr) {
              Ie = Gr;
            }
            x.call(He.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Gr) {
            Ie = Gr;
          }
          x();
        }
      } catch (Gr) {
        if (Gr && Ie && typeof Gr.stack == "string") {
          for (var Je = Gr.stack.split(`
`), bn = Ie.stack.split(`
`), Qt = Je.length - 1, gt = bn.length - 1; Qt >= 1 && gt >= 0 && Je[Qt] !== bn[gt]; )
            gt--;
          for (; Qt >= 1 && gt >= 0; Qt--, gt--)
            if (Je[Qt] !== bn[gt]) {
              if (Qt !== 1 || gt !== 1)
                do
                  if (Qt--, gt--, gt < 0 || Je[Qt] !== bn[gt]) {
                    var ir = `
` + Je[Qt].replace(" at new ", " at ");
                    return x.displayName && ir.includes("<anonymous>") && (ir = ir.replace("<anonymous>", x.displayName)), typeof x == "function" && Br.set(x, ir), ir;
                  }
                while (Qt >= 1 && gt >= 0);
              break;
            }
        }
      } finally {
        It = false, ct.current = zt, Tt(), Error.prepareStackTrace = yt;
      }
      var Ji = x ? x.displayName || x.name : "", cl = Ji ? ft(Ji) : "";
      return typeof x == "function" && Br.set(x, cl), cl;
    }
    function yn(x, te, me) {
      return Ir(x, false);
    }
    function Qn(x) {
      var te = x.prototype;
      return !!(te && te.isReactComponent);
    }
    function Fn(x, te, me) {
      if (x == null)
        return "";
      if (typeof x == "function")
        return Ir(x, Qn(x));
      if (typeof x == "string")
        return ft(x);
      switch (x) {
        case Q:
          return ft("Suspense");
        case ve:
          return ft("SuspenseList");
      }
      if (typeof x == "object")
        switch (x.$$typeof) {
          case Z:
            return yn(x.render);
          case W:
            return Fn(x.type, te, me);
          case J: {
            var Ie = x, yt = Ie._payload, zt = Ie._init;
            try {
              return Fn(zt(yt), te, me);
            } catch {
            }
          }
        }
      return "";
    }
    var Hn = Object.prototype.hasOwnProperty, Dn = {}, $r = Xe.ReactDebugCurrentFrame;
    function Yr(x) {
      if (x) {
        var te = x._owner, me = Fn(x.type, x._source, te ? te.type : null);
        $r.setExtraStackFrame(me);
      } else
        $r.setExtraStackFrame(null);
    }
    function Gn(x, te, me, Ie, yt) {
      {
        var zt = Function.call.bind(Hn);
        for (var He in x)
          if (zt(x, He)) {
            var Je = void 0;
            try {
              if (typeof x[He] != "function") {
                var bn = Error((Ie || "React class") + ": " + me + " type `" + He + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof x[He] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw bn.name = "Invariant Violation", bn;
              }
              Je = x[He](te, He, Ie, me, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (Qt) {
              Je = Qt;
            }
            Je && !(Je instanceof Error) && (Yr(yt), de("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", Ie || "React class", me, He, typeof Je), Yr(null)), Je instanceof Error && !(Je.message in Dn) && (Dn[Je.message] = true, Yr(yt), de("Failed %s type: %s", me, Je.message), Yr(null));
          }
      }
    }
    var yr = Array.isArray;
    function Wr(x) {
      return yr(x);
    }
    function gr(x) {
      {
        var te = typeof Symbol == "function" && Symbol.toStringTag, me = te && x[Symbol.toStringTag] || x.constructor.name || "Object";
        return me;
      }
    }
    function pi(x) {
      try {
        return rr(x), false;
      } catch {
        return true;
      }
    }
    function rr(x) {
      return "" + x;
    }
    function Qr(x) {
      if (pi(x))
        return de("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", gr(x)), rr(x);
    }
    var gn = Xe.ReactCurrentOwner, Tr = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    }, da, vi, pe;
    pe = {};
    function Fe(x) {
      if (Hn.call(x, "ref")) {
        var te = Object.getOwnPropertyDescriptor(x, "ref").get;
        if (te && te.isReactWarning)
          return false;
      }
      return x.ref !== void 0;
    }
    function dt(x) {
      if (Hn.call(x, "key")) {
        var te = Object.getOwnPropertyDescriptor(x, "key").get;
        if (te && te.isReactWarning)
          return false;
      }
      return x.key !== void 0;
    }
    function Pt(x, te) {
      if (typeof x.ref == "string" && gn.current && te && gn.current.stateNode !== te) {
        var me = Be(gn.current.type);
        pe[me] || (de('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', Be(gn.current.type), x.ref), pe[me] = true);
      }
    }
    function $t(x, te) {
      {
        var me = function() {
          da || (da = true, de("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", te));
        };
        me.isReactWarning = true, Object.defineProperty(x, "key", {
          get: me,
          configurable: true
        });
      }
    }
    function On(x, te) {
      {
        var me = function() {
          vi || (vi = true, de("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", te));
        };
        me.isReactWarning = true, Object.defineProperty(x, "ref", {
          get: me,
          configurable: true
        });
      }
    }
    var Sn = function(x, te, me, Ie, yt, zt, He) {
      var Je = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: _,
        // Built-in properties that belong on the element
        type: x,
        key: te,
        ref: me,
        props: He,
        // Record the component responsible for creating this element.
        _owner: zt
      };
      return Je._store = {}, Object.defineProperty(Je._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      }), Object.defineProperty(Je, "_self", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: Ie
      }), Object.defineProperty(Je, "_source", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: yt
      }), Object.freeze && (Object.freeze(Je.props), Object.freeze(Je)), Je;
    };
    function Sr(x, te, me, Ie, yt) {
      {
        var zt, He = {}, Je = null, bn = null;
        me !== void 0 && (Qr(me), Je = "" + me), dt(te) && (Qr(te.key), Je = "" + te.key), Fe(te) && (bn = te.ref, Pt(te, yt));
        for (zt in te)
          Hn.call(te, zt) && !Tr.hasOwnProperty(zt) && (He[zt] = te[zt]);
        if (x && x.defaultProps) {
          var Qt = x.defaultProps;
          for (zt in Qt)
            He[zt] === void 0 && (He[zt] = Qt[zt]);
        }
        if (Je || bn) {
          var gt = typeof x == "function" ? x.displayName || x.name || "Unknown" : x;
          Je && $t(He, gt), bn && On(He, gt);
        }
        return Sn(x, Je, bn, yt, Ie, gn.current, He);
      }
    }
    var Zt = Xe.ReactCurrentOwner, wr = Xe.ReactDebugCurrentFrame;
    function Yt(x) {
      if (x) {
        var te = x._owner, me = Fn(x.type, x._source, te ? te.type : null);
        wr.setExtraStackFrame(me);
      } else
        wr.setExtraStackFrame(null);
    }
    var Wt;
    Wt = false;
    function Zi(x) {
      return typeof x == "object" && x !== null && x.$$typeof === _;
    }
    function Ti() {
      {
        if (Zt.current) {
          var x = Be(Zt.current.type);
          if (x)
            return `

Check the render method of \`` + x + "`.";
        }
        return "";
      }
    }
    function ul(x) {
      {
        if (x !== void 0) {
          var te = x.fileName.replace(/^.*[\\\/]/, ""), me = x.lineNumber;
          return `

Check your code at ` + te + ":" + me + ".";
        }
        return "";
      }
    }
    var to = {};
    function Qo(x) {
      {
        var te = Ti();
        if (!te) {
          var me = typeof x == "string" ? x : x.displayName || x.name;
          me && (te = `

Check the top-level render call using <` + me + ">.");
        }
        return te;
      }
    }
    function La(x, te) {
      {
        if (!x._store || x._store.validated || x.key != null)
          return;
        x._store.validated = true;
        var me = Qo(te);
        if (to[me])
          return;
        to[me] = true;
        var Ie = "";
        x && x._owner && x._owner !== Zt.current && (Ie = " It was passed a child from " + Be(x._owner.type) + "."), Yt(x), de('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', me, Ie), Yt(null);
      }
    }
    function sl(x, te) {
      {
        if (typeof x != "object")
          return;
        if (Wr(x))
          for (var me = 0; me < x.length; me++) {
            var Ie = x[me];
            Zi(Ie) && La(Ie, te);
          }
        else if (Zi(x))
          x._store && (x._store.validated = true);
        else if (x) {
          var yt = ie(x);
          if (typeof yt == "function" && yt !== x.entries)
            for (var zt = yt.call(x), He; !(He = zt.next()).done; )
              Zi(He.value) && La(He.value, te);
        }
      }
    }
    function mi(x) {
      {
        var te = x.type;
        if (te == null || typeof te == "string")
          return;
        var me;
        if (typeof te == "function")
          me = te.propTypes;
        else if (typeof te == "object" && (te.$$typeof === Z || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        te.$$typeof === W))
          me = te.propTypes;
        else
          return;
        if (me) {
          var Ie = Be(te);
          Gn(me, x.props, "prop", Ie, x);
        } else if (te.PropTypes !== void 0 && !Wt) {
          Wt = true;
          var yt = Be(te);
          de("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", yt || "Unknown");
        }
        typeof te.getDefaultProps == "function" && !te.getDefaultProps.isReactClassApproved && de("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function pa(x) {
      {
        for (var te = Object.keys(x.props), me = 0; me < te.length; me++) {
          var Ie = te[me];
          if (Ie !== "children" && Ie !== "key") {
            Yt(x), de("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", Ie), Yt(null);
            break;
          }
        }
        x.ref !== null && (Yt(x), de("Invalid attribute `ref` supplied to `React.Fragment`."), Yt(null));
      }
    }
    function wi(x, te, me, Ie, yt, zt) {
      {
        var He = Lt(x);
        if (!He) {
          var Je = "";
          (x === void 0 || typeof x == "object" && x !== null && Object.keys(x).length === 0) && (Je += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var bn = ul(yt);
          bn ? Je += bn : Je += Ti();
          var Qt;
          x === null ? Qt = "null" : Wr(x) ? Qt = "array" : x !== void 0 && x.$$typeof === _ ? (Qt = "<" + (Be(x.type) || "Unknown") + " />", Je = " Did you accidentally export a JSX literal instead of a component?") : Qt = typeof x, de("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", Qt, Je);
        }
        var gt = Sr(x, te, me, yt, zt);
        if (gt == null)
          return gt;
        if (He) {
          var ir = te.children;
          if (ir !== void 0)
            if (Ie)
              if (Wr(ir)) {
                for (var Ji = 0; Ji < ir.length; Ji++)
                  sl(ir[Ji], x);
                Object.freeze && Object.freeze(ir);
              } else
                de("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              sl(ir, x);
        }
        return x === w ? pa(gt) : mi(gt), gt;
      }
    }
    var va = wi;
    qh.Fragment = w, qh.jsxDEV = va;
  }()), qh;
}
false ? L1.exports = Fw() : L1.exports = Bw();
var L = L1.exports, av = {}, M1 = { exports: {} }, Gi = {}, Kh = { exports: {} }, R1 = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var CE;
function Iw() {
  return CE || (CE = 1, function(E) {
    function _(ce, je) {
      var R = ce.length;
      ce.push(je);
      e:
        for (; 0 < R; ) {
          var K = R - 1 >>> 1, _e = ce[K];
          if (0 < X(_e, je))
            ce[K] = je, ce[R] = _e, R = K;
          else
            break e;
        }
    }
    function b(ce) {
      return ce.length === 0 ? null : ce[0];
    }
    function w(ce) {
      if (ce.length === 0)
        return null;
      var je = ce[0], R = ce.pop();
      if (R !== je) {
        ce[0] = R;
        e:
          for (var K = 0, _e = ce.length, it = _e >>> 1; K < it; ) {
            var Ze = 2 * (K + 1) - 1, Tt = ce[Ze], ct = Ze + 1, bt = ce[ct];
            if (0 > X(Tt, R))
              ct < _e && 0 > X(bt, Tt) ? (ce[K] = bt, ce[ct] = R, K = ct) : (ce[K] = Tt, ce[Ze] = R, K = Ze);
            else if (ct < _e && 0 > X(bt, R))
              ce[K] = bt, ce[ct] = R, K = ct;
            else
              break e;
          }
      }
      return je;
    }
    function X(ce, je) {
      var R = ce.sortIndex - je.sortIndex;
      return R !== 0 ? R : ce.id - je.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var P = performance;
      E.unstable_now = function() {
        return P.now();
      };
    } else {
      var g = Date, ge = g.now();
      E.unstable_now = function() {
        return g.now() - ge;
      };
    }
    var Z = [], Q = [], ve = 1, W = null, J = 3, q = false, fe = false, ee = false, ie = typeof setTimeout == "function" ? setTimeout : null, Xe = typeof clearTimeout == "function" ? clearTimeout : null, de = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function oe(ce) {
      for (var je = b(Q); je !== null; ) {
        if (je.callback === null)
          w(Q);
        else if (je.startTime <= ce)
          w(Q), je.sortIndex = je.expirationTime, _(Z, je);
        else
          break;
        je = b(Q);
      }
    }
    function xe(ce) {
      if (ee = false, oe(ce), !fe)
        if (b(Z) !== null)
          fe = true, ht(be);
        else {
          var je = b(Q);
          je !== null && Ne(xe, je.startTime - ce);
        }
    }
    function be(ce, je) {
      fe = false, ee && (ee = false, Xe(St), St = -1), q = true;
      var R = J;
      try {
        for (oe(je), W = b(Z); W !== null && (!(W.expirationTime > je) || ce && !Ct()); ) {
          var K = W.callback;
          if (typeof K == "function") {
            W.callback = null, J = W.priorityLevel;
            var _e = K(W.expirationTime <= je);
            je = E.unstable_now(), typeof _e == "function" ? W.callback = _e : W === b(Z) && w(Z), oe(je);
          } else
            w(Z);
          W = b(Z);
        }
        if (W !== null)
          var it = true;
        else {
          var Ze = b(Q);
          Ze !== null && Ne(xe, Ze.startTime - je), it = false;
        }
        return it;
      } finally {
        W = null, J = R, q = false;
      }
    }
    var we = false, De = null, St = -1, Rt = 5, Lt = -1;
    function Ct() {
      return !(E.unstable_now() - Lt < Rt);
    }
    function en() {
      if (De !== null) {
        var ce = E.unstable_now();
        Lt = ce;
        var je = true;
        try {
          je = De(true, ce);
        } finally {
          je ? Be() : (we = false, De = null);
        }
      } else
        we = false;
    }
    var Be;
    if (typeof de == "function")
      Be = function() {
        de(en);
      };
    else if (typeof MessageChannel < "u") {
      var rt = new MessageChannel(), Ut = rt.port2;
      rt.port1.onmessage = en, Be = function() {
        Ut.postMessage(null);
      };
    } else
      Be = function() {
        ie(en, 0);
      };
    function ht(ce) {
      De = ce, we || (we = true, Be());
    }
    function Ne(ce, je) {
      St = ie(function() {
        ce(E.unstable_now());
      }, je);
    }
    E.unstable_IdlePriority = 5, E.unstable_ImmediatePriority = 1, E.unstable_LowPriority = 4, E.unstable_NormalPriority = 3, E.unstable_Profiling = null, E.unstable_UserBlockingPriority = 2, E.unstable_cancelCallback = function(ce) {
      ce.callback = null;
    }, E.unstable_continueExecution = function() {
      fe || q || (fe = true, ht(be));
    }, E.unstable_forceFrameRate = function(ce) {
      0 > ce || 125 < ce ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : Rt = 0 < ce ? Math.floor(1e3 / ce) : 5;
    }, E.unstable_getCurrentPriorityLevel = function() {
      return J;
    }, E.unstable_getFirstCallbackNode = function() {
      return b(Z);
    }, E.unstable_next = function(ce) {
      switch (J) {
        case 1:
        case 2:
        case 3:
          var je = 3;
          break;
        default:
          je = J;
      }
      var R = J;
      J = je;
      try {
        return ce();
      } finally {
        J = R;
      }
    }, E.unstable_pauseExecution = function() {
    }, E.unstable_requestPaint = function() {
    }, E.unstable_runWithPriority = function(ce, je) {
      switch (ce) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          ce = 3;
      }
      var R = J;
      J = ce;
      try {
        return je();
      } finally {
        J = R;
      }
    }, E.unstable_scheduleCallback = function(ce, je, R) {
      var K = E.unstable_now();
      switch (typeof R == "object" && R !== null ? (R = R.delay, R = typeof R == "number" && 0 < R ? K + R : K) : R = K, ce) {
        case 1:
          var _e = -1;
          break;
        case 2:
          _e = 250;
          break;
        case 5:
          _e = 1073741823;
          break;
        case 4:
          _e = 1e4;
          break;
        default:
          _e = 5e3;
      }
      return _e = R + _e, ce = { id: ve++, callback: je, priorityLevel: ce, startTime: R, expirationTime: _e, sortIndex: -1 }, R > K ? (ce.sortIndex = R, _(Q, ce), b(Z) === null && ce === b(Q) && (ee ? (Xe(St), St = -1) : ee = true, Ne(xe, R - K))) : (ce.sortIndex = _e, _(Z, ce), fe || q || (fe = true, ht(be))), ce;
    }, E.unstable_shouldYield = Ct, E.unstable_wrapCallback = function(ce) {
      var je = J;
      return function() {
        var R = J;
        J = je;
        try {
          return ce.apply(this, arguments);
        } finally {
          J = R;
        }
      };
    };
  }(R1)), R1;
}
var T1 = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var kE;
function $w() {
  return kE || (kE = 1, function(E) {
    (function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var _ = false, b = false, w = 5;
      function X(pe, Fe) {
        var dt = pe.length;
        pe.push(Fe), ge(pe, Fe, dt);
      }
      function P(pe) {
        return pe.length === 0 ? null : pe[0];
      }
      function g(pe) {
        if (pe.length === 0)
          return null;
        var Fe = pe[0], dt = pe.pop();
        return dt !== Fe && (pe[0] = dt, Z(pe, dt, 0)), Fe;
      }
      function ge(pe, Fe, dt) {
        for (var Pt = dt; Pt > 0; ) {
          var $t = Pt - 1 >>> 1, On = pe[$t];
          if (Q(On, Fe) > 0)
            pe[$t] = Fe, pe[Pt] = On, Pt = $t;
          else
            return;
        }
      }
      function Z(pe, Fe, dt) {
        for (var Pt = dt, $t = pe.length, On = $t >>> 1; Pt < On; ) {
          var Sn = (Pt + 1) * 2 - 1, Sr = pe[Sn], Zt = Sn + 1, wr = pe[Zt];
          if (Q(Sr, Fe) < 0)
            Zt < $t && Q(wr, Sr) < 0 ? (pe[Pt] = wr, pe[Zt] = Fe, Pt = Zt) : (pe[Pt] = Sr, pe[Sn] = Fe, Pt = Sn);
          else if (Zt < $t && Q(wr, Fe) < 0)
            pe[Pt] = wr, pe[Zt] = Fe, Pt = Zt;
          else
            return;
        }
      }
      function Q(pe, Fe) {
        var dt = pe.sortIndex - Fe.sortIndex;
        return dt !== 0 ? dt : pe.id - Fe.id;
      }
      var ve = 1, W = 2, J = 3, q = 4, fe = 5;
      function ee(pe, Fe) {
      }
      var ie = typeof performance == "object" && typeof performance.now == "function";
      if (ie) {
        var Xe = performance;
        E.unstable_now = function() {
          return Xe.now();
        };
      } else {
        var de = Date, oe = de.now();
        E.unstable_now = function() {
          return de.now() - oe;
        };
      }
      var xe = 1073741823, be = -1, we = 250, De = 5e3, St = 1e4, Rt = xe, Lt = [], Ct = [], en = 1, Be = null, rt = J, Ut = false, ht = false, Ne = false, ce = typeof setTimeout == "function" ? setTimeout : null, je = typeof clearTimeout == "function" ? clearTimeout : null, R = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function K(pe) {
        for (var Fe = P(Ct); Fe !== null; ) {
          if (Fe.callback === null)
            g(Ct);
          else if (Fe.startTime <= pe)
            g(Ct), Fe.sortIndex = Fe.expirationTime, X(Lt, Fe);
          else
            return;
          Fe = P(Ct);
        }
      }
      function _e(pe) {
        if (Ne = false, K(pe), !ht)
          if (P(Lt) !== null)
            ht = true, Qr(it);
          else {
            var Fe = P(Ct);
            Fe !== null && gn(_e, Fe.startTime - pe);
          }
      }
      function it(pe, Fe) {
        ht = false, Ne && (Ne = false, Tr()), Ut = true;
        var dt = rt;
        try {
          var Pt;
          if (!b)
            return Ze(pe, Fe);
        } finally {
          Be = null, rt = dt, Ut = false;
        }
      }
      function Ze(pe, Fe) {
        var dt = Fe;
        for (K(dt), Be = P(Lt); Be !== null && !_ && !(Be.expirationTime > dt && (!pe || Yr())); ) {
          var Pt = Be.callback;
          if (typeof Pt == "function") {
            Be.callback = null, rt = Be.priorityLevel;
            var $t = Be.expirationTime <= dt, On = Pt($t);
            dt = E.unstable_now(), typeof On == "function" ? Be.callback = On : Be === P(Lt) && g(Lt), K(dt);
          } else
            g(Lt);
          Be = P(Lt);
        }
        if (Be !== null)
          return true;
        var Sn = P(Ct);
        return Sn !== null && gn(_e, Sn.startTime - dt), false;
      }
      function Tt(pe, Fe) {
        switch (pe) {
          case ve:
          case W:
          case J:
          case q:
          case fe:
            break;
          default:
            pe = J;
        }
        var dt = rt;
        rt = pe;
        try {
          return Fe();
        } finally {
          rt = dt;
        }
      }
      function ct(pe) {
        var Fe;
        switch (rt) {
          case ve:
          case W:
          case J:
            Fe = J;
            break;
          default:
            Fe = rt;
            break;
        }
        var dt = rt;
        rt = Fe;
        try {
          return pe();
        } finally {
          rt = dt;
        }
      }
      function bt(pe) {
        var Fe = rt;
        return function() {
          var dt = rt;
          rt = Fe;
          try {
            return pe.apply(this, arguments);
          } finally {
            rt = dt;
          }
        };
      }
      function ft(pe, Fe, dt) {
        var Pt = E.unstable_now(), $t;
        if (typeof dt == "object" && dt !== null) {
          var On = dt.delay;
          typeof On == "number" && On > 0 ? $t = Pt + On : $t = Pt;
        } else
          $t = Pt;
        var Sn;
        switch (pe) {
          case ve:
            Sn = be;
            break;
          case W:
            Sn = we;
            break;
          case fe:
            Sn = Rt;
            break;
          case q:
            Sn = St;
            break;
          case J:
          default:
            Sn = De;
            break;
        }
        var Sr = $t + Sn, Zt = {
          id: en++,
          callback: Fe,
          priorityLevel: pe,
          startTime: $t,
          expirationTime: Sr,
          sortIndex: -1
        };
        return $t > Pt ? (Zt.sortIndex = $t, X(Ct, Zt), P(Lt) === null && Zt === P(Ct) && (Ne ? Tr() : Ne = true, gn(_e, $t - Pt))) : (Zt.sortIndex = Sr, X(Lt, Zt), !ht && !Ut && (ht = true, Qr(it))), Zt;
      }
      function It() {
      }
      function Br() {
        !ht && !Ut && (ht = true, Qr(it));
      }
      function hr() {
        return P(Lt);
      }
      function Ir(pe) {
        pe.callback = null;
      }
      function yn() {
        return rt;
      }
      var Qn = false, Fn = null, Hn = -1, Dn = w, $r = -1;
      function Yr() {
        var pe = E.unstable_now() - $r;
        return !(pe < Dn);
      }
      function Gn() {
      }
      function yr(pe) {
        if (pe < 0 || pe > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        pe > 0 ? Dn = Math.floor(1e3 / pe) : Dn = w;
      }
      var Wr = function() {
        if (Fn !== null) {
          var pe = E.unstable_now();
          $r = pe;
          var Fe = true, dt = true;
          try {
            dt = Fn(Fe, pe);
          } finally {
            dt ? gr() : (Qn = false, Fn = null);
          }
        } else
          Qn = false;
      }, gr;
      if (typeof R == "function")
        gr = function() {
          R(Wr);
        };
      else if (typeof MessageChannel < "u") {
        var pi = new MessageChannel(), rr = pi.port2;
        pi.port1.onmessage = Wr, gr = function() {
          rr.postMessage(null);
        };
      } else
        gr = function() {
          ce(Wr, 0);
        };
      function Qr(pe) {
        Fn = pe, Qn || (Qn = true, gr());
      }
      function gn(pe, Fe) {
        Hn = ce(function() {
          pe(E.unstable_now());
        }, Fe);
      }
      function Tr() {
        je(Hn), Hn = -1;
      }
      var da = Gn, vi = null;
      E.unstable_IdlePriority = fe, E.unstable_ImmediatePriority = ve, E.unstable_LowPriority = q, E.unstable_NormalPriority = J, E.unstable_Profiling = vi, E.unstable_UserBlockingPriority = W, E.unstable_cancelCallback = Ir, E.unstable_continueExecution = Br, E.unstable_forceFrameRate = yr, E.unstable_getCurrentPriorityLevel = yn, E.unstable_getFirstCallbackNode = hr, E.unstable_next = ct, E.unstable_pauseExecution = It, E.unstable_requestPaint = da, E.unstable_runWithPriority = Tt, E.unstable_scheduleCallback = ft, E.unstable_shouldYield = Yr, E.unstable_wrapCallback = bt, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }(T1)), T1;
}
var xE;
function IE() {
  return xE || (xE = 1, false ? Kh.exports = Iw() : Kh.exports = $w()), Kh.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var RE;
function Yw() {
  if (RE)
    return Gi;
  RE = 1;
  var E = Zu(), _ = IE();
  function b(n) {
    for (var r = "https://reactjs.org/docs/error-decoder.html?invariant=" + n, l = 1; l < arguments.length; l++)
      r += "&args[]=" + encodeURIComponent(arguments[l]);
    return "Minified React error #" + n + "; visit " + r + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var w = /* @__PURE__ */ new Set(), X = {};
  function P(n, r) {
    g(n, r), g(n + "Capture", r);
  }
  function g(n, r) {
    for (X[n] = r, n = 0; n < r.length; n++)
      w.add(r[n]);
  }
  var ge = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), Z = Object.prototype.hasOwnProperty, Q = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ve = {}, W = {};
  function J(n) {
    return Z.call(W, n) ? true : Z.call(ve, n) ? false : Q.test(n) ? W[n] = true : (ve[n] = true, false);
  }
  function q(n, r, l, u) {
    if (l !== null && l.type === 0)
      return false;
    switch (typeof r) {
      case "function":
      case "symbol":
        return true;
      case "boolean":
        return u ? false : l !== null ? !l.acceptsBooleans : (n = n.toLowerCase().slice(0, 5), n !== "data-" && n !== "aria-");
      default:
        return false;
    }
  }
  function fe(n, r, l, u) {
    if (r === null || typeof r > "u" || q(n, r, l, u))
      return true;
    if (u)
      return false;
    if (l !== null)
      switch (l.type) {
        case 3:
          return !r;
        case 4:
          return r === false;
        case 5:
          return isNaN(r);
        case 6:
          return isNaN(r) || 1 > r;
      }
    return false;
  }
  function ee(n, r, l, u, c, d, h) {
    this.acceptsBooleans = r === 2 || r === 3 || r === 4, this.attributeName = u, this.attributeNamespace = c, this.mustUseProperty = l, this.propertyName = n, this.type = r, this.sanitizeURL = d, this.removeEmptyString = h;
  }
  var ie = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(n) {
    ie[n] = new ee(n, 0, false, n, null, false, false);
  }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(n) {
    var r = n[0];
    ie[r] = new ee(r, 1, false, n[1], null, false, false);
  }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(n) {
    ie[n] = new ee(n, 2, false, n.toLowerCase(), null, false, false);
  }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(n) {
    ie[n] = new ee(n, 2, false, n, null, false, false);
  }), "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(n) {
    ie[n] = new ee(n, 3, false, n.toLowerCase(), null, false, false);
  }), ["checked", "multiple", "muted", "selected"].forEach(function(n) {
    ie[n] = new ee(n, 3, true, n, null, false, false);
  }), ["capture", "download"].forEach(function(n) {
    ie[n] = new ee(n, 4, false, n, null, false, false);
  }), ["cols", "rows", "size", "span"].forEach(function(n) {
    ie[n] = new ee(n, 6, false, n, null, false, false);
  }), ["rowSpan", "start"].forEach(function(n) {
    ie[n] = new ee(n, 5, false, n.toLowerCase(), null, false, false);
  });
  var Xe = /[\-:]([a-z])/g;
  function de(n) {
    return n[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(n) {
    var r = n.replace(
      Xe,
      de
    );
    ie[r] = new ee(r, 1, false, n, null, false, false);
  }), "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(n) {
    var r = n.replace(Xe, de);
    ie[r] = new ee(r, 1, false, n, "http://www.w3.org/1999/xlink", false, false);
  }), ["xml:base", "xml:lang", "xml:space"].forEach(function(n) {
    var r = n.replace(Xe, de);
    ie[r] = new ee(r, 1, false, n, "http://www.w3.org/XML/1998/namespace", false, false);
  }), ["tabIndex", "crossOrigin"].forEach(function(n) {
    ie[n] = new ee(n, 1, false, n.toLowerCase(), null, false, false);
  }), ie.xlinkHref = new ee("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false), ["src", "href", "action", "formAction"].forEach(function(n) {
    ie[n] = new ee(n, 1, false, n.toLowerCase(), null, true, true);
  });
  function oe(n, r, l, u) {
    var c = ie.hasOwnProperty(r) ? ie[r] : null;
    (c !== null ? c.type !== 0 : u || !(2 < r.length) || r[0] !== "o" && r[0] !== "O" || r[1] !== "n" && r[1] !== "N") && (fe(r, l, c, u) && (l = null), u || c === null ? J(r) && (l === null ? n.removeAttribute(r) : n.setAttribute(r, "" + l)) : c.mustUseProperty ? n[c.propertyName] = l === null ? c.type === 3 ? false : "" : l : (r = c.attributeName, u = c.attributeNamespace, l === null ? n.removeAttribute(r) : (c = c.type, l = c === 3 || c === 4 && l === true ? "" : "" + l, u ? n.setAttributeNS(u, r, l) : n.setAttribute(r, l))));
  }
  var xe = E.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, be = Symbol.for("react.element"), we = Symbol.for("react.portal"), De = Symbol.for("react.fragment"), St = Symbol.for("react.strict_mode"), Rt = Symbol.for("react.profiler"), Lt = Symbol.for("react.provider"), Ct = Symbol.for("react.context"), en = Symbol.for("react.forward_ref"), Be = Symbol.for("react.suspense"), rt = Symbol.for("react.suspense_list"), Ut = Symbol.for("react.memo"), ht = Symbol.for("react.lazy"), Ne = Symbol.for("react.offscreen"), ce = Symbol.iterator;
  function je(n) {
    return n === null || typeof n != "object" ? null : (n = ce && n[ce] || n["@@iterator"], typeof n == "function" ? n : null);
  }
  var R = Object.assign, K;
  function _e(n) {
    if (K === void 0)
      try {
        throw Error();
      } catch (l) {
        var r = l.stack.trim().match(/\n( *(at )?)/);
        K = r && r[1] || "";
      }
    return `
` + K + n;
  }
  var it = false;
  function Ze(n, r) {
    if (!n || it)
      return "";
    it = true;
    var l = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (r)
        if (r = function() {
          throw Error();
        }, Object.defineProperty(r.prototype, "props", { set: function() {
          throw Error();
        } }), typeof Reflect == "object" && Reflect.construct) {
          try {
            Reflect.construct(r, []);
          } catch (H) {
            var u = H;
          }
          Reflect.construct(n, [], r);
        } else {
          try {
            r.call();
          } catch (H) {
            u = H;
          }
          n.call(r.prototype);
        }
      else {
        try {
          throw Error();
        } catch (H) {
          u = H;
        }
        n();
      }
    } catch (H) {
      if (H && u && typeof H.stack == "string") {
        for (var c = H.stack.split(`
`), d = u.stack.split(`
`), h = c.length - 1, C = d.length - 1; 1 <= h && 0 <= C && c[h] !== d[C]; )
          C--;
        for (; 1 <= h && 0 <= C; h--, C--)
          if (c[h] !== d[C]) {
            if (h !== 1 || C !== 1)
              do
                if (h--, C--, 0 > C || c[h] !== d[C]) {
                  var T = `
` + c[h].replace(" at new ", " at ");
                  return n.displayName && T.includes("<anonymous>") && (T = T.replace("<anonymous>", n.displayName)), T;
                }
              while (1 <= h && 0 <= C);
            break;
          }
      }
    } finally {
      it = false, Error.prepareStackTrace = l;
    }
    return (n = n ? n.displayName || n.name : "") ? _e(n) : "";
  }
  function Tt(n) {
    switch (n.tag) {
      case 5:
        return _e(n.type);
      case 16:
        return _e("Lazy");
      case 13:
        return _e("Suspense");
      case 19:
        return _e("SuspenseList");
      case 0:
      case 2:
      case 15:
        return n = Ze(n.type, false), n;
      case 11:
        return n = Ze(n.type.render, false), n;
      case 1:
        return n = Ze(n.type, true), n;
      default:
        return "";
    }
  }
  function ct(n) {
    if (n == null)
      return null;
    if (typeof n == "function")
      return n.displayName || n.name || null;
    if (typeof n == "string")
      return n;
    switch (n) {
      case De:
        return "Fragment";
      case we:
        return "Portal";
      case Rt:
        return "Profiler";
      case St:
        return "StrictMode";
      case Be:
        return "Suspense";
      case rt:
        return "SuspenseList";
    }
    if (typeof n == "object")
      switch (n.$$typeof) {
        case Ct:
          return (n.displayName || "Context") + ".Consumer";
        case Lt:
          return (n._context.displayName || "Context") + ".Provider";
        case en:
          var r = n.render;
          return n = n.displayName, n || (n = r.displayName || r.name || "", n = n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef"), n;
        case Ut:
          return r = n.displayName || null, r !== null ? r : ct(n.type) || "Memo";
        case ht:
          r = n._payload, n = n._init;
          try {
            return ct(n(r));
          } catch {
          }
      }
    return null;
  }
  function bt(n) {
    var r = n.type;
    switch (n.tag) {
      case 24:
        return "Cache";
      case 9:
        return (r.displayName || "Context") + ".Consumer";
      case 10:
        return (r._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return n = r.render, n = n.displayName || n.name || "", r.displayName || (n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return r;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return ct(r);
      case 8:
        return r === St ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof r == "function")
          return r.displayName || r.name || null;
        if (typeof r == "string")
          return r;
    }
    return null;
  }
  function ft(n) {
    switch (typeof n) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return n;
      case "object":
        return n;
      default:
        return "";
    }
  }
  function It(n) {
    var r = n.type;
    return (n = n.nodeName) && n.toLowerCase() === "input" && (r === "checkbox" || r === "radio");
  }
  function Br(n) {
    var r = It(n) ? "checked" : "value", l = Object.getOwnPropertyDescriptor(n.constructor.prototype, r), u = "" + n[r];
    if (!n.hasOwnProperty(r) && typeof l < "u" && typeof l.get == "function" && typeof l.set == "function") {
      var c = l.get, d = l.set;
      return Object.defineProperty(n, r, { configurable: true, get: function() {
        return c.call(this);
      }, set: function(h) {
        u = "" + h, d.call(this, h);
      } }), Object.defineProperty(n, r, { enumerable: l.enumerable }), { getValue: function() {
        return u;
      }, setValue: function(h) {
        u = "" + h;
      }, stopTracking: function() {
        n._valueTracker = null, delete n[r];
      } };
    }
  }
  function hr(n) {
    n._valueTracker || (n._valueTracker = Br(n));
  }
  function Ir(n) {
    if (!n)
      return false;
    var r = n._valueTracker;
    if (!r)
      return true;
    var l = r.getValue(), u = "";
    return n && (u = It(n) ? n.checked ? "true" : "false" : n.value), n = u, n !== l ? (r.setValue(n), true) : false;
  }
  function yn(n) {
    if (n = n || (typeof document < "u" ? document : void 0), typeof n > "u")
      return null;
    try {
      return n.activeElement || n.body;
    } catch {
      return n.body;
    }
  }
  function Qn(n, r) {
    var l = r.checked;
    return R({}, r, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: l ?? n._wrapperState.initialChecked });
  }
  function Fn(n, r) {
    var l = r.defaultValue == null ? "" : r.defaultValue, u = r.checked != null ? r.checked : r.defaultChecked;
    l = ft(r.value != null ? r.value : l), n._wrapperState = { initialChecked: u, initialValue: l, controlled: r.type === "checkbox" || r.type === "radio" ? r.checked != null : r.value != null };
  }
  function Hn(n, r) {
    r = r.checked, r != null && oe(n, "checked", r, false);
  }
  function Dn(n, r) {
    Hn(n, r);
    var l = ft(r.value), u = r.type;
    if (l != null)
      u === "number" ? (l === 0 && n.value === "" || n.value != l) && (n.value = "" + l) : n.value !== "" + l && (n.value = "" + l);
    else if (u === "submit" || u === "reset") {
      n.removeAttribute("value");
      return;
    }
    r.hasOwnProperty("value") ? Yr(n, r.type, l) : r.hasOwnProperty("defaultValue") && Yr(n, r.type, ft(r.defaultValue)), r.checked == null && r.defaultChecked != null && (n.defaultChecked = !!r.defaultChecked);
  }
  function $r(n, r, l) {
    if (r.hasOwnProperty("value") || r.hasOwnProperty("defaultValue")) {
      var u = r.type;
      if (!(u !== "submit" && u !== "reset" || r.value !== void 0 && r.value !== null))
        return;
      r = "" + n._wrapperState.initialValue, l || r === n.value || (n.value = r), n.defaultValue = r;
    }
    l = n.name, l !== "" && (n.name = ""), n.defaultChecked = !!n._wrapperState.initialChecked, l !== "" && (n.name = l);
  }
  function Yr(n, r, l) {
    (r !== "number" || yn(n.ownerDocument) !== n) && (l == null ? n.defaultValue = "" + n._wrapperState.initialValue : n.defaultValue !== "" + l && (n.defaultValue = "" + l));
  }
  var Gn = Array.isArray;
  function yr(n, r, l, u) {
    if (n = n.options, r) {
      r = {};
      for (var c = 0; c < l.length; c++)
        r["$" + l[c]] = true;
      for (l = 0; l < n.length; l++)
        c = r.hasOwnProperty("$" + n[l].value), n[l].selected !== c && (n[l].selected = c), c && u && (n[l].defaultSelected = true);
    } else {
      for (l = "" + ft(l), r = null, c = 0; c < n.length; c++) {
        if (n[c].value === l) {
          n[c].selected = true, u && (n[c].defaultSelected = true);
          return;
        }
        r !== null || n[c].disabled || (r = n[c]);
      }
      r !== null && (r.selected = true);
    }
  }
  function Wr(n, r) {
    if (r.dangerouslySetInnerHTML != null)
      throw Error(b(91));
    return R({}, r, { value: void 0, defaultValue: void 0, children: "" + n._wrapperState.initialValue });
  }
  function gr(n, r) {
    var l = r.value;
    if (l == null) {
      if (l = r.children, r = r.defaultValue, l != null) {
        if (r != null)
          throw Error(b(92));
        if (Gn(l)) {
          if (1 < l.length)
            throw Error(b(93));
          l = l[0];
        }
        r = l;
      }
      r == null && (r = ""), l = r;
    }
    n._wrapperState = { initialValue: ft(l) };
  }
  function pi(n, r) {
    var l = ft(r.value), u = ft(r.defaultValue);
    l != null && (l = "" + l, l !== n.value && (n.value = l), r.defaultValue == null && n.defaultValue !== l && (n.defaultValue = l)), u != null && (n.defaultValue = "" + u);
  }
  function rr(n) {
    var r = n.textContent;
    r === n._wrapperState.initialValue && r !== "" && r !== null && (n.value = r);
  }
  function Qr(n) {
    switch (n) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function gn(n, r) {
    return n == null || n === "http://www.w3.org/1999/xhtml" ? Qr(r) : n === "http://www.w3.org/2000/svg" && r === "foreignObject" ? "http://www.w3.org/1999/xhtml" : n;
  }
  var Tr, da = function(n) {
    return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(r, l, u, c) {
      MSApp.execUnsafeLocalFunction(function() {
        return n(r, l, u, c);
      });
    } : n;
  }(function(n, r) {
    if (n.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in n)
      n.innerHTML = r;
    else {
      for (Tr = Tr || document.createElement("div"), Tr.innerHTML = "<svg>" + r.valueOf().toString() + "</svg>", r = Tr.firstChild; n.firstChild; )
        n.removeChild(n.firstChild);
      for (; r.firstChild; )
        n.appendChild(r.firstChild);
    }
  });
  function vi(n, r) {
    if (r) {
      var l = n.firstChild;
      if (l && l === n.lastChild && l.nodeType === 3) {
        l.nodeValue = r;
        return;
      }
    }
    n.textContent = r;
  }
  var pe = {
    animationIterationCount: true,
    aspectRatio: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  }, Fe = ["Webkit", "ms", "Moz", "O"];
  Object.keys(pe).forEach(function(n) {
    Fe.forEach(function(r) {
      r = r + n.charAt(0).toUpperCase() + n.substring(1), pe[r] = pe[n];
    });
  });
  function dt(n, r, l) {
    return r == null || typeof r == "boolean" || r === "" ? "" : l || typeof r != "number" || r === 0 || pe.hasOwnProperty(n) && pe[n] ? ("" + r).trim() : r + "px";
  }
  function Pt(n, r) {
    n = n.style;
    for (var l in r)
      if (r.hasOwnProperty(l)) {
        var u = l.indexOf("--") === 0, c = dt(l, r[l], u);
        l === "float" && (l = "cssFloat"), u ? n.setProperty(l, c) : n[l] = c;
      }
  }
  var $t = R({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
  function On(n, r) {
    if (r) {
      if ($t[n] && (r.children != null || r.dangerouslySetInnerHTML != null))
        throw Error(b(137, n));
      if (r.dangerouslySetInnerHTML != null) {
        if (r.children != null)
          throw Error(b(60));
        if (typeof r.dangerouslySetInnerHTML != "object" || !("__html" in r.dangerouslySetInnerHTML))
          throw Error(b(61));
      }
      if (r.style != null && typeof r.style != "object")
        throw Error(b(62));
    }
  }
  function Sn(n, r) {
    if (n.indexOf("-") === -1)
      return typeof r.is == "string";
    switch (n) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var Sr = null;
  function Zt(n) {
    return n = n.target || n.srcElement || window, n.correspondingUseElement && (n = n.correspondingUseElement), n.nodeType === 3 ? n.parentNode : n;
  }
  var wr = null, Yt = null, Wt = null;
  function Zi(n) {
    if (n = hs(n)) {
      if (typeof wr != "function")
        throw Error(b(280));
      var r = n.stateNode;
      r && (r = $e(r), wr(n.stateNode, n.type, r));
    }
  }
  function Ti(n) {
    Yt ? Wt ? Wt.push(n) : Wt = [n] : Yt = n;
  }
  function ul() {
    if (Yt) {
      var n = Yt, r = Wt;
      if (Wt = Yt = null, Zi(n), r)
        for (n = 0; n < r.length; n++)
          Zi(r[n]);
    }
  }
  function to(n, r) {
    return n(r);
  }
  function Qo() {
  }
  var La = false;
  function sl(n, r, l) {
    if (La)
      return n(r, l);
    La = true;
    try {
      return to(n, r, l);
    } finally {
      La = false, (Yt !== null || Wt !== null) && (Qo(), ul());
    }
  }
  function mi(n, r) {
    var l = n.stateNode;
    if (l === null)
      return null;
    var u = $e(l);
    if (u === null)
      return null;
    l = u[r];
    e:
      switch (r) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (u = !u.disabled) || (n = n.type, u = !(n === "button" || n === "input" || n === "select" || n === "textarea")), n = !u;
          break e;
        default:
          n = false;
      }
    if (n)
      return null;
    if (l && typeof l != "function")
      throw Error(b(231, r, typeof l));
    return l;
  }
  var pa = false;
  if (ge)
    try {
      var wi = {};
      Object.defineProperty(wi, "passive", { get: function() {
        pa = true;
      } }), window.addEventListener("test", wi, wi), window.removeEventListener("test", wi, wi);
    } catch {
      pa = false;
    }
  function va(n, r, l, u, c, d, h, C, T) {
    var H = Array.prototype.slice.call(arguments, 3);
    try {
      r.apply(l, H);
    } catch (re) {
      this.onError(re);
    }
  }
  var x = false, te = null, me = false, Ie = null, yt = { onError: function(n) {
    x = true, te = n;
  } };
  function zt(n, r, l, u, c, d, h, C, T) {
    x = false, te = null, va.apply(yt, arguments);
  }
  function He(n, r, l, u, c, d, h, C, T) {
    if (zt.apply(this, arguments), x) {
      if (x) {
        var H = te;
        x = false, te = null;
      } else
        throw Error(b(198));
      me || (me = true, Ie = H);
    }
  }
  function Je(n) {
    var r = n, l = n;
    if (n.alternate)
      for (; r.return; )
        r = r.return;
    else {
      n = r;
      do
        r = n, r.flags & 4098 && (l = r.return), n = r.return;
      while (n);
    }
    return r.tag === 3 ? l : null;
  }
  function bn(n) {
    if (n.tag === 13) {
      var r = n.memoizedState;
      if (r === null && (n = n.alternate, n !== null && (r = n.memoizedState)), r !== null)
        return r.dehydrated;
    }
    return null;
  }
  function Qt(n) {
    if (Je(n) !== n)
      throw Error(b(188));
  }
  function gt(n) {
    var r = n.alternate;
    if (!r) {
      if (r = Je(n), r === null)
        throw Error(b(188));
      return r !== n ? null : n;
    }
    for (var l = n, u = r; ; ) {
      var c = l.return;
      if (c === null)
        break;
      var d = c.alternate;
      if (d === null) {
        if (u = c.return, u !== null) {
          l = u;
          continue;
        }
        break;
      }
      if (c.child === d.child) {
        for (d = c.child; d; ) {
          if (d === l)
            return Qt(c), n;
          if (d === u)
            return Qt(c), r;
          d = d.sibling;
        }
        throw Error(b(188));
      }
      if (l.return !== u.return)
        l = c, u = d;
      else {
        for (var h = false, C = c.child; C; ) {
          if (C === l) {
            h = true, l = c, u = d;
            break;
          }
          if (C === u) {
            h = true, u = c, l = d;
            break;
          }
          C = C.sibling;
        }
        if (!h) {
          for (C = d.child; C; ) {
            if (C === l) {
              h = true, l = d, u = c;
              break;
            }
            if (C === u) {
              h = true, u = d, l = c;
              break;
            }
            C = C.sibling;
          }
          if (!h)
            throw Error(b(189));
        }
      }
      if (l.alternate !== u)
        throw Error(b(190));
    }
    if (l.tag !== 3)
      throw Error(b(188));
    return l.stateNode.current === l ? n : r;
  }
  function ir(n) {
    return n = gt(n), n !== null ? Ji(n) : null;
  }
  function Ji(n) {
    if (n.tag === 5 || n.tag === 6)
      return n;
    for (n = n.child; n !== null; ) {
      var r = Ji(n);
      if (r !== null)
        return r;
      n = n.sibling;
    }
    return null;
  }
  var cl = _.unstable_scheduleCallback, Gr = _.unstable_cancelCallback, Wf = _.unstable_shouldYield, Qf = _.unstable_requestPaint, vn = _.unstable_now, Gf = _.unstable_getCurrentPriorityLevel, ea = _.unstable_ImmediatePriority, pt = _.unstable_UserBlockingPriority, ma = _.unstable_NormalPriority, fl = _.unstable_LowPriority, Go = _.unstable_IdlePriority, dl = null, qr = null;
  function Ju(n) {
    if (qr && typeof qr.onCommitFiberRoot == "function")
      try {
        qr.onCommitFiberRoot(dl, n, void 0, (n.current.flags & 128) === 128);
      } catch {
      }
  }
  var Nr = Math.clz32 ? Math.clz32 : ic, es = Math.log, ts = Math.LN2;
  function ic(n) {
    return n >>>= 0, n === 0 ? 32 : 31 - (es(n) / ts | 0) | 0;
  }
  var qo = 64, pl = 4194304;
  function ta(n) {
    switch (n & -n) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return n & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return n & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return n;
    }
  }
  function Dr(n, r) {
    var l = n.pendingLanes;
    if (l === 0)
      return 0;
    var u = 0, c = n.suspendedLanes, d = n.pingedLanes, h = l & 268435455;
    if (h !== 0) {
      var C = h & ~c;
      C !== 0 ? u = ta(C) : (d &= h, d !== 0 && (u = ta(d)));
    } else
      h = l & ~c, h !== 0 ? u = ta(h) : d !== 0 && (u = ta(d));
    if (u === 0)
      return 0;
    if (r !== 0 && r !== u && !(r & c) && (c = u & -u, d = r & -r, c >= d || c === 16 && (d & 4194240) !== 0))
      return r;
    if (u & 4 && (u |= l & 16), r = n.entangledLanes, r !== 0)
      for (n = n.entanglements, r &= u; 0 < r; )
        l = 31 - Nr(r), c = 1 << l, u |= n[l], r &= ~c;
    return u;
  }
  function vl(n, r) {
    switch (n) {
      case 1:
      case 2:
      case 4:
        return r + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return r + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function ml(n, r) {
    for (var l = n.suspendedLanes, u = n.pingedLanes, c = n.expirationTimes, d = n.pendingLanes; 0 < d; ) {
      var h = 31 - Nr(d), C = 1 << h, T = c[h];
      T === -1 ? (!(C & l) || C & u) && (c[h] = vl(C, r)) : T <= r && (n.expiredLanes |= C), d &= ~C;
    }
  }
  function hl(n) {
    return n = n.pendingLanes & -1073741825, n !== 0 ? n : n & 1073741824 ? 1073741824 : 0;
  }
  function Xo() {
    var n = qo;
    return qo <<= 1, !(qo & 4194240) && (qo = 64), n;
  }
  function Ko(n) {
    for (var r = [], l = 0; 31 > l; l++)
      r.push(n);
    return r;
  }
  function Ma(n, r, l) {
    n.pendingLanes |= r, r !== 536870912 && (n.suspendedLanes = 0, n.pingedLanes = 0), n = n.eventTimes, r = 31 - Nr(r), n[r] = l;
  }
  function qf(n, r) {
    var l = n.pendingLanes & ~r;
    n.pendingLanes = r, n.suspendedLanes = 0, n.pingedLanes = 0, n.expiredLanes &= r, n.mutableReadLanes &= r, n.entangledLanes &= r, r = n.entanglements;
    var u = n.eventTimes;
    for (n = n.expirationTimes; 0 < l; ) {
      var c = 31 - Nr(l), d = 1 << c;
      r[c] = 0, u[c] = -1, n[c] = -1, l &= ~d;
    }
  }
  function ha(n, r) {
    var l = n.entangledLanes |= r;
    for (n = n.entanglements; l; ) {
      var u = 31 - Nr(l), c = 1 << u;
      c & r | n[u] & r && (n[u] |= r), l &= ~c;
    }
  }
  var jt = 0;
  function Zo(n) {
    return n &= -n, 1 < n ? 4 < n ? n & 268435455 ? 16 : 536870912 : 4 : 1;
  }
  var no, Jo, Mt, eu, tu, at = false, ro = [], _n = null, Xr = null, Or = null, yl = /* @__PURE__ */ new Map(), Rn = /* @__PURE__ */ new Map(), Gt = [], ac = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Kr(n, r) {
    switch (n) {
      case "focusin":
      case "focusout":
        _n = null;
        break;
      case "dragenter":
      case "dragleave":
        Xr = null;
        break;
      case "mouseover":
      case "mouseout":
        Or = null;
        break;
      case "pointerover":
      case "pointerout":
        yl.delete(r.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Rn.delete(r.pointerId);
    }
  }
  function qn(n, r, l, u, c, d) {
    return n === null || n.nativeEvent !== d ? (n = { blockedOn: r, domEventName: l, eventSystemFlags: u, nativeEvent: d, targetContainers: [c] }, r !== null && (r = hs(r), r !== null && Jo(r)), n) : (n.eventSystemFlags |= u, r = n.targetContainers, c !== null && r.indexOf(c) === -1 && r.push(c), n);
  }
  function ya(n, r, l, u, c) {
    switch (r) {
      case "focusin":
        return _n = qn(_n, n, r, l, u, c), true;
      case "dragenter":
        return Xr = qn(Xr, n, r, l, u, c), true;
      case "mouseover":
        return Or = qn(Or, n, r, l, u, c), true;
      case "pointerover":
        var d = c.pointerId;
        return yl.set(d, qn(yl.get(d) || null, n, r, l, u, c)), true;
      case "gotpointercapture":
        return d = c.pointerId, Rn.set(d, qn(Rn.get(d) || null, n, r, l, u, c)), true;
    }
    return false;
  }
  function lc(n) {
    var r = Li(n.target);
    if (r !== null) {
      var l = Je(r);
      if (l !== null) {
        if (r = l.tag, r === 13) {
          if (r = bn(l), r !== null) {
            n.blockedOn = r, tu(n.priority, function() {
              Mt(l);
            });
            return;
          }
        } else if (r === 3 && l.stateNode.current.memoizedState.isDehydrated) {
          n.blockedOn = l.tag === 3 ? l.stateNode.containerInfo : null;
          return;
        }
      }
    }
    n.blockedOn = null;
  }
  function Aa(n) {
    if (n.blockedOn !== null)
      return false;
    for (var r = n.targetContainers; 0 < r.length; ) {
      var l = ru(n.domEventName, n.eventSystemFlags, r[0], n.nativeEvent);
      if (l === null) {
        l = n.nativeEvent;
        var u = new l.constructor(l.type, l);
        Sr = u, l.target.dispatchEvent(u), Sr = null;
      } else
        return r = hs(l), r !== null && Jo(r), n.blockedOn = l, false;
      r.shift();
    }
    return true;
  }
  function gl(n, r, l) {
    Aa(n) && l.delete(r);
  }
  function oc() {
    at = false, _n !== null && Aa(_n) && (_n = null), Xr !== null && Aa(Xr) && (Xr = null), Or !== null && Aa(Or) && (Or = null), yl.forEach(gl), Rn.forEach(gl);
  }
  function Ni(n, r) {
    n.blockedOn === r && (n.blockedOn = null, at || (at = true, _.unstable_scheduleCallback(_.unstable_NormalPriority, oc)));
  }
  function Sl(n) {
    function r(c) {
      return Ni(c, n);
    }
    if (0 < ro.length) {
      Ni(ro[0], n);
      for (var l = 1; l < ro.length; l++) {
        var u = ro[l];
        u.blockedOn === n && (u.blockedOn = null);
      }
    }
    for (_n !== null && Ni(_n, n), Xr !== null && Ni(Xr, n), Or !== null && Ni(Or, n), yl.forEach(r), Rn.forEach(r), l = 0; l < Gt.length; l++)
      u = Gt[l], u.blockedOn === n && (u.blockedOn = null);
    for (; 0 < Gt.length && (l = Gt[0], l.blockedOn === null); )
      lc(l), l.blockedOn === null && Gt.shift();
  }
  var bl = xe.ReactCurrentBatchConfig, Di = true;
  function nu(n, r, l, u) {
    var c = jt, d = bl.transition;
    bl.transition = null;
    try {
      jt = 1, El(n, r, l, u);
    } finally {
      jt = c, bl.transition = d;
    }
  }
  function _l(n, r, l, u) {
    var c = jt, d = bl.transition;
    bl.transition = null;
    try {
      jt = 4, El(n, r, l, u);
    } finally {
      jt = c, bl.transition = d;
    }
  }
  function El(n, r, l, u) {
    if (Di) {
      var c = ru(n, r, l, u);
      if (c === null)
        hc(n, r, u, io, l), Kr(n, u);
      else if (ya(c, n, r, l, u))
        u.stopPropagation();
      else if (Kr(n, u), r & 4 && -1 < ac.indexOf(n)) {
        for (; c !== null; ) {
          var d = hs(c);
          if (d !== null && no(d), d = ru(n, r, l, u), d === null && hc(n, r, u, io, l), d === c)
            break;
          c = d;
        }
        c !== null && u.stopPropagation();
      } else
        hc(n, r, u, null, l);
    }
  }
  var io = null;
  function ru(n, r, l, u) {
    if (io = null, n = Zt(u), n = Li(n), n !== null)
      if (r = Je(n), r === null)
        n = null;
      else if (l = r.tag, l === 13) {
        if (n = bn(r), n !== null)
          return n;
        n = null;
      } else if (l === 3) {
        if (r.stateNode.current.memoizedState.isDehydrated)
          return r.tag === 3 ? r.stateNode.containerInfo : null;
        n = null;
      } else
        r !== n && (n = null);
    return io = n, null;
  }
  function ns(n) {
    switch (n) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (Gf()) {
          case ea:
            return 1;
          case pt:
            return 4;
          case ma:
          case fl:
            return 16;
          case Go:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var na = null, m = null, k = null;
  function j() {
    if (k)
      return k;
    var n, r = m, l = r.length, u, c = "value" in na ? na.value : na.textContent, d = c.length;
    for (n = 0; n < l && r[n] === c[n]; n++)
      ;
    var h = l - n;
    for (u = 1; u <= h && r[l - u] === c[d - u]; u++)
      ;
    return k = c.slice(n, 1 < u ? 1 - u : void 0);
  }
  function B(n) {
    var r = n.keyCode;
    return "charCode" in n ? (n = n.charCode, n === 0 && r === 13 && (n = 13)) : n = r, n === 10 && (n = 13), 32 <= n || n === 13 ? n : 0;
  }
  function ue() {
    return true;
  }
  function Ge() {
    return false;
  }
  function Se(n) {
    function r(l, u, c, d, h) {
      this._reactName = l, this._targetInst = c, this.type = u, this.nativeEvent = d, this.target = h, this.currentTarget = null;
      for (var C in n)
        n.hasOwnProperty(C) && (l = n[C], this[C] = l ? l(d) : d[C]);
      return this.isDefaultPrevented = (d.defaultPrevented != null ? d.defaultPrevented : d.returnValue === false) ? ue : Ge, this.isPropagationStopped = Ge, this;
    }
    return R(r.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var l = this.nativeEvent;
      l && (l.preventDefault ? l.preventDefault() : typeof l.returnValue != "unknown" && (l.returnValue = false), this.isDefaultPrevented = ue);
    }, stopPropagation: function() {
      var l = this.nativeEvent;
      l && (l.stopPropagation ? l.stopPropagation() : typeof l.cancelBubble != "unknown" && (l.cancelBubble = true), this.isPropagationStopped = ue);
    }, persist: function() {
    }, isPersistent: ue }), r;
  }
  var We = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(n) {
    return n.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0 }, vt = Se(We), At = R({}, We, { view: 0, detail: 0 }), rn = Se(At), Jt, an, un, kt = R({}, At, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: ed, button: 0, buttons: 0, relatedTarget: function(n) {
    return n.relatedTarget === void 0 ? n.fromElement === n.srcElement ? n.toElement : n.fromElement : n.relatedTarget;
  }, movementX: function(n) {
    return "movementX" in n ? n.movementX : (n !== un && (un && n.type === "mousemove" ? (Jt = n.screenX - un.screenX, an = n.screenY - un.screenY) : an = Jt = 0, un = n), Jt);
  }, movementY: function(n) {
    return "movementY" in n ? n.movementY : an;
  } }), za = Se(kt), iu = R({}, kt, { dataTransfer: 0 }), rs = Se(iu), Xf = R({}, At, { relatedTarget: 0 }), ra = Se(Xf), is = R({}, We, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), as = Se(is), Kf = R({}, We, { clipboardData: function(n) {
    return "clipboardData" in n ? n.clipboardData : window.clipboardData;
  } }), ty = Se(Kf), ny = R({}, We, { data: 0 }), Zf = Se(ny), Jf = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, sv = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, cv = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
  function fv(n) {
    var r = this.nativeEvent;
    return r.getModifierState ? r.getModifierState(n) : (n = cv[n]) ? !!r[n] : false;
  }
  function ed() {
    return fv;
  }
  var Va = R({}, At, { key: function(n) {
    if (n.key) {
      var r = Jf[n.key] || n.key;
      if (r !== "Unidentified")
        return r;
    }
    return n.type === "keypress" ? (n = B(n), n === 13 ? "Enter" : String.fromCharCode(n)) : n.type === "keydown" || n.type === "keyup" ? sv[n.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: ed, charCode: function(n) {
    return n.type === "keypress" ? B(n) : 0;
  }, keyCode: function(n) {
    return n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
  }, which: function(n) {
    return n.type === "keypress" ? B(n) : n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
  } }), ry = Se(Va), td = R({}, kt, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), uc = Se(td), nd = R({}, At, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: ed }), iy = Se(nd), sc = R({}, We, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), dv = Se(sc), Zr = R({}, kt, {
    deltaX: function(n) {
      return "deltaX" in n ? n.deltaX : "wheelDeltaX" in n ? -n.wheelDeltaX : 0;
    },
    deltaY: function(n) {
      return "deltaY" in n ? n.deltaY : "wheelDeltaY" in n ? -n.wheelDeltaY : "wheelDelta" in n ? -n.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), Ua = Se(Zr), zn = [9, 13, 27, 32], ia = ge && "CompositionEvent" in window, ao = null;
  ge && "documentMode" in document && (ao = document.documentMode);
  var cc = ge && "TextEvent" in window && !ao, pv = ge && (!ia || ao && 8 < ao && 11 >= ao), au = " ", vv = false;
  function mv(n, r) {
    switch (n) {
      case "keyup":
        return zn.indexOf(r.keyCode) !== -1;
      case "keydown":
        return r.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function fc(n) {
    return n = n.detail, typeof n == "object" && "data" in n ? n.data : null;
  }
  var lu = false;
  function ay(n, r) {
    switch (n) {
      case "compositionend":
        return fc(r);
      case "keypress":
        return r.which !== 32 ? null : (vv = true, au);
      case "textInput":
        return n = r.data, n === au && vv ? null : n;
      default:
        return null;
    }
  }
  function ly(n, r) {
    if (lu)
      return n === "compositionend" || !ia && mv(n, r) ? (n = j(), k = m = na = null, lu = false, n) : null;
    switch (n) {
      case "paste":
        return null;
      case "keypress":
        if (!(r.ctrlKey || r.altKey || r.metaKey) || r.ctrlKey && r.altKey) {
          if (r.char && 1 < r.char.length)
            return r.char;
          if (r.which)
            return String.fromCharCode(r.which);
        }
        return null;
      case "compositionend":
        return pv && r.locale !== "ko" ? null : r.data;
      default:
        return null;
    }
  }
  var hv = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
  function yv(n) {
    var r = n && n.nodeName && n.nodeName.toLowerCase();
    return r === "input" ? !!hv[n.type] : r === "textarea";
  }
  function gv(n, r, l, u) {
    Ti(u), r = ps(r, "onChange"), 0 < r.length && (l = new vt("onChange", "change", null, l, u), n.push({ event: l, listeners: r }));
  }
  var ls = null, ou = null;
  function uu(n) {
    mc(n, 0);
  }
  function su(n) {
    var r = fu(n);
    if (Ir(r))
      return n;
  }
  function Sv(n, r) {
    if (n === "change")
      return r;
  }
  var rd = false;
  if (ge) {
    var id;
    if (ge) {
      var ad = "oninput" in document;
      if (!ad) {
        var bv = document.createElement("div");
        bv.setAttribute("oninput", "return;"), ad = typeof bv.oninput == "function";
      }
      id = ad;
    } else
      id = false;
    rd = id && (!document.documentMode || 9 < document.documentMode);
  }
  function _v() {
    ls && (ls.detachEvent("onpropertychange", Ev), ou = ls = null);
  }
  function Ev(n) {
    if (n.propertyName === "value" && su(ou)) {
      var r = [];
      gv(r, ou, n, Zt(n)), sl(uu, r);
    }
  }
  function oy(n, r, l) {
    n === "focusin" ? (_v(), ls = r, ou = l, ls.attachEvent("onpropertychange", Ev)) : n === "focusout" && _v();
  }
  function uy(n) {
    if (n === "selectionchange" || n === "keyup" || n === "keydown")
      return su(ou);
  }
  function sy(n, r) {
    if (n === "click")
      return su(r);
  }
  function Cv(n, r) {
    if (n === "input" || n === "change")
      return su(r);
  }
  function cy(n, r) {
    return n === r && (n !== 0 || 1 / n === 1 / r) || n !== n && r !== r;
  }
  var Oi = typeof Object.is == "function" ? Object.is : cy;
  function os(n, r) {
    if (Oi(n, r))
      return true;
    if (typeof n != "object" || n === null || typeof r != "object" || r === null)
      return false;
    var l = Object.keys(n), u = Object.keys(r);
    if (l.length !== u.length)
      return false;
    for (u = 0; u < l.length; u++) {
      var c = l[u];
      if (!Z.call(r, c) || !Oi(n[c], r[c]))
        return false;
    }
    return true;
  }
  function kv(n) {
    for (; n && n.firstChild; )
      n = n.firstChild;
    return n;
  }
  function xv(n, r) {
    var l = kv(n);
    n = 0;
    for (var u; l; ) {
      if (l.nodeType === 3) {
        if (u = n + l.textContent.length, n <= r && u >= r)
          return { node: l, offset: r - n };
        n = u;
      }
      e: {
        for (; l; ) {
          if (l.nextSibling) {
            l = l.nextSibling;
            break e;
          }
          l = l.parentNode;
        }
        l = void 0;
      }
      l = kv(l);
    }
  }
  function Rv(n, r) {
    return n && r ? n === r ? true : n && n.nodeType === 3 ? false : r && r.nodeType === 3 ? Rv(n, r.parentNode) : "contains" in n ? n.contains(r) : n.compareDocumentPosition ? !!(n.compareDocumentPosition(r) & 16) : false : false;
  }
  function dc() {
    for (var n = window, r = yn(); r instanceof n.HTMLIFrameElement; ) {
      try {
        var l = typeof r.contentWindow.location.href == "string";
      } catch {
        l = false;
      }
      if (l)
        n = r.contentWindow;
      else
        break;
      r = yn(n.document);
    }
    return r;
  }
  function ja(n) {
    var r = n && n.nodeName && n.nodeName.toLowerCase();
    return r && (r === "input" && (n.type === "text" || n.type === "search" || n.type === "tel" || n.type === "url" || n.type === "password") || r === "textarea" || n.contentEditable === "true");
  }
  function pc(n) {
    var r = dc(), l = n.focusedElem, u = n.selectionRange;
    if (r !== l && l && l.ownerDocument && Rv(l.ownerDocument.documentElement, l)) {
      if (u !== null && ja(l)) {
        if (r = u.start, n = u.end, n === void 0 && (n = r), "selectionStart" in l)
          l.selectionStart = r, l.selectionEnd = Math.min(n, l.value.length);
        else if (n = (r = l.ownerDocument || document) && r.defaultView || window, n.getSelection) {
          n = n.getSelection();
          var c = l.textContent.length, d = Math.min(u.start, c);
          u = u.end === void 0 ? d : Math.min(u.end, c), !n.extend && d > u && (c = u, u = d, d = c), c = xv(l, d);
          var h = xv(
            l,
            u
          );
          c && h && (n.rangeCount !== 1 || n.anchorNode !== c.node || n.anchorOffset !== c.offset || n.focusNode !== h.node || n.focusOffset !== h.offset) && (r = r.createRange(), r.setStart(c.node, c.offset), n.removeAllRanges(), d > u ? (n.addRange(r), n.extend(h.node, h.offset)) : (r.setEnd(h.node, h.offset), n.addRange(r)));
        }
      }
      for (r = [], n = l; n = n.parentNode; )
        n.nodeType === 1 && r.push({ element: n, left: n.scrollLeft, top: n.scrollTop });
      for (typeof l.focus == "function" && l.focus(), l = 0; l < r.length; l++)
        n = r[l], n.element.scrollLeft = n.left, n.element.scrollTop = n.top;
    }
  }
  var Tv = ge && "documentMode" in document && 11 >= document.documentMode, aa = null, ld = null, us = null, od = false;
  function wv(n, r, l) {
    var u = l.window === l ? l.document : l.nodeType === 9 ? l : l.ownerDocument;
    od || aa == null || aa !== yn(u) || (u = aa, "selectionStart" in u && ja(u) ? u = { start: u.selectionStart, end: u.selectionEnd } : (u = (u.ownerDocument && u.ownerDocument.defaultView || window).getSelection(), u = { anchorNode: u.anchorNode, anchorOffset: u.anchorOffset, focusNode: u.focusNode, focusOffset: u.focusOffset }), us && os(us, u) || (us = u, u = ps(ld, "onSelect"), 0 < u.length && (r = new vt("onSelect", "select", null, r, l), n.push({ event: r, listeners: u }), r.target = aa)));
  }
  function vc(n, r) {
    var l = {};
    return l[n.toLowerCase()] = r.toLowerCase(), l["Webkit" + n] = "webkit" + r, l["Moz" + n] = "moz" + r, l;
  }
  var lo = { animationend: vc("Animation", "AnimationEnd"), animationiteration: vc("Animation", "AnimationIteration"), animationstart: vc("Animation", "AnimationStart"), transitionend: vc("Transition", "TransitionEnd") }, ud = {}, sd = {};
  ge && (sd = document.createElement("div").style, "AnimationEvent" in window || (delete lo.animationend.animation, delete lo.animationiteration.animation, delete lo.animationstart.animation), "TransitionEvent" in window || delete lo.transitionend.transition);
  function Xn(n) {
    if (ud[n])
      return ud[n];
    if (!lo[n])
      return n;
    var r = lo[n], l;
    for (l in r)
      if (r.hasOwnProperty(l) && l in sd)
        return ud[n] = r[l];
    return n;
  }
  var cd = Xn("animationend"), Nv = Xn("animationiteration"), Dv = Xn("animationstart"), Ov = Xn("transitionend"), Lv = /* @__PURE__ */ new Map(), Mv = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function Fa(n, r) {
    Lv.set(n, r), P(r, [n]);
  }
  for (var ss = 0; ss < Mv.length; ss++) {
    var oo = Mv[ss], fy = oo.toLowerCase(), cs = oo[0].toUpperCase() + oo.slice(1);
    Fa(fy, "on" + cs);
  }
  Fa(cd, "onAnimationEnd"), Fa(Nv, "onAnimationIteration"), Fa(Dv, "onAnimationStart"), Fa("dblclick", "onDoubleClick"), Fa("focusin", "onFocus"), Fa("focusout", "onBlur"), Fa(Ov, "onTransitionEnd"), g("onMouseEnter", ["mouseout", "mouseover"]), g("onMouseLeave", ["mouseout", "mouseover"]), g("onPointerEnter", ["pointerout", "pointerover"]), g("onPointerLeave", ["pointerout", "pointerover"]), P("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" ")), P("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")), P("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), P("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" ")), P("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" ")), P("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var fs = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), dy = new Set("cancel close invalid load scroll toggle".split(" ").concat(fs));
  function Av(n, r, l) {
    var u = n.type || "unknown-event";
    n.currentTarget = l, He(u, r, void 0, n), n.currentTarget = null;
  }
  function mc(n, r) {
    r = (r & 4) !== 0;
    for (var l = 0; l < n.length; l++) {
      var u = n[l], c = u.event;
      u = u.listeners;
      e: {
        var d = void 0;
        if (r)
          for (var h = u.length - 1; 0 <= h; h--) {
            var C = u[h], T = C.instance, H = C.currentTarget;
            if (C = C.listener, T !== d && c.isPropagationStopped())
              break e;
            Av(c, C, H), d = T;
          }
        else
          for (h = 0; h < u.length; h++) {
            if (C = u[h], T = C.instance, H = C.currentTarget, C = C.listener, T !== d && c.isPropagationStopped())
              break e;
            Av(c, C, H), d = T;
          }
      }
    }
    if (me)
      throw n = Ie, me = false, Ie = null, n;
  }
  function ln(n, r) {
    var l = r[yd];
    l === void 0 && (l = r[yd] = /* @__PURE__ */ new Set());
    var u = n + "__bubble";
    l.has(u) || (zv(r, n, 2, false), l.add(u));
  }
  function Cl(n, r, l) {
    var u = 0;
    r && (u |= 4), zv(l, n, u, r);
  }
  var Ha = "_reactListening" + Math.random().toString(36).slice(2);
  function cu(n) {
    if (!n[Ha]) {
      n[Ha] = true, w.forEach(function(l) {
        l !== "selectionchange" && (dy.has(l) || Cl(l, false, n), Cl(l, true, n));
      });
      var r = n.nodeType === 9 ? n : n.ownerDocument;
      r === null || r[Ha] || (r[Ha] = true, Cl("selectionchange", false, r));
    }
  }
  function zv(n, r, l, u) {
    switch (ns(r)) {
      case 1:
        var c = nu;
        break;
      case 4:
        c = _l;
        break;
      default:
        c = El;
    }
    l = c.bind(null, r, l, n), c = void 0, !pa || r !== "touchstart" && r !== "touchmove" && r !== "wheel" || (c = true), u ? c !== void 0 ? n.addEventListener(r, l, { capture: true, passive: c }) : n.addEventListener(r, l, true) : c !== void 0 ? n.addEventListener(r, l, { passive: c }) : n.addEventListener(r, l, false);
  }
  function hc(n, r, l, u, c) {
    var d = u;
    if (!(r & 1) && !(r & 2) && u !== null)
      e:
        for (; ; ) {
          if (u === null)
            return;
          var h = u.tag;
          if (h === 3 || h === 4) {
            var C = u.stateNode.containerInfo;
            if (C === c || C.nodeType === 8 && C.parentNode === c)
              break;
            if (h === 4)
              for (h = u.return; h !== null; ) {
                var T = h.tag;
                if ((T === 3 || T === 4) && (T = h.stateNode.containerInfo, T === c || T.nodeType === 8 && T.parentNode === c))
                  return;
                h = h.return;
              }
            for (; C !== null; ) {
              if (h = Li(C), h === null)
                return;
              if (T = h.tag, T === 5 || T === 6) {
                u = d = h;
                continue e;
              }
              C = C.parentNode;
            }
          }
          u = u.return;
        }
    sl(function() {
      var H = d, re = Zt(l), ae = [];
      e: {
        var ne = Lv.get(n);
        if (ne !== void 0) {
          var Ce = vt, Le = n;
          switch (n) {
            case "keypress":
              if (B(l) === 0)
                break e;
            case "keydown":
            case "keyup":
              Ce = ry;
              break;
            case "focusin":
              Le = "focus", Ce = ra;
              break;
            case "focusout":
              Le = "blur", Ce = ra;
              break;
            case "beforeblur":
            case "afterblur":
              Ce = ra;
              break;
            case "click":
              if (l.button === 2)
                break e;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              Ce = za;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              Ce = rs;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              Ce = iy;
              break;
            case cd:
            case Nv:
            case Dv:
              Ce = as;
              break;
            case Ov:
              Ce = dv;
              break;
            case "scroll":
              Ce = rn;
              break;
            case "wheel":
              Ce = Ua;
              break;
            case "copy":
            case "cut":
            case "paste":
              Ce = ty;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              Ce = uc;
          }
          var ze = (r & 4) !== 0, Mn = !ze && n === "scroll", M = ze ? ne !== null ? ne + "Capture" : null : ne;
          ze = [];
          for (var D = H, V; D !== null; ) {
            V = D;
            var se = V.stateNode;
            if (V.tag === 5 && se !== null && (V = se, M !== null && (se = mi(D, M), se != null && ze.push(ds(D, se, V)))), Mn)
              break;
            D = D.return;
          }
          0 < ze.length && (ne = new Ce(ne, Le, null, l, re), ae.push({ event: ne, listeners: ze }));
        }
      }
      if (!(r & 7)) {
        e: {
          if (ne = n === "mouseover" || n === "pointerover", Ce = n === "mouseout" || n === "pointerout", ne && l !== Sr && (Le = l.relatedTarget || l.fromElement) && (Li(Le) || Le[Pa]))
            break e;
          if ((Ce || ne) && (ne = re.window === re ? re : (ne = re.ownerDocument) ? ne.defaultView || ne.parentWindow : window, Ce ? (Le = l.relatedTarget || l.toElement, Ce = H, Le = Le ? Li(Le) : null, Le !== null && (Mn = Je(Le), Le !== Mn || Le.tag !== 5 && Le.tag !== 6) && (Le = null)) : (Ce = null, Le = H), Ce !== Le)) {
            if (ze = za, se = "onMouseLeave", M = "onMouseEnter", D = "mouse", (n === "pointerout" || n === "pointerover") && (ze = uc, se = "onPointerLeave", M = "onPointerEnter", D = "pointer"), Mn = Ce == null ? ne : fu(Ce), V = Le == null ? ne : fu(Le), ne = new ze(se, D + "leave", Ce, l, re), ne.target = Mn, ne.relatedTarget = V, se = null, Li(re) === H && (ze = new ze(M, D + "enter", Le, l, re), ze.target = V, ze.relatedTarget = Mn, se = ze), Mn = se, Ce && Le)
              t: {
                for (ze = Ce, M = Le, D = 0, V = ze; V; V = uo(V))
                  D++;
                for (V = 0, se = M; se; se = uo(se))
                  V++;
                for (; 0 < D - V; )
                  ze = uo(ze), D--;
                for (; 0 < V - D; )
                  M = uo(M), V--;
                for (; D--; ) {
                  if (ze === M || M !== null && ze === M.alternate)
                    break t;
                  ze = uo(ze), M = uo(M);
                }
                ze = null;
              }
            else
              ze = null;
            Ce !== null && fd(ae, ne, Ce, ze, false), Le !== null && Mn !== null && fd(ae, Mn, Le, ze, true);
          }
        }
        e: {
          if (ne = H ? fu(H) : window, Ce = ne.nodeName && ne.nodeName.toLowerCase(), Ce === "select" || Ce === "input" && ne.type === "file")
            var Ve = Sv;
          else if (yv(ne))
            if (rd)
              Ve = Cv;
            else {
              Ve = uy;
              var Me = oy;
            }
          else
            (Ce = ne.nodeName) && Ce.toLowerCase() === "input" && (ne.type === "checkbox" || ne.type === "radio") && (Ve = sy);
          if (Ve && (Ve = Ve(n, H))) {
            gv(ae, Ve, l, re);
            break e;
          }
          Me && Me(n, ne, H), n === "focusout" && (Me = ne._wrapperState) && Me.controlled && ne.type === "number" && Yr(ne, "number", ne.value);
        }
        switch (Me = H ? fu(H) : window, n) {
          case "focusin":
            (yv(Me) || Me.contentEditable === "true") && (aa = Me, ld = H, us = null);
            break;
          case "focusout":
            us = ld = aa = null;
            break;
          case "mousedown":
            od = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            od = false, wv(ae, l, re);
            break;
          case "selectionchange":
            if (Tv)
              break;
          case "keydown":
          case "keyup":
            wv(ae, l, re);
        }
        var Pe;
        if (ia)
          e: {
            switch (n) {
              case "compositionstart":
                var nt = "onCompositionStart";
                break e;
              case "compositionend":
                nt = "onCompositionEnd";
                break e;
              case "compositionupdate":
                nt = "onCompositionUpdate";
                break e;
            }
            nt = void 0;
          }
        else
          lu ? mv(n, l) && (nt = "onCompositionEnd") : n === "keydown" && l.keyCode === 229 && (nt = "onCompositionStart");
        nt && (pv && l.locale !== "ko" && (lu || nt !== "onCompositionStart" ? nt === "onCompositionEnd" && lu && (Pe = j()) : (na = re, m = "value" in na ? na.value : na.textContent, lu = true)), Me = ps(H, nt), 0 < Me.length && (nt = new Zf(nt, n, null, l, re), ae.push({ event: nt, listeners: Me }), Pe ? nt.data = Pe : (Pe = fc(l), Pe !== null && (nt.data = Pe)))), (Pe = cc ? ay(n, l) : ly(n, l)) && (H = ps(H, "onBeforeInput"), 0 < H.length && (re = new Zf("onBeforeInput", "beforeinput", null, l, re), ae.push({ event: re, listeners: H }), re.data = Pe));
      }
      mc(ae, r);
    });
  }
  function ds(n, r, l) {
    return { instance: n, listener: r, currentTarget: l };
  }
  function ps(n, r) {
    for (var l = r + "Capture", u = []; n !== null; ) {
      var c = n, d = c.stateNode;
      c.tag === 5 && d !== null && (c = d, d = mi(n, l), d != null && u.unshift(ds(n, d, c)), d = mi(n, r), d != null && u.push(ds(n, d, c))), n = n.return;
    }
    return u;
  }
  function uo(n) {
    if (n === null)
      return null;
    do
      n = n.return;
    while (n && n.tag !== 5);
    return n || null;
  }
  function fd(n, r, l, u, c) {
    for (var d = r._reactName, h = []; l !== null && l !== u; ) {
      var C = l, T = C.alternate, H = C.stateNode;
      if (T !== null && T === u)
        break;
      C.tag === 5 && H !== null && (C = H, c ? (T = mi(l, d), T != null && h.unshift(ds(l, T, C))) : c || (T = mi(l, d), T != null && h.push(ds(l, T, C)))), l = l.return;
    }
    h.length !== 0 && n.push({ event: r, listeners: h });
  }
  var dd = /\r\n?/g, py = /\u0000|\uFFFD/g;
  function pd(n) {
    return (typeof n == "string" ? n : "" + n).replace(dd, `
`).replace(py, "");
  }
  function yc(n, r, l) {
    if (r = pd(r), pd(n) !== r && l)
      throw Error(b(425));
  }
  function gc() {
  }
  var vd = null, so = null;
  function vs(n, r) {
    return n === "textarea" || n === "noscript" || typeof r.children == "string" || typeof r.children == "number" || typeof r.dangerouslySetInnerHTML == "object" && r.dangerouslySetInnerHTML !== null && r.dangerouslySetInnerHTML.__html != null;
  }
  var co = typeof setTimeout == "function" ? setTimeout : void 0, Vv = typeof clearTimeout == "function" ? clearTimeout : void 0, md = typeof Promise == "function" ? Promise : void 0, hd = typeof queueMicrotask == "function" ? queueMicrotask : typeof md < "u" ? function(n) {
    return md.resolve(null).then(n).catch(vy);
  } : co;
  function vy(n) {
    setTimeout(function() {
      throw n;
    });
  }
  function kl(n, r) {
    var l = r, u = 0;
    do {
      var c = l.nextSibling;
      if (n.removeChild(l), c && c.nodeType === 8)
        if (l = c.data, l === "/$") {
          if (u === 0) {
            n.removeChild(c), Sl(r);
            return;
          }
          u--;
        } else
          l !== "$" && l !== "$?" && l !== "$!" || u++;
      l = c;
    } while (l);
    Sl(r);
  }
  function la(n) {
    for (; n != null; n = n.nextSibling) {
      var r = n.nodeType;
      if (r === 1 || r === 3)
        break;
      if (r === 8) {
        if (r = n.data, r === "$" || r === "$!" || r === "$?")
          break;
        if (r === "/$")
          return null;
      }
    }
    return n;
  }
  function ms(n) {
    n = n.previousSibling;
    for (var r = 0; n; ) {
      if (n.nodeType === 8) {
        var l = n.data;
        if (l === "$" || l === "$!" || l === "$?") {
          if (r === 0)
            return n;
          r--;
        } else
          l === "/$" && r++;
      }
      n = n.previousSibling;
    }
    return null;
  }
  var xl = Math.random().toString(36).slice(2), ga = "__reactFiber$" + xl, fo = "__reactProps$" + xl, Pa = "__reactContainer$" + xl, yd = "__reactEvents$" + xl, my = "__reactListeners$" + xl, gd = "__reactHandles$" + xl;
  function Li(n) {
    var r = n[ga];
    if (r)
      return r;
    for (var l = n.parentNode; l; ) {
      if (r = l[Pa] || l[ga]) {
        if (l = r.alternate, r.child !== null || l !== null && l.child !== null)
          for (n = ms(n); n !== null; ) {
            if (l = n[ga])
              return l;
            n = ms(n);
          }
        return r;
      }
      n = l, l = n.parentNode;
    }
    return null;
  }
  function hs(n) {
    return n = n[ga] || n[Pa], !n || n.tag !== 5 && n.tag !== 6 && n.tag !== 13 && n.tag !== 3 ? null : n;
  }
  function fu(n) {
    if (n.tag === 5 || n.tag === 6)
      return n.stateNode;
    throw Error(b(33));
  }
  function $e(n) {
    return n[fo] || null;
  }
  var Rl = [], sn = -1;
  function ut(n) {
    return { current: n };
  }
  function Bt(n) {
    0 > sn || (n.current = Rl[sn], Rl[sn] = null, sn--);
  }
  function qt(n, r) {
    sn++, Rl[sn] = n.current, n.current = r;
  }
  var Sa = {}, tt = ut(Sa), Tn = ut(false), Jr = Sa;
  function Mi(n, r) {
    var l = n.type.contextTypes;
    if (!l)
      return Sa;
    var u = n.stateNode;
    if (u && u.__reactInternalMemoizedUnmaskedChildContext === r)
      return u.__reactInternalMemoizedMaskedChildContext;
    var c = {}, d;
    for (d in l)
      c[d] = r[d];
    return u && (n = n.stateNode, n.__reactInternalMemoizedUnmaskedChildContext = r, n.__reactInternalMemoizedMaskedChildContext = c), c;
  }
  function mn(n) {
    return n = n.childContextTypes, n != null;
  }
  function Ai() {
    Bt(Tn), Bt(tt);
  }
  function Tl(n, r, l) {
    if (tt.current !== Sa)
      throw Error(b(168));
    qt(tt, r), qt(Tn, l);
  }
  function ys(n, r, l) {
    var u = n.stateNode;
    if (r = r.childContextTypes, typeof u.getChildContext != "function")
      return l;
    u = u.getChildContext();
    for (var c in u)
      if (!(c in r))
        throw Error(b(108, bt(n) || "Unknown", c));
    return R({}, l, u);
  }
  function Sc(n) {
    return n = (n = n.stateNode) && n.__reactInternalMemoizedMergedChildContext || Sa, Jr = tt.current, qt(tt, n), qt(Tn, Tn.current), true;
  }
  function Uv(n, r, l) {
    var u = n.stateNode;
    if (!u)
      throw Error(b(169));
    l ? (n = ys(n, r, Jr), u.__reactInternalMemoizedMergedChildContext = n, Bt(Tn), Bt(tt), qt(tt, n)) : Bt(Tn), qt(Tn, l);
  }
  var hi = null, Kn = false, gs = false;
  function Sd(n) {
    hi === null ? hi = [n] : hi.push(n);
  }
  function bd(n) {
    Kn = true, Sd(n);
  }
  function ei() {
    if (!gs && hi !== null) {
      gs = true;
      var n = 0, r = jt;
      try {
        var l = hi;
        for (jt = 1; n < l.length; n++) {
          var u = l[n];
          do
            u = u(true);
          while (u !== null);
        }
        hi = null, Kn = false;
      } catch (c) {
        throw hi !== null && (hi = hi.slice(n + 1)), cl(ea, ei), c;
      } finally {
        jt = r, gs = false;
      }
    }
    return null;
  }
  var wl = [], ti = 0, po = null, du = 0, ni = [], br = 0, zi = null, ar = 1, Ba = "";
  function yi(n, r) {
    wl[ti++] = du, wl[ti++] = po, po = n, du = r;
  }
  function _d(n, r, l) {
    ni[br++] = ar, ni[br++] = Ba, ni[br++] = zi, zi = n;
    var u = ar;
    n = Ba;
    var c = 32 - Nr(u) - 1;
    u &= ~(1 << c), l += 1;
    var d = 32 - Nr(r) + c;
    if (30 < d) {
      var h = c - c % 5;
      d = (u & (1 << h) - 1).toString(32), u >>= h, c -= h, ar = 1 << 32 - Nr(r) + c | l << c | u, Ba = d + n;
    } else
      ar = 1 << d | l << c | u, Ba = n;
  }
  function bc(n) {
    n.return !== null && (yi(n, 1), _d(n, 1, 0));
  }
  function Ed(n) {
    for (; n === po; )
      po = wl[--ti], wl[ti] = null, du = wl[--ti], wl[ti] = null;
    for (; n === zi; )
      zi = ni[--br], ni[br] = null, Ba = ni[--br], ni[br] = null, ar = ni[--br], ni[br] = null;
  }
  var gi = null, ri = null, cn = false, Vi = null;
  function Cd(n, r) {
    var l = Bi(5, null, null, 0);
    l.elementType = "DELETED", l.stateNode = r, l.return = n, r = n.deletions, r === null ? (n.deletions = [l], n.flags |= 16) : r.push(l);
  }
  function jv(n, r) {
    switch (n.tag) {
      case 5:
        var l = n.type;
        return r = r.nodeType !== 1 || l.toLowerCase() !== r.nodeName.toLowerCase() ? null : r, r !== null ? (n.stateNode = r, gi = n, ri = la(r.firstChild), true) : false;
      case 6:
        return r = n.pendingProps === "" || r.nodeType !== 3 ? null : r, r !== null ? (n.stateNode = r, gi = n, ri = null, true) : false;
      case 13:
        return r = r.nodeType !== 8 ? null : r, r !== null ? (l = zi !== null ? { id: ar, overflow: Ba } : null, n.memoizedState = { dehydrated: r, treeContext: l, retryLane: 1073741824 }, l = Bi(18, null, null, 0), l.stateNode = r, l.return = n, n.child = l, gi = n, ri = null, true) : false;
      default:
        return false;
    }
  }
  function _c(n) {
    return (n.mode & 1) !== 0 && (n.flags & 128) === 0;
  }
  function Ec(n) {
    if (cn) {
      var r = ri;
      if (r) {
        var l = r;
        if (!jv(n, r)) {
          if (_c(n))
            throw Error(b(418));
          r = la(l.nextSibling);
          var u = gi;
          r && jv(n, r) ? Cd(u, l) : (n.flags = n.flags & -4097 | 2, cn = false, gi = n);
        }
      } else {
        if (_c(n))
          throw Error(b(418));
        n.flags = n.flags & -4097 | 2, cn = false, gi = n;
      }
    }
  }
  function Fv(n) {
    for (n = n.return; n !== null && n.tag !== 5 && n.tag !== 3 && n.tag !== 13; )
      n = n.return;
    gi = n;
  }
  function Cc(n) {
    if (n !== gi)
      return false;
    if (!cn)
      return Fv(n), cn = true, false;
    var r;
    if ((r = n.tag !== 3) && !(r = n.tag !== 5) && (r = n.type, r = r !== "head" && r !== "body" && !vs(n.type, n.memoizedProps)), r && (r = ri)) {
      if (_c(n))
        throw Hv(), Error(b(418));
      for (; r; )
        Cd(n, r), r = la(r.nextSibling);
    }
    if (Fv(n), n.tag === 13) {
      if (n = n.memoizedState, n = n !== null ? n.dehydrated : null, !n)
        throw Error(b(317));
      e: {
        for (n = n.nextSibling, r = 0; n; ) {
          if (n.nodeType === 8) {
            var l = n.data;
            if (l === "/$") {
              if (r === 0) {
                ri = la(n.nextSibling);
                break e;
              }
              r--;
            } else
              l !== "$" && l !== "$!" && l !== "$?" || r++;
          }
          n = n.nextSibling;
        }
        ri = null;
      }
    } else
      ri = gi ? la(n.stateNode.nextSibling) : null;
    return true;
  }
  function Hv() {
    for (var n = ri; n; )
      n = la(n.nextSibling);
  }
  function En() {
    ri = gi = null, cn = false;
  }
  function kd(n) {
    Vi === null ? Vi = [n] : Vi.push(n);
  }
  var kc = xe.ReactCurrentBatchConfig;
  function Si(n, r) {
    if (n && n.defaultProps) {
      r = R({}, r), n = n.defaultProps;
      for (var l in n)
        r[l] === void 0 && (r[l] = n[l]);
      return r;
    }
    return r;
  }
  var ba = ut(null), xc = null, Nl = null, xd = null;
  function Rd() {
    xd = Nl = xc = null;
  }
  function Dl(n) {
    var r = ba.current;
    Bt(ba), n._currentValue = r;
  }
  function Zn(n, r, l) {
    for (; n !== null; ) {
      var u = n.alternate;
      if ((n.childLanes & r) !== r ? (n.childLanes |= r, u !== null && (u.childLanes |= r)) : u !== null && (u.childLanes & r) !== r && (u.childLanes |= r), n === l)
        break;
      n = n.return;
    }
  }
  function he(n, r) {
    xc = n, xd = Nl = null, n = n.dependencies, n !== null && n.firstContext !== null && (n.lanes & r && (Vn = true), n.firstContext = null);
  }
  function Ln(n) {
    var r = n._currentValue;
    if (xd !== n)
      if (n = { context: n, memoizedValue: r, next: null }, Nl === null) {
        if (xc === null)
          throw Error(b(308));
        Nl = n, xc.dependencies = { lanes: 0, firstContext: n };
      } else
        Nl = Nl.next = n;
    return r;
  }
  var lr = null;
  function Td(n) {
    lr === null ? lr = [n] : lr.push(n);
  }
  function Pv(n, r, l, u) {
    var c = r.interleaved;
    return c === null ? (l.next = l, Td(r)) : (l.next = c.next, c.next = l), r.interleaved = l, Ia(n, u);
  }
  function Ia(n, r) {
    n.lanes |= r;
    var l = n.alternate;
    for (l !== null && (l.lanes |= r), l = n, n = n.return; n !== null; )
      n.childLanes |= r, l = n.alternate, l !== null && (l.childLanes |= r), l = n, n = n.return;
    return l.tag === 3 ? l.stateNode : null;
  }
  var Ol = false;
  function wd(n) {
    n.updateQueue = { baseState: n.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function Pn(n, r) {
    n = n.updateQueue, r.updateQueue === n && (r.updateQueue = { baseState: n.baseState, firstBaseUpdate: n.firstBaseUpdate, lastBaseUpdate: n.lastBaseUpdate, shared: n.shared, effects: n.effects });
  }
  function $a(n, r) {
    return { eventTime: n, lane: r, tag: 0, payload: null, callback: null, next: null };
  }
  function Ll(n, r, l) {
    var u = n.updateQueue;
    if (u === null)
      return null;
    if (u = u.shared, _t & 2) {
      var c = u.pending;
      return c === null ? r.next = r : (r.next = c.next, c.next = r), u.pending = r, Ia(n, l);
    }
    return c = u.interleaved, c === null ? (r.next = r, Td(u)) : (r.next = c.next, c.next = r), u.interleaved = r, Ia(n, l);
  }
  function Rc(n, r, l) {
    if (r = r.updateQueue, r !== null && (r = r.shared, (l & 4194240) !== 0)) {
      var u = r.lanes;
      u &= n.pendingLanes, l |= u, r.lanes = l, ha(n, l);
    }
  }
  function Nd(n, r) {
    var l = n.updateQueue, u = n.alternate;
    if (u !== null && (u = u.updateQueue, l === u)) {
      var c = null, d = null;
      if (l = l.firstBaseUpdate, l !== null) {
        do {
          var h = { eventTime: l.eventTime, lane: l.lane, tag: l.tag, payload: l.payload, callback: l.callback, next: null };
          d === null ? c = d = h : d = d.next = h, l = l.next;
        } while (l !== null);
        d === null ? c = d = r : d = d.next = r;
      } else
        c = d = r;
      l = { baseState: u.baseState, firstBaseUpdate: c, lastBaseUpdate: d, shared: u.shared, effects: u.effects }, n.updateQueue = l;
      return;
    }
    n = l.lastBaseUpdate, n === null ? l.firstBaseUpdate = r : n.next = r, l.lastBaseUpdate = r;
  }
  function Ml(n, r, l, u) {
    var c = n.updateQueue;
    Ol = false;
    var d = c.firstBaseUpdate, h = c.lastBaseUpdate, C = c.shared.pending;
    if (C !== null) {
      c.shared.pending = null;
      var T = C, H = T.next;
      T.next = null, h === null ? d = H : h.next = H, h = T;
      var re = n.alternate;
      re !== null && (re = re.updateQueue, C = re.lastBaseUpdate, C !== h && (C === null ? re.firstBaseUpdate = H : C.next = H, re.lastBaseUpdate = T));
    }
    if (d !== null) {
      var ae = c.baseState;
      h = 0, re = H = T = null, C = d;
      do {
        var ne = C.lane, Ce = C.eventTime;
        if ((u & ne) === ne) {
          re !== null && (re = re.next = {
            eventTime: Ce,
            lane: 0,
            tag: C.tag,
            payload: C.payload,
            callback: C.callback,
            next: null
          });
          e: {
            var Le = n, ze = C;
            switch (ne = r, Ce = l, ze.tag) {
              case 1:
                if (Le = ze.payload, typeof Le == "function") {
                  ae = Le.call(Ce, ae, ne);
                  break e;
                }
                ae = Le;
                break e;
              case 3:
                Le.flags = Le.flags & -65537 | 128;
              case 0:
                if (Le = ze.payload, ne = typeof Le == "function" ? Le.call(Ce, ae, ne) : Le, ne == null)
                  break e;
                ae = R({}, ae, ne);
                break e;
              case 2:
                Ol = true;
            }
          }
          C.callback !== null && C.lane !== 0 && (n.flags |= 64, ne = c.effects, ne === null ? c.effects = [C] : ne.push(C));
        } else
          Ce = { eventTime: Ce, lane: ne, tag: C.tag, payload: C.payload, callback: C.callback, next: null }, re === null ? (H = re = Ce, T = ae) : re = re.next = Ce, h |= ne;
        if (C = C.next, C === null) {
          if (C = c.shared.pending, C === null)
            break;
          ne = C, C = ne.next, ne.next = null, c.lastBaseUpdate = ne, c.shared.pending = null;
        }
      } while (true);
      if (re === null && (T = ae), c.baseState = T, c.firstBaseUpdate = H, c.lastBaseUpdate = re, r = c.shared.interleaved, r !== null) {
        c = r;
        do
          h |= c.lane, c = c.next;
        while (c !== r);
      } else
        d === null && (c.shared.lanes = 0);
      Ga |= h, n.lanes = h, n.memoizedState = ae;
    }
  }
  function vo(n, r, l) {
    if (n = r.effects, r.effects = null, n !== null)
      for (r = 0; r < n.length; r++) {
        var u = n[r], c = u.callback;
        if (c !== null) {
          if (u.callback = null, u = l, typeof c != "function")
            throw Error(b(191, c));
          c.call(u);
        }
      }
  }
  var Bv = new E.Component().refs;
  function Dd(n, r, l, u) {
    r = n.memoizedState, l = l(u, r), l = l == null ? r : R({}, r, l), n.memoizedState = l, n.lanes === 0 && (n.updateQueue.baseState = l);
  }
  var Tc = { isMounted: function(n) {
    return (n = n._reactInternals) ? Je(n) === n : false;
  }, enqueueSetState: function(n, r, l) {
    n = n._reactInternals;
    var u = kr(), c = Un(n), d = $a(u, c);
    d.payload = r, l != null && (d.callback = l), r = Ll(n, d, c), r !== null && (xr(r, n, c, u), Rc(r, n, c));
  }, enqueueReplaceState: function(n, r, l) {
    n = n._reactInternals;
    var u = kr(), c = Un(n), d = $a(u, c);
    d.tag = 1, d.payload = r, l != null && (d.callback = l), r = Ll(n, d, c), r !== null && (xr(r, n, c, u), Rc(r, n, c));
  }, enqueueForceUpdate: function(n, r) {
    n = n._reactInternals;
    var l = kr(), u = Un(n), c = $a(l, u);
    c.tag = 2, r != null && (c.callback = r), r = Ll(n, c, u), r !== null && (xr(r, n, u, l), Rc(r, n, u));
  } };
  function Iv(n, r, l, u, c, d, h) {
    return n = n.stateNode, typeof n.shouldComponentUpdate == "function" ? n.shouldComponentUpdate(u, d, h) : r.prototype && r.prototype.isPureReactComponent ? !os(l, u) || !os(c, d) : true;
  }
  function $v(n, r, l) {
    var u = false, c = Sa, d = r.contextType;
    return typeof d == "object" && d !== null ? d = Ln(d) : (c = mn(r) ? Jr : tt.current, u = r.contextTypes, d = (u = u != null) ? Mi(n, c) : Sa), r = new r(l, d), n.memoizedState = r.state !== null && r.state !== void 0 ? r.state : null, r.updater = Tc, n.stateNode = r, r._reactInternals = n, u && (n = n.stateNode, n.__reactInternalMemoizedUnmaskedChildContext = c, n.__reactInternalMemoizedMaskedChildContext = d), r;
  }
  function Yv(n, r, l, u) {
    n = r.state, typeof r.componentWillReceiveProps == "function" && r.componentWillReceiveProps(l, u), typeof r.UNSAFE_componentWillReceiveProps == "function" && r.UNSAFE_componentWillReceiveProps(l, u), r.state !== n && Tc.enqueueReplaceState(r, r.state, null);
  }
  function wc(n, r, l, u) {
    var c = n.stateNode;
    c.props = l, c.state = n.memoizedState, c.refs = Bv, wd(n);
    var d = r.contextType;
    typeof d == "object" && d !== null ? c.context = Ln(d) : (d = mn(r) ? Jr : tt.current, c.context = Mi(n, d)), c.state = n.memoizedState, d = r.getDerivedStateFromProps, typeof d == "function" && (Dd(n, r, d, l), c.state = n.memoizedState), typeof r.getDerivedStateFromProps == "function" || typeof c.getSnapshotBeforeUpdate == "function" || typeof c.UNSAFE_componentWillMount != "function" && typeof c.componentWillMount != "function" || (r = c.state, typeof c.componentWillMount == "function" && c.componentWillMount(), typeof c.UNSAFE_componentWillMount == "function" && c.UNSAFE_componentWillMount(), r !== c.state && Tc.enqueueReplaceState(c, c.state, null), Ml(n, l, c, u), c.state = n.memoizedState), typeof c.componentDidMount == "function" && (n.flags |= 4194308);
  }
  function pu(n, r, l) {
    if (n = l.ref, n !== null && typeof n != "function" && typeof n != "object") {
      if (l._owner) {
        if (l = l._owner, l) {
          if (l.tag !== 1)
            throw Error(b(309));
          var u = l.stateNode;
        }
        if (!u)
          throw Error(b(147, n));
        var c = u, d = "" + n;
        return r !== null && r.ref !== null && typeof r.ref == "function" && r.ref._stringRef === d ? r.ref : (r = function(h) {
          var C = c.refs;
          C === Bv && (C = c.refs = {}), h === null ? delete C[d] : C[d] = h;
        }, r._stringRef = d, r);
      }
      if (typeof n != "string")
        throw Error(b(284));
      if (!l._owner)
        throw Error(b(290, n));
    }
    return n;
  }
  function Nc(n, r) {
    throw n = Object.prototype.toString.call(r), Error(b(31, n === "[object Object]" ? "object with keys {" + Object.keys(r).join(", ") + "}" : n));
  }
  function Wv(n) {
    var r = n._init;
    return r(n._payload);
  }
  function Qv(n) {
    function r(M, D) {
      if (n) {
        var V = M.deletions;
        V === null ? (M.deletions = [D], M.flags |= 16) : V.push(D);
      }
    }
    function l(M, D) {
      if (!n)
        return null;
      for (; D !== null; )
        r(M, D), D = D.sibling;
      return null;
    }
    function u(M, D) {
      for (M = /* @__PURE__ */ new Map(); D !== null; )
        D.key !== null ? M.set(D.key, D) : M.set(D.index, D), D = D.sibling;
      return M;
    }
    function c(M, D) {
      return M = Pl(M, D), M.index = 0, M.sibling = null, M;
    }
    function d(M, D, V) {
      return M.index = V, n ? (V = M.alternate, V !== null ? (V = V.index, V < D ? (M.flags |= 2, D) : V) : (M.flags |= 2, D)) : (M.flags |= 1048576, D);
    }
    function h(M) {
      return n && M.alternate === null && (M.flags |= 2), M;
    }
    function C(M, D, V, se) {
      return D === null || D.tag !== 6 ? (D = Us(V, M.mode, se), D.return = M, D) : (D = c(D, V), D.return = M, D);
    }
    function T(M, D, V, se) {
      var Ve = V.type;
      return Ve === De ? re(M, D, V.props.children, se, V.key) : D !== null && (D.elementType === Ve || typeof Ve == "object" && Ve !== null && Ve.$$typeof === ht && Wv(Ve) === D.type) ? (se = c(D, V.props), se.ref = pu(M, D, V), se.return = M, se) : (se = uf(V.type, V.key, V.props, null, M.mode, se), se.ref = pu(M, D, V), se.return = M, se);
    }
    function H(M, D, V, se) {
      return D === null || D.tag !== 4 || D.stateNode.containerInfo !== V.containerInfo || D.stateNode.implementation !== V.implementation ? (D = Mo(V, M.mode, se), D.return = M, D) : (D = c(D, V.children || []), D.return = M, D);
    }
    function re(M, D, V, se, Ve) {
      return D === null || D.tag !== 7 ? (D = Lo(V, M.mode, se, Ve), D.return = M, D) : (D = c(D, V), D.return = M, D);
    }
    function ae(M, D, V) {
      if (typeof D == "string" && D !== "" || typeof D == "number")
        return D = Us("" + D, M.mode, V), D.return = M, D;
      if (typeof D == "object" && D !== null) {
        switch (D.$$typeof) {
          case be:
            return V = uf(D.type, D.key, D.props, null, M.mode, V), V.ref = pu(M, null, D), V.return = M, V;
          case we:
            return D = Mo(D, M.mode, V), D.return = M, D;
          case ht:
            var se = D._init;
            return ae(M, se(D._payload), V);
        }
        if (Gn(D) || je(D))
          return D = Lo(D, M.mode, V, null), D.return = M, D;
        Nc(M, D);
      }
      return null;
    }
    function ne(M, D, V, se) {
      var Ve = D !== null ? D.key : null;
      if (typeof V == "string" && V !== "" || typeof V == "number")
        return Ve !== null ? null : C(M, D, "" + V, se);
      if (typeof V == "object" && V !== null) {
        switch (V.$$typeof) {
          case be:
            return V.key === Ve ? T(M, D, V, se) : null;
          case we:
            return V.key === Ve ? H(M, D, V, se) : null;
          case ht:
            return Ve = V._init, ne(
              M,
              D,
              Ve(V._payload),
              se
            );
        }
        if (Gn(V) || je(V))
          return Ve !== null ? null : re(M, D, V, se, null);
        Nc(M, V);
      }
      return null;
    }
    function Ce(M, D, V, se, Ve) {
      if (typeof se == "string" && se !== "" || typeof se == "number")
        return M = M.get(V) || null, C(D, M, "" + se, Ve);
      if (typeof se == "object" && se !== null) {
        switch (se.$$typeof) {
          case be:
            return M = M.get(se.key === null ? V : se.key) || null, T(D, M, se, Ve);
          case we:
            return M = M.get(se.key === null ? V : se.key) || null, H(D, M, se, Ve);
          case ht:
            var Me = se._init;
            return Ce(M, D, V, Me(se._payload), Ve);
        }
        if (Gn(se) || je(se))
          return M = M.get(V) || null, re(D, M, se, Ve, null);
        Nc(D, se);
      }
      return null;
    }
    function Le(M, D, V, se) {
      for (var Ve = null, Me = null, Pe = D, nt = D = 0, tr = null; Pe !== null && nt < V.length; nt++) {
        Pe.index > nt ? (tr = Pe, Pe = null) : tr = Pe.sibling;
        var Vt = ne(M, Pe, V[nt], se);
        if (Vt === null) {
          Pe === null && (Pe = tr);
          break;
        }
        n && Pe && Vt.alternate === null && r(M, Pe), D = d(Vt, D, nt), Me === null ? Ve = Vt : Me.sibling = Vt, Me = Vt, Pe = tr;
      }
      if (nt === V.length)
        return l(M, Pe), cn && yi(M, nt), Ve;
      if (Pe === null) {
        for (; nt < V.length; nt++)
          Pe = ae(M, V[nt], se), Pe !== null && (D = d(Pe, D, nt), Me === null ? Ve = Pe : Me.sibling = Pe, Me = Pe);
        return cn && yi(M, nt), Ve;
      }
      for (Pe = u(M, Pe); nt < V.length; nt++)
        tr = Ce(Pe, M, nt, V[nt], se), tr !== null && (n && tr.alternate !== null && Pe.delete(tr.key === null ? nt : tr.key), D = d(tr, D, nt), Me === null ? Ve = tr : Me.sibling = tr, Me = tr);
      return n && Pe.forEach(function(Bl) {
        return r(M, Bl);
      }), cn && yi(M, nt), Ve;
    }
    function ze(M, D, V, se) {
      var Ve = je(V);
      if (typeof Ve != "function")
        throw Error(b(150));
      if (V = Ve.call(V), V == null)
        throw Error(b(151));
      for (var Me = Ve = null, Pe = D, nt = D = 0, tr = null, Vt = V.next(); Pe !== null && !Vt.done; nt++, Vt = V.next()) {
        Pe.index > nt ? (tr = Pe, Pe = null) : tr = Pe.sibling;
        var Bl = ne(M, Pe, Vt.value, se);
        if (Bl === null) {
          Pe === null && (Pe = tr);
          break;
        }
        n && Pe && Bl.alternate === null && r(M, Pe), D = d(Bl, D, nt), Me === null ? Ve = Bl : Me.sibling = Bl, Me = Bl, Pe = tr;
      }
      if (Vt.done)
        return l(
          M,
          Pe
        ), cn && yi(M, nt), Ve;
      if (Pe === null) {
        for (; !Vt.done; nt++, Vt = V.next())
          Vt = ae(M, Vt.value, se), Vt !== null && (D = d(Vt, D, nt), Me === null ? Ve = Vt : Me.sibling = Vt, Me = Vt);
        return cn && yi(M, nt), Ve;
      }
      for (Pe = u(M, Pe); !Vt.done; nt++, Vt = V.next())
        Vt = Ce(Pe, M, nt, Vt.value, se), Vt !== null && (n && Vt.alternate !== null && Pe.delete(Vt.key === null ? nt : Vt.key), D = d(Vt, D, nt), Me === null ? Ve = Vt : Me.sibling = Vt, Me = Vt);
      return n && Pe.forEach(function(zy) {
        return r(M, zy);
      }), cn && yi(M, nt), Ve;
    }
    function Mn(M, D, V, se) {
      if (typeof V == "object" && V !== null && V.type === De && V.key === null && (V = V.props.children), typeof V == "object" && V !== null) {
        switch (V.$$typeof) {
          case be:
            e: {
              for (var Ve = V.key, Me = D; Me !== null; ) {
                if (Me.key === Ve) {
                  if (Ve = V.type, Ve === De) {
                    if (Me.tag === 7) {
                      l(M, Me.sibling), D = c(Me, V.props.children), D.return = M, M = D;
                      break e;
                    }
                  } else if (Me.elementType === Ve || typeof Ve == "object" && Ve !== null && Ve.$$typeof === ht && Wv(Ve) === Me.type) {
                    l(M, Me.sibling), D = c(Me, V.props), D.ref = pu(M, Me, V), D.return = M, M = D;
                    break e;
                  }
                  l(M, Me);
                  break;
                } else
                  r(M, Me);
                Me = Me.sibling;
              }
              V.type === De ? (D = Lo(V.props.children, M.mode, se, V.key), D.return = M, M = D) : (se = uf(V.type, V.key, V.props, null, M.mode, se), se.ref = pu(M, D, V), se.return = M, M = se);
            }
            return h(M);
          case we:
            e: {
              for (Me = V.key; D !== null; ) {
                if (D.key === Me)
                  if (D.tag === 4 && D.stateNode.containerInfo === V.containerInfo && D.stateNode.implementation === V.implementation) {
                    l(M, D.sibling), D = c(D, V.children || []), D.return = M, M = D;
                    break e;
                  } else {
                    l(M, D);
                    break;
                  }
                else
                  r(M, D);
                D = D.sibling;
              }
              D = Mo(V, M.mode, se), D.return = M, M = D;
            }
            return h(M);
          case ht:
            return Me = V._init, Mn(M, D, Me(V._payload), se);
        }
        if (Gn(V))
          return Le(M, D, V, se);
        if (je(V))
          return ze(M, D, V, se);
        Nc(M, V);
      }
      return typeof V == "string" && V !== "" || typeof V == "number" ? (V = "" + V, D !== null && D.tag === 6 ? (l(M, D.sibling), D = c(D, V), D.return = M, M = D) : (l(M, D), D = Us(V, M.mode, se), D.return = M, M = D), h(M)) : l(M, D);
    }
    return Mn;
  }
  var vu = Qv(true), Gv = Qv(false), Ss = {}, oa = ut(Ss), bs = ut(Ss), mu = ut(Ss);
  function mo(n) {
    if (n === Ss)
      throw Error(b(174));
    return n;
  }
  function Od(n, r) {
    switch (qt(mu, r), qt(bs, n), qt(oa, Ss), n = r.nodeType, n) {
      case 9:
      case 11:
        r = (r = r.documentElement) ? r.namespaceURI : gn(null, "");
        break;
      default:
        n = n === 8 ? r.parentNode : r, r = n.namespaceURI || null, n = n.tagName, r = gn(r, n);
    }
    Bt(oa), qt(oa, r);
  }
  function Al() {
    Bt(oa), Bt(bs), Bt(mu);
  }
  function Qe(n) {
    mo(mu.current);
    var r = mo(oa.current), l = gn(r, n.type);
    r !== l && (qt(bs, n), qt(oa, l));
  }
  function mt(n) {
    bs.current === n && (Bt(oa), Bt(bs));
  }
  var qe = ut(0);
  function Cn(n) {
    for (var r = n; r !== null; ) {
      if (r.tag === 13) {
        var l = r.memoizedState;
        if (l !== null && (l = l.dehydrated, l === null || l.data === "$?" || l.data === "$!"))
          return r;
      } else if (r.tag === 19 && r.memoizedProps.revealOrder !== void 0) {
        if (r.flags & 128)
          return r;
      } else if (r.child !== null) {
        r.child.return = r, r = r.child;
        continue;
      }
      if (r === n)
        break;
      for (; r.sibling === null; ) {
        if (r.return === null || r.return === n)
          return null;
        r = r.return;
      }
      r.sibling.return = r.return, r = r.sibling;
    }
    return null;
  }
  var Ui = [];
  function Dc() {
    for (var n = 0; n < Ui.length; n++)
      Ui[n]._workInProgressVersionPrimary = null;
    Ui.length = 0;
  }
  var Oc = xe.ReactCurrentDispatcher, Ld = xe.ReactCurrentBatchConfig, ho = 0, fn = null, Y = null, wt = null, Ke = false, _a = false, bi = 0, yo = 0;
  function dn() {
    throw Error(b(321));
  }
  function go(n, r) {
    if (r === null)
      return false;
    for (var l = 0; l < r.length && l < n.length; l++)
      if (!Oi(n[l], r[l]))
        return false;
    return true;
  }
  function zl(n, r, l, u, c, d) {
    if (ho = d, fn = r, r.memoizedState = null, r.updateQueue = null, r.lanes = 0, Oc.current = n === null || n.memoizedState === null ? yy : gy, n = l(u, c), _a) {
      d = 0;
      do {
        if (_a = false, bi = 0, 25 <= d)
          throw Error(b(301));
        d += 1, wt = Y = null, r.updateQueue = null, Oc.current = Ad, n = l(u, c);
      } while (_a);
    }
    if (Oc.current = Qc, r = Y !== null && Y.next !== null, ho = 0, wt = Y = fn = null, Ke = false, r)
      throw Error(b(300));
    return n;
  }
  function So() {
    var n = bi !== 0;
    return bi = 0, n;
  }
  function ji() {
    var n = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    return wt === null ? fn.memoizedState = wt = n : wt = wt.next = n, wt;
  }
  function ii() {
    if (Y === null) {
      var n = fn.alternate;
      n = n !== null ? n.memoizedState : null;
    } else
      n = Y.next;
    var r = wt === null ? fn.memoizedState : wt.next;
    if (r !== null)
      wt = r, Y = n;
    else {
      if (n === null)
        throw Error(b(310));
      Y = n, n = { memoizedState: Y.memoizedState, baseState: Y.baseState, baseQueue: Y.baseQueue, queue: Y.queue, next: null }, wt === null ? fn.memoizedState = wt = n : wt = wt.next = n;
    }
    return wt;
  }
  function bo(n, r) {
    return typeof r == "function" ? r(n) : r;
  }
  function _s(n) {
    var r = ii(), l = r.queue;
    if (l === null)
      throw Error(b(311));
    l.lastRenderedReducer = n;
    var u = Y, c = u.baseQueue, d = l.pending;
    if (d !== null) {
      if (c !== null) {
        var h = c.next;
        c.next = d.next, d.next = h;
      }
      u.baseQueue = c = d, l.pending = null;
    }
    if (c !== null) {
      d = c.next, u = u.baseState;
      var C = h = null, T = null, H = d;
      do {
        var re = H.lane;
        if ((ho & re) === re)
          T !== null && (T = T.next = { lane: 0, action: H.action, hasEagerState: H.hasEagerState, eagerState: H.eagerState, next: null }), u = H.hasEagerState ? H.eagerState : n(u, H.action);
        else {
          var ae = {
            lane: re,
            action: H.action,
            hasEagerState: H.hasEagerState,
            eagerState: H.eagerState,
            next: null
          };
          T === null ? (C = T = ae, h = u) : T = T.next = ae, fn.lanes |= re, Ga |= re;
        }
        H = H.next;
      } while (H !== null && H !== d);
      T === null ? h = u : T.next = C, Oi(u, r.memoizedState) || (Vn = true), r.memoizedState = u, r.baseState = h, r.baseQueue = T, l.lastRenderedState = u;
    }
    if (n = l.interleaved, n !== null) {
      c = n;
      do
        d = c.lane, fn.lanes |= d, Ga |= d, c = c.next;
      while (c !== n);
    } else
      c === null && (l.lanes = 0);
    return [r.memoizedState, l.dispatch];
  }
  function Es(n) {
    var r = ii(), l = r.queue;
    if (l === null)
      throw Error(b(311));
    l.lastRenderedReducer = n;
    var u = l.dispatch, c = l.pending, d = r.memoizedState;
    if (c !== null) {
      l.pending = null;
      var h = c = c.next;
      do
        d = n(d, h.action), h = h.next;
      while (h !== c);
      Oi(d, r.memoizedState) || (Vn = true), r.memoizedState = d, r.baseQueue === null && (r.baseState = d), l.lastRenderedState = d;
    }
    return [d, u];
  }
  function Lc() {
  }
  function Mc(n, r) {
    var l = fn, u = ii(), c = r(), d = !Oi(u.memoizedState, c);
    if (d && (u.memoizedState = c, Vn = true), u = u.queue, Cs(Vc.bind(null, l, u, n), [n]), u.getSnapshot !== r || d || wt !== null && wt.memoizedState.tag & 1) {
      if (l.flags |= 2048, _o(9, zc.bind(null, l, u, c, r), void 0, null), kn === null)
        throw Error(b(349));
      ho & 30 || Ac(l, r, c);
    }
    return c;
  }
  function Ac(n, r, l) {
    n.flags |= 16384, n = { getSnapshot: r, value: l }, r = fn.updateQueue, r === null ? (r = { lastEffect: null, stores: null }, fn.updateQueue = r, r.stores = [n]) : (l = r.stores, l === null ? r.stores = [n] : l.push(n));
  }
  function zc(n, r, l, u) {
    r.value = l, r.getSnapshot = u, Uc(r) && jc(n);
  }
  function Vc(n, r, l) {
    return l(function() {
      Uc(r) && jc(n);
    });
  }
  function Uc(n) {
    var r = n.getSnapshot;
    n = n.value;
    try {
      var l = r();
      return !Oi(n, l);
    } catch {
      return true;
    }
  }
  function jc(n) {
    var r = Ia(n, 1);
    r !== null && xr(r, n, 1, -1);
  }
  function Fc(n) {
    var r = ji();
    return typeof n == "function" && (n = n()), r.memoizedState = r.baseState = n, n = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: bo, lastRenderedState: n }, r.queue = n, n = n.dispatch = Wc.bind(null, fn, n), [r.memoizedState, n];
  }
  function _o(n, r, l, u) {
    return n = { tag: n, create: r, destroy: l, deps: u, next: null }, r = fn.updateQueue, r === null ? (r = { lastEffect: null, stores: null }, fn.updateQueue = r, r.lastEffect = n.next = n) : (l = r.lastEffect, l === null ? r.lastEffect = n.next = n : (u = l.next, l.next = n, n.next = u, r.lastEffect = n)), n;
  }
  function Hc() {
    return ii().memoizedState;
  }
  function Eo(n, r, l, u) {
    var c = ji();
    fn.flags |= n, c.memoizedState = _o(1 | r, l, void 0, u === void 0 ? null : u);
  }
  function Ya(n, r, l, u) {
    var c = ii();
    u = u === void 0 ? null : u;
    var d = void 0;
    if (Y !== null) {
      var h = Y.memoizedState;
      if (d = h.destroy, u !== null && go(u, h.deps)) {
        c.memoizedState = _o(r, l, d, u);
        return;
      }
    }
    fn.flags |= n, c.memoizedState = _o(1 | r, l, d, u);
  }
  function Pc(n, r) {
    return Eo(8390656, 8, n, r);
  }
  function Cs(n, r) {
    return Ya(2048, 8, n, r);
  }
  function Bc(n, r) {
    return Ya(4, 2, n, r);
  }
  function Ic(n, r) {
    return Ya(4, 4, n, r);
  }
  function Md(n, r) {
    if (typeof r == "function")
      return n = n(), r(n), function() {
        r(null);
      };
    if (r != null)
      return n = n(), r.current = n, function() {
        r.current = null;
      };
  }
  function hu(n, r, l) {
    return l = l != null ? l.concat([n]) : null, Ya(4, 4, Md.bind(null, r, n), l);
  }
  function $c() {
  }
  function yu(n, r) {
    var l = ii();
    r = r === void 0 ? null : r;
    var u = l.memoizedState;
    return u !== null && r !== null && go(r, u[1]) ? u[0] : (l.memoizedState = [n, r], n);
  }
  function Vl(n, r) {
    var l = ii();
    r = r === void 0 ? null : r;
    var u = l.memoizedState;
    return u !== null && r !== null && go(r, u[1]) ? u[0] : (n = n(), l.memoizedState = [n, r], n);
  }
  function ai(n, r, l) {
    return ho & 21 ? (Oi(l, r) || (l = Xo(), fn.lanes |= l, Ga |= l, n.baseState = true), r) : (n.baseState && (n.baseState = false, Vn = true), n.memoizedState = l);
  }
  function hy(n, r) {
    var l = jt;
    jt = l !== 0 && 4 > l ? l : 4, n(true);
    var u = Ld.transition;
    Ld.transition = {};
    try {
      n(false), r();
    } finally {
      jt = l, Ld.transition = u;
    }
  }
  function on() {
    return ii().memoizedState;
  }
  function Yc(n, r, l) {
    var u = Un(n);
    if (l = { lane: u, action: l, hasEagerState: false, eagerState: null, next: null }, gu(n))
      ks(r, l);
    else if (l = Pv(n, r, l, u), l !== null) {
      var c = kr();
      xr(l, n, u, c), qv(l, r, u);
    }
  }
  function Wc(n, r, l) {
    var u = Un(n), c = { lane: u, action: l, hasEagerState: false, eagerState: null, next: null };
    if (gu(n))
      ks(r, c);
    else {
      var d = n.alternate;
      if (n.lanes === 0 && (d === null || d.lanes === 0) && (d = r.lastRenderedReducer, d !== null))
        try {
          var h = r.lastRenderedState, C = d(h, l);
          if (c.hasEagerState = true, c.eagerState = C, Oi(C, h)) {
            var T = r.interleaved;
            T === null ? (c.next = c, Td(r)) : (c.next = T.next, T.next = c), r.interleaved = c;
            return;
          }
        } catch {
        } finally {
        }
      l = Pv(n, r, c, u), l !== null && (c = kr(), xr(l, n, u, c), qv(l, r, u));
    }
  }
  function gu(n) {
    var r = n.alternate;
    return n === fn || r !== null && r === fn;
  }
  function ks(n, r) {
    _a = Ke = true;
    var l = n.pending;
    l === null ? r.next = r : (r.next = l.next, l.next = r), n.pending = r;
  }
  function qv(n, r, l) {
    if (l & 4194240) {
      var u = r.lanes;
      u &= n.pendingLanes, l |= u, r.lanes = l, ha(n, l);
    }
  }
  var Qc = { readContext: Ln, useCallback: dn, useContext: dn, useEffect: dn, useImperativeHandle: dn, useInsertionEffect: dn, useLayoutEffect: dn, useMemo: dn, useReducer: dn, useRef: dn, useState: dn, useDebugValue: dn, useDeferredValue: dn, useTransition: dn, useMutableSource: dn, useSyncExternalStore: dn, useId: dn, unstable_isNewReconciler: false }, yy = { readContext: Ln, useCallback: function(n, r) {
    return ji().memoizedState = [n, r === void 0 ? null : r], n;
  }, useContext: Ln, useEffect: Pc, useImperativeHandle: function(n, r, l) {
    return l = l != null ? l.concat([n]) : null, Eo(
      4194308,
      4,
      Md.bind(null, r, n),
      l
    );
  }, useLayoutEffect: function(n, r) {
    return Eo(4194308, 4, n, r);
  }, useInsertionEffect: function(n, r) {
    return Eo(4, 2, n, r);
  }, useMemo: function(n, r) {
    var l = ji();
    return r = r === void 0 ? null : r, n = n(), l.memoizedState = [n, r], n;
  }, useReducer: function(n, r, l) {
    var u = ji();
    return r = l !== void 0 ? l(r) : r, u.memoizedState = u.baseState = r, n = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: n, lastRenderedState: r }, u.queue = n, n = n.dispatch = Yc.bind(null, fn, n), [u.memoizedState, n];
  }, useRef: function(n) {
    var r = ji();
    return n = { current: n }, r.memoizedState = n;
  }, useState: Fc, useDebugValue: $c, useDeferredValue: function(n) {
    return ji().memoizedState = n;
  }, useTransition: function() {
    var n = Fc(false), r = n[0];
    return n = hy.bind(null, n[1]), ji().memoizedState = n, [r, n];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(n, r, l) {
    var u = fn, c = ji();
    if (cn) {
      if (l === void 0)
        throw Error(b(407));
      l = l();
    } else {
      if (l = r(), kn === null)
        throw Error(b(349));
      ho & 30 || Ac(u, r, l);
    }
    c.memoizedState = l;
    var d = { value: l, getSnapshot: r };
    return c.queue = d, Pc(Vc.bind(
      null,
      u,
      d,
      n
    ), [n]), u.flags |= 2048, _o(9, zc.bind(null, u, d, l, r), void 0, null), l;
  }, useId: function() {
    var n = ji(), r = kn.identifierPrefix;
    if (cn) {
      var l = Ba, u = ar;
      l = (u & ~(1 << 32 - Nr(u) - 1)).toString(32) + l, r = ":" + r + "R" + l, l = bi++, 0 < l && (r += "H" + l.toString(32)), r += ":";
    } else
      l = yo++, r = ":" + r + "r" + l.toString(32) + ":";
    return n.memoizedState = r;
  }, unstable_isNewReconciler: false }, gy = {
    readContext: Ln,
    useCallback: yu,
    useContext: Ln,
    useEffect: Cs,
    useImperativeHandle: hu,
    useInsertionEffect: Bc,
    useLayoutEffect: Ic,
    useMemo: Vl,
    useReducer: _s,
    useRef: Hc,
    useState: function() {
      return _s(bo);
    },
    useDebugValue: $c,
    useDeferredValue: function(n) {
      var r = ii();
      return ai(r, Y.memoizedState, n);
    },
    useTransition: function() {
      var n = _s(bo)[0], r = ii().memoizedState;
      return [n, r];
    },
    useMutableSource: Lc,
    useSyncExternalStore: Mc,
    useId: on,
    unstable_isNewReconciler: false
  }, Ad = { readContext: Ln, useCallback: yu, useContext: Ln, useEffect: Cs, useImperativeHandle: hu, useInsertionEffect: Bc, useLayoutEffect: Ic, useMemo: Vl, useReducer: Es, useRef: Hc, useState: function() {
    return Es(bo);
  }, useDebugValue: $c, useDeferredValue: function(n) {
    var r = ii();
    return Y === null ? r.memoizedState = n : ai(r, Y.memoizedState, n);
  }, useTransition: function() {
    var n = Es(bo)[0], r = ii().memoizedState;
    return [n, r];
  }, useMutableSource: Lc, useSyncExternalStore: Mc, useId: on, unstable_isNewReconciler: false };
  function Su(n, r) {
    try {
      var l = "", u = r;
      do
        l += Tt(u), u = u.return;
      while (u);
      var c = l;
    } catch (d) {
      c = `
Error generating stack: ` + d.message + `
` + d.stack;
    }
    return { value: n, source: r, stack: c, digest: null };
  }
  function xs(n, r, l) {
    return { value: n, source: null, stack: null, digest: r ?? null };
  }
  function Gc(n, r) {
    try {
      console.error(r.value);
    } catch (l) {
      setTimeout(function() {
        throw l;
      });
    }
  }
  var Sy = typeof WeakMap == "function" ? WeakMap : Map;
  function Xv(n, r, l) {
    l = $a(-1, l), l.tag = 3, l.payload = { element: null };
    var u = r.value;
    return l.callback = function() {
      tf || (tf = true, To = u), Gc(n, r);
    }, l;
  }
  function Rs(n, r, l) {
    l = $a(-1, l), l.tag = 3;
    var u = n.type.getDerivedStateFromError;
    if (typeof u == "function") {
      var c = r.value;
      l.payload = function() {
        return u(c);
      }, l.callback = function() {
        Gc(n, r);
      };
    }
    var d = n.stateNode;
    return d !== null && typeof d.componentDidCatch == "function" && (l.callback = function() {
      Gc(n, r), typeof u != "function" && (ka === null ? ka = /* @__PURE__ */ new Set([this]) : ka.add(this));
      var h = r.stack;
      this.componentDidCatch(r.value, { componentStack: h !== null ? h : "" });
    }), l;
  }
  function Kv(n, r, l) {
    var u = n.pingCache;
    if (u === null) {
      u = n.pingCache = new Sy();
      var c = /* @__PURE__ */ new Set();
      u.set(r, c);
    } else
      c = u.get(r), c === void 0 && (c = /* @__PURE__ */ new Set(), u.set(r, c));
    c.has(l) || (c.add(l), n = Ry.bind(null, n, r, l), r.then(n, n));
  }
  function zd(n) {
    do {
      var r;
      if ((r = n.tag === 13) && (r = n.memoizedState, r = r !== null ? r.dehydrated !== null : true), r)
        return n;
      n = n.return;
    } while (n !== null);
    return null;
  }
  function Vd(n, r, l, u, c) {
    return n.mode & 1 ? (n.flags |= 65536, n.lanes = c, n) : (n === r ? n.flags |= 65536 : (n.flags |= 128, l.flags |= 131072, l.flags &= -52805, l.tag === 1 && (l.alternate === null ? l.tag = 17 : (r = $a(-1, 1), r.tag = 2, Ll(l, r, 1))), l.lanes |= 1), n);
  }
  var by = xe.ReactCurrentOwner, Vn = false;
  function Bn(n, r, l, u) {
    r.child = n === null ? Gv(r, null, l, u) : vu(r, n.child, l, u);
  }
  function Ul(n, r, l, u, c) {
    l = l.render;
    var d = r.ref;
    return he(r, c), u = zl(n, r, l, u, d, c), l = So(), n !== null && !Vn ? (r.updateQueue = n.updateQueue, r.flags &= -2053, n.lanes &= ~c, or(n, r, c)) : (cn && l && bc(r), r.flags |= 1, Bn(n, r, u, c), r.child);
  }
  function qc(n, r, l, u, c) {
    if (n === null) {
      var d = l.type;
      return typeof d == "function" && !tp(d) && d.defaultProps === void 0 && l.compare === null && l.defaultProps === void 0 ? (r.tag = 15, r.type = d, li(n, r, d, u, c)) : (n = uf(l.type, null, u, r, r.mode, c), n.ref = r.ref, n.return = r, r.child = n);
    }
    if (d = n.child, !(n.lanes & c)) {
      var h = d.memoizedProps;
      if (l = l.compare, l = l !== null ? l : os, l(h, u) && n.ref === r.ref)
        return or(n, r, c);
    }
    return r.flags |= 1, n = Pl(d, u), n.ref = r.ref, n.return = r, r.child = n;
  }
  function li(n, r, l, u, c) {
    if (n !== null) {
      var d = n.memoizedProps;
      if (os(d, u) && n.ref === r.ref)
        if (Vn = false, r.pendingProps = u = d, (n.lanes & c) !== 0)
          n.flags & 131072 && (Vn = true);
        else
          return r.lanes = n.lanes, or(n, r, c);
    }
    return bu(n, r, l, u, c);
  }
  function Co(n, r, l) {
    var u = r.pendingProps, c = u.children, d = n !== null ? n.memoizedState : null;
    if (u.mode === "hidden")
      if (!(r.mode & 1))
        r.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, qt(Ru, _i), _i |= l;
      else {
        if (!(l & 1073741824))
          return n = d !== null ? d.baseLanes | l : l, r.lanes = r.childLanes = 1073741824, r.memoizedState = { baseLanes: n, cachePool: null, transitions: null }, r.updateQueue = null, qt(Ru, _i), _i |= n, null;
        r.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, u = d !== null ? d.baseLanes : l, qt(Ru, _i), _i |= u;
      }
    else
      d !== null ? (u = d.baseLanes | l, r.memoizedState = null) : u = l, qt(Ru, _i), _i |= u;
    return Bn(n, r, c, l), r.child;
  }
  function st(n, r) {
    var l = r.ref;
    (n === null && l !== null || n !== null && n.ref !== l) && (r.flags |= 512, r.flags |= 2097152);
  }
  function bu(n, r, l, u, c) {
    var d = mn(l) ? Jr : tt.current;
    return d = Mi(r, d), he(r, c), l = zl(n, r, l, u, d, c), u = So(), n !== null && !Vn ? (r.updateQueue = n.updateQueue, r.flags &= -2053, n.lanes &= ~c, or(n, r, c)) : (cn && u && bc(r), r.flags |= 1, Bn(n, r, l, c), r.child);
  }
  function Ud(n, r, l, u, c) {
    if (mn(l)) {
      var d = true;
      Sc(r);
    } else
      d = false;
    if (he(r, c), r.stateNode === null)
      _r(n, r), $v(r, l, u), wc(r, l, u, c), u = true;
    else if (n === null) {
      var h = r.stateNode, C = r.memoizedProps;
      h.props = C;
      var T = h.context, H = l.contextType;
      typeof H == "object" && H !== null ? H = Ln(H) : (H = mn(l) ? Jr : tt.current, H = Mi(r, H));
      var re = l.getDerivedStateFromProps, ae = typeof re == "function" || typeof h.getSnapshotBeforeUpdate == "function";
      ae || typeof h.UNSAFE_componentWillReceiveProps != "function" && typeof h.componentWillReceiveProps != "function" || (C !== u || T !== H) && Yv(r, h, u, H), Ol = false;
      var ne = r.memoizedState;
      h.state = ne, Ml(r, u, h, c), T = r.memoizedState, C !== u || ne !== T || Tn.current || Ol ? (typeof re == "function" && (Dd(r, l, re, u), T = r.memoizedState), (C = Ol || Iv(r, l, C, u, ne, T, H)) ? (ae || typeof h.UNSAFE_componentWillMount != "function" && typeof h.componentWillMount != "function" || (typeof h.componentWillMount == "function" && h.componentWillMount(), typeof h.UNSAFE_componentWillMount == "function" && h.UNSAFE_componentWillMount()), typeof h.componentDidMount == "function" && (r.flags |= 4194308)) : (typeof h.componentDidMount == "function" && (r.flags |= 4194308), r.memoizedProps = u, r.memoizedState = T), h.props = u, h.state = T, h.context = H, u = C) : (typeof h.componentDidMount == "function" && (r.flags |= 4194308), u = false);
    } else {
      h = r.stateNode, Pn(n, r), C = r.memoizedProps, H = r.type === r.elementType ? C : Si(r.type, C), h.props = H, ae = r.pendingProps, ne = h.context, T = l.contextType, typeof T == "object" && T !== null ? T = Ln(T) : (T = mn(l) ? Jr : tt.current, T = Mi(r, T));
      var Ce = l.getDerivedStateFromProps;
      (re = typeof Ce == "function" || typeof h.getSnapshotBeforeUpdate == "function") || typeof h.UNSAFE_componentWillReceiveProps != "function" && typeof h.componentWillReceiveProps != "function" || (C !== ae || ne !== T) && Yv(r, h, u, T), Ol = false, ne = r.memoizedState, h.state = ne, Ml(r, u, h, c);
      var Le = r.memoizedState;
      C !== ae || ne !== Le || Tn.current || Ol ? (typeof Ce == "function" && (Dd(r, l, Ce, u), Le = r.memoizedState), (H = Ol || Iv(r, l, H, u, ne, Le, T) || false) ? (re || typeof h.UNSAFE_componentWillUpdate != "function" && typeof h.componentWillUpdate != "function" || (typeof h.componentWillUpdate == "function" && h.componentWillUpdate(u, Le, T), typeof h.UNSAFE_componentWillUpdate == "function" && h.UNSAFE_componentWillUpdate(u, Le, T)), typeof h.componentDidUpdate == "function" && (r.flags |= 4), typeof h.getSnapshotBeforeUpdate == "function" && (r.flags |= 1024)) : (typeof h.componentDidUpdate != "function" || C === n.memoizedProps && ne === n.memoizedState || (r.flags |= 4), typeof h.getSnapshotBeforeUpdate != "function" || C === n.memoizedProps && ne === n.memoizedState || (r.flags |= 1024), r.memoizedProps = u, r.memoizedState = Le), h.props = u, h.state = Le, h.context = T, u = H) : (typeof h.componentDidUpdate != "function" || C === n.memoizedProps && ne === n.memoizedState || (r.flags |= 4), typeof h.getSnapshotBeforeUpdate != "function" || C === n.memoizedProps && ne === n.memoizedState || (r.flags |= 1024), u = false);
    }
    return Zv(n, r, l, u, d, c);
  }
  function Zv(n, r, l, u, c, d) {
    st(n, r);
    var h = (r.flags & 128) !== 0;
    if (!u && !h)
      return c && Uv(r, l, false), or(n, r, d);
    u = r.stateNode, by.current = r;
    var C = h && typeof l.getDerivedStateFromError != "function" ? null : u.render();
    return r.flags |= 1, n !== null && h ? (r.child = vu(r, n.child, null, d), r.child = vu(r, null, C, d)) : Bn(n, r, C, d), r.memoizedState = u.state, c && Uv(r, l, true), r.child;
  }
  function Jv(n) {
    var r = n.stateNode;
    r.pendingContext ? Tl(n, r.pendingContext, r.pendingContext !== r.context) : r.context && Tl(n, r.context, false), Od(n, r.containerInfo);
  }
  function Xc(n, r, l, u, c) {
    return En(), kd(c), r.flags |= 256, Bn(n, r, l, u), r.child;
  }
  var ko = { dehydrated: null, treeContext: null, retryLane: 0 };
  function jd(n) {
    return { baseLanes: n, cachePool: null, transitions: null };
  }
  function Fd(n, r, l) {
    var u = r.pendingProps, c = qe.current, d = false, h = (r.flags & 128) !== 0, C;
    if ((C = h) || (C = n !== null && n.memoizedState === null ? false : (c & 2) !== 0), C ? (d = true, r.flags &= -129) : (n === null || n.memoizedState !== null) && (c |= 1), qt(qe, c & 1), n === null)
      return Ec(r), n = r.memoizedState, n !== null && (n = n.dehydrated, n !== null) ? (r.mode & 1 ? n.data === "$!" ? r.lanes = 8 : r.lanes = 1073741824 : r.lanes = 1, null) : (h = u.children, n = u.fallback, d ? (u = r.mode, d = r.child, h = { mode: "hidden", children: h }, !(u & 1) && d !== null ? (d.childLanes = 0, d.pendingProps = h) : d = Vs(h, u, 0, null), n = Lo(n, u, l, null), d.return = r, n.return = r, d.sibling = n, r.child = d, r.child.memoizedState = jd(l), r.memoizedState = ko, n) : Hd(r, h));
    if (c = n.memoizedState, c !== null && (C = c.dehydrated, C !== null))
      return _y(n, r, h, u, C, c, l);
    if (d) {
      d = u.fallback, h = r.mode, c = n.child, C = c.sibling;
      var T = { mode: "hidden", children: u.children };
      return !(h & 1) && r.child !== c ? (u = r.child, u.childLanes = 0, u.pendingProps = T, r.deletions = null) : (u = Pl(c, T), u.subtreeFlags = c.subtreeFlags & 14680064), C !== null ? d = Pl(C, d) : (d = Lo(d, h, l, null), d.flags |= 2), d.return = r, u.return = r, u.sibling = d, r.child = u, u = d, d = r.child, h = n.child.memoizedState, h = h === null ? jd(l) : { baseLanes: h.baseLanes | l, cachePool: null, transitions: h.transitions }, d.memoizedState = h, d.childLanes = n.childLanes & ~l, r.memoizedState = ko, u;
    }
    return d = n.child, n = d.sibling, u = Pl(d, { mode: "visible", children: u.children }), !(r.mode & 1) && (u.lanes = l), u.return = r, u.sibling = null, n !== null && (l = r.deletions, l === null ? (r.deletions = [n], r.flags |= 16) : l.push(n)), r.child = u, r.memoizedState = null, u;
  }
  function Hd(n, r) {
    return r = Vs({ mode: "visible", children: r }, n.mode, 0, null), r.return = n, n.child = r;
  }
  function _u(n, r, l, u) {
    return u !== null && kd(u), vu(r, n.child, null, l), n = Hd(r, r.pendingProps.children), n.flags |= 2, r.memoizedState = null, n;
  }
  function _y(n, r, l, u, c, d, h) {
    if (l)
      return r.flags & 256 ? (r.flags &= -257, u = xs(Error(b(422))), _u(n, r, h, u)) : r.memoizedState !== null ? (r.child = n.child, r.flags |= 128, null) : (d = u.fallback, c = r.mode, u = Vs({ mode: "visible", children: u.children }, c, 0, null), d = Lo(d, c, h, null), d.flags |= 2, u.return = r, d.return = r, u.sibling = d, r.child = u, r.mode & 1 && vu(r, n.child, null, h), r.child.memoizedState = jd(h), r.memoizedState = ko, d);
    if (!(r.mode & 1))
      return _u(n, r, h, null);
    if (c.data === "$!") {
      if (u = c.nextSibling && c.nextSibling.dataset, u)
        var C = u.dgst;
      return u = C, d = Error(b(419)), u = xs(d, u), _u(n, r, h, u);
    }
    if (C = (h & n.childLanes) !== 0, Vn || C) {
      if (u = kn, u !== null) {
        switch (h & -h) {
          case 4:
            c = 2;
            break;
          case 16:
            c = 8;
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            c = 32;
            break;
          case 536870912:
            c = 268435456;
            break;
          default:
            c = 0;
        }
        c = c & (u.suspendedLanes | h) ? 0 : c, c !== 0 && c !== d.retryLane && (d.retryLane = c, Ia(n, c), xr(u, n, c, -1));
      }
      return Zd(), u = xs(Error(b(421))), _u(n, r, h, u);
    }
    return c.data === "$?" ? (r.flags |= 128, r.child = n.child, r = Ty.bind(null, n), c._reactRetry = r, null) : (n = d.treeContext, ri = la(c.nextSibling), gi = r, cn = true, Vi = null, n !== null && (ni[br++] = ar, ni[br++] = Ba, ni[br++] = zi, ar = n.id, Ba = n.overflow, zi = r), r = Hd(r, u.children), r.flags |= 4096, r);
  }
  function Pd(n, r, l) {
    n.lanes |= r;
    var u = n.alternate;
    u !== null && (u.lanes |= r), Zn(n.return, r, l);
  }
  function Kc(n, r, l, u, c) {
    var d = n.memoizedState;
    d === null ? n.memoizedState = { isBackwards: r, rendering: null, renderingStartTime: 0, last: u, tail: l, tailMode: c } : (d.isBackwards = r, d.rendering = null, d.renderingStartTime = 0, d.last = u, d.tail = l, d.tailMode = c);
  }
  function Bd(n, r, l) {
    var u = r.pendingProps, c = u.revealOrder, d = u.tail;
    if (Bn(n, r, u.children, l), u = qe.current, u & 2)
      u = u & 1 | 2, r.flags |= 128;
    else {
      if (n !== null && n.flags & 128)
        e:
          for (n = r.child; n !== null; ) {
            if (n.tag === 13)
              n.memoizedState !== null && Pd(n, l, r);
            else if (n.tag === 19)
              Pd(n, l, r);
            else if (n.child !== null) {
              n.child.return = n, n = n.child;
              continue;
            }
            if (n === r)
              break e;
            for (; n.sibling === null; ) {
              if (n.return === null || n.return === r)
                break e;
              n = n.return;
            }
            n.sibling.return = n.return, n = n.sibling;
          }
      u &= 1;
    }
    if (qt(qe, u), !(r.mode & 1))
      r.memoizedState = null;
    else
      switch (c) {
        case "forwards":
          for (l = r.child, c = null; l !== null; )
            n = l.alternate, n !== null && Cn(n) === null && (c = l), l = l.sibling;
          l = c, l === null ? (c = r.child, r.child = null) : (c = l.sibling, l.sibling = null), Kc(r, false, c, l, d);
          break;
        case "backwards":
          for (l = null, c = r.child, r.child = null; c !== null; ) {
            if (n = c.alternate, n !== null && Cn(n) === null) {
              r.child = c;
              break;
            }
            n = c.sibling, c.sibling = l, l = c, c = n;
          }
          Kc(r, true, l, null, d);
          break;
        case "together":
          Kc(r, false, null, null, void 0);
          break;
        default:
          r.memoizedState = null;
      }
    return r.child;
  }
  function _r(n, r) {
    !(r.mode & 1) && n !== null && (n.alternate = null, r.alternate = null, r.flags |= 2);
  }
  function or(n, r, l) {
    if (n !== null && (r.dependencies = n.dependencies), Ga |= r.lanes, !(l & r.childLanes))
      return null;
    if (n !== null && r.child !== n.child)
      throw Error(b(153));
    if (r.child !== null) {
      for (n = r.child, l = Pl(n, n.pendingProps), r.child = l, l.return = r; n.sibling !== null; )
        n = n.sibling, l = l.sibling = Pl(n, n.pendingProps), l.return = r;
      l.sibling = null;
    }
    return r.child;
  }
  function Wa(n, r, l) {
    switch (r.tag) {
      case 3:
        Jv(r), En();
        break;
      case 5:
        Qe(r);
        break;
      case 1:
        mn(r.type) && Sc(r);
        break;
      case 4:
        Od(r, r.stateNode.containerInfo);
        break;
      case 10:
        var u = r.type._context, c = r.memoizedProps.value;
        qt(ba, u._currentValue), u._currentValue = c;
        break;
      case 13:
        if (u = r.memoizedState, u !== null)
          return u.dehydrated !== null ? (qt(qe, qe.current & 1), r.flags |= 128, null) : l & r.child.childLanes ? Fd(n, r, l) : (qt(qe, qe.current & 1), n = or(n, r, l), n !== null ? n.sibling : null);
        qt(qe, qe.current & 1);
        break;
      case 19:
        if (u = (l & r.childLanes) !== 0, n.flags & 128) {
          if (u)
            return Bd(n, r, l);
          r.flags |= 128;
        }
        if (c = r.memoizedState, c !== null && (c.rendering = null, c.tail = null, c.lastEffect = null), qt(qe, qe.current), u)
          break;
        return null;
      case 22:
      case 23:
        return r.lanes = 0, Co(n, r, l);
    }
    return or(n, r, l);
  }
  var Ts, xo, Fi, In;
  Ts = function(n, r) {
    for (var l = r.child; l !== null; ) {
      if (l.tag === 5 || l.tag === 6)
        n.appendChild(l.stateNode);
      else if (l.tag !== 4 && l.child !== null) {
        l.child.return = l, l = l.child;
        continue;
      }
      if (l === r)
        break;
      for (; l.sibling === null; ) {
        if (l.return === null || l.return === r)
          return;
        l = l.return;
      }
      l.sibling.return = l.return, l = l.sibling;
    }
  }, xo = function() {
  }, Fi = function(n, r, l, u) {
    var c = n.memoizedProps;
    if (c !== u) {
      n = r.stateNode, mo(oa.current);
      var d = null;
      switch (l) {
        case "input":
          c = Qn(n, c), u = Qn(n, u), d = [];
          break;
        case "select":
          c = R({}, c, { value: void 0 }), u = R({}, u, { value: void 0 }), d = [];
          break;
        case "textarea":
          c = Wr(n, c), u = Wr(n, u), d = [];
          break;
        default:
          typeof c.onClick != "function" && typeof u.onClick == "function" && (n.onclick = gc);
      }
      On(l, u);
      var h;
      l = null;
      for (H in c)
        if (!u.hasOwnProperty(H) && c.hasOwnProperty(H) && c[H] != null)
          if (H === "style") {
            var C = c[H];
            for (h in C)
              C.hasOwnProperty(h) && (l || (l = {}), l[h] = "");
          } else
            H !== "dangerouslySetInnerHTML" && H !== "children" && H !== "suppressContentEditableWarning" && H !== "suppressHydrationWarning" && H !== "autoFocus" && (X.hasOwnProperty(H) ? d || (d = []) : (d = d || []).push(H, null));
      for (H in u) {
        var T = u[H];
        if (C = c != null ? c[H] : void 0, u.hasOwnProperty(H) && T !== C && (T != null || C != null))
          if (H === "style")
            if (C) {
              for (h in C)
                !C.hasOwnProperty(h) || T && T.hasOwnProperty(h) || (l || (l = {}), l[h] = "");
              for (h in T)
                T.hasOwnProperty(h) && C[h] !== T[h] && (l || (l = {}), l[h] = T[h]);
            } else
              l || (d || (d = []), d.push(
                H,
                l
              )), l = T;
          else
            H === "dangerouslySetInnerHTML" ? (T = T ? T.__html : void 0, C = C ? C.__html : void 0, T != null && C !== T && (d = d || []).push(H, T)) : H === "children" ? typeof T != "string" && typeof T != "number" || (d = d || []).push(H, "" + T) : H !== "suppressContentEditableWarning" && H !== "suppressHydrationWarning" && (X.hasOwnProperty(H) ? (T != null && H === "onScroll" && ln("scroll", n), d || C === T || (d = [])) : (d = d || []).push(H, T));
      }
      l && (d = d || []).push("style", l);
      var H = d;
      (r.updateQueue = H) && (r.flags |= 4);
    }
  }, In = function(n, r, l, u) {
    l !== u && (r.flags |= 4);
  };
  function ws(n, r) {
    if (!cn)
      switch (n.tailMode) {
        case "hidden":
          r = n.tail;
          for (var l = null; r !== null; )
            r.alternate !== null && (l = r), r = r.sibling;
          l === null ? n.tail = null : l.sibling = null;
          break;
        case "collapsed":
          l = n.tail;
          for (var u = null; l !== null; )
            l.alternate !== null && (u = l), l = l.sibling;
          u === null ? r || n.tail === null ? n.tail = null : n.tail.sibling = null : u.sibling = null;
      }
  }
  function Er(n) {
    var r = n.alternate !== null && n.alternate.child === n.child, l = 0, u = 0;
    if (r)
      for (var c = n.child; c !== null; )
        l |= c.lanes | c.childLanes, u |= c.subtreeFlags & 14680064, u |= c.flags & 14680064, c.return = n, c = c.sibling;
    else
      for (c = n.child; c !== null; )
        l |= c.lanes | c.childLanes, u |= c.subtreeFlags, u |= c.flags, c.return = n, c = c.sibling;
    return n.subtreeFlags |= u, n.childLanes = l, r;
  }
  function Ey(n, r, l) {
    var u = r.pendingProps;
    switch (Ed(r), r.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return Er(r), null;
      case 1:
        return mn(r.type) && Ai(), Er(r), null;
      case 3:
        return u = r.stateNode, Al(), Bt(Tn), Bt(tt), Dc(), u.pendingContext && (u.context = u.pendingContext, u.pendingContext = null), (n === null || n.child === null) && (Cc(r) ? r.flags |= 4 : n === null || n.memoizedState.isDehydrated && !(r.flags & 256) || (r.flags |= 1024, Vi !== null && (zs(Vi), Vi = null))), xo(n, r), Er(r), null;
      case 5:
        mt(r);
        var c = mo(mu.current);
        if (l = r.type, n !== null && r.stateNode != null)
          Fi(n, r, l, u, c), n.ref !== r.ref && (r.flags |= 512, r.flags |= 2097152);
        else {
          if (!u) {
            if (r.stateNode === null)
              throw Error(b(166));
            return Er(r), null;
          }
          if (n = mo(oa.current), Cc(r)) {
            u = r.stateNode, l = r.type;
            var d = r.memoizedProps;
            switch (u[ga] = r, u[fo] = d, n = (r.mode & 1) !== 0, l) {
              case "dialog":
                ln("cancel", u), ln("close", u);
                break;
              case "iframe":
              case "object":
              case "embed":
                ln("load", u);
                break;
              case "video":
              case "audio":
                for (c = 0; c < fs.length; c++)
                  ln(fs[c], u);
                break;
              case "source":
                ln("error", u);
                break;
              case "img":
              case "image":
              case "link":
                ln(
                  "error",
                  u
                ), ln("load", u);
                break;
              case "details":
                ln("toggle", u);
                break;
              case "input":
                Fn(u, d), ln("invalid", u);
                break;
              case "select":
                u._wrapperState = { wasMultiple: !!d.multiple }, ln("invalid", u);
                break;
              case "textarea":
                gr(u, d), ln("invalid", u);
            }
            On(l, d), c = null;
            for (var h in d)
              if (d.hasOwnProperty(h)) {
                var C = d[h];
                h === "children" ? typeof C == "string" ? u.textContent !== C && (d.suppressHydrationWarning !== true && yc(u.textContent, C, n), c = ["children", C]) : typeof C == "number" && u.textContent !== "" + C && (d.suppressHydrationWarning !== true && yc(
                  u.textContent,
                  C,
                  n
                ), c = ["children", "" + C]) : X.hasOwnProperty(h) && C != null && h === "onScroll" && ln("scroll", u);
              }
            switch (l) {
              case "input":
                hr(u), $r(u, d, true);
                break;
              case "textarea":
                hr(u), rr(u);
                break;
              case "select":
              case "option":
                break;
              default:
                typeof d.onClick == "function" && (u.onclick = gc);
            }
            u = c, r.updateQueue = u, u !== null && (r.flags |= 4);
          } else {
            h = c.nodeType === 9 ? c : c.ownerDocument, n === "http://www.w3.org/1999/xhtml" && (n = Qr(l)), n === "http://www.w3.org/1999/xhtml" ? l === "script" ? (n = h.createElement("div"), n.innerHTML = "<script></script>", n = n.removeChild(n.firstChild)) : typeof u.is == "string" ? n = h.createElement(l, { is: u.is }) : (n = h.createElement(l), l === "select" && (h = n, u.multiple ? h.multiple = true : u.size && (h.size = u.size))) : n = h.createElementNS(n, l), n[ga] = r, n[fo] = u, Ts(n, r, false, false), r.stateNode = n;
            e: {
              switch (h = Sn(l, u), l) {
                case "dialog":
                  ln("cancel", n), ln("close", n), c = u;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  ln("load", n), c = u;
                  break;
                case "video":
                case "audio":
                  for (c = 0; c < fs.length; c++)
                    ln(fs[c], n);
                  c = u;
                  break;
                case "source":
                  ln("error", n), c = u;
                  break;
                case "img":
                case "image":
                case "link":
                  ln(
                    "error",
                    n
                  ), ln("load", n), c = u;
                  break;
                case "details":
                  ln("toggle", n), c = u;
                  break;
                case "input":
                  Fn(n, u), c = Qn(n, u), ln("invalid", n);
                  break;
                case "option":
                  c = u;
                  break;
                case "select":
                  n._wrapperState = { wasMultiple: !!u.multiple }, c = R({}, u, { value: void 0 }), ln("invalid", n);
                  break;
                case "textarea":
                  gr(n, u), c = Wr(n, u), ln("invalid", n);
                  break;
                default:
                  c = u;
              }
              On(l, c), C = c;
              for (d in C)
                if (C.hasOwnProperty(d)) {
                  var T = C[d];
                  d === "style" ? Pt(n, T) : d === "dangerouslySetInnerHTML" ? (T = T ? T.__html : void 0, T != null && da(n, T)) : d === "children" ? typeof T == "string" ? (l !== "textarea" || T !== "") && vi(n, T) : typeof T == "number" && vi(n, "" + T) : d !== "suppressContentEditableWarning" && d !== "suppressHydrationWarning" && d !== "autoFocus" && (X.hasOwnProperty(d) ? T != null && d === "onScroll" && ln("scroll", n) : T != null && oe(n, d, T, h));
                }
              switch (l) {
                case "input":
                  hr(n), $r(n, u, false);
                  break;
                case "textarea":
                  hr(n), rr(n);
                  break;
                case "option":
                  u.value != null && n.setAttribute("value", "" + ft(u.value));
                  break;
                case "select":
                  n.multiple = !!u.multiple, d = u.value, d != null ? yr(n, !!u.multiple, d, false) : u.defaultValue != null && yr(
                    n,
                    !!u.multiple,
                    u.defaultValue,
                    true
                  );
                  break;
                default:
                  typeof c.onClick == "function" && (n.onclick = gc);
              }
              switch (l) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  u = !!u.autoFocus;
                  break e;
                case "img":
                  u = true;
                  break e;
                default:
                  u = false;
              }
            }
            u && (r.flags |= 4);
          }
          r.ref !== null && (r.flags |= 512, r.flags |= 2097152);
        }
        return Er(r), null;
      case 6:
        if (n && r.stateNode != null)
          In(n, r, n.memoizedProps, u);
        else {
          if (typeof u != "string" && r.stateNode === null)
            throw Error(b(166));
          if (l = mo(mu.current), mo(oa.current), Cc(r)) {
            if (u = r.stateNode, l = r.memoizedProps, u[ga] = r, (d = u.nodeValue !== l) && (n = gi, n !== null))
              switch (n.tag) {
                case 3:
                  yc(u.nodeValue, l, (n.mode & 1) !== 0);
                  break;
                case 5:
                  n.memoizedProps.suppressHydrationWarning !== true && yc(u.nodeValue, l, (n.mode & 1) !== 0);
              }
            d && (r.flags |= 4);
          } else
            u = (l.nodeType === 9 ? l : l.ownerDocument).createTextNode(u), u[ga] = r, r.stateNode = u;
        }
        return Er(r), null;
      case 13:
        if (Bt(qe), u = r.memoizedState, n === null || n.memoizedState !== null && n.memoizedState.dehydrated !== null) {
          if (cn && ri !== null && r.mode & 1 && !(r.flags & 128))
            Hv(), En(), r.flags |= 98560, d = false;
          else if (d = Cc(r), u !== null && u.dehydrated !== null) {
            if (n === null) {
              if (!d)
                throw Error(b(318));
              if (d = r.memoizedState, d = d !== null ? d.dehydrated : null, !d)
                throw Error(b(317));
              d[ga] = r;
            } else
              En(), !(r.flags & 128) && (r.memoizedState = null), r.flags |= 4;
            Er(r), d = false;
          } else
            Vi !== null && (zs(Vi), Vi = null), d = true;
          if (!d)
            return r.flags & 65536 ? r : null;
        }
        return r.flags & 128 ? (r.lanes = l, r) : (u = u !== null, u !== (n !== null && n.memoizedState !== null) && u && (r.child.flags |= 8192, r.mode & 1 && (n === null || qe.current & 1 ? Yn === 0 && (Yn = 3) : Zd())), r.updateQueue !== null && (r.flags |= 4), Er(r), null);
      case 4:
        return Al(), xo(n, r), n === null && cu(r.stateNode.containerInfo), Er(r), null;
      case 10:
        return Dl(r.type._context), Er(r), null;
      case 17:
        return mn(r.type) && Ai(), Er(r), null;
      case 19:
        if (Bt(qe), d = r.memoizedState, d === null)
          return Er(r), null;
        if (u = (r.flags & 128) !== 0, h = d.rendering, h === null)
          if (u)
            ws(d, false);
          else {
            if (Yn !== 0 || n !== null && n.flags & 128)
              for (n = r.child; n !== null; ) {
                if (h = Cn(n), h !== null) {
                  for (r.flags |= 128, ws(d, false), u = h.updateQueue, u !== null && (r.updateQueue = u, r.flags |= 4), r.subtreeFlags = 0, u = l, l = r.child; l !== null; )
                    d = l, n = u, d.flags &= 14680066, h = d.alternate, h === null ? (d.childLanes = 0, d.lanes = n, d.child = null, d.subtreeFlags = 0, d.memoizedProps = null, d.memoizedState = null, d.updateQueue = null, d.dependencies = null, d.stateNode = null) : (d.childLanes = h.childLanes, d.lanes = h.lanes, d.child = h.child, d.subtreeFlags = 0, d.deletions = null, d.memoizedProps = h.memoizedProps, d.memoizedState = h.memoizedState, d.updateQueue = h.updateQueue, d.type = h.type, n = h.dependencies, d.dependencies = n === null ? null : { lanes: n.lanes, firstContext: n.firstContext }), l = l.sibling;
                  return qt(qe, qe.current & 1 | 2), r.child;
                }
                n = n.sibling;
              }
            d.tail !== null && vn() > wu && (r.flags |= 128, u = true, ws(d, false), r.lanes = 4194304);
          }
        else {
          if (!u)
            if (n = Cn(h), n !== null) {
              if (r.flags |= 128, u = true, l = n.updateQueue, l !== null && (r.updateQueue = l, r.flags |= 4), ws(d, true), d.tail === null && d.tailMode === "hidden" && !h.alternate && !cn)
                return Er(r), null;
            } else
              2 * vn() - d.renderingStartTime > wu && l !== 1073741824 && (r.flags |= 128, u = true, ws(d, false), r.lanes = 4194304);
          d.isBackwards ? (h.sibling = r.child, r.child = h) : (l = d.last, l !== null ? l.sibling = h : r.child = h, d.last = h);
        }
        return d.tail !== null ? (r = d.tail, d.rendering = r, d.tail = r.sibling, d.renderingStartTime = vn(), r.sibling = null, l = qe.current, qt(qe, u ? l & 1 | 2 : l & 1), r) : (Er(r), null);
      case 22:
      case 23:
        return Kd(), u = r.memoizedState !== null, n !== null && n.memoizedState !== null !== u && (r.flags |= 8192), u && r.mode & 1 ? _i & 1073741824 && (Er(r), r.subtreeFlags & 6 && (r.flags |= 8192)) : Er(r), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(b(156, r.tag));
  }
  function Id(n, r) {
    switch (Ed(r), r.tag) {
      case 1:
        return mn(r.type) && Ai(), n = r.flags, n & 65536 ? (r.flags = n & -65537 | 128, r) : null;
      case 3:
        return Al(), Bt(Tn), Bt(tt), Dc(), n = r.flags, n & 65536 && !(n & 128) ? (r.flags = n & -65537 | 128, r) : null;
      case 5:
        return mt(r), null;
      case 13:
        if (Bt(qe), n = r.memoizedState, n !== null && n.dehydrated !== null) {
          if (r.alternate === null)
            throw Error(b(340));
          En();
        }
        return n = r.flags, n & 65536 ? (r.flags = n & -65537 | 128, r) : null;
      case 19:
        return Bt(qe), null;
      case 4:
        return Al(), null;
      case 10:
        return Dl(r.type._context), null;
      case 22:
      case 23:
        return Kd(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Ns = false, $n = false, em = typeof WeakSet == "function" ? WeakSet : Set, Oe = null;
  function Eu(n, r) {
    var l = n.ref;
    if (l !== null)
      if (typeof l == "function")
        try {
          l(null);
        } catch (u) {
          Nn(n, r, u);
        }
      else
        l.current = null;
  }
  function Ds(n, r, l) {
    try {
      l();
    } catch (u) {
      Nn(n, r, u);
    }
  }
  var tm = false;
  function nm(n, r) {
    if (vd = Di, n = dc(), ja(n)) {
      if ("selectionStart" in n)
        var l = { start: n.selectionStart, end: n.selectionEnd };
      else
        e: {
          l = (l = n.ownerDocument) && l.defaultView || window;
          var u = l.getSelection && l.getSelection();
          if (u && u.rangeCount !== 0) {
            l = u.anchorNode;
            var c = u.anchorOffset, d = u.focusNode;
            u = u.focusOffset;
            try {
              l.nodeType, d.nodeType;
            } catch {
              l = null;
              break e;
            }
            var h = 0, C = -1, T = -1, H = 0, re = 0, ae = n, ne = null;
            t:
              for (; ; ) {
                for (var Ce; ae !== l || c !== 0 && ae.nodeType !== 3 || (C = h + c), ae !== d || u !== 0 && ae.nodeType !== 3 || (T = h + u), ae.nodeType === 3 && (h += ae.nodeValue.length), (Ce = ae.firstChild) !== null; )
                  ne = ae, ae = Ce;
                for (; ; ) {
                  if (ae === n)
                    break t;
                  if (ne === l && ++H === c && (C = h), ne === d && ++re === u && (T = h), (Ce = ae.nextSibling) !== null)
                    break;
                  ae = ne, ne = ae.parentNode;
                }
                ae = Ce;
              }
            l = C === -1 || T === -1 ? null : { start: C, end: T };
          } else
            l = null;
        }
      l = l || { start: 0, end: 0 };
    } else
      l = null;
    for (so = { focusedElem: n, selectionRange: l }, Di = false, Oe = r; Oe !== null; )
      if (r = Oe, n = r.child, (r.subtreeFlags & 1028) !== 0 && n !== null)
        n.return = r, Oe = n;
      else
        for (; Oe !== null; ) {
          r = Oe;
          try {
            var Le = r.alternate;
            if (r.flags & 1024)
              switch (r.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (Le !== null) {
                    var ze = Le.memoizedProps, Mn = Le.memoizedState, M = r.stateNode, D = M.getSnapshotBeforeUpdate(r.elementType === r.type ? ze : Si(r.type, ze), Mn);
                    M.__reactInternalSnapshotBeforeUpdate = D;
                  }
                  break;
                case 3:
                  var V = r.stateNode.containerInfo;
                  V.nodeType === 1 ? V.textContent = "" : V.nodeType === 9 && V.documentElement && V.removeChild(V.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(b(163));
              }
          } catch (se) {
            Nn(r, r.return, se);
          }
          if (n = r.sibling, n !== null) {
            n.return = r.return, Oe = n;
            break;
          }
          Oe = r.return;
        }
    return Le = tm, tm = false, Le;
  }
  function Os(n, r, l) {
    var u = r.updateQueue;
    if (u = u !== null ? u.lastEffect : null, u !== null) {
      var c = u = u.next;
      do {
        if ((c.tag & n) === n) {
          var d = c.destroy;
          c.destroy = void 0, d !== void 0 && Ds(r, l, d);
        }
        c = c.next;
      } while (c !== u);
    }
  }
  function Ls(n, r) {
    if (r = r.updateQueue, r = r !== null ? r.lastEffect : null, r !== null) {
      var l = r = r.next;
      do {
        if ((l.tag & n) === n) {
          var u = l.create;
          l.destroy = u();
        }
        l = l.next;
      } while (l !== r);
    }
  }
  function $d(n) {
    var r = n.ref;
    if (r !== null) {
      var l = n.stateNode;
      switch (n.tag) {
        case 5:
          n = l;
          break;
        default:
          n = l;
      }
      typeof r == "function" ? r(n) : r.current = n;
    }
  }
  function Yd(n) {
    var r = n.alternate;
    r !== null && (n.alternate = null, Yd(r)), n.child = null, n.deletions = null, n.sibling = null, n.tag === 5 && (r = n.stateNode, r !== null && (delete r[ga], delete r[fo], delete r[yd], delete r[my], delete r[gd])), n.stateNode = null, n.return = null, n.dependencies = null, n.memoizedProps = null, n.memoizedState = null, n.pendingProps = null, n.stateNode = null, n.updateQueue = null;
  }
  function rm(n) {
    return n.tag === 5 || n.tag === 3 || n.tag === 4;
  }
  function Zc(n) {
    e:
      for (; ; ) {
        for (; n.sibling === null; ) {
          if (n.return === null || rm(n.return))
            return null;
          n = n.return;
        }
        for (n.sibling.return = n.return, n = n.sibling; n.tag !== 5 && n.tag !== 6 && n.tag !== 18; ) {
          if (n.flags & 2 || n.child === null || n.tag === 4)
            continue e;
          n.child.return = n, n = n.child;
        }
        if (!(n.flags & 2))
          return n.stateNode;
      }
  }
  function Cu(n, r, l) {
    var u = n.tag;
    if (u === 5 || u === 6)
      n = n.stateNode, r ? l.nodeType === 8 ? l.parentNode.insertBefore(n, r) : l.insertBefore(n, r) : (l.nodeType === 8 ? (r = l.parentNode, r.insertBefore(n, l)) : (r = l, r.appendChild(n)), l = l._reactRootContainer, l != null || r.onclick !== null || (r.onclick = gc));
    else if (u !== 4 && (n = n.child, n !== null))
      for (Cu(n, r, l), n = n.sibling; n !== null; )
        Cu(n, r, l), n = n.sibling;
  }
  function Ea(n, r, l) {
    var u = n.tag;
    if (u === 5 || u === 6)
      n = n.stateNode, r ? l.insertBefore(n, r) : l.appendChild(n);
    else if (u !== 4 && (n = n.child, n !== null))
      for (Ea(n, r, l), n = n.sibling; n !== null; )
        Ea(n, r, l), n = n.sibling;
  }
  var hn = null, Jn = false;
  function Hi(n, r, l) {
    for (l = l.child; l !== null; )
      ku(n, r, l), l = l.sibling;
  }
  function ku(n, r, l) {
    if (qr && typeof qr.onCommitFiberUnmount == "function")
      try {
        qr.onCommitFiberUnmount(dl, l);
      } catch {
      }
    switch (l.tag) {
      case 5:
        $n || Eu(l, r);
      case 6:
        var u = hn, c = Jn;
        hn = null, Hi(n, r, l), hn = u, Jn = c, hn !== null && (Jn ? (n = hn, l = l.stateNode, n.nodeType === 8 ? n.parentNode.removeChild(l) : n.removeChild(l)) : hn.removeChild(l.stateNode));
        break;
      case 18:
        hn !== null && (Jn ? (n = hn, l = l.stateNode, n.nodeType === 8 ? kl(n.parentNode, l) : n.nodeType === 1 && kl(n, l), Sl(n)) : kl(hn, l.stateNode));
        break;
      case 4:
        u = hn, c = Jn, hn = l.stateNode.containerInfo, Jn = true, Hi(n, r, l), hn = u, Jn = c;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (!$n && (u = l.updateQueue, u !== null && (u = u.lastEffect, u !== null))) {
          c = u = u.next;
          do {
            var d = c, h = d.destroy;
            d = d.tag, h !== void 0 && (d & 2 || d & 4) && Ds(l, r, h), c = c.next;
          } while (c !== u);
        }
        Hi(n, r, l);
        break;
      case 1:
        if (!$n && (Eu(l, r), u = l.stateNode, typeof u.componentWillUnmount == "function"))
          try {
            u.props = l.memoizedProps, u.state = l.memoizedState, u.componentWillUnmount();
          } catch (C) {
            Nn(l, r, C);
          }
        Hi(n, r, l);
        break;
      case 21:
        Hi(n, r, l);
        break;
      case 22:
        l.mode & 1 ? ($n = (u = $n) || l.memoizedState !== null, Hi(n, r, l), $n = u) : Hi(n, r, l);
        break;
      default:
        Hi(n, r, l);
    }
  }
  function Qa(n) {
    var r = n.updateQueue;
    if (r !== null) {
      n.updateQueue = null;
      var l = n.stateNode;
      l === null && (l = n.stateNode = new em()), r.forEach(function(u) {
        var c = wy.bind(null, n, u);
        l.has(u) || (l.add(u), u.then(c, c));
      });
    }
  }
  function ua(n, r) {
    var l = r.deletions;
    if (l !== null)
      for (var u = 0; u < l.length; u++) {
        var c = l[u];
        try {
          var d = n, h = r, C = h;
          e:
            for (; C !== null; ) {
              switch (C.tag) {
                case 5:
                  hn = C.stateNode, Jn = false;
                  break e;
                case 3:
                  hn = C.stateNode.containerInfo, Jn = true;
                  break e;
                case 4:
                  hn = C.stateNode.containerInfo, Jn = true;
                  break e;
              }
              C = C.return;
            }
          if (hn === null)
            throw Error(b(160));
          ku(d, h, c), hn = null, Jn = false;
          var T = c.alternate;
          T !== null && (T.return = null), c.return = null;
        } catch (H) {
          Nn(c, r, H);
        }
      }
    if (r.subtreeFlags & 12854)
      for (r = r.child; r !== null; )
        im(r, n), r = r.sibling;
  }
  function im(n, r) {
    var l = n.alternate, u = n.flags;
    switch (n.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (ua(r, n), Ca(n), u & 4) {
          try {
            Os(3, n, n.return), Ls(3, n);
          } catch (ze) {
            Nn(n, n.return, ze);
          }
          try {
            Os(5, n, n.return);
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        }
        break;
      case 1:
        ua(r, n), Ca(n), u & 512 && l !== null && Eu(l, l.return);
        break;
      case 5:
        if (ua(r, n), Ca(n), u & 512 && l !== null && Eu(l, l.return), n.flags & 32) {
          var c = n.stateNode;
          try {
            vi(c, "");
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        }
        if (u & 4 && (c = n.stateNode, c != null)) {
          var d = n.memoizedProps, h = l !== null ? l.memoizedProps : d, C = n.type, T = n.updateQueue;
          if (n.updateQueue = null, T !== null)
            try {
              C === "input" && d.type === "radio" && d.name != null && Hn(c, d), Sn(C, h);
              var H = Sn(C, d);
              for (h = 0; h < T.length; h += 2) {
                var re = T[h], ae = T[h + 1];
                re === "style" ? Pt(c, ae) : re === "dangerouslySetInnerHTML" ? da(c, ae) : re === "children" ? vi(c, ae) : oe(c, re, ae, H);
              }
              switch (C) {
                case "input":
                  Dn(c, d);
                  break;
                case "textarea":
                  pi(c, d);
                  break;
                case "select":
                  var ne = c._wrapperState.wasMultiple;
                  c._wrapperState.wasMultiple = !!d.multiple;
                  var Ce = d.value;
                  Ce != null ? yr(c, !!d.multiple, Ce, false) : ne !== !!d.multiple && (d.defaultValue != null ? yr(
                    c,
                    !!d.multiple,
                    d.defaultValue,
                    true
                  ) : yr(c, !!d.multiple, d.multiple ? [] : "", false));
              }
              c[fo] = d;
            } catch (ze) {
              Nn(n, n.return, ze);
            }
        }
        break;
      case 6:
        if (ua(r, n), Ca(n), u & 4) {
          if (n.stateNode === null)
            throw Error(b(162));
          c = n.stateNode, d = n.memoizedProps;
          try {
            c.nodeValue = d;
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        }
        break;
      case 3:
        if (ua(r, n), Ca(n), u & 4 && l !== null && l.memoizedState.isDehydrated)
          try {
            Sl(r.containerInfo);
          } catch (ze) {
            Nn(n, n.return, ze);
          }
        break;
      case 4:
        ua(r, n), Ca(n);
        break;
      case 13:
        ua(r, n), Ca(n), c = n.child, c.flags & 8192 && (d = c.memoizedState !== null, c.stateNode.isHidden = d, !d || c.alternate !== null && c.alternate.memoizedState !== null || (Gd = vn())), u & 4 && Qa(n);
        break;
      case 22:
        if (re = l !== null && l.memoizedState !== null, n.mode & 1 ? ($n = (H = $n) || re, ua(r, n), $n = H) : ua(r, n), Ca(n), u & 8192) {
          if (H = n.memoizedState !== null, (n.stateNode.isHidden = H) && !re && n.mode & 1)
            for (Oe = n, re = n.child; re !== null; ) {
              for (ae = Oe = re; Oe !== null; ) {
                switch (ne = Oe, Ce = ne.child, ne.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Os(4, ne, ne.return);
                    break;
                  case 1:
                    Eu(ne, ne.return);
                    var Le = ne.stateNode;
                    if (typeof Le.componentWillUnmount == "function") {
                      u = ne, l = ne.return;
                      try {
                        r = u, Le.props = r.memoizedProps, Le.state = r.memoizedState, Le.componentWillUnmount();
                      } catch (ze) {
                        Nn(u, l, ze);
                      }
                    }
                    break;
                  case 5:
                    Eu(ne, ne.return);
                    break;
                  case 22:
                    if (ne.memoizedState !== null) {
                      Wd(ae);
                      continue;
                    }
                }
                Ce !== null ? (Ce.return = ne, Oe = Ce) : Wd(ae);
              }
              re = re.sibling;
            }
          e:
            for (re = null, ae = n; ; ) {
              if (ae.tag === 5) {
                if (re === null) {
                  re = ae;
                  try {
                    c = ae.stateNode, H ? (d = c.style, typeof d.setProperty == "function" ? d.setProperty("display", "none", "important") : d.display = "none") : (C = ae.stateNode, T = ae.memoizedProps.style, h = T != null && T.hasOwnProperty("display") ? T.display : null, C.style.display = dt("display", h));
                  } catch (ze) {
                    Nn(n, n.return, ze);
                  }
                }
              } else if (ae.tag === 6) {
                if (re === null)
                  try {
                    ae.stateNode.nodeValue = H ? "" : ae.memoizedProps;
                  } catch (ze) {
                    Nn(n, n.return, ze);
                  }
              } else if ((ae.tag !== 22 && ae.tag !== 23 || ae.memoizedState === null || ae === n) && ae.child !== null) {
                ae.child.return = ae, ae = ae.child;
                continue;
              }
              if (ae === n)
                break e;
              for (; ae.sibling === null; ) {
                if (ae.return === null || ae.return === n)
                  break e;
                re === ae && (re = null), ae = ae.return;
              }
              re === ae && (re = null), ae.sibling.return = ae.return, ae = ae.sibling;
            }
        }
        break;
      case 19:
        ua(r, n), Ca(n), u & 4 && Qa(n);
        break;
      case 21:
        break;
      default:
        ua(
          r,
          n
        ), Ca(n);
    }
  }
  function Ca(n) {
    var r = n.flags;
    if (r & 2) {
      try {
        e: {
          for (var l = n.return; l !== null; ) {
            if (rm(l)) {
              var u = l;
              break e;
            }
            l = l.return;
          }
          throw Error(b(160));
        }
        switch (u.tag) {
          case 5:
            var c = u.stateNode;
            u.flags & 32 && (vi(c, ""), u.flags &= -33);
            var d = Zc(n);
            Ea(n, d, c);
            break;
          case 3:
          case 4:
            var h = u.stateNode.containerInfo, C = Zc(n);
            Cu(n, C, h);
            break;
          default:
            throw Error(b(161));
        }
      } catch (T) {
        Nn(n, n.return, T);
      }
      n.flags &= -3;
    }
    r & 4096 && (n.flags &= -4097);
  }
  function am(n, r, l) {
    Oe = n, xu(n);
  }
  function xu(n, r, l) {
    for (var u = (n.mode & 1) !== 0; Oe !== null; ) {
      var c = Oe, d = c.child;
      if (c.tag === 22 && u) {
        var h = c.memoizedState !== null || Ns;
        if (!h) {
          var C = c.alternate, T = C !== null && C.memoizedState !== null || $n;
          C = Ns;
          var H = $n;
          if (Ns = h, ($n = T) && !H)
            for (Oe = c; Oe !== null; )
              h = Oe, T = h.child, h.tag === 22 && h.memoizedState !== null ? om(c) : T !== null ? (T.return = h, Oe = T) : om(c);
          for (; d !== null; )
            Oe = d, xu(d), d = d.sibling;
          Oe = c, Ns = C, $n = H;
        }
        lm(n);
      } else
        c.subtreeFlags & 8772 && d !== null ? (d.return = c, Oe = d) : lm(n);
    }
  }
  function lm(n) {
    for (; Oe !== null; ) {
      var r = Oe;
      if (r.flags & 8772) {
        var l = r.alternate;
        try {
          if (r.flags & 8772)
            switch (r.tag) {
              case 0:
              case 11:
              case 15:
                $n || Ls(5, r);
                break;
              case 1:
                var u = r.stateNode;
                if (r.flags & 4 && !$n)
                  if (l === null)
                    u.componentDidMount();
                  else {
                    var c = r.elementType === r.type ? l.memoizedProps : Si(r.type, l.memoizedProps);
                    u.componentDidUpdate(c, l.memoizedState, u.__reactInternalSnapshotBeforeUpdate);
                  }
                var d = r.updateQueue;
                d !== null && vo(r, d, u);
                break;
              case 3:
                var h = r.updateQueue;
                if (h !== null) {
                  if (l = null, r.child !== null)
                    switch (r.child.tag) {
                      case 5:
                        l = r.child.stateNode;
                        break;
                      case 1:
                        l = r.child.stateNode;
                    }
                  vo(r, h, l);
                }
                break;
              case 5:
                var C = r.stateNode;
                if (l === null && r.flags & 4) {
                  l = C;
                  var T = r.memoizedProps;
                  switch (r.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      T.autoFocus && l.focus();
                      break;
                    case "img":
                      T.src && (l.src = T.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (r.memoizedState === null) {
                  var H = r.alternate;
                  if (H !== null) {
                    var re = H.memoizedState;
                    if (re !== null) {
                      var ae = re.dehydrated;
                      ae !== null && Sl(ae);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(b(163));
            }
          $n || r.flags & 512 && $d(r);
        } catch (ne) {
          Nn(r, r.return, ne);
        }
      }
      if (r === n) {
        Oe = null;
        break;
      }
      if (l = r.sibling, l !== null) {
        l.return = r.return, Oe = l;
        break;
      }
      Oe = r.return;
    }
  }
  function Wd(n) {
    for (; Oe !== null; ) {
      var r = Oe;
      if (r === n) {
        Oe = null;
        break;
      }
      var l = r.sibling;
      if (l !== null) {
        l.return = r.return, Oe = l;
        break;
      }
      Oe = r.return;
    }
  }
  function om(n) {
    for (; Oe !== null; ) {
      var r = Oe;
      try {
        switch (r.tag) {
          case 0:
          case 11:
          case 15:
            var l = r.return;
            try {
              Ls(4, r);
            } catch (T) {
              Nn(r, l, T);
            }
            break;
          case 1:
            var u = r.stateNode;
            if (typeof u.componentDidMount == "function") {
              var c = r.return;
              try {
                u.componentDidMount();
              } catch (T) {
                Nn(r, c, T);
              }
            }
            var d = r.return;
            try {
              $d(r);
            } catch (T) {
              Nn(r, d, T);
            }
            break;
          case 5:
            var h = r.return;
            try {
              $d(r);
            } catch (T) {
              Nn(r, h, T);
            }
        }
      } catch (T) {
        Nn(r, r.return, T);
      }
      if (r === n) {
        Oe = null;
        break;
      }
      var C = r.sibling;
      if (C !== null) {
        C.return = r.return, Oe = C;
        break;
      }
      Oe = r.return;
    }
  }
  var Jc = Math.ceil, Ms = xe.ReactCurrentDispatcher, Qd = xe.ReactCurrentOwner, Cr = xe.ReactCurrentBatchConfig, _t = 0, kn = null, wn = null, er = 0, _i = 0, Ru = ut(0), Yn = 0, As = null, Ga = 0, ef = 0, Tu = 0, Ro = null, Lr = null, Gd = 0, wu = 1 / 0, qa = null, tf = false, To = null, ka = null, jl = false, Fl = null, nf = 0, Nu = 0, rf = null, wo = -1, No = 0;
  function kr() {
    return _t & 6 ? vn() : wo !== -1 ? wo : wo = vn();
  }
  function Un(n) {
    return n.mode & 1 ? _t & 2 && er !== 0 ? er & -er : kc.transition !== null ? (No === 0 && (No = Xo()), No) : (n = jt, n !== 0 || (n = window.event, n = n === void 0 ? 16 : ns(n.type)), n) : 1;
  }
  function xr(n, r, l, u) {
    if (50 < Nu)
      throw Nu = 0, rf = null, Error(b(185));
    Ma(n, l, u), (!(_t & 2) || n !== kn) && (n === kn && (!(_t & 2) && (ef |= l), Yn === 4 && Pi(n, er)), Rr(n, u), l === 1 && _t === 0 && !(r.mode & 1) && (wu = vn() + 500, Kn && ei()));
  }
  function Rr(n, r) {
    var l = n.callbackNode;
    ml(n, r);
    var u = Dr(n, n === kn ? er : 0);
    if (u === 0)
      l !== null && Gr(l), n.callbackNode = null, n.callbackPriority = 0;
    else if (r = u & -u, n.callbackPriority !== r) {
      if (l != null && Gr(l), r === 1)
        n.tag === 0 ? bd(um.bind(null, n)) : Sd(um.bind(null, n)), hd(function() {
          !(_t & 6) && ei();
        }), l = null;
      else {
        switch (Zo(u)) {
          case 1:
            l = ea;
            break;
          case 4:
            l = pt;
            break;
          case 16:
            l = ma;
            break;
          case 536870912:
            l = Go;
            break;
          default:
            l = ma;
        }
        l = ep(l, Du.bind(null, n));
      }
      n.callbackPriority = r, n.callbackNode = l;
    }
  }
  function Du(n, r) {
    if (wo = -1, No = 0, _t & 6)
      throw Error(b(327));
    var l = n.callbackNode;
    if (Lu() && n.callbackNode !== l)
      return null;
    var u = Dr(n, n === kn ? er : 0);
    if (u === 0)
      return null;
    if (u & 30 || u & n.expiredLanes || r)
      r = lf(n, u);
    else {
      r = u;
      var c = _t;
      _t |= 2;
      var d = af();
      (kn !== n || er !== r) && (qa = null, wu = vn() + 500, Do(n, r));
      do
        try {
          ky();
          break;
        } catch (C) {
          sm(n, C);
        }
      while (true);
      Rd(), Ms.current = d, _t = c, wn !== null ? r = 0 : (kn = null, er = 0, r = Yn);
    }
    if (r !== 0) {
      if (r === 2 && (c = hl(n), c !== 0 && (u = c, r = qd(n, c))), r === 1)
        throw l = As, Do(n, 0), Pi(n, u), Rr(n, vn()), l;
      if (r === 6)
        Pi(n, u);
      else {
        if (c = n.current.alternate, !(u & 30) && !Xd(c) && (r = lf(n, u), r === 2 && (d = hl(n), d !== 0 && (u = d, r = qd(n, d))), r === 1))
          throw l = As, Do(n, 0), Pi(n, u), Rr(n, vn()), l;
        switch (n.finishedWork = c, n.finishedLanes = u, r) {
          case 0:
          case 1:
            throw Error(b(345));
          case 2:
            Oo(n, Lr, qa);
            break;
          case 3:
            if (Pi(n, u), (u & 130023424) === u && (r = Gd + 500 - vn(), 10 < r)) {
              if (Dr(n, 0) !== 0)
                break;
              if (c = n.suspendedLanes, (c & u) !== u) {
                kr(), n.pingedLanes |= n.suspendedLanes & c;
                break;
              }
              n.timeoutHandle = co(Oo.bind(null, n, Lr, qa), r);
              break;
            }
            Oo(n, Lr, qa);
            break;
          case 4:
            if (Pi(n, u), (u & 4194240) === u)
              break;
            for (r = n.eventTimes, c = -1; 0 < u; ) {
              var h = 31 - Nr(u);
              d = 1 << h, h = r[h], h > c && (c = h), u &= ~d;
            }
            if (u = c, u = vn() - u, u = (120 > u ? 120 : 480 > u ? 480 : 1080 > u ? 1080 : 1920 > u ? 1920 : 3e3 > u ? 3e3 : 4320 > u ? 4320 : 1960 * Jc(u / 1960)) - u, 10 < u) {
              n.timeoutHandle = co(Oo.bind(null, n, Lr, qa), u);
              break;
            }
            Oo(n, Lr, qa);
            break;
          case 5:
            Oo(n, Lr, qa);
            break;
          default:
            throw Error(b(329));
        }
      }
    }
    return Rr(n, vn()), n.callbackNode === l ? Du.bind(null, n) : null;
  }
  function qd(n, r) {
    var l = Ro;
    return n.current.memoizedState.isDehydrated && (Do(n, r).flags |= 256), n = lf(n, r), n !== 2 && (r = Lr, Lr = l, r !== null && zs(r)), n;
  }
  function zs(n) {
    Lr === null ? Lr = n : Lr.push.apply(Lr, n);
  }
  function Xd(n) {
    for (var r = n; ; ) {
      if (r.flags & 16384) {
        var l = r.updateQueue;
        if (l !== null && (l = l.stores, l !== null))
          for (var u = 0; u < l.length; u++) {
            var c = l[u], d = c.getSnapshot;
            c = c.value;
            try {
              if (!Oi(d(), c))
                return false;
            } catch {
              return false;
            }
          }
      }
      if (l = r.child, r.subtreeFlags & 16384 && l !== null)
        l.return = r, r = l;
      else {
        if (r === n)
          break;
        for (; r.sibling === null; ) {
          if (r.return === null || r.return === n)
            return true;
          r = r.return;
        }
        r.sibling.return = r.return, r = r.sibling;
      }
    }
    return true;
  }
  function Pi(n, r) {
    for (r &= ~Tu, r &= ~ef, n.suspendedLanes |= r, n.pingedLanes &= ~r, n = n.expirationTimes; 0 < r; ) {
      var l = 31 - Nr(r), u = 1 << l;
      n[l] = -1, r &= ~u;
    }
  }
  function um(n) {
    if (_t & 6)
      throw Error(b(327));
    Lu();
    var r = Dr(n, 0);
    if (!(r & 1))
      return Rr(n, vn()), null;
    var l = lf(n, r);
    if (n.tag !== 0 && l === 2) {
      var u = hl(n);
      u !== 0 && (r = u, l = qd(n, u));
    }
    if (l === 1)
      throw l = As, Do(n, 0), Pi(n, r), Rr(n, vn()), l;
    if (l === 6)
      throw Error(b(345));
    return n.finishedWork = n.current.alternate, n.finishedLanes = r, Oo(n, Lr, qa), Rr(n, vn()), null;
  }
  function Ou(n, r) {
    var l = _t;
    _t |= 1;
    try {
      return n(r);
    } finally {
      _t = l, _t === 0 && (wu = vn() + 500, Kn && ei());
    }
  }
  function Hl(n) {
    Fl !== null && Fl.tag === 0 && !(_t & 6) && Lu();
    var r = _t;
    _t |= 1;
    var l = Cr.transition, u = jt;
    try {
      if (Cr.transition = null, jt = 1, n)
        return n();
    } finally {
      jt = u, Cr.transition = l, _t = r, !(_t & 6) && ei();
    }
  }
  function Kd() {
    _i = Ru.current, Bt(Ru);
  }
  function Do(n, r) {
    n.finishedWork = null, n.finishedLanes = 0;
    var l = n.timeoutHandle;
    if (l !== -1 && (n.timeoutHandle = -1, Vv(l)), wn !== null)
      for (l = wn.return; l !== null; ) {
        var u = l;
        switch (Ed(u), u.tag) {
          case 1:
            u = u.type.childContextTypes, u != null && Ai();
            break;
          case 3:
            Al(), Bt(Tn), Bt(tt), Dc();
            break;
          case 5:
            mt(u);
            break;
          case 4:
            Al();
            break;
          case 13:
            Bt(qe);
            break;
          case 19:
            Bt(qe);
            break;
          case 10:
            Dl(u.type._context);
            break;
          case 22:
          case 23:
            Kd();
        }
        l = l.return;
      }
    if (kn = n, wn = n = Pl(n.current, null), er = _i = r, Yn = 0, As = null, Tu = ef = Ga = 0, Lr = Ro = null, lr !== null) {
      for (r = 0; r < lr.length; r++)
        if (l = lr[r], u = l.interleaved, u !== null) {
          l.interleaved = null;
          var c = u.next, d = l.pending;
          if (d !== null) {
            var h = d.next;
            d.next = c, u.next = h;
          }
          l.pending = u;
        }
      lr = null;
    }
    return n;
  }
  function sm(n, r) {
    do {
      var l = wn;
      try {
        if (Rd(), Oc.current = Qc, Ke) {
          for (var u = fn.memoizedState; u !== null; ) {
            var c = u.queue;
            c !== null && (c.pending = null), u = u.next;
          }
          Ke = false;
        }
        if (ho = 0, wt = Y = fn = null, _a = false, bi = 0, Qd.current = null, l === null || l.return === null) {
          Yn = 1, As = r, wn = null;
          break;
        }
        e: {
          var d = n, h = l.return, C = l, T = r;
          if (r = er, C.flags |= 32768, T !== null && typeof T == "object" && typeof T.then == "function") {
            var H = T, re = C, ae = re.tag;
            if (!(re.mode & 1) && (ae === 0 || ae === 11 || ae === 15)) {
              var ne = re.alternate;
              ne ? (re.updateQueue = ne.updateQueue, re.memoizedState = ne.memoizedState, re.lanes = ne.lanes) : (re.updateQueue = null, re.memoizedState = null);
            }
            var Ce = zd(h);
            if (Ce !== null) {
              Ce.flags &= -257, Vd(Ce, h, C, d, r), Ce.mode & 1 && Kv(d, H, r), r = Ce, T = H;
              var Le = r.updateQueue;
              if (Le === null) {
                var ze = /* @__PURE__ */ new Set();
                ze.add(T), r.updateQueue = ze;
              } else
                Le.add(T);
              break e;
            } else {
              if (!(r & 1)) {
                Kv(d, H, r), Zd();
                break e;
              }
              T = Error(b(426));
            }
          } else if (cn && C.mode & 1) {
            var Mn = zd(h);
            if (Mn !== null) {
              !(Mn.flags & 65536) && (Mn.flags |= 256), Vd(Mn, h, C, d, r), kd(Su(T, C));
              break e;
            }
          }
          d = T = Su(T, C), Yn !== 4 && (Yn = 2), Ro === null ? Ro = [d] : Ro.push(d), d = h;
          do {
            switch (d.tag) {
              case 3:
                d.flags |= 65536, r &= -r, d.lanes |= r;
                var M = Xv(d, T, r);
                Nd(d, M);
                break e;
              case 1:
                C = T;
                var D = d.type, V = d.stateNode;
                if (!(d.flags & 128) && (typeof D.getDerivedStateFromError == "function" || V !== null && typeof V.componentDidCatch == "function" && (ka === null || !ka.has(V)))) {
                  d.flags |= 65536, r &= -r, d.lanes |= r;
                  var se = Rs(d, C, r);
                  Nd(d, se);
                  break e;
                }
            }
            d = d.return;
          } while (d !== null);
        }
        Jd(l);
      } catch (Ve) {
        r = Ve, wn === l && l !== null && (wn = l = l.return);
        continue;
      }
      break;
    } while (true);
  }
  function af() {
    var n = Ms.current;
    return Ms.current = Qc, n === null ? Qc : n;
  }
  function Zd() {
    (Yn === 0 || Yn === 3 || Yn === 2) && (Yn = 4), kn === null || !(Ga & 268435455) && !(ef & 268435455) || Pi(kn, er);
  }
  function lf(n, r) {
    var l = _t;
    _t |= 2;
    var u = af();
    (kn !== n || er !== r) && (qa = null, Do(n, r));
    do
      try {
        Cy();
        break;
      } catch (c) {
        sm(n, c);
      }
    while (true);
    if (Rd(), _t = l, Ms.current = u, wn !== null)
      throw Error(b(261));
    return kn = null, er = 0, Yn;
  }
  function Cy() {
    for (; wn !== null; )
      cm(wn);
  }
  function ky() {
    for (; wn !== null && !Wf(); )
      cm(wn);
  }
  function cm(n) {
    var r = dm(n.alternate, n, _i);
    n.memoizedProps = n.pendingProps, r === null ? Jd(n) : wn = r, Qd.current = null;
  }
  function Jd(n) {
    var r = n;
    do {
      var l = r.alternate;
      if (n = r.return, r.flags & 32768) {
        if (l = Id(l, r), l !== null) {
          l.flags &= 32767, wn = l;
          return;
        }
        if (n !== null)
          n.flags |= 32768, n.subtreeFlags = 0, n.deletions = null;
        else {
          Yn = 6, wn = null;
          return;
        }
      } else if (l = Ey(l, r, _i), l !== null) {
        wn = l;
        return;
      }
      if (r = r.sibling, r !== null) {
        wn = r;
        return;
      }
      wn = r = n;
    } while (r !== null);
    Yn === 0 && (Yn = 5);
  }
  function Oo(n, r, l) {
    var u = jt, c = Cr.transition;
    try {
      Cr.transition = null, jt = 1, xy(n, r, l, u);
    } finally {
      Cr.transition = c, jt = u;
    }
    return null;
  }
  function xy(n, r, l, u) {
    do
      Lu();
    while (Fl !== null);
    if (_t & 6)
      throw Error(b(327));
    l = n.finishedWork;
    var c = n.finishedLanes;
    if (l === null)
      return null;
    if (n.finishedWork = null, n.finishedLanes = 0, l === n.current)
      throw Error(b(177));
    n.callbackNode = null, n.callbackPriority = 0;
    var d = l.lanes | l.childLanes;
    if (qf(n, d), n === kn && (wn = kn = null, er = 0), !(l.subtreeFlags & 2064) && !(l.flags & 2064) || jl || (jl = true, ep(ma, function() {
      return Lu(), null;
    })), d = (l.flags & 15990) !== 0, l.subtreeFlags & 15990 || d) {
      d = Cr.transition, Cr.transition = null;
      var h = jt;
      jt = 1;
      var C = _t;
      _t |= 4, Qd.current = null, nm(n, l), im(l, n), pc(so), Di = !!vd, so = vd = null, n.current = l, am(l), Qf(), _t = C, jt = h, Cr.transition = d;
    } else
      n.current = l;
    if (jl && (jl = false, Fl = n, nf = c), d = n.pendingLanes, d === 0 && (ka = null), Ju(l.stateNode), Rr(n, vn()), r !== null)
      for (u = n.onRecoverableError, l = 0; l < r.length; l++)
        c = r[l], u(c.value, { componentStack: c.stack, digest: c.digest });
    if (tf)
      throw tf = false, n = To, To = null, n;
    return nf & 1 && n.tag !== 0 && Lu(), d = n.pendingLanes, d & 1 ? n === rf ? Nu++ : (Nu = 0, rf = n) : Nu = 0, ei(), null;
  }
  function Lu() {
    if (Fl !== null) {
      var n = Zo(nf), r = Cr.transition, l = jt;
      try {
        if (Cr.transition = null, jt = 16 > n ? 16 : n, Fl === null)
          var u = false;
        else {
          if (n = Fl, Fl = null, nf = 0, _t & 6)
            throw Error(b(331));
          var c = _t;
          for (_t |= 4, Oe = n.current; Oe !== null; ) {
            var d = Oe, h = d.child;
            if (Oe.flags & 16) {
              var C = d.deletions;
              if (C !== null) {
                for (var T = 0; T < C.length; T++) {
                  var H = C[T];
                  for (Oe = H; Oe !== null; ) {
                    var re = Oe;
                    switch (re.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Os(8, re, d);
                    }
                    var ae = re.child;
                    if (ae !== null)
                      ae.return = re, Oe = ae;
                    else
                      for (; Oe !== null; ) {
                        re = Oe;
                        var ne = re.sibling, Ce = re.return;
                        if (Yd(re), re === H) {
                          Oe = null;
                          break;
                        }
                        if (ne !== null) {
                          ne.return = Ce, Oe = ne;
                          break;
                        }
                        Oe = Ce;
                      }
                  }
                }
                var Le = d.alternate;
                if (Le !== null) {
                  var ze = Le.child;
                  if (ze !== null) {
                    Le.child = null;
                    do {
                      var Mn = ze.sibling;
                      ze.sibling = null, ze = Mn;
                    } while (ze !== null);
                  }
                }
                Oe = d;
              }
            }
            if (d.subtreeFlags & 2064 && h !== null)
              h.return = d, Oe = h;
            else
              e:
                for (; Oe !== null; ) {
                  if (d = Oe, d.flags & 2048)
                    switch (d.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Os(9, d, d.return);
                    }
                  var M = d.sibling;
                  if (M !== null) {
                    M.return = d.return, Oe = M;
                    break e;
                  }
                  Oe = d.return;
                }
          }
          var D = n.current;
          for (Oe = D; Oe !== null; ) {
            h = Oe;
            var V = h.child;
            if (h.subtreeFlags & 2064 && V !== null)
              V.return = h, Oe = V;
            else
              e:
                for (h = D; Oe !== null; ) {
                  if (C = Oe, C.flags & 2048)
                    try {
                      switch (C.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Ls(9, C);
                      }
                    } catch (Ve) {
                      Nn(C, C.return, Ve);
                    }
                  if (C === h) {
                    Oe = null;
                    break e;
                  }
                  var se = C.sibling;
                  if (se !== null) {
                    se.return = C.return, Oe = se;
                    break e;
                  }
                  Oe = C.return;
                }
          }
          if (_t = c, ei(), qr && typeof qr.onPostCommitFiberRoot == "function")
            try {
              qr.onPostCommitFiberRoot(dl, n);
            } catch {
            }
          u = true;
        }
        return u;
      } finally {
        jt = l, Cr.transition = r;
      }
    }
    return false;
  }
  function fm(n, r, l) {
    r = Su(l, r), r = Xv(n, r, 1), n = Ll(n, r, 1), r = kr(), n !== null && (Ma(n, 1, r), Rr(n, r));
  }
  function Nn(n, r, l) {
    if (n.tag === 3)
      fm(n, n, l);
    else
      for (; r !== null; ) {
        if (r.tag === 3) {
          fm(r, n, l);
          break;
        } else if (r.tag === 1) {
          var u = r.stateNode;
          if (typeof r.type.getDerivedStateFromError == "function" || typeof u.componentDidCatch == "function" && (ka === null || !ka.has(u))) {
            n = Su(l, n), n = Rs(r, n, 1), r = Ll(r, n, 1), n = kr(), r !== null && (Ma(r, 1, n), Rr(r, n));
            break;
          }
        }
        r = r.return;
      }
  }
  function Ry(n, r, l) {
    var u = n.pingCache;
    u !== null && u.delete(r), r = kr(), n.pingedLanes |= n.suspendedLanes & l, kn === n && (er & l) === l && (Yn === 4 || Yn === 3 && (er & 130023424) === er && 500 > vn() - Gd ? Do(n, 0) : Tu |= l), Rr(n, r);
  }
  function of(n, r) {
    r === 0 && (n.mode & 1 ? (r = pl, pl <<= 1, !(pl & 130023424) && (pl = 4194304)) : r = 1);
    var l = kr();
    n = Ia(n, r), n !== null && (Ma(n, r, l), Rr(n, l));
  }
  function Ty(n) {
    var r = n.memoizedState, l = 0;
    r !== null && (l = r.retryLane), of(n, l);
  }
  function wy(n, r) {
    var l = 0;
    switch (n.tag) {
      case 13:
        var u = n.stateNode, c = n.memoizedState;
        c !== null && (l = c.retryLane);
        break;
      case 19:
        u = n.stateNode;
        break;
      default:
        throw Error(b(314));
    }
    u !== null && u.delete(r), of(n, l);
  }
  var dm;
  dm = function(n, r, l) {
    if (n !== null)
      if (n.memoizedProps !== r.pendingProps || Tn.current)
        Vn = true;
      else {
        if (!(n.lanes & l) && !(r.flags & 128))
          return Vn = false, Wa(n, r, l);
        Vn = !!(n.flags & 131072);
      }
    else
      Vn = false, cn && r.flags & 1048576 && _d(r, du, r.index);
    switch (r.lanes = 0, r.tag) {
      case 2:
        var u = r.type;
        _r(n, r), n = r.pendingProps;
        var c = Mi(r, tt.current);
        he(r, l), c = zl(null, r, u, n, c, l);
        var d = So();
        return r.flags |= 1, typeof c == "object" && c !== null && typeof c.render == "function" && c.$$typeof === void 0 ? (r.tag = 1, r.memoizedState = null, r.updateQueue = null, mn(u) ? (d = true, Sc(r)) : d = false, r.memoizedState = c.state !== null && c.state !== void 0 ? c.state : null, wd(r), c.updater = Tc, r.stateNode = c, c._reactInternals = r, wc(r, u, n, l), r = Zv(null, r, u, true, d, l)) : (r.tag = 0, cn && d && bc(r), Bn(null, r, c, l), r = r.child), r;
      case 16:
        u = r.elementType;
        e: {
          switch (_r(n, r), n = r.pendingProps, c = u._init, u = c(u._payload), r.type = u, c = r.tag = Dy(u), n = Si(u, n), c) {
            case 0:
              r = bu(null, r, u, n, l);
              break e;
            case 1:
              r = Ud(null, r, u, n, l);
              break e;
            case 11:
              r = Ul(null, r, u, n, l);
              break e;
            case 14:
              r = qc(null, r, u, Si(u.type, n), l);
              break e;
          }
          throw Error(b(
            306,
            u,
            ""
          ));
        }
        return r;
      case 0:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), bu(n, r, u, c, l);
      case 1:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), Ud(n, r, u, c, l);
      case 3:
        e: {
          if (Jv(r), n === null)
            throw Error(b(387));
          u = r.pendingProps, d = r.memoizedState, c = d.element, Pn(n, r), Ml(r, u, null, l);
          var h = r.memoizedState;
          if (u = h.element, d.isDehydrated)
            if (d = { element: u, isDehydrated: false, cache: h.cache, pendingSuspenseBoundaries: h.pendingSuspenseBoundaries, transitions: h.transitions }, r.updateQueue.baseState = d, r.memoizedState = d, r.flags & 256) {
              c = Su(Error(b(423)), r), r = Xc(n, r, u, l, c);
              break e;
            } else if (u !== c) {
              c = Su(Error(b(424)), r), r = Xc(n, r, u, l, c);
              break e;
            } else
              for (ri = la(r.stateNode.containerInfo.firstChild), gi = r, cn = true, Vi = null, l = Gv(r, null, u, l), r.child = l; l; )
                l.flags = l.flags & -3 | 4096, l = l.sibling;
          else {
            if (En(), u === c) {
              r = or(n, r, l);
              break e;
            }
            Bn(n, r, u, l);
          }
          r = r.child;
        }
        return r;
      case 5:
        return Qe(r), n === null && Ec(r), u = r.type, c = r.pendingProps, d = n !== null ? n.memoizedProps : null, h = c.children, vs(u, c) ? h = null : d !== null && vs(u, d) && (r.flags |= 32), st(n, r), Bn(n, r, h, l), r.child;
      case 6:
        return n === null && Ec(r), null;
      case 13:
        return Fd(n, r, l);
      case 4:
        return Od(r, r.stateNode.containerInfo), u = r.pendingProps, n === null ? r.child = vu(r, null, u, l) : Bn(n, r, u, l), r.child;
      case 11:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), Ul(n, r, u, c, l);
      case 7:
        return Bn(n, r, r.pendingProps, l), r.child;
      case 8:
        return Bn(n, r, r.pendingProps.children, l), r.child;
      case 12:
        return Bn(n, r, r.pendingProps.children, l), r.child;
      case 10:
        e: {
          if (u = r.type._context, c = r.pendingProps, d = r.memoizedProps, h = c.value, qt(ba, u._currentValue), u._currentValue = h, d !== null)
            if (Oi(d.value, h)) {
              if (d.children === c.children && !Tn.current) {
                r = or(n, r, l);
                break e;
              }
            } else
              for (d = r.child, d !== null && (d.return = r); d !== null; ) {
                var C = d.dependencies;
                if (C !== null) {
                  h = d.child;
                  for (var T = C.firstContext; T !== null; ) {
                    if (T.context === u) {
                      if (d.tag === 1) {
                        T = $a(-1, l & -l), T.tag = 2;
                        var H = d.updateQueue;
                        if (H !== null) {
                          H = H.shared;
                          var re = H.pending;
                          re === null ? T.next = T : (T.next = re.next, re.next = T), H.pending = T;
                        }
                      }
                      d.lanes |= l, T = d.alternate, T !== null && (T.lanes |= l), Zn(
                        d.return,
                        l,
                        r
                      ), C.lanes |= l;
                      break;
                    }
                    T = T.next;
                  }
                } else if (d.tag === 10)
                  h = d.type === r.type ? null : d.child;
                else if (d.tag === 18) {
                  if (h = d.return, h === null)
                    throw Error(b(341));
                  h.lanes |= l, C = h.alternate, C !== null && (C.lanes |= l), Zn(h, l, r), h = d.sibling;
                } else
                  h = d.child;
                if (h !== null)
                  h.return = d;
                else
                  for (h = d; h !== null; ) {
                    if (h === r) {
                      h = null;
                      break;
                    }
                    if (d = h.sibling, d !== null) {
                      d.return = h.return, h = d;
                      break;
                    }
                    h = h.return;
                  }
                d = h;
              }
          Bn(n, r, c.children, l), r = r.child;
        }
        return r;
      case 9:
        return c = r.type, u = r.pendingProps.children, he(r, l), c = Ln(c), u = u(c), r.flags |= 1, Bn(n, r, u, l), r.child;
      case 14:
        return u = r.type, c = Si(u, r.pendingProps), c = Si(u.type, c), qc(n, r, u, c, l);
      case 15:
        return li(n, r, r.type, r.pendingProps, l);
      case 17:
        return u = r.type, c = r.pendingProps, c = r.elementType === u ? c : Si(u, c), _r(n, r), r.tag = 1, mn(u) ? (n = true, Sc(r)) : n = false, he(r, l), $v(r, u, c), wc(r, u, c, l), Zv(null, r, u, true, n, l);
      case 19:
        return Bd(n, r, l);
      case 22:
        return Co(n, r, l);
    }
    throw Error(b(156, r.tag));
  };
  function ep(n, r) {
    return cl(n, r);
  }
  function Ny(n, r, l, u) {
    this.tag = n, this.key = l, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = r, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = u, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function Bi(n, r, l, u) {
    return new Ny(n, r, l, u);
  }
  function tp(n) {
    return n = n.prototype, !(!n || !n.isReactComponent);
  }
  function Dy(n) {
    if (typeof n == "function")
      return tp(n) ? 1 : 0;
    if (n != null) {
      if (n = n.$$typeof, n === en)
        return 11;
      if (n === Ut)
        return 14;
    }
    return 2;
  }
  function Pl(n, r) {
    var l = n.alternate;
    return l === null ? (l = Bi(n.tag, r, n.key, n.mode), l.elementType = n.elementType, l.type = n.type, l.stateNode = n.stateNode, l.alternate = n, n.alternate = l) : (l.pendingProps = r, l.type = n.type, l.flags = 0, l.subtreeFlags = 0, l.deletions = null), l.flags = n.flags & 14680064, l.childLanes = n.childLanes, l.lanes = n.lanes, l.child = n.child, l.memoizedProps = n.memoizedProps, l.memoizedState = n.memoizedState, l.updateQueue = n.updateQueue, r = n.dependencies, l.dependencies = r === null ? null : { lanes: r.lanes, firstContext: r.firstContext }, l.sibling = n.sibling, l.index = n.index, l.ref = n.ref, l;
  }
  function uf(n, r, l, u, c, d) {
    var h = 2;
    if (u = n, typeof n == "function")
      tp(n) && (h = 1);
    else if (typeof n == "string")
      h = 5;
    else
      e:
        switch (n) {
          case De:
            return Lo(l.children, c, d, r);
          case St:
            h = 8, c |= 8;
            break;
          case Rt:
            return n = Bi(12, l, r, c | 2), n.elementType = Rt, n.lanes = d, n;
          case Be:
            return n = Bi(13, l, r, c), n.elementType = Be, n.lanes = d, n;
          case rt:
            return n = Bi(19, l, r, c), n.elementType = rt, n.lanes = d, n;
          case Ne:
            return Vs(l, c, d, r);
          default:
            if (typeof n == "object" && n !== null)
              switch (n.$$typeof) {
                case Lt:
                  h = 10;
                  break e;
                case Ct:
                  h = 9;
                  break e;
                case en:
                  h = 11;
                  break e;
                case Ut:
                  h = 14;
                  break e;
                case ht:
                  h = 16, u = null;
                  break e;
              }
            throw Error(b(130, n == null ? n : typeof n, ""));
        }
    return r = Bi(h, l, r, c), r.elementType = n, r.type = u, r.lanes = d, r;
  }
  function Lo(n, r, l, u) {
    return n = Bi(7, n, u, r), n.lanes = l, n;
  }
  function Vs(n, r, l, u) {
    return n = Bi(22, n, u, r), n.elementType = Ne, n.lanes = l, n.stateNode = { isHidden: false }, n;
  }
  function Us(n, r, l) {
    return n = Bi(6, n, null, r), n.lanes = l, n;
  }
  function Mo(n, r, l) {
    return r = Bi(4, n.children !== null ? n.children : [], n.key, r), r.lanes = l, r.stateNode = { containerInfo: n.containerInfo, pendingChildren: null, implementation: n.implementation }, r;
  }
  function Oy(n, r, l, u, c) {
    this.tag = r, this.containerInfo = n, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = Ko(0), this.expirationTimes = Ko(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Ko(0), this.identifierPrefix = u, this.onRecoverableError = c, this.mutableSourceEagerHydrationData = null;
  }
  function sf(n, r, l, u, c, d, h, C, T) {
    return n = new Oy(n, r, l, C, T), r === 1 ? (r = 1, d === true && (r |= 8)) : r = 0, d = Bi(3, null, null, r), n.current = d, d.stateNode = n, d.memoizedState = { element: u, isDehydrated: l, cache: null, transitions: null, pendingSuspenseBoundaries: null }, wd(d), n;
  }
  function pm(n, r, l) {
    var u = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return { $$typeof: we, key: u == null ? null : "" + u, children: n, containerInfo: r, implementation: l };
  }
  function np(n) {
    if (!n)
      return Sa;
    n = n._reactInternals;
    e: {
      if (Je(n) !== n || n.tag !== 1)
        throw Error(b(170));
      var r = n;
      do {
        switch (r.tag) {
          case 3:
            r = r.stateNode.context;
            break e;
          case 1:
            if (mn(r.type)) {
              r = r.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        r = r.return;
      } while (r !== null);
      throw Error(b(171));
    }
    if (n.tag === 1) {
      var l = n.type;
      if (mn(l))
        return ys(n, l, r);
    }
    return r;
  }
  function vm(n, r, l, u, c, d, h, C, T) {
    return n = sf(l, u, true, n, c, d, h, C, T), n.context = np(null), l = n.current, u = kr(), c = Un(l), d = $a(u, c), d.callback = r ?? null, Ll(l, d, c), n.current.lanes = c, Ma(n, c, u), Rr(n, u), n;
  }
  function js(n, r, l, u) {
    var c = r.current, d = kr(), h = Un(c);
    return l = np(l), r.context === null ? r.context = l : r.pendingContext = l, r = $a(d, h), r.payload = { element: n }, u = u === void 0 ? null : u, u !== null && (r.callback = u), n = Ll(c, r, h), n !== null && (xr(n, c, h, d), Rc(n, c, h)), h;
  }
  function cf(n) {
    if (n = n.current, !n.child)
      return null;
    switch (n.child.tag) {
      case 5:
        return n.child.stateNode;
      default:
        return n.child.stateNode;
    }
  }
  function mm(n, r) {
    if (n = n.memoizedState, n !== null && n.dehydrated !== null) {
      var l = n.retryLane;
      n.retryLane = l !== 0 && l < r ? l : r;
    }
  }
  function rp(n, r) {
    mm(n, r), (n = n.alternate) && mm(n, r);
  }
  function hm() {
    return null;
  }
  var ip = typeof reportError == "function" ? reportError : function(n) {
    console.error(n);
  };
  function ff(n) {
    this._internalRoot = n;
  }
  Xa.prototype.render = ff.prototype.render = function(n) {
    var r = this._internalRoot;
    if (r === null)
      throw Error(b(409));
    js(n, r, null, null);
  }, Xa.prototype.unmount = ff.prototype.unmount = function() {
    var n = this._internalRoot;
    if (n !== null) {
      this._internalRoot = null;
      var r = n.containerInfo;
      Hl(function() {
        js(null, n, null, null);
      }), r[Pa] = null;
    }
  };
  function Xa(n) {
    this._internalRoot = n;
  }
  Xa.prototype.unstable_scheduleHydration = function(n) {
    if (n) {
      var r = eu();
      n = { blockedOn: null, target: n, priority: r };
      for (var l = 0; l < Gt.length && r !== 0 && r < Gt[l].priority; l++)
        ;
      Gt.splice(l, 0, n), l === 0 && lc(n);
    }
  };
  function ap(n) {
    return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11);
  }
  function df(n) {
    return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11 && (n.nodeType !== 8 || n.nodeValue !== " react-mount-point-unstable "));
  }
  function ym() {
  }
  function Ly(n, r, l, u, c) {
    if (c) {
      if (typeof u == "function") {
        var d = u;
        u = function() {
          var H = cf(h);
          d.call(H);
        };
      }
      var h = vm(r, u, n, 0, null, false, false, "", ym);
      return n._reactRootContainer = h, n[Pa] = h.current, cu(n.nodeType === 8 ? n.parentNode : n), Hl(), h;
    }
    for (; c = n.lastChild; )
      n.removeChild(c);
    if (typeof u == "function") {
      var C = u;
      u = function() {
        var H = cf(T);
        C.call(H);
      };
    }
    var T = sf(n, 0, false, null, null, false, false, "", ym);
    return n._reactRootContainer = T, n[Pa] = T.current, cu(n.nodeType === 8 ? n.parentNode : n), Hl(function() {
      js(r, T, l, u);
    }), T;
  }
  function pf(n, r, l, u, c) {
    var d = l._reactRootContainer;
    if (d) {
      var h = d;
      if (typeof c == "function") {
        var C = c;
        c = function() {
          var T = cf(h);
          C.call(T);
        };
      }
      js(r, h, n, c);
    } else
      h = Ly(l, r, n, c, u);
    return cf(h);
  }
  no = function(n) {
    switch (n.tag) {
      case 3:
        var r = n.stateNode;
        if (r.current.memoizedState.isDehydrated) {
          var l = ta(r.pendingLanes);
          l !== 0 && (ha(r, l | 1), Rr(r, vn()), !(_t & 6) && (wu = vn() + 500, ei()));
        }
        break;
      case 13:
        Hl(function() {
          var u = Ia(n, 1);
          if (u !== null) {
            var c = kr();
            xr(u, n, 1, c);
          }
        }), rp(n, 1);
    }
  }, Jo = function(n) {
    if (n.tag === 13) {
      var r = Ia(n, 134217728);
      if (r !== null) {
        var l = kr();
        xr(r, n, 134217728, l);
      }
      rp(n, 134217728);
    }
  }, Mt = function(n) {
    if (n.tag === 13) {
      var r = Un(n), l = Ia(n, r);
      if (l !== null) {
        var u = kr();
        xr(l, n, r, u);
      }
      rp(n, r);
    }
  }, eu = function() {
    return jt;
  }, tu = function(n, r) {
    var l = jt;
    try {
      return jt = n, r();
    } finally {
      jt = l;
    }
  }, wr = function(n, r, l) {
    switch (r) {
      case "input":
        if (Dn(n, l), r = l.name, l.type === "radio" && r != null) {
          for (l = n; l.parentNode; )
            l = l.parentNode;
          for (l = l.querySelectorAll("input[name=" + JSON.stringify("" + r) + '][type="radio"]'), r = 0; r < l.length; r++) {
            var u = l[r];
            if (u !== n && u.form === n.form) {
              var c = $e(u);
              if (!c)
                throw Error(b(90));
              Ir(u), Dn(u, c);
            }
          }
        }
        break;
      case "textarea":
        pi(n, l);
        break;
      case "select":
        r = l.value, r != null && yr(n, !!l.multiple, r, false);
    }
  }, to = Ou, Qo = Hl;
  var My = { usingClientEntryPoint: false, Events: [hs, fu, $e, Ti, ul, Ou] }, Mu = { findFiberByHostInstance: Li, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" }, Ay = { bundleType: Mu.bundleType, version: Mu.version, rendererPackageName: Mu.rendererPackageName, rendererConfig: Mu.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: xe.ReactCurrentDispatcher, findHostInstanceByFiber: function(n) {
    return n = ir(n), n === null ? null : n.stateNode;
  }, findFiberByHostInstance: Mu.findFiberByHostInstance || hm, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
    var vf = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!vf.isDisabled && vf.supportsFiber)
      try {
        dl = vf.inject(Ay), qr = vf;
      } catch {
      }
  }
  return Gi.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = My, Gi.createPortal = function(n, r) {
    var l = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (!ap(r))
      throw Error(b(200));
    return pm(n, r, null, l);
  }, Gi.createRoot = function(n, r) {
    if (!ap(n))
      throw Error(b(299));
    var l = false, u = "", c = ip;
    return r != null && (r.unstable_strictMode === true && (l = true), r.identifierPrefix !== void 0 && (u = r.identifierPrefix), r.onRecoverableError !== void 0 && (c = r.onRecoverableError)), r = sf(n, 1, false, null, null, l, false, u, c), n[Pa] = r.current, cu(n.nodeType === 8 ? n.parentNode : n), new ff(r);
  }, Gi.findDOMNode = function(n) {
    if (n == null)
      return null;
    if (n.nodeType === 1)
      return n;
    var r = n._reactInternals;
    if (r === void 0)
      throw typeof n.render == "function" ? Error(b(188)) : (n = Object.keys(n).join(","), Error(b(268, n)));
    return n = ir(r), n = n === null ? null : n.stateNode, n;
  }, Gi.flushSync = function(n) {
    return Hl(n);
  }, Gi.hydrate = function(n, r, l) {
    if (!df(r))
      throw Error(b(200));
    return pf(null, n, r, true, l);
  }, Gi.hydrateRoot = function(n, r, l) {
    if (!ap(n))
      throw Error(b(405));
    var u = l != null && l.hydratedSources || null, c = false, d = "", h = ip;
    if (l != null && (l.unstable_strictMode === true && (c = true), l.identifierPrefix !== void 0 && (d = l.identifierPrefix), l.onRecoverableError !== void 0 && (h = l.onRecoverableError)), r = vm(r, null, n, 1, l ?? null, c, false, d, h), n[Pa] = r.current, cu(n), u)
      for (n = 0; n < u.length; n++)
        l = u[n], c = l._getVersion, c = c(l._source), r.mutableSourceEagerHydrationData == null ? r.mutableSourceEagerHydrationData = [l, c] : r.mutableSourceEagerHydrationData.push(
          l,
          c
        );
    return new Xa(r);
  }, Gi.render = function(n, r, l) {
    if (!df(r))
      throw Error(b(200));
    return pf(null, n, r, false, l);
  }, Gi.unmountComponentAtNode = function(n) {
    if (!df(n))
      throw Error(b(40));
    return n._reactRootContainer ? (Hl(function() {
      pf(null, null, n, false, function() {
        n._reactRootContainer = null, n[Pa] = null;
      });
    }), true) : false;
  }, Gi.unstable_batchedUpdates = Ou, Gi.unstable_renderSubtreeIntoContainer = function(n, r, l, u) {
    if (!df(l))
      throw Error(b(200));
    if (n == null || n._reactInternals === void 0)
      throw Error(b(38));
    return pf(n, r, l, false, u);
  }, Gi.version = "18.2.0-next-9e3b772b8-20220608", Gi;
}
var qi = {};
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var TE;
function Ww() {
  return TE || (TE = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var E = Zu(), _ = IE(), b = E.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, w = false;
    function X(e) {
      w = e;
    }
    function P(e) {
      if (!w) {
        for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++)
          i[a - 1] = arguments[a];
        ge("warn", e, i);
      }
    }
    function g(e) {
      if (!w) {
        for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++)
          i[a - 1] = arguments[a];
        ge("error", e, i);
      }
    }
    function ge(e, t, i) {
      {
        var a = b.ReactDebugCurrentFrame, o = a.getStackAddendum();
        o !== "" && (t += "%s", i = i.concat([o]));
        var s = i.map(function(f) {
          return String(f);
        });
        s.unshift("Warning: " + t), Function.prototype.apply.call(console[e], console, s);
      }
    }
    var Z = 0, Q = 1, ve = 2, W = 3, J = 4, q = 5, fe = 6, ee = 7, ie = 8, Xe = 9, de = 10, oe = 11, xe = 12, be = 13, we = 14, De = 15, St = 16, Rt = 17, Lt = 18, Ct = 19, en = 21, Be = 22, rt = 23, Ut = 24, ht = 25, Ne = true, ce = false, je = false, R = false, K = false, _e = true, it = false, Ze = false, Tt = true, ct = true, bt = true, ft = /* @__PURE__ */ new Set(), It = {}, Br = {};
    function hr(e, t) {
      Ir(e, t), Ir(e + "Capture", t);
    }
    function Ir(e, t) {
      It[e] && g("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", e), It[e] = t;
      {
        var i = e.toLowerCase();
        Br[i] = e, e === "onDoubleClick" && (Br.ondblclick = e);
      }
      for (var a = 0; a < t.length; a++)
        ft.add(t[a]);
    }
    var yn = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", Qn = Object.prototype.hasOwnProperty;
    function Fn(e) {
      {
        var t = typeof Symbol == "function" && Symbol.toStringTag, i = t && e[Symbol.toStringTag] || e.constructor.name || "Object";
        return i;
      }
    }
    function Hn(e) {
      try {
        return Dn(e), false;
      } catch {
        return true;
      }
    }
    function Dn(e) {
      return "" + e;
    }
    function $r(e, t) {
      if (Hn(e))
        return g("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", t, Fn(e)), Dn(e);
    }
    function Yr(e) {
      if (Hn(e))
        return g("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Fn(e)), Dn(e);
    }
    function Gn(e, t) {
      if (Hn(e))
        return g("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", t, Fn(e)), Dn(e);
    }
    function yr(e, t) {
      if (Hn(e))
        return g("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", t, Fn(e)), Dn(e);
    }
    function Wr(e) {
      if (Hn(e))
        return g("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", Fn(e)), Dn(e);
    }
    function gr(e) {
      if (Hn(e))
        return g("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", Fn(e)), Dn(e);
    }
    var pi = 0, rr = 1, Qr = 2, gn = 3, Tr = 4, da = 5, vi = 6, pe = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", Fe = pe + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", dt = new RegExp("^[" + pe + "][" + Fe + "]*$"), Pt = {}, $t = {};
    function On(e) {
      return Qn.call($t, e) ? true : Qn.call(Pt, e) ? false : dt.test(e) ? ($t[e] = true, true) : (Pt[e] = true, g("Invalid attribute name: `%s`", e), false);
    }
    function Sn(e, t, i) {
      return t !== null ? t.type === pi : i ? false : e.length > 2 && (e[0] === "o" || e[0] === "O") && (e[1] === "n" || e[1] === "N");
    }
    function Sr(e, t, i, a) {
      if (i !== null && i.type === pi)
        return false;
      switch (typeof t) {
        case "function":
        case "symbol":
          return true;
        case "boolean": {
          if (a)
            return false;
          if (i !== null)
            return !i.acceptsBooleans;
          var o = e.toLowerCase().slice(0, 5);
          return o !== "data-" && o !== "aria-";
        }
        default:
          return false;
      }
    }
    function Zt(e, t, i, a) {
      if (t === null || typeof t > "u" || Sr(e, t, i, a))
        return true;
      if (a)
        return false;
      if (i !== null)
        switch (i.type) {
          case gn:
            return !t;
          case Tr:
            return t === false;
          case da:
            return isNaN(t);
          case vi:
            return isNaN(t) || t < 1;
        }
      return false;
    }
    function wr(e) {
      return Wt.hasOwnProperty(e) ? Wt[e] : null;
    }
    function Yt(e, t, i, a, o, s, f) {
      this.acceptsBooleans = t === Qr || t === gn || t === Tr, this.attributeName = a, this.attributeNamespace = o, this.mustUseProperty = i, this.propertyName = e, this.type = t, this.sanitizeURL = s, this.removeEmptyString = f;
    }
    var Wt = {}, Zi = [
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    Zi.forEach(function(e) {
      Wt[e] = new Yt(
        e,
        pi,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(e) {
      var t = e[0], i = e[1];
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        Qr,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        Qr,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        gn,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        gn,
        true,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        Tr,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        vi,
        false,
        // mustUseProperty
        e,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), ["rowSpan", "start"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        da,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var Ti = /[\-\:]([a-z])/g, ul = function(e) {
      return e[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      var t = e.replace(Ti, ul);
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        e,
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    }), [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      var t = e.replace(Ti, ul);
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        e,
        "http://www.w3.org/1999/xlink",
        false,
        // sanitizeURL
        false
      );
    }), [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(e) {
      var t = e.replace(Ti, ul);
      Wt[t] = new Yt(
        t,
        rr,
        false,
        // mustUseProperty
        e,
        "http://www.w3.org/XML/1998/namespace",
        false,
        // sanitizeURL
        false
      );
    }), ["tabIndex", "crossOrigin"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        rr,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var to = "xlinkHref";
    Wt[to] = new Yt(
      "xlinkHref",
      rr,
      false,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      true,
      // sanitizeURL
      false
    ), ["src", "href", "action", "formAction"].forEach(function(e) {
      Wt[e] = new Yt(
        e,
        rr,
        false,
        // mustUseProperty
        e.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        true,
        // sanitizeURL
        true
      );
    });
    var Qo = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, La = false;
    function sl(e) {
      !La && Qo.test(e) && (La = true, g("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(e)));
    }
    function mi(e, t, i, a) {
      if (a.mustUseProperty) {
        var o = a.propertyName;
        return e[o];
      } else {
        $r(i, t), a.sanitizeURL && sl("" + i);
        var s = a.attributeName, f = null;
        if (a.type === Tr) {
          if (e.hasAttribute(s)) {
            var p = e.getAttribute(s);
            return p === "" ? true : Zt(t, i, a, false) ? p : p === "" + i ? i : p;
          }
        } else if (e.hasAttribute(s)) {
          if (Zt(t, i, a, false))
            return e.getAttribute(s);
          if (a.type === gn)
            return i;
          f = e.getAttribute(s);
        }
        return Zt(t, i, a, false) ? f === null ? i : f : f === "" + i ? i : f;
      }
    }
    function pa(e, t, i, a) {
      {
        if (!On(t))
          return;
        if (!e.hasAttribute(t))
          return i === void 0 ? void 0 : null;
        var o = e.getAttribute(t);
        return $r(i, t), o === "" + i ? i : o;
      }
    }
    function wi(e, t, i, a) {
      var o = wr(t);
      if (!Sn(t, o, a)) {
        if (Zt(t, i, o, a) && (i = null), a || o === null) {
          if (On(t)) {
            var s = t;
            i === null ? e.removeAttribute(s) : ($r(i, t), e.setAttribute(s, "" + i));
          }
          return;
        }
        var f = o.mustUseProperty;
        if (f) {
          var p = o.propertyName;
          if (i === null) {
            var v = o.type;
            e[p] = v === gn ? false : "";
          } else
            e[p] = i;
          return;
        }
        var y = o.attributeName, S = o.attributeNamespace;
        if (i === null)
          e.removeAttribute(y);
        else {
          var O = o.type, N;
          O === gn || O === Tr && i === true ? N = "" : ($r(i, y), N = "" + i, o.sanitizeURL && sl(N.toString())), S ? e.setAttributeNS(S, y, N) : e.setAttribute(y, N);
        }
      }
    }
    var va = Symbol.for("react.element"), x = Symbol.for("react.portal"), te = Symbol.for("react.fragment"), me = Symbol.for("react.strict_mode"), Ie = Symbol.for("react.profiler"), yt = Symbol.for("react.provider"), zt = Symbol.for("react.context"), He = Symbol.for("react.forward_ref"), Je = Symbol.for("react.suspense"), bn = Symbol.for("react.suspense_list"), Qt = Symbol.for("react.memo"), gt = Symbol.for("react.lazy"), ir = Symbol.for("react.scope"), Ji = Symbol.for("react.debug_trace_mode"), cl = Symbol.for("react.offscreen"), Gr = Symbol.for("react.legacy_hidden"), Wf = Symbol.for("react.cache"), Qf = Symbol.for("react.tracing_marker"), vn = Symbol.iterator, Gf = "@@iterator";
    function ea(e) {
      if (e === null || typeof e != "object")
        return null;
      var t = vn && e[vn] || e[Gf];
      return typeof t == "function" ? t : null;
    }
    var pt = Object.assign, ma = 0, fl, Go, dl, qr, Ju, Nr, es;
    function ts() {
    }
    ts.__reactDisabledLog = true;
    function ic() {
      {
        if (ma === 0) {
          fl = console.log, Go = console.info, dl = console.warn, qr = console.error, Ju = console.group, Nr = console.groupCollapsed, es = console.groupEnd;
          var e = {
            configurable: true,
            enumerable: true,
            value: ts,
            writable: true
          };
          Object.defineProperties(console, {
            info: e,
            log: e,
            warn: e,
            error: e,
            group: e,
            groupCollapsed: e,
            groupEnd: e
          });
        }
        ma++;
      }
    }
    function qo() {
      {
        if (ma--, ma === 0) {
          var e = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: pt({}, e, {
              value: fl
            }),
            info: pt({}, e, {
              value: Go
            }),
            warn: pt({}, e, {
              value: dl
            }),
            error: pt({}, e, {
              value: qr
            }),
            group: pt({}, e, {
              value: Ju
            }),
            groupCollapsed: pt({}, e, {
              value: Nr
            }),
            groupEnd: pt({}, e, {
              value: es
            })
          });
        }
        ma < 0 && g("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var pl = b.ReactCurrentDispatcher, ta;
    function Dr(e, t, i) {
      {
        if (ta === void 0)
          try {
            throw Error();
          } catch (o) {
            var a = o.stack.trim().match(/\n( *(at )?)/);
            ta = a && a[1] || "";
          }
        return `
` + ta + e;
      }
    }
    var vl = false, ml;
    {
      var hl = typeof WeakMap == "function" ? WeakMap : Map;
      ml = new hl();
    }
    function Xo(e, t) {
      if (!e || vl)
        return "";
      {
        var i = ml.get(e);
        if (i !== void 0)
          return i;
      }
      var a;
      vl = true;
      var o = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var s;
      s = pl.current, pl.current = null, ic();
      try {
        if (t) {
          var f = function() {
            throw Error();
          };
          if (Object.defineProperty(f.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(f, []);
            } catch (F) {
              a = F;
            }
            Reflect.construct(e, [], f);
          } else {
            try {
              f.call();
            } catch (F) {
              a = F;
            }
            e.call(f.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (F) {
            a = F;
          }
          e();
        }
      } catch (F) {
        if (F && a && typeof F.stack == "string") {
          for (var p = F.stack.split(`
`), v = a.stack.split(`
`), y = p.length - 1, S = v.length - 1; y >= 1 && S >= 0 && p[y] !== v[S]; )
            S--;
          for (; y >= 1 && S >= 0; y--, S--)
            if (p[y] !== v[S]) {
              if (y !== 1 || S !== 1)
                do
                  if (y--, S--, S < 0 || p[y] !== v[S]) {
                    var O = `
` + p[y].replace(" at new ", " at ");
                    return e.displayName && O.includes("<anonymous>") && (O = O.replace("<anonymous>", e.displayName)), typeof e == "function" && ml.set(e, O), O;
                  }
                while (y >= 1 && S >= 0);
              break;
            }
        }
      } finally {
        vl = false, pl.current = s, qo(), Error.prepareStackTrace = o;
      }
      var N = e ? e.displayName || e.name : "", U = N ? Dr(N) : "";
      return typeof e == "function" && ml.set(e, U), U;
    }
    function Ko(e, t, i) {
      return Xo(e, true);
    }
    function Ma(e, t, i) {
      return Xo(e, false);
    }
    function qf(e) {
      var t = e.prototype;
      return !!(t && t.isReactComponent);
    }
    function ha(e, t, i) {
      if (e == null)
        return "";
      if (typeof e == "function")
        return Xo(e, qf(e));
      if (typeof e == "string")
        return Dr(e);
      switch (e) {
        case Je:
          return Dr("Suspense");
        case bn:
          return Dr("SuspenseList");
      }
      if (typeof e == "object")
        switch (e.$$typeof) {
          case He:
            return Ma(e.render);
          case Qt:
            return ha(e.type, t, i);
          case gt: {
            var a = e, o = a._payload, s = a._init;
            try {
              return ha(s(o), t, i);
            } catch {
            }
          }
        }
      return "";
    }
    function jt(e) {
      switch (e._debugOwner && e._debugOwner.type, e._debugSource, e.tag) {
        case q:
          return Dr(e.type);
        case St:
          return Dr("Lazy");
        case be:
          return Dr("Suspense");
        case Ct:
          return Dr("SuspenseList");
        case Z:
        case ve:
        case De:
          return Ma(e.type);
        case oe:
          return Ma(e.type.render);
        case Q:
          return Ko(e.type);
        default:
          return "";
      }
    }
    function Zo(e) {
      try {
        var t = "", i = e;
        do
          t += jt(i), i = i.return;
        while (i);
        return t;
      } catch (a) {
        return `
Error generating stack: ` + a.message + `
` + a.stack;
      }
    }
    function no(e, t, i) {
      var a = e.displayName;
      if (a)
        return a;
      var o = t.displayName || t.name || "";
      return o !== "" ? i + "(" + o + ")" : i;
    }
    function Jo(e) {
      return e.displayName || "Context";
    }
    function Mt(e) {
      if (e == null)
        return null;
      if (typeof e.tag == "number" && g("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof e == "function")
        return e.displayName || e.name || null;
      if (typeof e == "string")
        return e;
      switch (e) {
        case te:
          return "Fragment";
        case x:
          return "Portal";
        case Ie:
          return "Profiler";
        case me:
          return "StrictMode";
        case Je:
          return "Suspense";
        case bn:
          return "SuspenseList";
      }
      if (typeof e == "object")
        switch (e.$$typeof) {
          case zt:
            var t = e;
            return Jo(t) + ".Consumer";
          case yt:
            var i = e;
            return Jo(i._context) + ".Provider";
          case He:
            return no(e, e.render, "ForwardRef");
          case Qt:
            var a = e.displayName || null;
            return a !== null ? a : Mt(e.type) || "Memo";
          case gt: {
            var o = e, s = o._payload, f = o._init;
            try {
              return Mt(f(s));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function eu(e, t, i) {
      var a = t.displayName || t.name || "";
      return e.displayName || (a !== "" ? i + "(" + a + ")" : i);
    }
    function tu(e) {
      return e.displayName || "Context";
    }
    function at(e) {
      var t = e.tag, i = e.type;
      switch (t) {
        case Ut:
          return "Cache";
        case Xe:
          var a = i;
          return tu(a) + ".Consumer";
        case de:
          var o = i;
          return tu(o._context) + ".Provider";
        case Lt:
          return "DehydratedFragment";
        case oe:
          return eu(i, i.render, "ForwardRef");
        case ee:
          return "Fragment";
        case q:
          return i;
        case J:
          return "Portal";
        case W:
          return "Root";
        case fe:
          return "Text";
        case St:
          return Mt(i);
        case ie:
          return i === me ? "StrictMode" : "Mode";
        case Be:
          return "Offscreen";
        case xe:
          return "Profiler";
        case en:
          return "Scope";
        case be:
          return "Suspense";
        case Ct:
          return "SuspenseList";
        case ht:
          return "TracingMarker";
        case Q:
        case Z:
        case Rt:
        case ve:
        case we:
        case De:
          if (typeof i == "function")
            return i.displayName || i.name || null;
          if (typeof i == "string")
            return i;
          break;
      }
      return null;
    }
    var ro = b.ReactDebugCurrentFrame, _n = null, Xr = false;
    function Or() {
      {
        if (_n === null)
          return null;
        var e = _n._debugOwner;
        if (e !== null && typeof e < "u")
          return at(e);
      }
      return null;
    }
    function yl() {
      return _n === null ? "" : Zo(_n);
    }
    function Rn() {
      ro.getCurrentStack = null, _n = null, Xr = false;
    }
    function Gt(e) {
      ro.getCurrentStack = e === null ? null : yl, _n = e, Xr = false;
    }
    function ac() {
      return _n;
    }
    function Kr(e) {
      Xr = e;
    }
    function qn(e) {
      return "" + e;
    }
    function ya(e) {
      switch (typeof e) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return e;
        case "object":
          return gr(e), e;
        default:
          return "";
      }
    }
    var lc = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function Aa(e, t) {
      lc[t.type] || t.onChange || t.onInput || t.readOnly || t.disabled || t.value == null || g("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), t.onChange || t.readOnly || t.disabled || t.checked == null || g("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function gl(e) {
      var t = e.type, i = e.nodeName;
      return i && i.toLowerCase() === "input" && (t === "checkbox" || t === "radio");
    }
    function oc(e) {
      return e._valueTracker;
    }
    function Ni(e) {
      e._valueTracker = null;
    }
    function Sl(e) {
      var t = "";
      return e && (gl(e) ? t = e.checked ? "true" : "false" : t = e.value), t;
    }
    function bl(e) {
      var t = gl(e) ? "checked" : "value", i = Object.getOwnPropertyDescriptor(e.constructor.prototype, t);
      gr(e[t]);
      var a = "" + e[t];
      if (!(e.hasOwnProperty(t) || typeof i > "u" || typeof i.get != "function" || typeof i.set != "function")) {
        var o = i.get, s = i.set;
        Object.defineProperty(e, t, {
          configurable: true,
          get: function() {
            return o.call(this);
          },
          set: function(p) {
            gr(p), a = "" + p, s.call(this, p);
          }
        }), Object.defineProperty(e, t, {
          enumerable: i.enumerable
        });
        var f = {
          getValue: function() {
            return a;
          },
          setValue: function(p) {
            gr(p), a = "" + p;
          },
          stopTracking: function() {
            Ni(e), delete e[t];
          }
        };
        return f;
      }
    }
    function Di(e) {
      oc(e) || (e._valueTracker = bl(e));
    }
    function nu(e) {
      if (!e)
        return false;
      var t = oc(e);
      if (!t)
        return true;
      var i = t.getValue(), a = Sl(e);
      return a !== i ? (t.setValue(a), true) : false;
    }
    function _l(e) {
      if (e = e || (typeof document < "u" ? document : void 0), typeof e > "u")
        return null;
      try {
        return e.activeElement || e.body;
      } catch {
        return e.body;
      }
    }
    var El = false, io = false, ru = false, ns = false;
    function na(e) {
      var t = e.type === "checkbox" || e.type === "radio";
      return t ? e.checked != null : e.value != null;
    }
    function m(e, t) {
      var i = e, a = t.checked, o = pt({}, t, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: a ?? i._wrapperState.initialChecked
      });
      return o;
    }
    function k(e, t) {
      Aa("input", t), t.checked !== void 0 && t.defaultChecked !== void 0 && !io && (g("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", Or() || "A component", t.type), io = true), t.value !== void 0 && t.defaultValue !== void 0 && !El && (g("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", Or() || "A component", t.type), El = true);
      var i = e, a = t.defaultValue == null ? "" : t.defaultValue;
      i._wrapperState = {
        initialChecked: t.checked != null ? t.checked : t.defaultChecked,
        initialValue: ya(t.value != null ? t.value : a),
        controlled: na(t)
      };
    }
    function j(e, t) {
      var i = e, a = t.checked;
      a != null && wi(i, "checked", a, false);
    }
    function B(e, t) {
      var i = e;
      {
        var a = na(t);
        !i._wrapperState.controlled && a && !ns && (g("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), ns = true), i._wrapperState.controlled && !a && !ru && (g("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), ru = true);
      }
      j(e, t);
      var o = ya(t.value), s = t.type;
      if (o != null)
        s === "number" ? (o === 0 && i.value === "" || // We explicitly want to coerce to number here if possible.
        // eslint-disable-next-line
        i.value != o) && (i.value = qn(o)) : i.value !== qn(o) && (i.value = qn(o));
      else if (s === "submit" || s === "reset") {
        i.removeAttribute("value");
        return;
      }
      t.hasOwnProperty("value") ? We(i, t.type, o) : t.hasOwnProperty("defaultValue") && We(i, t.type, ya(t.defaultValue)), t.checked == null && t.defaultChecked != null && (i.defaultChecked = !!t.defaultChecked);
    }
    function ue(e, t, i) {
      var a = e;
      if (t.hasOwnProperty("value") || t.hasOwnProperty("defaultValue")) {
        var o = t.type, s = o === "submit" || o === "reset";
        if (s && (t.value === void 0 || t.value === null))
          return;
        var f = qn(a._wrapperState.initialValue);
        i || f !== a.value && (a.value = f), a.defaultValue = f;
      }
      var p = a.name;
      p !== "" && (a.name = ""), a.defaultChecked = !a.defaultChecked, a.defaultChecked = !!a._wrapperState.initialChecked, p !== "" && (a.name = p);
    }
    function Ge(e, t) {
      var i = e;
      B(i, t), Se(i, t);
    }
    function Se(e, t) {
      var i = t.name;
      if (t.type === "radio" && i != null) {
        for (var a = e; a.parentNode; )
          a = a.parentNode;
        $r(i, "name");
        for (var o = a.querySelectorAll("input[name=" + JSON.stringify("" + i) + '][type="radio"]'), s = 0; s < o.length; s++) {
          var f = o[s];
          if (!(f === e || f.form !== e.form)) {
            var p = Am(f);
            if (!p)
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            nu(f), B(f, p);
          }
        }
      }
    }
    function We(e, t, i) {
      (t !== "number" || _l(e.ownerDocument) !== e) && (i == null ? e.defaultValue = qn(e._wrapperState.initialValue) : e.defaultValue !== qn(i) && (e.defaultValue = qn(i)));
    }
    var vt = false, At = false, rn = false;
    function Jt(e, t) {
      t.value == null && (typeof t.children == "object" && t.children !== null ? E.Children.forEach(t.children, function(i) {
        i != null && (typeof i == "string" || typeof i == "number" || At || (At = true, g("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
      }) : t.dangerouslySetInnerHTML != null && (rn || (rn = true, g("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), t.selected != null && !vt && (g("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), vt = true);
    }
    function an(e, t) {
      t.value != null && e.setAttribute("value", qn(ya(t.value)));
    }
    var un = Array.isArray;
    function kt(e) {
      return un(e);
    }
    var za;
    za = false;
    function iu() {
      var e = Or();
      return e ? `

Check the render method of \`` + e + "`." : "";
    }
    var rs = ["value", "defaultValue"];
    function Xf(e) {
      {
        Aa("select", e);
        for (var t = 0; t < rs.length; t++) {
          var i = rs[t];
          if (e[i] != null) {
            var a = kt(e[i]);
            e.multiple && !a ? g("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", i, iu()) : !e.multiple && a && g("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", i, iu());
          }
        }
      }
    }
    function ra(e, t, i, a) {
      var o = e.options;
      if (t) {
        for (var s = i, f = {}, p = 0; p < s.length; p++)
          f["$" + s[p]] = true;
        for (var v = 0; v < o.length; v++) {
          var y = f.hasOwnProperty("$" + o[v].value);
          o[v].selected !== y && (o[v].selected = y), y && a && (o[v].defaultSelected = true);
        }
      } else {
        for (var S = qn(ya(i)), O = null, N = 0; N < o.length; N++) {
          if (o[N].value === S) {
            o[N].selected = true, a && (o[N].defaultSelected = true);
            return;
          }
          O === null && !o[N].disabled && (O = o[N]);
        }
        O !== null && (O.selected = true);
      }
    }
    function is(e, t) {
      return pt({}, t, {
        value: void 0
      });
    }
    function as(e, t) {
      var i = e;
      Xf(t), i._wrapperState = {
        wasMultiple: !!t.multiple
      }, t.value !== void 0 && t.defaultValue !== void 0 && !za && (g("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), za = true);
    }
    function Kf(e, t) {
      var i = e;
      i.multiple = !!t.multiple;
      var a = t.value;
      a != null ? ra(i, !!t.multiple, a, false) : t.defaultValue != null && ra(i, !!t.multiple, t.defaultValue, true);
    }
    function ty(e, t) {
      var i = e, a = i._wrapperState.wasMultiple;
      i._wrapperState.wasMultiple = !!t.multiple;
      var o = t.value;
      o != null ? ra(i, !!t.multiple, o, false) : a !== !!t.multiple && (t.defaultValue != null ? ra(i, !!t.multiple, t.defaultValue, true) : ra(i, !!t.multiple, t.multiple ? [] : "", false));
    }
    function ny(e, t) {
      var i = e, a = t.value;
      a != null && ra(i, !!t.multiple, a, false);
    }
    var Zf = false;
    function Jf(e, t) {
      var i = e;
      if (t.dangerouslySetInnerHTML != null)
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      var a = pt({}, t, {
        value: void 0,
        defaultValue: void 0,
        children: qn(i._wrapperState.initialValue)
      });
      return a;
    }
    function sv(e, t) {
      var i = e;
      Aa("textarea", t), t.value !== void 0 && t.defaultValue !== void 0 && !Zf && (g("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", Or() || "A component"), Zf = true);
      var a = t.value;
      if (a == null) {
        var o = t.children, s = t.defaultValue;
        if (o != null) {
          g("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          {
            if (s != null)
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (kt(o)) {
              if (o.length > 1)
                throw new Error("<textarea> can only have at most one child.");
              o = o[0];
            }
            s = o;
          }
        }
        s == null && (s = ""), a = s;
      }
      i._wrapperState = {
        initialValue: ya(a)
      };
    }
    function cv(e, t) {
      var i = e, a = ya(t.value), o = ya(t.defaultValue);
      if (a != null) {
        var s = qn(a);
        s !== i.value && (i.value = s), t.defaultValue == null && i.defaultValue !== s && (i.defaultValue = s);
      }
      o != null && (i.defaultValue = qn(o));
    }
    function fv(e, t) {
      var i = e, a = i.textContent;
      a === i._wrapperState.initialValue && a !== "" && a !== null && (i.value = a);
    }
    function ed(e, t) {
      cv(e, t);
    }
    var Va = "http://www.w3.org/1999/xhtml", ry = "http://www.w3.org/1998/Math/MathML", td = "http://www.w3.org/2000/svg";
    function uc(e) {
      switch (e) {
        case "svg":
          return td;
        case "math":
          return ry;
        default:
          return Va;
      }
    }
    function nd(e, t) {
      return e == null || e === Va ? uc(t) : e === td && t === "foreignObject" ? Va : e;
    }
    var iy = function(e) {
      return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(t, i, a, o) {
        MSApp.execUnsafeLocalFunction(function() {
          return e(t, i, a, o);
        });
      } : e;
    }, sc, dv = iy(function(e, t) {
      if (e.namespaceURI === td && !("innerHTML" in e)) {
        sc = sc || document.createElement("div"), sc.innerHTML = "<svg>" + t.valueOf().toString() + "</svg>";
        for (var i = sc.firstChild; e.firstChild; )
          e.removeChild(e.firstChild);
        for (; i.firstChild; )
          e.appendChild(i.firstChild);
        return;
      }
      e.innerHTML = t;
    }), Zr = 1, Ua = 3, zn = 8, ia = 9, ao = 11, cc = function(e, t) {
      if (t) {
        var i = e.firstChild;
        if (i && i === e.lastChild && i.nodeType === Ua) {
          i.nodeValue = t;
          return;
        }
      }
      e.textContent = t;
    }, pv = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    }, au = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function vv(e, t) {
      return e + t.charAt(0).toUpperCase() + t.substring(1);
    }
    var mv = ["Webkit", "ms", "Moz", "O"];
    Object.keys(au).forEach(function(e) {
      mv.forEach(function(t) {
        au[vv(t, e)] = au[e];
      });
    });
    function fc(e, t, i) {
      var a = t == null || typeof t == "boolean" || t === "";
      return a ? "" : !i && typeof t == "number" && t !== 0 && !(au.hasOwnProperty(e) && au[e]) ? t + "px" : (yr(t, e), ("" + t).trim());
    }
    var lu = /([A-Z])/g, ay = /^ms-/;
    function ly(e) {
      return e.replace(lu, "-$1").toLowerCase().replace(ay, "-ms-");
    }
    var hv = function() {
    };
    {
      var yv = /^(?:webkit|moz|o)[A-Z]/, gv = /^-ms-/, ls = /-(.)/g, ou = /;\s*$/, uu = {}, su = {}, Sv = false, rd = false, id = function(e) {
        return e.replace(ls, function(t, i) {
          return i.toUpperCase();
        });
      }, ad = function(e) {
        uu.hasOwnProperty(e) && uu[e] || (uu[e] = true, g(
          "Unsupported style property %s. Did you mean %s?",
          e,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
          id(e.replace(gv, "ms-"))
        ));
      }, bv = function(e) {
        uu.hasOwnProperty(e) && uu[e] || (uu[e] = true, g("Unsupported vendor-prefixed style property %s. Did you mean %s?", e, e.charAt(0).toUpperCase() + e.slice(1)));
      }, _v = function(e, t) {
        su.hasOwnProperty(t) && su[t] || (su[t] = true, g(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, e, t.replace(ou, "")));
      }, Ev = function(e, t) {
        Sv || (Sv = true, g("`NaN` is an invalid value for the `%s` css style property.", e));
      }, oy = function(e, t) {
        rd || (rd = true, g("`Infinity` is an invalid value for the `%s` css style property.", e));
      };
      hv = function(e, t) {
        e.indexOf("-") > -1 ? ad(e) : yv.test(e) ? bv(e) : ou.test(t) && _v(e, t), typeof t == "number" && (isNaN(t) ? Ev(e, t) : isFinite(t) || oy(e, t));
      };
    }
    var uy = hv;
    function sy(e) {
      {
        var t = "", i = "";
        for (var a in e)
          if (e.hasOwnProperty(a)) {
            var o = e[a];
            if (o != null) {
              var s = a.indexOf("--") === 0;
              t += i + (s ? a : ly(a)) + ":", t += fc(a, o, s), i = ";";
            }
          }
        return t || null;
      }
    }
    function Cv(e, t) {
      var i = e.style;
      for (var a in t)
        if (t.hasOwnProperty(a)) {
          var o = a.indexOf("--") === 0;
          o || uy(a, t[a]);
          var s = fc(a, t[a], o);
          a === "float" && (a = "cssFloat"), o ? i.setProperty(a, s) : i[a] = s;
        }
    }
    function cy(e) {
      return e == null || typeof e == "boolean" || e === "";
    }
    function Oi(e) {
      var t = {};
      for (var i in e)
        for (var a = pv[i] || [i], o = 0; o < a.length; o++)
          t[a[o]] = i;
      return t;
    }
    function os(e, t) {
      {
        if (!t)
          return;
        var i = Oi(e), a = Oi(t), o = {};
        for (var s in i) {
          var f = i[s], p = a[s];
          if (p && f !== p) {
            var v = f + "," + p;
            if (o[v])
              continue;
            o[v] = true, g("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", cy(e[f]) ? "Removing" : "Updating", f, p);
          }
        }
      }
    }
    var kv = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    }, xv = pt({
      menuitem: true
    }, kv), Rv = "__html";
    function dc(e, t) {
      if (t) {
        if (xv[e] && (t.children != null || t.dangerouslySetInnerHTML != null))
          throw new Error(e + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        if (t.dangerouslySetInnerHTML != null) {
          if (t.children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof t.dangerouslySetInnerHTML != "object" || !(Rv in t.dangerouslySetInnerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!t.suppressContentEditableWarning && t.contentEditable && t.children != null && g("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), t.style != null && typeof t.style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function ja(e, t) {
      if (e.indexOf("-") === -1)
        return typeof t.is == "string";
      switch (e) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var pc = {
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    }, Tv = {
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    }, aa = {}, ld = new RegExp("^(aria)-[" + Fe + "]*$"), us = new RegExp("^(aria)[A-Z][" + Fe + "]*$");
    function od(e, t) {
      {
        if (Qn.call(aa, t) && aa[t])
          return true;
        if (us.test(t)) {
          var i = "aria-" + t.slice(4).toLowerCase(), a = Tv.hasOwnProperty(i) ? i : null;
          if (a == null)
            return g("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", t), aa[t] = true, true;
          if (t !== a)
            return g("Invalid ARIA attribute `%s`. Did you mean `%s`?", t, a), aa[t] = true, true;
        }
        if (ld.test(t)) {
          var o = t.toLowerCase(), s = Tv.hasOwnProperty(o) ? o : null;
          if (s == null)
            return aa[t] = true, false;
          if (t !== s)
            return g("Unknown ARIA attribute `%s`. Did you mean `%s`?", t, s), aa[t] = true, true;
        }
      }
      return true;
    }
    function wv(e, t) {
      {
        var i = [];
        for (var a in t) {
          var o = od(e, a);
          o || i.push(a);
        }
        var s = i.map(function(f) {
          return "`" + f + "`";
        }).join(", ");
        i.length === 1 ? g("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", s, e) : i.length > 1 && g("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", s, e);
      }
    }
    function vc(e, t) {
      ja(e, t) || wv(e, t);
    }
    var lo = false;
    function ud(e, t) {
      {
        if (e !== "input" && e !== "textarea" && e !== "select")
          return;
        t != null && t.value === null && !lo && (lo = true, e === "select" && t.multiple ? g("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", e) : g("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", e));
      }
    }
    var sd = function() {
    };
    {
      var Xn = {}, cd = /^on./, Nv = /^on[^A-Z]/, Dv = new RegExp("^(aria)-[" + Fe + "]*$"), Ov = new RegExp("^(aria)[A-Z][" + Fe + "]*$");
      sd = function(e, t, i, a) {
        if (Qn.call(Xn, t) && Xn[t])
          return true;
        var o = t.toLowerCase();
        if (o === "onfocusin" || o === "onfocusout")
          return g("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), Xn[t] = true, true;
        if (a != null) {
          var s = a.registrationNameDependencies, f = a.possibleRegistrationNames;
          if (s.hasOwnProperty(t))
            return true;
          var p = f.hasOwnProperty(o) ? f[o] : null;
          if (p != null)
            return g("Invalid event handler property `%s`. Did you mean `%s`?", t, p), Xn[t] = true, true;
          if (cd.test(t))
            return g("Unknown event handler property `%s`. It will be ignored.", t), Xn[t] = true, true;
        } else if (cd.test(t))
          return Nv.test(t) && g("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", t), Xn[t] = true, true;
        if (Dv.test(t) || Ov.test(t))
          return true;
        if (o === "innerhtml")
          return g("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), Xn[t] = true, true;
        if (o === "aria")
          return g("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), Xn[t] = true, true;
        if (o === "is" && i !== null && i !== void 0 && typeof i != "string")
          return g("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof i), Xn[t] = true, true;
        if (typeof i == "number" && isNaN(i))
          return g("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", t), Xn[t] = true, true;
        var v = wr(t), y = v !== null && v.type === pi;
        if (pc.hasOwnProperty(o)) {
          var S = pc[o];
          if (S !== t)
            return g("Invalid DOM property `%s`. Did you mean `%s`?", t, S), Xn[t] = true, true;
        } else if (!y && t !== o)
          return g("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", t, o), Xn[t] = true, true;
        return typeof i == "boolean" && Sr(t, i, v, false) ? (i ? g('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', i, t, t, i, t) : g('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', i, t, t, i, t, t, t), Xn[t] = true, true) : y ? true : Sr(t, i, v, false) ? (Xn[t] = true, false) : ((i === "false" || i === "true") && v !== null && v.type === gn && (g("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", i, t, i === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', t, i), Xn[t] = true), true);
      };
    }
    var Lv = function(e, t, i) {
      {
        var a = [];
        for (var o in t) {
          var s = sd(e, o, t[o], i);
          s || a.push(o);
        }
        var f = a.map(function(p) {
          return "`" + p + "`";
        }).join(", ");
        a.length === 1 ? g("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", f, e) : a.length > 1 && g("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", f, e);
      }
    };
    function Mv(e, t, i) {
      ja(e, t) || Lv(e, t, i);
    }
    var Fa = 1, ss = 2, oo = 4, fy = Fa | ss | oo, cs = null;
    function fs(e) {
      cs !== null && g("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), cs = e;
    }
    function dy() {
      cs === null && g("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), cs = null;
    }
    function Av(e) {
      return e === cs;
    }
    function mc(e) {
      var t = e.target || e.srcElement || window;
      return t.correspondingUseElement && (t = t.correspondingUseElement), t.nodeType === Ua ? t.parentNode : t;
    }
    var ln = null, Cl = null, Ha = null;
    function cu(e) {
      var t = Vu(e);
      if (t) {
        if (typeof ln != "function")
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var i = t.stateNode;
        if (i) {
          var a = Am(i);
          ln(t.stateNode, t.type, a);
        }
      }
    }
    function zv(e) {
      ln = e;
    }
    function hc(e) {
      Cl ? Ha ? Ha.push(e) : Ha = [e] : Cl = e;
    }
    function ds() {
      return Cl !== null || Ha !== null;
    }
    function ps() {
      if (Cl) {
        var e = Cl, t = Ha;
        if (Cl = null, Ha = null, cu(e), t)
          for (var i = 0; i < t.length; i++)
            cu(t[i]);
      }
    }
    var uo = function(e, t) {
      return e(t);
    }, fd = function() {
    }, dd = false;
    function py() {
      var e = ds();
      e && (fd(), ps());
    }
    function pd(e, t, i) {
      if (dd)
        return e(t, i);
      dd = true;
      try {
        return uo(e, t, i);
      } finally {
        dd = false, py();
      }
    }
    function yc(e, t, i) {
      uo = e, fd = i;
    }
    function gc(e) {
      return e === "button" || e === "input" || e === "select" || e === "textarea";
    }
    function vd(e, t, i) {
      switch (e) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(i.disabled && gc(t));
        default:
          return false;
      }
    }
    function so(e, t) {
      var i = e.stateNode;
      if (i === null)
        return null;
      var a = Am(i);
      if (a === null)
        return null;
      var o = a[t];
      if (vd(t, e.type, a))
        return null;
      if (o && typeof o != "function")
        throw new Error("Expected `" + t + "` listener to be a function, instead got a value of `" + typeof o + "` type.");
      return o;
    }
    var vs = false;
    if (yn)
      try {
        var co = {};
        Object.defineProperty(co, "passive", {
          get: function() {
            vs = true;
          }
        }), window.addEventListener("test", co, co), window.removeEventListener("test", co, co);
      } catch {
        vs = false;
      }
    function Vv(e, t, i, a, o, s, f, p, v) {
      var y = Array.prototype.slice.call(arguments, 3);
      try {
        t.apply(i, y);
      } catch (S) {
        this.onError(S);
      }
    }
    var md = Vv;
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
      var hd = document.createElement("react");
      md = function(t, i, a, o, s, f, p, v, y) {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var S = document.createEvent("Event"), O = false, N = true, U = window.event, F = Object.getOwnPropertyDescriptor(window, "event");
        function I() {
          hd.removeEventListener($, Ye, false), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = U);
        }
        var Re = Array.prototype.slice.call(arguments, 3);
        function Ye() {
          O = true, I(), i.apply(a, Re), N = false;
        }
        var Ue, Dt = false, Et = false;
        function A(z) {
          if (Ue = z.error, Dt = true, Ue === null && z.colno === 0 && z.lineno === 0 && (Et = true), z.defaultPrevented && Ue != null && typeof Ue == "object")
            try {
              Ue._suppressLogging = true;
            } catch {
            }
        }
        var $ = "react-" + (t || "invokeguardedcallback");
        if (window.addEventListener("error", A), hd.addEventListener($, Ye, false), S.initEvent($, false, false), hd.dispatchEvent(S), F && Object.defineProperty(window, "event", F), O && N && (Dt ? Et && (Ue = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : Ue = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(Ue)), window.removeEventListener("error", A), !O)
          return I(), Vv.apply(this, arguments);
      };
    }
    var vy = md, kl = false, la = null, ms = false, xl = null, ga = {
      onError: function(e) {
        kl = true, la = e;
      }
    };
    function fo(e, t, i, a, o, s, f, p, v) {
      kl = false, la = null, vy.apply(ga, arguments);
    }
    function Pa(e, t, i, a, o, s, f, p, v) {
      if (fo.apply(this, arguments), kl) {
        var y = gd();
        ms || (ms = true, xl = y);
      }
    }
    function yd() {
      if (ms) {
        var e = xl;
        throw ms = false, xl = null, e;
      }
    }
    function my() {
      return kl;
    }
    function gd() {
      if (kl) {
        var e = la;
        return kl = false, la = null, e;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    function Li(e) {
      return e._reactInternals;
    }
    function hs(e) {
      return e._reactInternals !== void 0;
    }
    function fu(e, t) {
      e._reactInternals = t;
    }
    var $e = (
      /*                      */
      0
    ), Rl = (
      /*                */
      1
    ), sn = (
      /*                    */
      2
    ), ut = (
      /*                       */
      4
    ), Bt = (
      /*                */
      16
    ), qt = (
      /*                 */
      32
    ), Sa = (
      /*                     */
      64
    ), tt = (
      /*                   */
      128
    ), Tn = (
      /*            */
      256
    ), Jr = (
      /*                          */
      512
    ), Mi = (
      /*                     */
      1024
    ), mn = (
      /*                      */
      2048
    ), Ai = (
      /*                    */
      4096
    ), Tl = (
      /*                   */
      8192
    ), ys = (
      /*             */
      16384
    ), Sc = mn | ut | Sa | Jr | Mi | ys, Uv = (
      /*               */
      32767
    ), hi = (
      /*                   */
      32768
    ), Kn = (
      /*                */
      65536
    ), gs = (
      /* */
      131072
    ), Sd = (
      /*                       */
      1048576
    ), bd = (
      /*                    */
      2097152
    ), ei = (
      /*                 */
      4194304
    ), wl = (
      /*                */
      8388608
    ), ti = (
      /*               */
      16777216
    ), po = (
      /*              */
      33554432
    ), du = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      ut | Mi | 0
    ), ni = sn | ut | Bt | qt | Jr | Ai | Tl, br = ut | Sa | Jr | Tl, zi = mn | Bt, ar = ei | wl | bd, Ba = b.ReactCurrentOwner;
    function yi(e) {
      var t = e, i = e;
      if (e.alternate)
        for (; t.return; )
          t = t.return;
      else {
        var a = t;
        do
          t = a, (t.flags & (sn | Ai)) !== $e && (i = t.return), a = t.return;
        while (a);
      }
      return t.tag === W ? i : null;
    }
    function _d(e) {
      if (e.tag === be) {
        var t = e.memoizedState;
        if (t === null) {
          var i = e.alternate;
          i !== null && (t = i.memoizedState);
        }
        if (t !== null)
          return t.dehydrated;
      }
      return null;
    }
    function bc(e) {
      return e.tag === W ? e.stateNode.containerInfo : null;
    }
    function Ed(e) {
      return yi(e) === e;
    }
    function gi(e) {
      {
        var t = Ba.current;
        if (t !== null && t.tag === Q) {
          var i = t, a = i.stateNode;
          a._warnedAboutRefsInRender || g("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", at(i) || "A component"), a._warnedAboutRefsInRender = true;
        }
      }
      var o = Li(e);
      return o ? yi(o) === o : false;
    }
    function ri(e) {
      if (yi(e) !== e)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function cn(e) {
      var t = e.alternate;
      if (!t) {
        var i = yi(e);
        if (i === null)
          throw new Error("Unable to find node on an unmounted component.");
        return i !== e ? null : e;
      }
      for (var a = e, o = t; ; ) {
        var s = a.return;
        if (s === null)
          break;
        var f = s.alternate;
        if (f === null) {
          var p = s.return;
          if (p !== null) {
            a = o = p;
            continue;
          }
          break;
        }
        if (s.child === f.child) {
          for (var v = s.child; v; ) {
            if (v === a)
              return ri(s), e;
            if (v === o)
              return ri(s), t;
            v = v.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== o.return)
          a = s, o = f;
        else {
          for (var y = false, S = s.child; S; ) {
            if (S === a) {
              y = true, a = s, o = f;
              break;
            }
            if (S === o) {
              y = true, o = s, a = f;
              break;
            }
            S = S.sibling;
          }
          if (!y) {
            for (S = f.child; S; ) {
              if (S === a) {
                y = true, a = f, o = s;
                break;
              }
              if (S === o) {
                y = true, o = f, a = s;
                break;
              }
              S = S.sibling;
            }
            if (!y)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (a.alternate !== o)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (a.tag !== W)
        throw new Error("Unable to find node on an unmounted component.");
      return a.stateNode.current === a ? e : t;
    }
    function Vi(e) {
      var t = cn(e);
      return t !== null ? Cd(t) : null;
    }
    function Cd(e) {
      if (e.tag === q || e.tag === fe)
        return e;
      for (var t = e.child; t !== null; ) {
        var i = Cd(t);
        if (i !== null)
          return i;
        t = t.sibling;
      }
      return null;
    }
    function jv(e) {
      var t = cn(e);
      return t !== null ? _c(t) : null;
    }
    function _c(e) {
      if (e.tag === q || e.tag === fe)
        return e;
      for (var t = e.child; t !== null; ) {
        if (t.tag !== J) {
          var i = _c(t);
          if (i !== null)
            return i;
        }
        t = t.sibling;
      }
      return null;
    }
    var Ec = _.unstable_scheduleCallback, Fv = _.unstable_cancelCallback, Cc = _.unstable_shouldYield, Hv = _.unstable_requestPaint, En = _.unstable_now, kd = _.unstable_getCurrentPriorityLevel, kc = _.unstable_ImmediatePriority, Si = _.unstable_UserBlockingPriority, ba = _.unstable_NormalPriority, xc = _.unstable_LowPriority, Nl = _.unstable_IdlePriority, xd = _.unstable_yieldValue, Rd = _.unstable_setDisableYieldValue, Dl = null, Zn = null, he = null, Ln = false, lr = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
    function Td(e) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return false;
      var t = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (t.isDisabled)
        return true;
      if (!t.supportsFiber)
        return g("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), true;
      try {
        Tt && (e = pt({}, e, {
          getLaneLabelMap: Ll,
          injectProfilingHooks: $a
        })), Dl = t.inject(e), Zn = t;
      } catch (i) {
        g("React instrumentation encountered an error: %s.", i);
      }
      return !!t.checkDCE;
    }
    function Pv(e, t) {
      if (Zn && typeof Zn.onScheduleFiberRoot == "function")
        try {
          Zn.onScheduleFiberRoot(Dl, e, t);
        } catch (i) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", i));
        }
    }
    function Ia(e, t) {
      if (Zn && typeof Zn.onCommitFiberRoot == "function")
        try {
          var i = (e.current.flags & tt) === tt;
          if (ct) {
            var a;
            switch (t) {
              case _r:
                a = kc;
                break;
              case or:
                a = Si;
                break;
              case Wa:
                a = ba;
                break;
              case Ts:
                a = Nl;
                break;
              default:
                a = ba;
                break;
            }
            Zn.onCommitFiberRoot(Dl, e, a, i);
          }
        } catch (o) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", o));
        }
    }
    function Ol(e) {
      if (Zn && typeof Zn.onPostCommitFiberRoot == "function")
        try {
          Zn.onPostCommitFiberRoot(Dl, e);
        } catch (t) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", t));
        }
    }
    function wd(e) {
      if (Zn && typeof Zn.onCommitFiberUnmount == "function")
        try {
          Zn.onCommitFiberUnmount(Dl, e);
        } catch (t) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", t));
        }
    }
    function Pn(e) {
      if (typeof xd == "function" && (Rd(e), X(e)), Zn && typeof Zn.setStrictMode == "function")
        try {
          Zn.setStrictMode(Dl, e);
        } catch (t) {
          Ln || (Ln = true, g("React instrumentation encountered an error: %s", t));
        }
    }
    function $a(e) {
      he = e;
    }
    function Ll() {
      {
        for (var e = /* @__PURE__ */ new Map(), t = 1, i = 0; i < fn; i++) {
          var a = hy(t);
          e.set(t, a), t *= 2;
        }
        return e;
      }
    }
    function Rc(e) {
      he !== null && typeof he.markCommitStarted == "function" && he.markCommitStarted(e);
    }
    function Nd() {
      he !== null && typeof he.markCommitStopped == "function" && he.markCommitStopped();
    }
    function Ml(e) {
      he !== null && typeof he.markComponentRenderStarted == "function" && he.markComponentRenderStarted(e);
    }
    function vo() {
      he !== null && typeof he.markComponentRenderStopped == "function" && he.markComponentRenderStopped();
    }
    function Bv(e) {
      he !== null && typeof he.markComponentPassiveEffectMountStarted == "function" && he.markComponentPassiveEffectMountStarted(e);
    }
    function Dd() {
      he !== null && typeof he.markComponentPassiveEffectMountStopped == "function" && he.markComponentPassiveEffectMountStopped();
    }
    function Tc(e) {
      he !== null && typeof he.markComponentPassiveEffectUnmountStarted == "function" && he.markComponentPassiveEffectUnmountStarted(e);
    }
    function Iv() {
      he !== null && typeof he.markComponentPassiveEffectUnmountStopped == "function" && he.markComponentPassiveEffectUnmountStopped();
    }
    function $v(e) {
      he !== null && typeof he.markComponentLayoutEffectMountStarted == "function" && he.markComponentLayoutEffectMountStarted(e);
    }
    function Yv() {
      he !== null && typeof he.markComponentLayoutEffectMountStopped == "function" && he.markComponentLayoutEffectMountStopped();
    }
    function wc(e) {
      he !== null && typeof he.markComponentLayoutEffectUnmountStarted == "function" && he.markComponentLayoutEffectUnmountStarted(e);
    }
    function pu() {
      he !== null && typeof he.markComponentLayoutEffectUnmountStopped == "function" && he.markComponentLayoutEffectUnmountStopped();
    }
    function Nc(e, t, i) {
      he !== null && typeof he.markComponentErrored == "function" && he.markComponentErrored(e, t, i);
    }
    function Wv(e, t, i) {
      he !== null && typeof he.markComponentSuspended == "function" && he.markComponentSuspended(e, t, i);
    }
    function Qv(e) {
      he !== null && typeof he.markLayoutEffectsStarted == "function" && he.markLayoutEffectsStarted(e);
    }
    function vu() {
      he !== null && typeof he.markLayoutEffectsStopped == "function" && he.markLayoutEffectsStopped();
    }
    function Gv(e) {
      he !== null && typeof he.markPassiveEffectsStarted == "function" && he.markPassiveEffectsStarted(e);
    }
    function Ss() {
      he !== null && typeof he.markPassiveEffectsStopped == "function" && he.markPassiveEffectsStopped();
    }
    function oa(e) {
      he !== null && typeof he.markRenderStarted == "function" && he.markRenderStarted(e);
    }
    function bs() {
      he !== null && typeof he.markRenderYielded == "function" && he.markRenderYielded();
    }
    function mu() {
      he !== null && typeof he.markRenderStopped == "function" && he.markRenderStopped();
    }
    function mo(e) {
      he !== null && typeof he.markRenderScheduled == "function" && he.markRenderScheduled(e);
    }
    function Od(e, t) {
      he !== null && typeof he.markForceUpdateScheduled == "function" && he.markForceUpdateScheduled(e, t);
    }
    function Al(e, t) {
      he !== null && typeof he.markStateUpdateScheduled == "function" && he.markStateUpdateScheduled(e, t);
    }
    var Qe = (
      /*                         */
      0
    ), mt = (
      /*                 */
      1
    ), qe = (
      /*                    */
      2
    ), Cn = (
      /*               */
      8
    ), Ui = (
      /*              */
      16
    ), Dc = Math.clz32 ? Math.clz32 : ho, Oc = Math.log, Ld = Math.LN2;
    function ho(e) {
      var t = e >>> 0;
      return t === 0 ? 32 : 31 - (Oc(t) / Ld | 0) | 0;
    }
    var fn = 31, Y = (
      /*                        */
      0
    ), wt = (
      /*                          */
      0
    ), Ke = (
      /*                        */
      1
    ), _a = (
      /*    */
      2
    ), bi = (
      /*             */
      4
    ), yo = (
      /*            */
      8
    ), dn = (
      /*                     */
      16
    ), go = (
      /*                */
      32
    ), zl = (
      /*                       */
      4194240
    ), So = (
      /*                        */
      64
    ), ji = (
      /*                        */
      128
    ), ii = (
      /*                        */
      256
    ), bo = (
      /*                        */
      512
    ), _s = (
      /*                        */
      1024
    ), Es = (
      /*                        */
      2048
    ), Lc = (
      /*                        */
      4096
    ), Mc = (
      /*                        */
      8192
    ), Ac = (
      /*                        */
      16384
    ), zc = (
      /*                       */
      32768
    ), Vc = (
      /*                       */
      65536
    ), Uc = (
      /*                       */
      131072
    ), jc = (
      /*                       */
      262144
    ), Fc = (
      /*                       */
      524288
    ), _o = (
      /*                       */
      1048576
    ), Hc = (
      /*                       */
      2097152
    ), Eo = (
      /*                            */
      130023424
    ), Ya = (
      /*                             */
      4194304
    ), Pc = (
      /*                             */
      8388608
    ), Cs = (
      /*                             */
      16777216
    ), Bc = (
      /*                             */
      33554432
    ), Ic = (
      /*                             */
      67108864
    ), Md = Ya, hu = (
      /*          */
      134217728
    ), $c = (
      /*                          */
      268435455
    ), yu = (
      /*               */
      268435456
    ), Vl = (
      /*                        */
      536870912
    ), ai = (
      /*                   */
      1073741824
    );
    function hy(e) {
      {
        if (e & Ke)
          return "Sync";
        if (e & _a)
          return "InputContinuousHydration";
        if (e & bi)
          return "InputContinuous";
        if (e & yo)
          return "DefaultHydration";
        if (e & dn)
          return "Default";
        if (e & go)
          return "TransitionHydration";
        if (e & zl)
          return "Transition";
        if (e & Eo)
          return "Retry";
        if (e & hu)
          return "SelectiveHydration";
        if (e & yu)
          return "IdleHydration";
        if (e & Vl)
          return "Idle";
        if (e & ai)
          return "Offscreen";
      }
    }
    var on = -1, Yc = So, Wc = Ya;
    function gu(e) {
      switch (Vn(e)) {
        case Ke:
          return Ke;
        case _a:
          return _a;
        case bi:
          return bi;
        case yo:
          return yo;
        case dn:
          return dn;
        case go:
          return go;
        case So:
        case ji:
        case ii:
        case bo:
        case _s:
        case Es:
        case Lc:
        case Mc:
        case Ac:
        case zc:
        case Vc:
        case Uc:
        case jc:
        case Fc:
        case _o:
        case Hc:
          return e & zl;
        case Ya:
        case Pc:
        case Cs:
        case Bc:
        case Ic:
          return e & Eo;
        case hu:
          return hu;
        case yu:
          return yu;
        case Vl:
          return Vl;
        case ai:
          return ai;
        default:
          return g("Should have found matching lanes. This is a bug in React."), e;
      }
    }
    function ks(e, t) {
      var i = e.pendingLanes;
      if (i === Y)
        return Y;
      var a = Y, o = e.suspendedLanes, s = e.pingedLanes, f = i & $c;
      if (f !== Y) {
        var p = f & ~o;
        if (p !== Y)
          a = gu(p);
        else {
          var v = f & s;
          v !== Y && (a = gu(v));
        }
      } else {
        var y = i & ~o;
        y !== Y ? a = gu(y) : s !== Y && (a = gu(s));
      }
      if (a === Y)
        return Y;
      if (t !== Y && t !== a && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (t & o) === Y) {
        var S = Vn(a), O = Vn(t);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          S >= O || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          S === dn && (O & zl) !== Y
        )
          return t;
      }
      (a & bi) !== Y && (a |= i & dn);
      var N = e.entangledLanes;
      if (N !== Y)
        for (var U = e.entanglements, F = a & N; F > 0; ) {
          var I = Ul(F), Re = 1 << I;
          a |= U[I], F &= ~Re;
        }
      return a;
    }
    function qv(e, t) {
      for (var i = e.eventTimes, a = on; t > 0; ) {
        var o = Ul(t), s = 1 << o, f = i[o];
        f > a && (a = f), t &= ~s;
      }
      return a;
    }
    function Qc(e, t) {
      switch (e) {
        case Ke:
        case _a:
        case bi:
          return t + 250;
        case yo:
        case dn:
        case go:
        case So:
        case ji:
        case ii:
        case bo:
        case _s:
        case Es:
        case Lc:
        case Mc:
        case Ac:
        case zc:
        case Vc:
        case Uc:
        case jc:
        case Fc:
        case _o:
        case Hc:
          return t + 5e3;
        case Ya:
        case Pc:
        case Cs:
        case Bc:
        case Ic:
          return on;
        case hu:
        case yu:
        case Vl:
        case ai:
          return on;
        default:
          return g("Should have found matching lanes. This is a bug in React."), on;
      }
    }
    function yy(e, t) {
      for (var i = e.pendingLanes, a = e.suspendedLanes, o = e.pingedLanes, s = e.expirationTimes, f = i; f > 0; ) {
        var p = Ul(f), v = 1 << p, y = s[p];
        y === on ? ((v & a) === Y || (v & o) !== Y) && (s[p] = Qc(v, t)) : y <= t && (e.expiredLanes |= v), f &= ~v;
      }
    }
    function gy(e) {
      return gu(e.pendingLanes);
    }
    function Ad(e) {
      var t = e.pendingLanes & ~ai;
      return t !== Y ? t : t & ai ? ai : Y;
    }
    function Su(e) {
      return (e & Ke) !== Y;
    }
    function xs(e) {
      return (e & $c) !== Y;
    }
    function Gc(e) {
      return (e & Eo) === e;
    }
    function Sy(e) {
      var t = Ke | bi | dn;
      return (e & t) === Y;
    }
    function Xv(e) {
      return (e & zl) === e;
    }
    function Rs(e, t) {
      var i = _a | bi | yo | dn;
      return (t & i) !== Y;
    }
    function Kv(e, t) {
      return (t & e.expiredLanes) !== Y;
    }
    function zd(e) {
      return (e & zl) !== Y;
    }
    function Vd() {
      var e = Yc;
      return Yc <<= 1, (Yc & zl) === Y && (Yc = So), e;
    }
    function by() {
      var e = Wc;
      return Wc <<= 1, (Wc & Eo) === Y && (Wc = Ya), e;
    }
    function Vn(e) {
      return e & -e;
    }
    function Bn(e) {
      return Vn(e);
    }
    function Ul(e) {
      return 31 - Dc(e);
    }
    function qc(e) {
      return Ul(e);
    }
    function li(e, t) {
      return (e & t) !== Y;
    }
    function Co(e, t) {
      return (e & t) === t;
    }
    function st(e, t) {
      return e | t;
    }
    function bu(e, t) {
      return e & ~t;
    }
    function Ud(e, t) {
      return e & t;
    }
    function Zv(e) {
      return e;
    }
    function Jv(e, t) {
      return e !== wt && e < t ? e : t;
    }
    function Xc(e) {
      for (var t = [], i = 0; i < fn; i++)
        t.push(e);
      return t;
    }
    function ko(e, t, i) {
      e.pendingLanes |= t, t !== Vl && (e.suspendedLanes = Y, e.pingedLanes = Y);
      var a = e.eventTimes, o = qc(t);
      a[o] = i;
    }
    function jd(e, t) {
      e.suspendedLanes |= t, e.pingedLanes &= ~t;
      for (var i = e.expirationTimes, a = t; a > 0; ) {
        var o = Ul(a), s = 1 << o;
        i[o] = on, a &= ~s;
      }
    }
    function Fd(e, t, i) {
      e.pingedLanes |= e.suspendedLanes & t;
    }
    function Hd(e, t) {
      var i = e.pendingLanes & ~t;
      e.pendingLanes = t, e.suspendedLanes = Y, e.pingedLanes = Y, e.expiredLanes &= t, e.mutableReadLanes &= t, e.entangledLanes &= t;
      for (var a = e.entanglements, o = e.eventTimes, s = e.expirationTimes, f = i; f > 0; ) {
        var p = Ul(f), v = 1 << p;
        a[p] = Y, o[p] = on, s[p] = on, f &= ~v;
      }
    }
    function _u(e, t) {
      for (var i = e.entangledLanes |= t, a = e.entanglements, o = i; o; ) {
        var s = Ul(o), f = 1 << s;
        f & t | // Is this lane transitively entangled with the newly entangled lanes?
        a[s] & t && (a[s] |= t), o &= ~f;
      }
    }
    function _y(e, t) {
      var i = Vn(t), a;
      switch (i) {
        case bi:
          a = _a;
          break;
        case dn:
          a = yo;
          break;
        case So:
        case ji:
        case ii:
        case bo:
        case _s:
        case Es:
        case Lc:
        case Mc:
        case Ac:
        case zc:
        case Vc:
        case Uc:
        case jc:
        case Fc:
        case _o:
        case Hc:
        case Ya:
        case Pc:
        case Cs:
        case Bc:
        case Ic:
          a = go;
          break;
        case Vl:
          a = yu;
          break;
        default:
          a = wt;
          break;
      }
      return (a & (e.suspendedLanes | t)) !== wt ? wt : a;
    }
    function Pd(e, t, i) {
      if (lr)
        for (var a = e.pendingUpdatersLaneMap; i > 0; ) {
          var o = qc(i), s = 1 << o, f = a[o];
          f.add(t), i &= ~s;
        }
    }
    function Kc(e, t) {
      if (lr)
        for (var i = e.pendingUpdatersLaneMap, a = e.memoizedUpdaters; t > 0; ) {
          var o = qc(t), s = 1 << o, f = i[o];
          f.size > 0 && (f.forEach(function(p) {
            var v = p.alternate;
            (v === null || !a.has(v)) && a.add(p);
          }), f.clear()), t &= ~s;
        }
    }
    function Bd(e, t) {
      return null;
    }
    var _r = Ke, or = bi, Wa = dn, Ts = Vl, xo = wt;
    function Fi() {
      return xo;
    }
    function In(e) {
      xo = e;
    }
    function ws(e, t) {
      var i = xo;
      try {
        return xo = e, t();
      } finally {
        xo = i;
      }
    }
    function Er(e, t) {
      return e !== 0 && e < t ? e : t;
    }
    function Ey(e, t) {
      return e > t ? e : t;
    }
    function Id(e, t) {
      return e !== 0 && e < t;
    }
    function Ns(e) {
      var t = Vn(e);
      return Id(_r, t) ? Id(or, t) ? xs(t) ? Wa : Ts : or : _r;
    }
    function $n(e) {
      var t = e.current.memoizedState;
      return t.isDehydrated;
    }
    var em;
    function Oe(e) {
      em = e;
    }
    function Eu(e) {
      em(e);
    }
    var Ds;
    function tm(e) {
      Ds = e;
    }
    var nm;
    function Os(e) {
      nm = e;
    }
    var Ls;
    function $d(e) {
      Ls = e;
    }
    var Yd;
    function rm(e) {
      Yd = e;
    }
    var Zc = false, Cu = [], Ea = null, hn = null, Jn = null, Hi = /* @__PURE__ */ new Map(), ku = /* @__PURE__ */ new Map(), Qa = [], ua = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function im(e) {
      return ua.indexOf(e) > -1;
    }
    function Ca(e, t, i, a, o) {
      return {
        blockedOn: e,
        domEventName: t,
        eventSystemFlags: i,
        nativeEvent: o,
        targetContainers: [a]
      };
    }
    function am(e, t) {
      switch (e) {
        case "focusin":
        case "focusout":
          Ea = null;
          break;
        case "dragenter":
        case "dragleave":
          hn = null;
          break;
        case "mouseover":
        case "mouseout":
          Jn = null;
          break;
        case "pointerover":
        case "pointerout": {
          var i = t.pointerId;
          Hi.delete(i);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var a = t.pointerId;
          ku.delete(a);
          break;
        }
      }
    }
    function xu(e, t, i, a, o, s) {
      if (e === null || e.nativeEvent !== s) {
        var f = Ca(t, i, a, o, s);
        if (t !== null) {
          var p = Vu(t);
          p !== null && Ds(p);
        }
        return f;
      }
      e.eventSystemFlags |= a;
      var v = e.targetContainers;
      return o !== null && v.indexOf(o) === -1 && v.push(o), e;
    }
    function lm(e, t, i, a, o) {
      switch (t) {
        case "focusin": {
          var s = o;
          return Ea = xu(Ea, e, t, i, a, s), true;
        }
        case "dragenter": {
          var f = o;
          return hn = xu(hn, e, t, i, a, f), true;
        }
        case "mouseover": {
          var p = o;
          return Jn = xu(Jn, e, t, i, a, p), true;
        }
        case "pointerover": {
          var v = o, y = v.pointerId;
          return Hi.set(y, xu(Hi.get(y) || null, e, t, i, a, v)), true;
        }
        case "gotpointercapture": {
          var S = o, O = S.pointerId;
          return ku.set(O, xu(ku.get(O) || null, e, t, i, a, S)), true;
        }
      }
      return false;
    }
    function Wd(e) {
      var t = Ps(e.target);
      if (t !== null) {
        var i = yi(t);
        if (i !== null) {
          var a = i.tag;
          if (a === be) {
            var o = _d(i);
            if (o !== null) {
              e.blockedOn = o, Yd(e.priority, function() {
                nm(i);
              });
              return;
            }
          } else if (a === W) {
            var s = i.stateNode;
            if ($n(s)) {
              e.blockedOn = bc(i);
              return;
            }
          }
        }
      }
      e.blockedOn = null;
    }
    function om(e) {
      for (var t = Ls(), i = {
        blockedOn: null,
        target: e,
        priority: t
      }, a = 0; a < Qa.length && Id(t, Qa[a].priority); a++)
        ;
      Qa.splice(a, 0, i), a === 0 && Wd(i);
    }
    function Jc(e) {
      if (e.blockedOn !== null)
        return false;
      for (var t = e.targetContainers; t.length > 0; ) {
        var i = t[0], a = Ro(e.domEventName, e.eventSystemFlags, i, e.nativeEvent);
        if (a === null) {
          var o = e.nativeEvent, s = new o.constructor(o.type, o);
          fs(s), o.target.dispatchEvent(s), dy();
        } else {
          var f = Vu(a);
          return f !== null && Ds(f), e.blockedOn = a, false;
        }
        t.shift();
      }
      return true;
    }
    function Ms(e, t, i) {
      Jc(e) && i.delete(t);
    }
    function Qd() {
      Zc = false, Ea !== null && Jc(Ea) && (Ea = null), hn !== null && Jc(hn) && (hn = null), Jn !== null && Jc(Jn) && (Jn = null), Hi.forEach(Ms), ku.forEach(Ms);
    }
    function Cr(e, t) {
      e.blockedOn === t && (e.blockedOn = null, Zc || (Zc = true, _.unstable_scheduleCallback(_.unstable_NormalPriority, Qd)));
    }
    function _t(e) {
      if (Cu.length > 0) {
        Cr(Cu[0], e);
        for (var t = 1; t < Cu.length; t++) {
          var i = Cu[t];
          i.blockedOn === e && (i.blockedOn = null);
        }
      }
      Ea !== null && Cr(Ea, e), hn !== null && Cr(hn, e), Jn !== null && Cr(Jn, e);
      var a = function(p) {
        return Cr(p, e);
      };
      Hi.forEach(a), ku.forEach(a);
      for (var o = 0; o < Qa.length; o++) {
        var s = Qa[o];
        s.blockedOn === e && (s.blockedOn = null);
      }
      for (; Qa.length > 0; ) {
        var f = Qa[0];
        if (f.blockedOn !== null)
          break;
        Wd(f), f.blockedOn === null && Qa.shift();
      }
    }
    var kn = b.ReactCurrentBatchConfig, wn = true;
    function er(e) {
      wn = !!e;
    }
    function _i() {
      return wn;
    }
    function Ru(e, t, i) {
      var a = Lr(t), o;
      switch (a) {
        case _r:
          o = Yn;
          break;
        case or:
          o = As;
          break;
        case Wa:
        default:
          o = Ga;
          break;
      }
      return o.bind(null, t, i, e);
    }
    function Yn(e, t, i, a) {
      var o = Fi(), s = kn.transition;
      kn.transition = null;
      try {
        In(_r), Ga(e, t, i, a);
      } finally {
        In(o), kn.transition = s;
      }
    }
    function As(e, t, i, a) {
      var o = Fi(), s = kn.transition;
      kn.transition = null;
      try {
        In(or), Ga(e, t, i, a);
      } finally {
        In(o), kn.transition = s;
      }
    }
    function Ga(e, t, i, a) {
      wn && ef(e, t, i, a);
    }
    function ef(e, t, i, a) {
      var o = Ro(e, t, i, a);
      if (o === null) {
        By(e, t, a, Tu, i), am(e, a);
        return;
      }
      if (lm(o, e, t, i, a)) {
        a.stopPropagation();
        return;
      }
      if (am(e, a), t & oo && im(e)) {
        for (; o !== null; ) {
          var s = Vu(o);
          s !== null && Eu(s);
          var f = Ro(e, t, i, a);
          if (f === null && By(e, t, a, Tu, i), f === o)
            break;
          o = f;
        }
        o !== null && a.stopPropagation();
        return;
      }
      By(e, t, a, null, i);
    }
    var Tu = null;
    function Ro(e, t, i, a) {
      Tu = null;
      var o = mc(a), s = Ps(o);
      if (s !== null) {
        var f = yi(s);
        if (f === null)
          s = null;
        else {
          var p = f.tag;
          if (p === be) {
            var v = _d(f);
            if (v !== null)
              return v;
            s = null;
          } else if (p === W) {
            var y = f.stateNode;
            if ($n(y))
              return bc(f);
            s = null;
          } else
            f !== s && (s = null);
        }
      }
      return Tu = s, null;
    }
    function Lr(e) {
      switch (e) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return _r;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return or;
        case "message": {
          var t = kd();
          switch (t) {
            case kc:
              return _r;
            case Si:
              return or;
            case ba:
            case xc:
              return Wa;
            case Nl:
              return Ts;
            default:
              return Wa;
          }
        }
        default:
          return Wa;
      }
    }
    function Gd(e, t, i) {
      return e.addEventListener(t, i, false), i;
    }
    function wu(e, t, i) {
      return e.addEventListener(t, i, true), i;
    }
    function qa(e, t, i, a) {
      return e.addEventListener(t, i, {
        capture: true,
        passive: a
      }), i;
    }
    function tf(e, t, i, a) {
      return e.addEventListener(t, i, {
        passive: a
      }), i;
    }
    var To = null, ka = null, jl = null;
    function Fl(e) {
      return To = e, ka = rf(), true;
    }
    function nf() {
      To = null, ka = null, jl = null;
    }
    function Nu() {
      if (jl)
        return jl;
      var e, t = ka, i = t.length, a, o = rf(), s = o.length;
      for (e = 0; e < i && t[e] === o[e]; e++)
        ;
      var f = i - e;
      for (a = 1; a <= f && t[i - a] === o[s - a]; a++)
        ;
      var p = a > 1 ? 1 - a : void 0;
      return jl = o.slice(e, p), jl;
    }
    function rf() {
      return "value" in To ? To.value : To.textContent;
    }
    function wo(e) {
      var t, i = e.keyCode;
      return "charCode" in e ? (t = e.charCode, t === 0 && i === 13 && (t = 13)) : t = i, t === 10 && (t = 13), t >= 32 || t === 13 ? t : 0;
    }
    function No() {
      return true;
    }
    function kr() {
      return false;
    }
    function Un(e) {
      function t(i, a, o, s, f) {
        this._reactName = i, this._targetInst = o, this.type = a, this.nativeEvent = s, this.target = f, this.currentTarget = null;
        for (var p in e)
          if (e.hasOwnProperty(p)) {
            var v = e[p];
            v ? this[p] = v(s) : this[p] = s[p];
          }
        var y = s.defaultPrevented != null ? s.defaultPrevented : s.returnValue === false;
        return y ? this.isDefaultPrevented = No : this.isDefaultPrevented = kr, this.isPropagationStopped = kr, this;
      }
      return pt(t.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var i = this.nativeEvent;
          i && (i.preventDefault ? i.preventDefault() : typeof i.returnValue != "unknown" && (i.returnValue = false), this.isDefaultPrevented = No);
        },
        stopPropagation: function() {
          var i = this.nativeEvent;
          i && (i.stopPropagation ? i.stopPropagation() : typeof i.cancelBubble != "unknown" && (i.cancelBubble = true), this.isPropagationStopped = No);
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: No
      }), t;
    }
    var xr = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(e) {
        return e.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    }, Rr = Un(xr), Du = pt({}, xr, {
      view: 0,
      detail: 0
    }), qd = Un(Du), zs, Xd, Pi;
    function um(e) {
      e !== Pi && (Pi && e.type === "mousemove" ? (zs = e.screenX - Pi.screenX, Xd = e.screenY - Pi.screenY) : (zs = 0, Xd = 0), Pi = e);
    }
    var Ou = pt({}, Du, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: of,
      button: 0,
      buttons: 0,
      relatedTarget: function(e) {
        return e.relatedTarget === void 0 ? e.fromElement === e.srcElement ? e.toElement : e.fromElement : e.relatedTarget;
      },
      movementX: function(e) {
        return "movementX" in e ? e.movementX : (um(e), zs);
      },
      movementY: function(e) {
        return "movementY" in e ? e.movementY : Xd;
      }
    }), Hl = Un(Ou), Kd = pt({}, Ou, {
      dataTransfer: 0
    }), Do = Un(Kd), sm = pt({}, Du, {
      relatedTarget: 0
    }), af = Un(sm), Zd = pt({}, xr, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), lf = Un(Zd), Cy = pt({}, xr, {
      clipboardData: function(e) {
        return "clipboardData" in e ? e.clipboardData : window.clipboardData;
      }
    }), ky = Un(Cy), cm = pt({}, xr, {
      data: 0
    }), Jd = Un(cm), Oo = Jd, xy = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Lu = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    function fm(e) {
      if (e.key) {
        var t = xy[e.key] || e.key;
        if (t !== "Unidentified")
          return t;
      }
      if (e.type === "keypress") {
        var i = wo(e);
        return i === 13 ? "Enter" : String.fromCharCode(i);
      }
      return e.type === "keydown" || e.type === "keyup" ? Lu[e.keyCode] || "Unidentified" : "";
    }
    var Nn = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function Ry(e) {
      var t = this, i = t.nativeEvent;
      if (i.getModifierState)
        return i.getModifierState(e);
      var a = Nn[e];
      return a ? !!i[a] : false;
    }
    function of(e) {
      return Ry;
    }
    var Ty = pt({}, Du, {
      key: fm,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: of,
      // Legacy Interface
      charCode: function(e) {
        return e.type === "keypress" ? wo(e) : 0;
      },
      keyCode: function(e) {
        return e.type === "keydown" || e.type === "keyup" ? e.keyCode : 0;
      },
      which: function(e) {
        return e.type === "keypress" ? wo(e) : e.type === "keydown" || e.type === "keyup" ? e.keyCode : 0;
      }
    }), wy = Un(Ty), dm = pt({}, Ou, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    }), ep = Un(dm), Ny = pt({}, Du, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: of
    }), Bi = Un(Ny), tp = pt({}, xr, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    }), Dy = Un(tp), Pl = pt({}, Ou, {
      deltaX: function(e) {
        return "deltaX" in e ? e.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in e ? -e.wheelDeltaX : 0
        );
      },
      deltaY: function(e) {
        return "deltaY" in e ? e.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in e ? -e.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in e ? -e.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    }), uf = Un(Pl), Lo = [9, 13, 27, 32], Vs = 229, Us = yn && "CompositionEvent" in window, Mo = null;
    yn && "documentMode" in document && (Mo = document.documentMode);
    var Oy = yn && "TextEvent" in window && !Mo, sf = yn && (!Us || Mo && Mo > 8 && Mo <= 11), pm = 32, np = String.fromCharCode(pm);
    function vm() {
      hr("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), hr("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), hr("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), hr("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var js = false;
    function cf(e) {
      return (e.ctrlKey || e.altKey || e.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(e.ctrlKey && e.altKey);
    }
    function mm(e) {
      switch (e) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function rp(e, t) {
      return e === "keydown" && t.keyCode === Vs;
    }
    function hm(e, t) {
      switch (e) {
        case "keyup":
          return Lo.indexOf(t.keyCode) !== -1;
        case "keydown":
          return t.keyCode !== Vs;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function ip(e) {
      var t = e.detail;
      return typeof t == "object" && "data" in t ? t.data : null;
    }
    function ff(e) {
      return e.locale === "ko";
    }
    var Xa = false;
    function ap(e, t, i, a, o) {
      var s, f;
      if (Us ? s = mm(t) : Xa ? hm(t, a) && (s = "onCompositionEnd") : rp(t, a) && (s = "onCompositionStart"), !s)
        return null;
      sf && !ff(a) && (!Xa && s === "onCompositionStart" ? Xa = Fl(o) : s === "onCompositionEnd" && Xa && (f = Nu()));
      var p = _m(i, s);
      if (p.length > 0) {
        var v = new Jd(s, t, null, a, o);
        if (e.push({
          event: v,
          listeners: p
        }), f)
          v.data = f;
        else {
          var y = ip(a);
          y !== null && (v.data = y);
        }
      }
    }
    function df(e, t) {
      switch (e) {
        case "compositionend":
          return ip(t);
        case "keypress":
          var i = t.which;
          return i !== pm ? null : (js = true, np);
        case "textInput":
          var a = t.data;
          return a === np && js ? null : a;
        default:
          return null;
      }
    }
    function ym(e, t) {
      if (Xa) {
        if (e === "compositionend" || !Us && hm(e, t)) {
          var i = Nu();
          return nf(), Xa = false, i;
        }
        return null;
      }
      switch (e) {
        case "paste":
          return null;
        case "keypress":
          if (!cf(t)) {
            if (t.char && t.char.length > 1)
              return t.char;
            if (t.which)
              return String.fromCharCode(t.which);
          }
          return null;
        case "compositionend":
          return sf && !ff(t) ? null : t.data;
        default:
          return null;
      }
    }
    function Ly(e, t, i, a, o) {
      var s;
      if (Oy ? s = df(t, a) : s = ym(t, a), !s)
        return null;
      var f = _m(i, "onBeforeInput");
      if (f.length > 0) {
        var p = new Oo("onBeforeInput", "beforeinput", null, a, o);
        e.push({
          event: p,
          listeners: f
        }), p.data = s;
      }
    }
    function pf(e, t, i, a, o, s, f) {
      ap(e, t, i, a, o), Ly(e, t, i, a, o);
    }
    var My = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function Mu(e) {
      var t = e && e.nodeName && e.nodeName.toLowerCase();
      return t === "input" ? !!My[e.type] : t === "textarea";
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function Ay(e) {
      if (!yn)
        return false;
      var t = "on" + e, i = t in document;
      if (!i) {
        var a = document.createElement("div");
        a.setAttribute(t, "return;"), i = typeof a[t] == "function";
      }
      return i;
    }
    function vf() {
      hr("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function n(e, t, i, a) {
      hc(a);
      var o = _m(t, "onChange");
      if (o.length > 0) {
        var s = new Rr("onChange", "change", null, i, a);
        e.push({
          event: s,
          listeners: o
        });
      }
    }
    var r = null, l = null;
    function u(e) {
      var t = e.nodeName && e.nodeName.toLowerCase();
      return t === "select" || t === "input" && e.type === "file";
    }
    function c(e) {
      var t = [];
      n(t, l, e, mc(e)), pd(d, t);
    }
    function d(e) {
      X1(e, 0);
    }
    function h(e) {
      var t = bf(e);
      if (nu(t))
        return e;
    }
    function C(e, t) {
      if (e === "change")
        return t;
    }
    var T = false;
    yn && (T = Ay("input") && (!document.documentMode || document.documentMode > 9));
    function H(e, t) {
      r = e, l = t, r.attachEvent("onpropertychange", ae);
    }
    function re() {
      r && (r.detachEvent("onpropertychange", ae), r = null, l = null);
    }
    function ae(e) {
      e.propertyName === "value" && h(l) && c(e);
    }
    function ne(e, t, i) {
      e === "focusin" ? (re(), H(t, i)) : e === "focusout" && re();
    }
    function Ce(e, t) {
      if (e === "selectionchange" || e === "keyup" || e === "keydown")
        return h(l);
    }
    function Le(e) {
      var t = e.nodeName;
      return t && t.toLowerCase() === "input" && (e.type === "checkbox" || e.type === "radio");
    }
    function ze(e, t) {
      if (e === "click")
        return h(t);
    }
    function Mn(e, t) {
      if (e === "input" || e === "change")
        return h(t);
    }
    function M(e) {
      var t = e._wrapperState;
      !t || !t.controlled || e.type !== "number" || We(e, "number", e.value);
    }
    function D(e, t, i, a, o, s, f) {
      var p = i ? bf(i) : window, v, y;
      if (u(p) ? v = C : Mu(p) ? T ? v = Mn : (v = Ce, y = ne) : Le(p) && (v = ze), v) {
        var S = v(t, i);
        if (S) {
          n(e, S, a, o);
          return;
        }
      }
      y && y(t, p, i), t === "focusout" && M(p);
    }
    function V() {
      Ir("onMouseEnter", ["mouseout", "mouseover"]), Ir("onMouseLeave", ["mouseout", "mouseover"]), Ir("onPointerEnter", ["pointerout", "pointerover"]), Ir("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function se(e, t, i, a, o, s, f) {
      var p = t === "mouseover" || t === "pointerover", v = t === "mouseout" || t === "pointerout";
      if (p && !Av(a)) {
        var y = a.relatedTarget || a.fromElement;
        if (y && (Ps(y) || Sp(y)))
          return;
      }
      if (!(!v && !p)) {
        var S;
        if (o.window === o)
          S = o;
        else {
          var O = o.ownerDocument;
          O ? S = O.defaultView || O.parentWindow : S = window;
        }
        var N, U;
        if (v) {
          var F = a.relatedTarget || a.toElement;
          if (N = i, U = F ? Ps(F) : null, U !== null) {
            var I = yi(U);
            (U !== I || U.tag !== q && U.tag !== fe) && (U = null);
          }
        } else
          N = null, U = i;
        if (N !== U) {
          var Re = Hl, Ye = "onMouseLeave", Ue = "onMouseEnter", Dt = "mouse";
          (t === "pointerout" || t === "pointerover") && (Re = ep, Ye = "onPointerLeave", Ue = "onPointerEnter", Dt = "pointer");
          var Et = N == null ? S : bf(N), A = U == null ? S : bf(U), $ = new Re(Ye, Dt + "leave", N, a, o);
          $.target = Et, $.relatedTarget = A;
          var z = null, le = Ps(o);
          if (le === i) {
            var Te = new Re(Ue, Dt + "enter", U, a, o);
            Te.target = A, Te.relatedTarget = Et, z = Te;
          }
          hC(e, $, z, N, U);
        }
      }
    }
    function Ve(e, t) {
      return e === t && (e !== 0 || 1 / e === 1 / t) || e !== e && t !== t;
    }
    var Me = typeof Object.is == "function" ? Object.is : Ve;
    function Pe(e, t) {
      if (Me(e, t))
        return true;
      if (typeof e != "object" || e === null || typeof t != "object" || t === null)
        return false;
      var i = Object.keys(e), a = Object.keys(t);
      if (i.length !== a.length)
        return false;
      for (var o = 0; o < i.length; o++) {
        var s = i[o];
        if (!Qn.call(t, s) || !Me(e[s], t[s]))
          return false;
      }
      return true;
    }
    function nt(e) {
      for (; e && e.firstChild; )
        e = e.firstChild;
      return e;
    }
    function tr(e) {
      for (; e; ) {
        if (e.nextSibling)
          return e.nextSibling;
        e = e.parentNode;
      }
    }
    function Vt(e, t) {
      for (var i = nt(e), a = 0, o = 0; i; ) {
        if (i.nodeType === Ua) {
          if (o = a + i.textContent.length, a <= t && o >= t)
            return {
              node: i,
              offset: t - a
            };
          a = o;
        }
        i = nt(tr(i));
      }
    }
    function Bl(e) {
      var t = e.ownerDocument, i = t && t.defaultView || window, a = i.getSelection && i.getSelection();
      if (!a || a.rangeCount === 0)
        return null;
      var o = a.anchorNode, s = a.anchorOffset, f = a.focusNode, p = a.focusOffset;
      try {
        o.nodeType, f.nodeType;
      } catch {
        return null;
      }
      return zy(e, o, s, f, p);
    }
    function zy(e, t, i, a, o) {
      var s = 0, f = -1, p = -1, v = 0, y = 0, S = e, O = null;
      e:
        for (; ; ) {
          for (var N = null; S === t && (i === 0 || S.nodeType === Ua) && (f = s + i), S === a && (o === 0 || S.nodeType === Ua) && (p = s + o), S.nodeType === Ua && (s += S.nodeValue.length), (N = S.firstChild) !== null; )
            O = S, S = N;
          for (; ; ) {
            if (S === e)
              break e;
            if (O === t && ++v === i && (f = s), O === a && ++y === o && (p = s), (N = S.nextSibling) !== null)
              break;
            S = O, O = S.parentNode;
          }
          S = N;
        }
      return f === -1 || p === -1 ? null : {
        start: f,
        end: p
      };
    }
    function KE(e, t) {
      var i = e.ownerDocument || document, a = i && i.defaultView || window;
      if (a.getSelection) {
        var o = a.getSelection(), s = e.textContent.length, f = Math.min(t.start, s), p = t.end === void 0 ? f : Math.min(t.end, s);
        if (!o.extend && f > p) {
          var v = p;
          p = f, f = v;
        }
        var y = Vt(e, f), S = Vt(e, p);
        if (y && S) {
          if (o.rangeCount === 1 && o.anchorNode === y.node && o.anchorOffset === y.offset && o.focusNode === S.node && o.focusOffset === S.offset)
            return;
          var O = i.createRange();
          O.setStart(y.node, y.offset), o.removeAllRanges(), f > p ? (o.addRange(O), o.extend(S.node, S.offset)) : (O.setEnd(S.node, S.offset), o.addRange(O));
        }
      }
    }
    function j1(e) {
      return e && e.nodeType === Ua;
    }
    function F1(e, t) {
      return !e || !t ? false : e === t ? true : j1(e) ? false : j1(t) ? F1(e, t.parentNode) : "contains" in e ? e.contains(t) : e.compareDocumentPosition ? !!(e.compareDocumentPosition(t) & 16) : false;
    }
    function ZE(e) {
      return e && e.ownerDocument && F1(e.ownerDocument.documentElement, e);
    }
    function JE(e) {
      try {
        return typeof e.contentWindow.location.href == "string";
      } catch {
        return false;
      }
    }
    function H1() {
      for (var e = window, t = _l(); t instanceof e.HTMLIFrameElement; ) {
        if (JE(t))
          e = t.contentWindow;
        else
          return t;
        t = _l(e.document);
      }
      return t;
    }
    function Vy(e) {
      var t = e && e.nodeName && e.nodeName.toLowerCase();
      return t && (t === "input" && (e.type === "text" || e.type === "search" || e.type === "tel" || e.type === "url" || e.type === "password") || t === "textarea" || e.contentEditable === "true");
    }
    function eC() {
      var e = H1();
      return {
        focusedElem: e,
        selectionRange: Vy(e) ? nC(e) : null
      };
    }
    function tC(e) {
      var t = H1(), i = e.focusedElem, a = e.selectionRange;
      if (t !== i && ZE(i)) {
        a !== null && Vy(i) && rC(i, a);
        for (var o = [], s = i; s = s.parentNode; )
          s.nodeType === Zr && o.push({
            element: s,
            left: s.scrollLeft,
            top: s.scrollTop
          });
        typeof i.focus == "function" && i.focus();
        for (var f = 0; f < o.length; f++) {
          var p = o[f];
          p.element.scrollLeft = p.left, p.element.scrollTop = p.top;
        }
      }
    }
    function nC(e) {
      var t;
      return "selectionStart" in e ? t = {
        start: e.selectionStart,
        end: e.selectionEnd
      } : t = Bl(e), t || {
        start: 0,
        end: 0
      };
    }
    function rC(e, t) {
      var i = t.start, a = t.end;
      a === void 0 && (a = i), "selectionStart" in e ? (e.selectionStart = i, e.selectionEnd = Math.min(a, e.value.length)) : KE(e, t);
    }
    var iC = yn && "documentMode" in document && document.documentMode <= 11;
    function aC() {
      hr("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var mf = null, Uy = null, lp = null, jy = false;
    function lC(e) {
      if ("selectionStart" in e && Vy(e))
        return {
          start: e.selectionStart,
          end: e.selectionEnd
        };
      var t = e.ownerDocument && e.ownerDocument.defaultView || window, i = t.getSelection();
      return {
        anchorNode: i.anchorNode,
        anchorOffset: i.anchorOffset,
        focusNode: i.focusNode,
        focusOffset: i.focusOffset
      };
    }
    function oC(e) {
      return e.window === e ? e.document : e.nodeType === ia ? e : e.ownerDocument;
    }
    function P1(e, t, i) {
      var a = oC(i);
      if (!(jy || mf == null || mf !== _l(a))) {
        var o = lC(mf);
        if (!lp || !Pe(lp, o)) {
          lp = o;
          var s = _m(Uy, "onSelect");
          if (s.length > 0) {
            var f = new Rr("onSelect", "select", null, t, i);
            e.push({
              event: f,
              listeners: s
            }), f.target = mf;
          }
        }
      }
    }
    function uC(e, t, i, a, o, s, f) {
      var p = i ? bf(i) : window;
      switch (t) {
        case "focusin":
          (Mu(p) || p.contentEditable === "true") && (mf = p, Uy = i, lp = null);
          break;
        case "focusout":
          mf = null, Uy = null, lp = null;
          break;
        case "mousedown":
          jy = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          jy = false, P1(e, a, o);
          break;
        case "selectionchange":
          if (iC)
            break;
        case "keydown":
        case "keyup":
          P1(e, a, o);
      }
    }
    function gm(e, t) {
      var i = {};
      return i[e.toLowerCase()] = t.toLowerCase(), i["Webkit" + e] = "webkit" + t, i["Moz" + e] = "moz" + t, i;
    }
    var hf = {
      animationend: gm("Animation", "AnimationEnd"),
      animationiteration: gm("Animation", "AnimationIteration"),
      animationstart: gm("Animation", "AnimationStart"),
      transitionend: gm("Transition", "TransitionEnd")
    }, Fy = {}, B1 = {};
    yn && (B1 = document.createElement("div").style, "AnimationEvent" in window || (delete hf.animationend.animation, delete hf.animationiteration.animation, delete hf.animationstart.animation), "TransitionEvent" in window || delete hf.transitionend.transition);
    function Sm(e) {
      if (Fy[e])
        return Fy[e];
      if (!hf[e])
        return e;
      var t = hf[e];
      for (var i in t)
        if (t.hasOwnProperty(i) && i in B1)
          return Fy[e] = t[i];
      return e;
    }
    var I1 = Sm("animationend"), $1 = Sm("animationiteration"), Y1 = Sm("animationstart"), W1 = Sm("transitionend"), Q1 = /* @__PURE__ */ new Map(), G1 = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function Au(e, t) {
      Q1.set(e, t), hr(t, [e]);
    }
    function sC() {
      for (var e = 0; e < G1.length; e++) {
        var t = G1[e], i = t.toLowerCase(), a = t[0].toUpperCase() + t.slice(1);
        Au(i, "on" + a);
      }
      Au(I1, "onAnimationEnd"), Au($1, "onAnimationIteration"), Au(Y1, "onAnimationStart"), Au("dblclick", "onDoubleClick"), Au("focusin", "onFocus"), Au("focusout", "onBlur"), Au(W1, "onTransitionEnd");
    }
    function cC(e, t, i, a, o, s, f) {
      var p = Q1.get(t);
      if (p !== void 0) {
        var v = Rr, y = t;
        switch (t) {
          case "keypress":
            if (wo(a) === 0)
              return;
          case "keydown":
          case "keyup":
            v = wy;
            break;
          case "focusin":
            y = "focus", v = af;
            break;
          case "focusout":
            y = "blur", v = af;
            break;
          case "beforeblur":
          case "afterblur":
            v = af;
            break;
          case "click":
            if (a.button === 2)
              return;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            v = Hl;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            v = Do;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            v = Bi;
            break;
          case I1:
          case $1:
          case Y1:
            v = lf;
            break;
          case W1:
            v = Dy;
            break;
          case "scroll":
            v = qd;
            break;
          case "wheel":
            v = uf;
            break;
          case "copy":
          case "cut":
          case "paste":
            v = ky;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            v = ep;
            break;
        }
        var S = (s & oo) !== 0;
        {
          var O = !S && // TODO: ideally, we'd eventually add all events from
          // nonDelegatedEvents list in DOMPluginEventSystem.
          // Then we can remove this special list.
          // This is a breaking change that can wait until React 18.
          t === "scroll", N = vC(i, p, a.type, S, O);
          if (N.length > 0) {
            var U = new v(p, y, null, a, o);
            e.push({
              event: U,
              listeners: N
            });
          }
        }
      }
    }
    sC(), V(), vf(), aC(), vm();
    function fC(e, t, i, a, o, s, f) {
      cC(e, t, i, a, o, s);
      var p = (s & fy) === 0;
      p && (se(e, t, i, a, o), D(e, t, i, a, o), uC(e, t, i, a, o), pf(e, t, i, a, o));
    }
    var op = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], Hy = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(op));
    function q1(e, t, i) {
      var a = e.type || "unknown-event";
      e.currentTarget = i, Pa(a, t, void 0, e), e.currentTarget = null;
    }
    function dC(e, t, i) {
      var a;
      if (i)
        for (var o = t.length - 1; o >= 0; o--) {
          var s = t[o], f = s.instance, p = s.currentTarget, v = s.listener;
          if (f !== a && e.isPropagationStopped())
            return;
          q1(e, v, p), a = f;
        }
      else
        for (var y = 0; y < t.length; y++) {
          var S = t[y], O = S.instance, N = S.currentTarget, U = S.listener;
          if (O !== a && e.isPropagationStopped())
            return;
          q1(e, U, N), a = O;
        }
    }
    function X1(e, t) {
      for (var i = (t & oo) !== 0, a = 0; a < e.length; a++) {
        var o = e[a], s = o.event, f = o.listeners;
        dC(s, f, i);
      }
      yd();
    }
    function pC(e, t, i, a, o) {
      var s = mc(i), f = [];
      fC(f, e, a, i, s, t), X1(f, t);
    }
    function xn(e, t) {
      Hy.has(e) || g('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', e);
      var i = false, a = Ik(t), o = yC(e);
      a.has(o) || (K1(t, e, ss, i), a.add(o));
    }
    function Py(e, t, i) {
      Hy.has(e) && !t && g('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', e);
      var a = 0;
      t && (a |= oo), K1(i, e, a, t);
    }
    var bm = "_reactListening" + Math.random().toString(36).slice(2);
    function up(e) {
      if (!e[bm]) {
        e[bm] = true, ft.forEach(function(i) {
          i !== "selectionchange" && (Hy.has(i) || Py(i, false, e), Py(i, true, e));
        });
        var t = e.nodeType === ia ? e : e.ownerDocument;
        t !== null && (t[bm] || (t[bm] = true, Py("selectionchange", false, t)));
      }
    }
    function K1(e, t, i, a, o) {
      var s = Ru(e, t, i), f = void 0;
      vs && (t === "touchstart" || t === "touchmove" || t === "wheel") && (f = true), e = e, a ? f !== void 0 ? qa(e, t, s, f) : wu(e, t, s) : f !== void 0 ? tf(e, t, s, f) : Gd(e, t, s);
    }
    function Z1(e, t) {
      return e === t || e.nodeType === zn && e.parentNode === t;
    }
    function By(e, t, i, a, o) {
      var s = a;
      if (!(t & Fa) && !(t & ss)) {
        var f = o;
        if (a !== null) {
          var p = a;
          e:
            for (; ; ) {
              if (p === null)
                return;
              var v = p.tag;
              if (v === W || v === J) {
                var y = p.stateNode.containerInfo;
                if (Z1(y, f))
                  break;
                if (v === J)
                  for (var S = p.return; S !== null; ) {
                    var O = S.tag;
                    if (O === W || O === J) {
                      var N = S.stateNode.containerInfo;
                      if (Z1(N, f))
                        return;
                    }
                    S = S.return;
                  }
                for (; y !== null; ) {
                  var U = Ps(y);
                  if (U === null)
                    return;
                  var F = U.tag;
                  if (F === q || F === fe) {
                    p = s = U;
                    continue e;
                  }
                  y = y.parentNode;
                }
              }
              p = p.return;
            }
        }
      }
      pd(function() {
        return pC(e, t, i, s);
      });
    }
    function sp(e, t, i) {
      return {
        instance: e,
        listener: t,
        currentTarget: i
      };
    }
    function vC(e, t, i, a, o, s) {
      for (var f = t !== null ? t + "Capture" : null, p = a ? f : t, v = [], y = e, S = null; y !== null; ) {
        var O = y, N = O.stateNode, U = O.tag;
        if (U === q && N !== null && (S = N, p !== null)) {
          var F = so(y, p);
          F != null && v.push(sp(y, F, S));
        }
        if (o)
          break;
        y = y.return;
      }
      return v;
    }
    function _m(e, t) {
      for (var i = t + "Capture", a = [], o = e; o !== null; ) {
        var s = o, f = s.stateNode, p = s.tag;
        if (p === q && f !== null) {
          var v = f, y = so(o, i);
          y != null && a.unshift(sp(o, y, v));
          var S = so(o, t);
          S != null && a.push(sp(o, S, v));
        }
        o = o.return;
      }
      return a;
    }
    function yf(e) {
      if (e === null)
        return null;
      do
        e = e.return;
      while (e && e.tag !== q);
      return e || null;
    }
    function mC(e, t) {
      for (var i = e, a = t, o = 0, s = i; s; s = yf(s))
        o++;
      for (var f = 0, p = a; p; p = yf(p))
        f++;
      for (; o - f > 0; )
        i = yf(i), o--;
      for (; f - o > 0; )
        a = yf(a), f--;
      for (var v = o; v--; ) {
        if (i === a || a !== null && i === a.alternate)
          return i;
        i = yf(i), a = yf(a);
      }
      return null;
    }
    function J1(e, t, i, a, o) {
      for (var s = t._reactName, f = [], p = i; p !== null && p !== a; ) {
        var v = p, y = v.alternate, S = v.stateNode, O = v.tag;
        if (y !== null && y === a)
          break;
        if (O === q && S !== null) {
          var N = S;
          if (o) {
            var U = so(p, s);
            U != null && f.unshift(sp(p, U, N));
          } else if (!o) {
            var F = so(p, s);
            F != null && f.push(sp(p, F, N));
          }
        }
        p = p.return;
      }
      f.length !== 0 && e.push({
        event: t,
        listeners: f
      });
    }
    function hC(e, t, i, a, o) {
      var s = a && o ? mC(a, o) : null;
      a !== null && J1(e, t, a, s, false), o !== null && i !== null && J1(e, i, o, s, true);
    }
    function yC(e, t) {
      return e + "__bubble";
    }
    var Ii = false, cp = "dangerouslySetInnerHTML", Em = "suppressContentEditableWarning", zu = "suppressHydrationWarning", eS = "autoFocus", Fs = "children", Hs = "style", Cm = "__html", Iy, km, fp, tS, xm, nS, rS;
    Iy = {
      // There are working polyfills for <dialog>. Let people use it.
      dialog: true,
      // Electron ships a custom <webview> tag to display external web content in
      // an isolated frame and process.
      // This tag is not present in non Electron environments such as JSDom which
      // is often used for testing purposes.
      // @see https://electronjs.org/docs/api/webview-tag
      webview: true
    }, km = function(e, t) {
      vc(e, t), ud(e, t), Mv(e, t, {
        registrationNameDependencies: It,
        possibleRegistrationNames: Br
      });
    }, nS = yn && !document.documentMode, fp = function(e, t, i) {
      if (!Ii) {
        var a = Rm(i), o = Rm(t);
        o !== a && (Ii = true, g("Prop `%s` did not match. Server: %s Client: %s", e, JSON.stringify(o), JSON.stringify(a)));
      }
    }, tS = function(e) {
      if (!Ii) {
        Ii = true;
        var t = [];
        e.forEach(function(i) {
          t.push(i);
        }), g("Extra attributes from the server: %s", t);
      }
    }, xm = function(e, t) {
      t === false ? g("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", e, e, e) : g("Expected `%s` listener to be a function, instead got a value of `%s` type.", e, typeof t);
    }, rS = function(e, t) {
      var i = e.namespaceURI === Va ? e.ownerDocument.createElement(e.tagName) : e.ownerDocument.createElementNS(e.namespaceURI, e.tagName);
      return i.innerHTML = t, i.innerHTML;
    };
    var gC = /\r\n?/g, SC = /\u0000|\uFFFD/g;
    function Rm(e) {
      Wr(e);
      var t = typeof e == "string" ? e : "" + e;
      return t.replace(gC, `
`).replace(SC, "");
    }
    function Tm(e, t, i, a) {
      var o = Rm(t), s = Rm(e);
      if (s !== o && (a && (Ii || (Ii = true, g('Text content did not match. Server: "%s" Client: "%s"', s, o))), i && Ne))
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function iS(e) {
      return e.nodeType === ia ? e : e.ownerDocument;
    }
    function bC() {
    }
    function wm(e) {
      e.onclick = bC;
    }
    function _C(e, t, i, a, o) {
      for (var s in a)
        if (a.hasOwnProperty(s)) {
          var f = a[s];
          if (s === Hs)
            f && Object.freeze(f), Cv(t, f);
          else if (s === cp) {
            var p = f ? f[Cm] : void 0;
            p != null && dv(t, p);
          } else if (s === Fs)
            if (typeof f == "string") {
              var v = e !== "textarea" || f !== "";
              v && cc(t, f);
            } else
              typeof f == "number" && cc(t, "" + f);
          else
            s === Em || s === zu || s === eS || (It.hasOwnProperty(s) ? f != null && (typeof f != "function" && xm(s, f), s === "onScroll" && xn("scroll", t)) : f != null && wi(t, s, f, o));
        }
    }
    function EC(e, t, i, a) {
      for (var o = 0; o < t.length; o += 2) {
        var s = t[o], f = t[o + 1];
        s === Hs ? Cv(e, f) : s === cp ? dv(e, f) : s === Fs ? cc(e, f) : wi(e, s, f, a);
      }
    }
    function CC(e, t, i, a) {
      var o, s = iS(i), f, p = a;
      if (p === Va && (p = uc(e)), p === Va) {
        if (o = ja(e, t), !o && e !== e.toLowerCase() && g("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", e), e === "script") {
          var v = s.createElement("div");
          v.innerHTML = "<script></script>";
          var y = v.firstChild;
          f = v.removeChild(y);
        } else if (typeof t.is == "string")
          f = s.createElement(e, {
            is: t.is
          });
        else if (f = s.createElement(e), e === "select") {
          var S = f;
          t.multiple ? S.multiple = true : t.size && (S.size = t.size);
        }
      } else
        f = s.createElementNS(p, e);
      return p === Va && !o && Object.prototype.toString.call(f) === "[object HTMLUnknownElement]" && !Qn.call(Iy, e) && (Iy[e] = true, g("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", e)), f;
    }
    function kC(e, t) {
      return iS(t).createTextNode(e);
    }
    function xC(e, t, i, a) {
      var o = ja(t, i);
      km(t, i);
      var s;
      switch (t) {
        case "dialog":
          xn("cancel", e), xn("close", e), s = i;
          break;
        case "iframe":
        case "object":
        case "embed":
          xn("load", e), s = i;
          break;
        case "video":
        case "audio":
          for (var f = 0; f < op.length; f++)
            xn(op[f], e);
          s = i;
          break;
        case "source":
          xn("error", e), s = i;
          break;
        case "img":
        case "image":
        case "link":
          xn("error", e), xn("load", e), s = i;
          break;
        case "details":
          xn("toggle", e), s = i;
          break;
        case "input":
          k(e, i), s = m(e, i), xn("invalid", e);
          break;
        case "option":
          Jt(e, i), s = i;
          break;
        case "select":
          as(e, i), s = is(e, i), xn("invalid", e);
          break;
        case "textarea":
          sv(e, i), s = Jf(e, i), xn("invalid", e);
          break;
        default:
          s = i;
      }
      switch (dc(t, s), _C(t, e, a, s, o), t) {
        case "input":
          Di(e), ue(e, i, false);
          break;
        case "textarea":
          Di(e), fv(e);
          break;
        case "option":
          an(e, i);
          break;
        case "select":
          Kf(e, i);
          break;
        default:
          typeof s.onClick == "function" && wm(e);
          break;
      }
    }
    function RC(e, t, i, a, o) {
      km(t, a);
      var s = null, f, p;
      switch (t) {
        case "input":
          f = m(e, i), p = m(e, a), s = [];
          break;
        case "select":
          f = is(e, i), p = is(e, a), s = [];
          break;
        case "textarea":
          f = Jf(e, i), p = Jf(e, a), s = [];
          break;
        default:
          f = i, p = a, typeof f.onClick != "function" && typeof p.onClick == "function" && wm(e);
          break;
      }
      dc(t, p);
      var v, y, S = null;
      for (v in f)
        if (!(p.hasOwnProperty(v) || !f.hasOwnProperty(v) || f[v] == null))
          if (v === Hs) {
            var O = f[v];
            for (y in O)
              O.hasOwnProperty(y) && (S || (S = {}), S[y] = "");
          } else
            v === cp || v === Fs || v === Em || v === zu || v === eS || (It.hasOwnProperty(v) ? s || (s = []) : (s = s || []).push(v, null));
      for (v in p) {
        var N = p[v], U = f != null ? f[v] : void 0;
        if (!(!p.hasOwnProperty(v) || N === U || N == null && U == null))
          if (v === Hs)
            if (N && Object.freeze(N), U) {
              for (y in U)
                U.hasOwnProperty(y) && (!N || !N.hasOwnProperty(y)) && (S || (S = {}), S[y] = "");
              for (y in N)
                N.hasOwnProperty(y) && U[y] !== N[y] && (S || (S = {}), S[y] = N[y]);
            } else
              S || (s || (s = []), s.push(v, S)), S = N;
          else if (v === cp) {
            var F = N ? N[Cm] : void 0, I = U ? U[Cm] : void 0;
            F != null && I !== F && (s = s || []).push(v, F);
          } else
            v === Fs ? (typeof N == "string" || typeof N == "number") && (s = s || []).push(v, "" + N) : v === Em || v === zu || (It.hasOwnProperty(v) ? (N != null && (typeof N != "function" && xm(v, N), v === "onScroll" && xn("scroll", e)), !s && U !== N && (s = [])) : (s = s || []).push(v, N));
      }
      return S && (os(S, p[Hs]), (s = s || []).push(Hs, S)), s;
    }
    function TC(e, t, i, a, o) {
      i === "input" && o.type === "radio" && o.name != null && j(e, o);
      var s = ja(i, a), f = ja(i, o);
      switch (EC(e, t, s, f), i) {
        case "input":
          B(e, o);
          break;
        case "textarea":
          cv(e, o);
          break;
        case "select":
          ty(e, o);
          break;
      }
    }
    function wC(e) {
      {
        var t = e.toLowerCase();
        return pc.hasOwnProperty(t) && pc[t] || null;
      }
    }
    function NC(e, t, i, a, o, s, f) {
      var p, v;
      switch (p = ja(t, i), km(t, i), t) {
        case "dialog":
          xn("cancel", e), xn("close", e);
          break;
        case "iframe":
        case "object":
        case "embed":
          xn("load", e);
          break;
        case "video":
        case "audio":
          for (var y = 0; y < op.length; y++)
            xn(op[y], e);
          break;
        case "source":
          xn("error", e);
          break;
        case "img":
        case "image":
        case "link":
          xn("error", e), xn("load", e);
          break;
        case "details":
          xn("toggle", e);
          break;
        case "input":
          k(e, i), xn("invalid", e);
          break;
        case "option":
          Jt(e, i);
          break;
        case "select":
          as(e, i), xn("invalid", e);
          break;
        case "textarea":
          sv(e, i), xn("invalid", e);
          break;
      }
      dc(t, i);
      {
        v = /* @__PURE__ */ new Set();
        for (var S = e.attributes, O = 0; O < S.length; O++) {
          var N = S[O].name.toLowerCase();
          switch (N) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              v.add(S[O].name);
          }
        }
      }
      var U = null;
      for (var F in i)
        if (i.hasOwnProperty(F)) {
          var I = i[F];
          if (F === Fs)
            typeof I == "string" ? e.textContent !== I && (i[zu] !== true && Tm(e.textContent, I, s, f), U = [Fs, I]) : typeof I == "number" && e.textContent !== "" + I && (i[zu] !== true && Tm(e.textContent, I, s, f), U = [Fs, "" + I]);
          else if (It.hasOwnProperty(F))
            I != null && (typeof I != "function" && xm(F, I), F === "onScroll" && xn("scroll", e));
          else if (f && // Convince Flow we've calculated it (it's DEV-only in this method.)
          typeof p == "boolean") {
            var Re = void 0, Ye = p && it ? null : wr(F);
            if (i[zu] !== true) {
              if (!(F === Em || F === zu || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              F === "value" || F === "checked" || F === "selected")) {
                if (F === cp) {
                  var Ue = e.innerHTML, Dt = I ? I[Cm] : void 0;
                  if (Dt != null) {
                    var Et = rS(e, Dt);
                    Et !== Ue && fp(F, Ue, Et);
                  }
                } else if (F === Hs) {
                  if (v.delete(F), nS) {
                    var A = sy(I);
                    Re = e.getAttribute("style"), A !== Re && fp(F, Re, A);
                  }
                } else if (p && !it)
                  v.delete(F.toLowerCase()), Re = pa(e, F, I), I !== Re && fp(F, Re, I);
                else if (!Sn(F, Ye, p) && !Zt(F, I, Ye, p)) {
                  var $ = false;
                  if (Ye !== null)
                    v.delete(Ye.attributeName), Re = mi(e, F, I, Ye);
                  else {
                    var z = a;
                    if (z === Va && (z = uc(t)), z === Va)
                      v.delete(F.toLowerCase());
                    else {
                      var le = wC(F);
                      le !== null && le !== F && ($ = true, v.delete(le)), v.delete(F);
                    }
                    Re = pa(e, F, I);
                  }
                  var Te = it;
                  !Te && I !== Re && !$ && fp(F, Re, I);
                }
              }
            }
          }
        }
      switch (f && // $FlowFixMe - Should be inferred as not undefined.
      v.size > 0 && i[zu] !== true && tS(v), t) {
        case "input":
          Di(e), ue(e, i, true);
          break;
        case "textarea":
          Di(e), fv(e);
          break;
        case "select":
        case "option":
          break;
        default:
          typeof i.onClick == "function" && wm(e);
          break;
      }
      return U;
    }
    function DC(e, t, i) {
      var a = e.nodeValue !== t;
      return a;
    }
    function $y(e, t) {
      {
        if (Ii)
          return;
        Ii = true, g("Did not expect server HTML to contain a <%s> in <%s>.", t.nodeName.toLowerCase(), e.nodeName.toLowerCase());
      }
    }
    function Yy(e, t) {
      {
        if (Ii)
          return;
        Ii = true, g('Did not expect server HTML to contain the text node "%s" in <%s>.', t.nodeValue, e.nodeName.toLowerCase());
      }
    }
    function Wy(e, t, i) {
      {
        if (Ii)
          return;
        Ii = true, g("Expected server HTML to contain a matching <%s> in <%s>.", t, e.nodeName.toLowerCase());
      }
    }
    function Qy(e, t) {
      {
        if (t === "" || Ii)
          return;
        Ii = true, g('Expected server HTML to contain a matching text node for "%s" in <%s>.', t, e.nodeName.toLowerCase());
      }
    }
    function OC(e, t, i) {
      switch (t) {
        case "input":
          Ge(e, i);
          return;
        case "textarea":
          ed(e, i);
          return;
        case "select":
          ny(e, i);
          return;
      }
    }
    var dp = function() {
    }, pp = function() {
    };
    {
      var LC = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], aS = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
      ], MC = aS.concat(["button"]), AC = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], lS = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      pp = function(e, t) {
        var i = pt({}, e || lS), a = {
          tag: t
        };
        return aS.indexOf(t) !== -1 && (i.aTagInScope = null, i.buttonTagInScope = null, i.nobrTagInScope = null), MC.indexOf(t) !== -1 && (i.pTagInButtonScope = null), LC.indexOf(t) !== -1 && t !== "address" && t !== "div" && t !== "p" && (i.listItemTagAutoclosing = null, i.dlItemTagAutoclosing = null), i.current = a, t === "form" && (i.formTag = a), t === "a" && (i.aTagInScope = a), t === "button" && (i.buttonTagInScope = a), t === "nobr" && (i.nobrTagInScope = a), t === "p" && (i.pTagInButtonScope = a), t === "li" && (i.listItemTagAutoclosing = a), (t === "dd" || t === "dt") && (i.dlItemTagAutoclosing = a), i;
      };
      var zC = function(e, t) {
        switch (t) {
          case "select":
            return e === "option" || e === "optgroup" || e === "#text";
          case "optgroup":
            return e === "option" || e === "#text";
          case "option":
            return e === "#text";
          case "tr":
            return e === "th" || e === "td" || e === "style" || e === "script" || e === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return e === "tr" || e === "style" || e === "script" || e === "template";
          case "colgroup":
            return e === "col" || e === "template";
          case "table":
            return e === "caption" || e === "colgroup" || e === "tbody" || e === "tfoot" || e === "thead" || e === "style" || e === "script" || e === "template";
          case "head":
            return e === "base" || e === "basefont" || e === "bgsound" || e === "link" || e === "meta" || e === "title" || e === "noscript" || e === "noframes" || e === "style" || e === "script" || e === "template";
          case "html":
            return e === "head" || e === "body" || e === "frameset";
          case "frameset":
            return e === "frame";
          case "#document":
            return e === "html";
        }
        switch (e) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return t !== "h1" && t !== "h2" && t !== "h3" && t !== "h4" && t !== "h5" && t !== "h6";
          case "rp":
          case "rt":
            return AC.indexOf(t) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return t == null;
        }
        return true;
      }, VC = function(e, t) {
        switch (e) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return t.pTagInButtonScope;
          case "form":
            return t.formTag || t.pTagInButtonScope;
          case "li":
            return t.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return t.dlItemTagAutoclosing;
          case "button":
            return t.buttonTagInScope;
          case "a":
            return t.aTagInScope;
          case "nobr":
            return t.nobrTagInScope;
        }
        return null;
      }, oS = {};
      dp = function(e, t, i) {
        i = i || lS;
        var a = i.current, o = a && a.tag;
        t != null && (e != null && g("validateDOMNesting: when childText is passed, childTag should be null"), e = "#text");
        var s = zC(e, o) ? null : a, f = s ? null : VC(e, i), p = s || f;
        if (p) {
          var v = p.tag, y = !!s + "|" + e + "|" + v;
          if (!oS[y]) {
            oS[y] = true;
            var S = e, O = "";
            if (e === "#text" ? /\S/.test(t) ? S = "Text nodes" : (S = "Whitespace text nodes", O = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : S = "<" + e + ">", s) {
              var N = "";
              v === "table" && e === "tr" && (N += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), g("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", S, v, O, N);
            } else
              g("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", S, v);
          }
        }
      };
    }
    var Nm = "suppressHydrationWarning", Dm = "$", Om = "/$", vp = "$?", mp = "$!", UC = "style", Gy = null, qy = null;
    function jC(e) {
      var t, i, a = e.nodeType;
      switch (a) {
        case ia:
        case ao: {
          t = a === ia ? "#document" : "#fragment";
          var o = e.documentElement;
          i = o ? o.namespaceURI : nd(null, "");
          break;
        }
        default: {
          var s = a === zn ? e.parentNode : e, f = s.namespaceURI || null;
          t = s.tagName, i = nd(f, t);
          break;
        }
      }
      {
        var p = t.toLowerCase(), v = pp(null, p);
        return {
          namespace: i,
          ancestorInfo: v
        };
      }
    }
    function FC(e, t, i) {
      {
        var a = e, o = nd(a.namespace, t), s = pp(a.ancestorInfo, t);
        return {
          namespace: o,
          ancestorInfo: s
        };
      }
    }
    function _2(e) {
      return e;
    }
    function HC(e) {
      Gy = _i(), qy = eC();
      var t = null;
      return er(false), t;
    }
    function PC(e) {
      tC(qy), er(Gy), Gy = null, qy = null;
    }
    function BC(e, t, i, a, o) {
      var s;
      {
        var f = a;
        if (dp(e, null, f.ancestorInfo), typeof t.children == "string" || typeof t.children == "number") {
          var p = "" + t.children, v = pp(f.ancestorInfo, e);
          dp(null, p, v);
        }
        s = f.namespace;
      }
      var y = CC(e, t, i, s);
      return gp(o, y), rg(y, t), y;
    }
    function IC(e, t) {
      e.appendChild(t);
    }
    function $C(e, t, i, a, o) {
      switch (xC(e, t, i, a), t) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!i.autoFocus;
        case "img":
          return true;
        default:
          return false;
      }
    }
    function YC(e, t, i, a, o, s) {
      {
        var f = s;
        if (typeof a.children != typeof i.children && (typeof a.children == "string" || typeof a.children == "number")) {
          var p = "" + a.children, v = pp(f.ancestorInfo, t);
          dp(null, p, v);
        }
      }
      return RC(e, t, i, a);
    }
    function Xy(e, t) {
      return e === "textarea" || e === "noscript" || typeof t.children == "string" || typeof t.children == "number" || typeof t.dangerouslySetInnerHTML == "object" && t.dangerouslySetInnerHTML !== null && t.dangerouslySetInnerHTML.__html != null;
    }
    function WC(e, t, i, a) {
      {
        var o = i;
        dp(null, e, o.ancestorInfo);
      }
      var s = kC(e, t);
      return gp(a, s), s;
    }
    function QC() {
      var e = window.event;
      return e === void 0 ? Wa : Lr(e.type);
    }
    var Ky = typeof setTimeout == "function" ? setTimeout : void 0, GC = typeof clearTimeout == "function" ? clearTimeout : void 0, Zy = -1, uS = typeof Promise == "function" ? Promise : void 0, qC = typeof queueMicrotask == "function" ? queueMicrotask : typeof uS < "u" ? function(e) {
      return uS.resolve(null).then(e).catch(XC);
    } : Ky;
    function XC(e) {
      setTimeout(function() {
        throw e;
      });
    }
    function KC(e, t, i, a) {
      switch (t) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          i.autoFocus && e.focus();
          return;
        case "img": {
          i.src && (e.src = i.src);
          return;
        }
      }
    }
    function ZC(e, t, i, a, o, s) {
      TC(e, t, i, a, o), rg(e, o);
    }
    function sS(e) {
      cc(e, "");
    }
    function JC(e, t, i) {
      e.nodeValue = i;
    }
    function ek(e, t) {
      e.appendChild(t);
    }
    function tk(e, t) {
      var i;
      e.nodeType === zn ? (i = e.parentNode, i.insertBefore(t, e)) : (i = e, i.appendChild(t));
      var a = e._reactRootContainer;
      a == null && i.onclick === null && wm(i);
    }
    function nk(e, t, i) {
      e.insertBefore(t, i);
    }
    function rk(e, t, i) {
      e.nodeType === zn ? e.parentNode.insertBefore(t, i) : e.insertBefore(t, i);
    }
    function ik(e, t) {
      e.removeChild(t);
    }
    function ak(e, t) {
      e.nodeType === zn ? e.parentNode.removeChild(t) : e.removeChild(t);
    }
    function Jy(e, t) {
      var i = t, a = 0;
      do {
        var o = i.nextSibling;
        if (e.removeChild(i), o && o.nodeType === zn) {
          var s = o.data;
          if (s === Om)
            if (a === 0) {
              e.removeChild(o), _t(t);
              return;
            } else
              a--;
          else
            (s === Dm || s === vp || s === mp) && a++;
        }
        i = o;
      } while (i);
      _t(t);
    }
    function lk(e, t) {
      e.nodeType === zn ? Jy(e.parentNode, t) : e.nodeType === Zr && Jy(e, t), _t(e);
    }
    function ok(e) {
      e = e;
      var t = e.style;
      typeof t.setProperty == "function" ? t.setProperty("display", "none", "important") : t.display = "none";
    }
    function uk(e) {
      e.nodeValue = "";
    }
    function sk(e, t) {
      e = e;
      var i = t[UC], a = i != null && i.hasOwnProperty("display") ? i.display : null;
      e.style.display = fc("display", a);
    }
    function ck(e, t) {
      e.nodeValue = t;
    }
    function fk(e) {
      e.nodeType === Zr ? e.textContent = "" : e.nodeType === ia && e.documentElement && e.removeChild(e.documentElement);
    }
    function dk(e, t, i) {
      return e.nodeType !== Zr || t.toLowerCase() !== e.nodeName.toLowerCase() ? null : e;
    }
    function pk(e, t) {
      return t === "" || e.nodeType !== Ua ? null : e;
    }
    function vk(e) {
      return e.nodeType !== zn ? null : e;
    }
    function cS(e) {
      return e.data === vp;
    }
    function eg(e) {
      return e.data === mp;
    }
    function mk(e) {
      var t = e.nextSibling && e.nextSibling.dataset, i, a, o;
      return t && (i = t.dgst, a = t.msg, o = t.stck), {
        message: a,
        digest: i,
        stack: o
      };
    }
    function hk(e, t) {
      e._reactRetry = t;
    }
    function Lm(e) {
      for (; e != null; e = e.nextSibling) {
        var t = e.nodeType;
        if (t === Zr || t === Ua)
          break;
        if (t === zn) {
          var i = e.data;
          if (i === Dm || i === mp || i === vp)
            break;
          if (i === Om)
            return null;
        }
      }
      return e;
    }
    function hp(e) {
      return Lm(e.nextSibling);
    }
    function yk(e) {
      return Lm(e.firstChild);
    }
    function gk(e) {
      return Lm(e.firstChild);
    }
    function Sk(e) {
      return Lm(e.nextSibling);
    }
    function bk(e, t, i, a, o, s, f) {
      gp(s, e), rg(e, i);
      var p;
      {
        var v = o;
        p = v.namespace;
      }
      var y = (s.mode & mt) !== Qe;
      return NC(e, t, i, p, a, y, f);
    }
    function _k(e, t, i, a) {
      return gp(i, e), i.mode & mt, DC(e, t);
    }
    function Ek(e, t) {
      gp(t, e);
    }
    function Ck(e) {
      for (var t = e.nextSibling, i = 0; t; ) {
        if (t.nodeType === zn) {
          var a = t.data;
          if (a === Om) {
            if (i === 0)
              return hp(t);
            i--;
          } else
            (a === Dm || a === mp || a === vp) && i++;
        }
        t = t.nextSibling;
      }
      return null;
    }
    function fS(e) {
      for (var t = e.previousSibling, i = 0; t; ) {
        if (t.nodeType === zn) {
          var a = t.data;
          if (a === Dm || a === mp || a === vp) {
            if (i === 0)
              return t;
            i--;
          } else
            a === Om && i++;
        }
        t = t.previousSibling;
      }
      return null;
    }
    function kk(e) {
      _t(e);
    }
    function xk(e) {
      _t(e);
    }
    function Rk(e) {
      return e !== "head" && e !== "body";
    }
    function Tk(e, t, i, a) {
      var o = true;
      Tm(t.nodeValue, i, a, o);
    }
    function wk(e, t, i, a, o, s) {
      if (t[Nm] !== true) {
        var f = true;
        Tm(a.nodeValue, o, s, f);
      }
    }
    function Nk(e, t) {
      t.nodeType === Zr ? $y(e, t) : t.nodeType === zn || Yy(e, t);
    }
    function Dk(e, t) {
      {
        var i = e.parentNode;
        i !== null && (t.nodeType === Zr ? $y(i, t) : t.nodeType === zn || Yy(i, t));
      }
    }
    function Ok(e, t, i, a, o) {
      (o || t[Nm] !== true) && (a.nodeType === Zr ? $y(i, a) : a.nodeType === zn || Yy(i, a));
    }
    function Lk(e, t, i) {
      Wy(e, t);
    }
    function Mk(e, t) {
      Qy(e, t);
    }
    function Ak(e, t, i) {
      {
        var a = e.parentNode;
        a !== null && Wy(a, t);
      }
    }
    function zk(e, t) {
      {
        var i = e.parentNode;
        i !== null && Qy(i, t);
      }
    }
    function Vk(e, t, i, a, o, s) {
      (s || t[Nm] !== true) && Wy(i, a);
    }
    function Uk(e, t, i, a, o) {
      (o || t[Nm] !== true) && Qy(i, a);
    }
    function jk(e) {
      g("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", e.nodeName.toLowerCase());
    }
    function Fk(e) {
      up(e);
    }
    var gf = Math.random().toString(36).slice(2), Sf = "__reactFiber$" + gf, tg = "__reactProps$" + gf, yp = "__reactContainer$" + gf, ng = "__reactEvents$" + gf, Hk = "__reactListeners$" + gf, Pk = "__reactHandles$" + gf;
    function Bk(e) {
      delete e[Sf], delete e[tg], delete e[ng], delete e[Hk], delete e[Pk];
    }
    function gp(e, t) {
      t[Sf] = e;
    }
    function Mm(e, t) {
      t[yp] = e;
    }
    function dS(e) {
      e[yp] = null;
    }
    function Sp(e) {
      return !!e[yp];
    }
    function Ps(e) {
      var t = e[Sf];
      if (t)
        return t;
      for (var i = e.parentNode; i; ) {
        if (t = i[yp] || i[Sf], t) {
          var a = t.alternate;
          if (t.child !== null || a !== null && a.child !== null)
            for (var o = fS(e); o !== null; ) {
              var s = o[Sf];
              if (s)
                return s;
              o = fS(o);
            }
          return t;
        }
        e = i, i = e.parentNode;
      }
      return null;
    }
    function Vu(e) {
      var t = e[Sf] || e[yp];
      return t && (t.tag === q || t.tag === fe || t.tag === be || t.tag === W) ? t : null;
    }
    function bf(e) {
      if (e.tag === q || e.tag === fe)
        return e.stateNode;
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function Am(e) {
      return e[tg] || null;
    }
    function rg(e, t) {
      e[tg] = t;
    }
    function Ik(e) {
      var t = e[ng];
      return t === void 0 && (t = e[ng] = /* @__PURE__ */ new Set()), t;
    }
    var pS = {}, vS = b.ReactDebugCurrentFrame;
    function zm(e) {
      if (e) {
        var t = e._owner, i = ha(e.type, e._source, t ? t.type : null);
        vS.setExtraStackFrame(i);
      } else
        vS.setExtraStackFrame(null);
    }
    function Ka(e, t, i, a, o) {
      {
        var s = Function.call.bind(Qn);
        for (var f in e)
          if (s(e, f)) {
            var p = void 0;
            try {
              if (typeof e[f] != "function") {
                var v = Error((a || "React class") + ": " + i + " type `" + f + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof e[f] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw v.name = "Invariant Violation", v;
              }
              p = e[f](t, f, a, i, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (y) {
              p = y;
            }
            p && !(p instanceof Error) && (zm(o), g("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", a || "React class", i, f, typeof p), zm(null)), p instanceof Error && !(p.message in pS) && (pS[p.message] = true, zm(o), g("Failed %s type: %s", i, p.message), zm(null));
          }
      }
    }
    var ig = [], Vm;
    Vm = [];
    var Ao = -1;
    function Uu(e) {
      return {
        current: e
      };
    }
    function oi(e, t) {
      if (Ao < 0) {
        g("Unexpected pop.");
        return;
      }
      t !== Vm[Ao] && g("Unexpected Fiber popped."), e.current = ig[Ao], ig[Ao] = null, Vm[Ao] = null, Ao--;
    }
    function ui(e, t, i) {
      Ao++, ig[Ao] = e.current, Vm[Ao] = i, e.current = t;
    }
    var ag;
    ag = {};
    var sa = {};
    Object.freeze(sa);
    var zo = Uu(sa), Il = Uu(false), lg = sa;
    function _f(e, t, i) {
      return i && $l(t) ? lg : zo.current;
    }
    function mS(e, t, i) {
      {
        var a = e.stateNode;
        a.__reactInternalMemoizedUnmaskedChildContext = t, a.__reactInternalMemoizedMaskedChildContext = i;
      }
    }
    function Ef(e, t) {
      {
        var i = e.type, a = i.contextTypes;
        if (!a)
          return sa;
        var o = e.stateNode;
        if (o && o.__reactInternalMemoizedUnmaskedChildContext === t)
          return o.__reactInternalMemoizedMaskedChildContext;
        var s = {};
        for (var f in a)
          s[f] = t[f];
        {
          var p = at(e) || "Unknown";
          Ka(a, s, "context", p);
        }
        return o && mS(e, t, s), s;
      }
    }
    function Um() {
      return Il.current;
    }
    function $l(e) {
      {
        var t = e.childContextTypes;
        return t != null;
      }
    }
    function jm(e) {
      oi(Il, e), oi(zo, e);
    }
    function og(e) {
      oi(Il, e), oi(zo, e);
    }
    function hS(e, t, i) {
      {
        if (zo.current !== sa)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        ui(zo, t, e), ui(Il, i, e);
      }
    }
    function yS(e, t, i) {
      {
        var a = e.stateNode, o = t.childContextTypes;
        if (typeof a.getChildContext != "function") {
          {
            var s = at(e) || "Unknown";
            ag[s] || (ag[s] = true, g("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", s, s));
          }
          return i;
        }
        var f = a.getChildContext();
        for (var p in f)
          if (!(p in o))
            throw new Error((at(e) || "Unknown") + '.getChildContext(): key "' + p + '" is not defined in childContextTypes.');
        {
          var v = at(e) || "Unknown";
          Ka(o, f, "child context", v);
        }
        return pt({}, i, f);
      }
    }
    function Fm(e) {
      {
        var t = e.stateNode, i = t && t.__reactInternalMemoizedMergedChildContext || sa;
        return lg = zo.current, ui(zo, i, e), ui(Il, Il.current, e), true;
      }
    }
    function gS(e, t, i) {
      {
        var a = e.stateNode;
        if (!a)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (i) {
          var o = yS(e, t, lg);
          a.__reactInternalMemoizedMergedChildContext = o, oi(Il, e), oi(zo, e), ui(zo, o, e), ui(Il, i, e);
        } else
          oi(Il, e), ui(Il, i, e);
      }
    }
    function $k(e) {
      {
        if (!Ed(e) || e.tag !== Q)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var t = e;
        do {
          switch (t.tag) {
            case W:
              return t.stateNode.context;
            case Q: {
              var i = t.type;
              if ($l(i))
                return t.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          t = t.return;
        } while (t !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var ju = 0, Hm = 1, Vo = null, ug = false, sg = false;
    function SS(e) {
      Vo === null ? Vo = [e] : Vo.push(e);
    }
    function Yk(e) {
      ug = true, SS(e);
    }
    function bS() {
      ug && Fu();
    }
    function Fu() {
      if (!sg && Vo !== null) {
        sg = true;
        var e = 0, t = Fi();
        try {
          var i = true, a = Vo;
          for (In(_r); e < a.length; e++) {
            var o = a[e];
            do
              o = o(i);
            while (o !== null);
          }
          Vo = null, ug = false;
        } catch (s) {
          throw Vo !== null && (Vo = Vo.slice(e + 1)), Ec(kc, Fu), s;
        } finally {
          In(t), sg = false;
        }
      }
      return null;
    }
    var Cf = [], kf = 0, Pm = null, Bm = 0, xa = [], Ra = 0, Bs = null, Uo = 1, jo = "";
    function Wk(e) {
      return $s(), (e.flags & Sd) !== $e;
    }
    function Qk(e) {
      return $s(), Bm;
    }
    function Gk() {
      var e = jo, t = Uo, i = t & ~qk(t);
      return i.toString(32) + e;
    }
    function Is(e, t) {
      $s(), Cf[kf++] = Bm, Cf[kf++] = Pm, Pm = e, Bm = t;
    }
    function _S(e, t, i) {
      $s(), xa[Ra++] = Uo, xa[Ra++] = jo, xa[Ra++] = Bs, Bs = e;
      var a = Uo, o = jo, s = Im(a) - 1, f = a & ~(1 << s), p = i + 1, v = Im(t) + s;
      if (v > 30) {
        var y = s - s % 5, S = (1 << y) - 1, O = (f & S).toString(32), N = f >> y, U = s - y, F = Im(t) + U, I = p << U, Re = I | N, Ye = O + o;
        Uo = 1 << F | Re, jo = Ye;
      } else {
        var Ue = p << s, Dt = Ue | f, Et = o;
        Uo = 1 << v | Dt, jo = Et;
      }
    }
    function cg(e) {
      $s();
      var t = e.return;
      if (t !== null) {
        var i = 1, a = 0;
        Is(e, i), _S(e, i, a);
      }
    }
    function Im(e) {
      return 32 - Dc(e);
    }
    function qk(e) {
      return 1 << Im(e) - 1;
    }
    function fg(e) {
      for (; e === Pm; )
        Pm = Cf[--kf], Cf[kf] = null, Bm = Cf[--kf], Cf[kf] = null;
      for (; e === Bs; )
        Bs = xa[--Ra], xa[Ra] = null, jo = xa[--Ra], xa[Ra] = null, Uo = xa[--Ra], xa[Ra] = null;
    }
    function Xk() {
      return $s(), Bs !== null ? {
        id: Uo,
        overflow: jo
      } : null;
    }
    function Kk(e, t) {
      $s(), xa[Ra++] = Uo, xa[Ra++] = jo, xa[Ra++] = Bs, Uo = t.id, jo = t.overflow, Bs = e;
    }
    function $s() {
      Ar() || g("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var Mr = null, Ta = null, Za = false, Ys = false, Hu = null;
    function Zk() {
      Za && g("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function ES() {
      Ys = true;
    }
    function Jk() {
      return Ys;
    }
    function ex(e) {
      var t = e.stateNode.containerInfo;
      return Ta = gk(t), Mr = e, Za = true, Hu = null, Ys = false, true;
    }
    function tx(e, t, i) {
      return Ta = Sk(t), Mr = e, Za = true, Hu = null, Ys = false, i !== null && Kk(e, i), true;
    }
    function CS(e, t) {
      switch (e.tag) {
        case W: {
          Nk(e.stateNode.containerInfo, t);
          break;
        }
        case q: {
          var i = (e.mode & mt) !== Qe;
          Ok(
            e.type,
            e.memoizedProps,
            e.stateNode,
            t,
            // TODO: Delete this argument when we remove the legacy root API.
            i
          );
          break;
        }
        case be: {
          var a = e.memoizedState;
          a.dehydrated !== null && Dk(a.dehydrated, t);
          break;
        }
      }
    }
    function kS(e, t) {
      CS(e, t);
      var i = iw();
      i.stateNode = t, i.return = e;
      var a = e.deletions;
      a === null ? (e.deletions = [i], e.flags |= Bt) : a.push(i);
    }
    function dg(e, t) {
      {
        if (Ys)
          return;
        switch (e.tag) {
          case W: {
            var i = e.stateNode.containerInfo;
            switch (t.tag) {
              case q:
                var a = t.type;
                t.pendingProps, Lk(i, a);
                break;
              case fe:
                var o = t.pendingProps;
                Mk(i, o);
                break;
            }
            break;
          }
          case q: {
            var s = e.type, f = e.memoizedProps, p = e.stateNode;
            switch (t.tag) {
              case q: {
                var v = t.type, y = t.pendingProps, S = (e.mode & mt) !== Qe;
                Vk(
                  s,
                  f,
                  p,
                  v,
                  y,
                  // TODO: Delete this argument when we remove the legacy root API.
                  S
                );
                break;
              }
              case fe: {
                var O = t.pendingProps, N = (e.mode & mt) !== Qe;
                Uk(
                  s,
                  f,
                  p,
                  O,
                  // TODO: Delete this argument when we remove the legacy root API.
                  N
                );
                break;
              }
            }
            break;
          }
          case be: {
            var U = e.memoizedState, F = U.dehydrated;
            if (F !== null)
              switch (t.tag) {
                case q:
                  var I = t.type;
                  t.pendingProps, Ak(F, I);
                  break;
                case fe:
                  var Re = t.pendingProps;
                  zk(F, Re);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function xS(e, t) {
      t.flags = t.flags & ~Ai | sn, dg(e, t);
    }
    function RS(e, t) {
      switch (e.tag) {
        case q: {
          var i = e.type;
          e.pendingProps;
          var a = dk(t, i);
          return a !== null ? (e.stateNode = a, Mr = e, Ta = yk(a), true) : false;
        }
        case fe: {
          var o = e.pendingProps, s = pk(t, o);
          return s !== null ? (e.stateNode = s, Mr = e, Ta = null, true) : false;
        }
        case be: {
          var f = vk(t);
          if (f !== null) {
            var p = {
              dehydrated: f,
              treeContext: Xk(),
              retryLane: ai
            };
            e.memoizedState = p;
            var v = aw(f);
            return v.return = e, e.child = v, Mr = e, Ta = null, true;
          }
          return false;
        }
        default:
          return false;
      }
    }
    function pg(e) {
      return (e.mode & mt) !== Qe && (e.flags & tt) === $e;
    }
    function vg(e) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function mg(e) {
      if (Za) {
        var t = Ta;
        if (!t) {
          pg(e) && (dg(Mr, e), vg()), xS(Mr, e), Za = false, Mr = e;
          return;
        }
        var i = t;
        if (!RS(e, t)) {
          pg(e) && (dg(Mr, e), vg()), t = hp(i);
          var a = Mr;
          if (!t || !RS(e, t)) {
            xS(Mr, e), Za = false, Mr = e;
            return;
          }
          kS(a, i);
        }
      }
    }
    function nx(e, t, i) {
      var a = e.stateNode, o = !Ys, s = bk(a, e.type, e.memoizedProps, t, i, e, o);
      return e.updateQueue = s, s !== null;
    }
    function rx(e) {
      var t = e.stateNode, i = e.memoizedProps, a = _k(t, i, e);
      if (a) {
        var o = Mr;
        if (o !== null)
          switch (o.tag) {
            case W: {
              var s = o.stateNode.containerInfo, f = (o.mode & mt) !== Qe;
              Tk(
                s,
                t,
                i,
                // TODO: Delete this argument when we remove the legacy root API.
                f
              );
              break;
            }
            case q: {
              var p = o.type, v = o.memoizedProps, y = o.stateNode, S = (o.mode & mt) !== Qe;
              wk(
                p,
                v,
                y,
                t,
                i,
                // TODO: Delete this argument when we remove the legacy root API.
                S
              );
              break;
            }
          }
      }
      return a;
    }
    function ix(e) {
      var t = e.memoizedState, i = t !== null ? t.dehydrated : null;
      if (!i)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      Ek(i, e);
    }
    function ax(e) {
      var t = e.memoizedState, i = t !== null ? t.dehydrated : null;
      if (!i)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return Ck(i);
    }
    function TS(e) {
      for (var t = e.return; t !== null && t.tag !== q && t.tag !== W && t.tag !== be; )
        t = t.return;
      Mr = t;
    }
    function $m(e) {
      if (e !== Mr)
        return false;
      if (!Za)
        return TS(e), Za = true, false;
      if (e.tag !== W && (e.tag !== q || Rk(e.type) && !Xy(e.type, e.memoizedProps))) {
        var t = Ta;
        if (t)
          if (pg(e))
            wS(e), vg();
          else
            for (; t; )
              kS(e, t), t = hp(t);
      }
      return TS(e), e.tag === be ? Ta = ax(e) : Ta = Mr ? hp(e.stateNode) : null, true;
    }
    function lx() {
      return Za && Ta !== null;
    }
    function wS(e) {
      for (var t = Ta; t; )
        CS(e, t), t = hp(t);
    }
    function xf() {
      Mr = null, Ta = null, Za = false, Ys = false;
    }
    function NS() {
      Hu !== null && (C_(Hu), Hu = null);
    }
    function Ar() {
      return Za;
    }
    function hg(e) {
      Hu === null ? Hu = [e] : Hu.push(e);
    }
    var ox = b.ReactCurrentBatchConfig, ux = null;
    function sx() {
      return ox.transition;
    }
    var Ja = {
      recordUnsafeLifecycleWarnings: function(e, t) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(e, t) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var cx = function(e) {
        for (var t = null, i = e; i !== null; )
          i.mode & Cn && (t = i), i = i.return;
        return t;
      }, Ws = function(e) {
        var t = [];
        return e.forEach(function(i) {
          t.push(i);
        }), t.sort().join(", ");
      }, bp = [], _p = [], Ep = [], Cp = [], kp = [], xp = [], Qs = /* @__PURE__ */ new Set();
      Ja.recordUnsafeLifecycleWarnings = function(e, t) {
        Qs.has(e.type) || (typeof t.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        t.componentWillMount.__suppressDeprecationWarning !== true && bp.push(e), e.mode & Cn && typeof t.UNSAFE_componentWillMount == "function" && _p.push(e), typeof t.componentWillReceiveProps == "function" && t.componentWillReceiveProps.__suppressDeprecationWarning !== true && Ep.push(e), e.mode & Cn && typeof t.UNSAFE_componentWillReceiveProps == "function" && Cp.push(e), typeof t.componentWillUpdate == "function" && t.componentWillUpdate.__suppressDeprecationWarning !== true && kp.push(e), e.mode & Cn && typeof t.UNSAFE_componentWillUpdate == "function" && xp.push(e));
      }, Ja.flushPendingUnsafeLifecycleWarnings = function() {
        var e = /* @__PURE__ */ new Set();
        bp.length > 0 && (bp.forEach(function(N) {
          e.add(at(N) || "Component"), Qs.add(N.type);
        }), bp = []);
        var t = /* @__PURE__ */ new Set();
        _p.length > 0 && (_p.forEach(function(N) {
          t.add(at(N) || "Component"), Qs.add(N.type);
        }), _p = []);
        var i = /* @__PURE__ */ new Set();
        Ep.length > 0 && (Ep.forEach(function(N) {
          i.add(at(N) || "Component"), Qs.add(N.type);
        }), Ep = []);
        var a = /* @__PURE__ */ new Set();
        Cp.length > 0 && (Cp.forEach(function(N) {
          a.add(at(N) || "Component"), Qs.add(N.type);
        }), Cp = []);
        var o = /* @__PURE__ */ new Set();
        kp.length > 0 && (kp.forEach(function(N) {
          o.add(at(N) || "Component"), Qs.add(N.type);
        }), kp = []);
        var s = /* @__PURE__ */ new Set();
        if (xp.length > 0 && (xp.forEach(function(N) {
          s.add(at(N) || "Component"), Qs.add(N.type);
        }), xp = []), t.size > 0) {
          var f = Ws(t);
          g(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, f);
        }
        if (a.size > 0) {
          var p = Ws(a);
          g(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, p);
        }
        if (s.size > 0) {
          var v = Ws(s);
          g(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, v);
        }
        if (e.size > 0) {
          var y = Ws(e);
          P(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, y);
        }
        if (i.size > 0) {
          var S = Ws(i);
          P(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, S);
        }
        if (o.size > 0) {
          var O = Ws(o);
          P(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, O);
        }
      };
      var Ym = /* @__PURE__ */ new Map(), DS = /* @__PURE__ */ new Set();
      Ja.recordLegacyContextWarning = function(e, t) {
        var i = cx(e);
        if (i === null) {
          g("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (!DS.has(e.type)) {
          var a = Ym.get(i);
          (e.type.contextTypes != null || e.type.childContextTypes != null || t !== null && typeof t.getChildContext == "function") && (a === void 0 && (a = [], Ym.set(i, a)), a.push(e));
        }
      }, Ja.flushLegacyContextWarning = function() {
        Ym.forEach(function(e, t) {
          if (e.length !== 0) {
            var i = e[0], a = /* @__PURE__ */ new Set();
            e.forEach(function(s) {
              a.add(at(s) || "Component"), DS.add(s.type);
            });
            var o = Ws(a);
            try {
              Gt(i), g(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, o);
            } finally {
              Rn();
            }
          }
        });
      }, Ja.discardPendingWarnings = function() {
        bp = [], _p = [], Ep = [], Cp = [], kp = [], xp = [], Ym = /* @__PURE__ */ new Map();
      };
    }
    function el(e, t) {
      if (e && e.defaultProps) {
        var i = pt({}, t), a = e.defaultProps;
        for (var o in a)
          i[o] === void 0 && (i[o] = a[o]);
        return i;
      }
      return t;
    }
    var yg = Uu(null), gg;
    gg = {};
    var Wm = null, Rf = null, Sg = null, Qm = false;
    function Gm() {
      Wm = null, Rf = null, Sg = null, Qm = false;
    }
    function OS() {
      Qm = true;
    }
    function LS() {
      Qm = false;
    }
    function MS(e, t, i) {
      ui(yg, t._currentValue, e), t._currentValue = i, t._currentRenderer !== void 0 && t._currentRenderer !== null && t._currentRenderer !== gg && g("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), t._currentRenderer = gg;
    }
    function bg(e, t) {
      var i = yg.current;
      oi(yg, t), e._currentValue = i;
    }
    function _g(e, t, i) {
      for (var a = e; a !== null; ) {
        var o = a.alternate;
        if (Co(a.childLanes, t) ? o !== null && !Co(o.childLanes, t) && (o.childLanes = st(o.childLanes, t)) : (a.childLanes = st(a.childLanes, t), o !== null && (o.childLanes = st(o.childLanes, t))), a === i)
          break;
        a = a.return;
      }
      a !== i && g("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function fx(e, t, i) {
      dx(e, t, i);
    }
    function dx(e, t, i) {
      var a = e.child;
      for (a !== null && (a.return = e); a !== null; ) {
        var o = void 0, s = a.dependencies;
        if (s !== null) {
          o = a.child;
          for (var f = s.firstContext; f !== null; ) {
            if (f.context === t) {
              if (a.tag === Q) {
                var p = Bn(i), v = Fo(on, p);
                v.tag = Xm;
                var y = a.updateQueue;
                if (y !== null) {
                  var S = y.shared, O = S.pending;
                  O === null ? v.next = v : (v.next = O.next, O.next = v), S.pending = v;
                }
              }
              a.lanes = st(a.lanes, i);
              var N = a.alternate;
              N !== null && (N.lanes = st(N.lanes, i)), _g(a.return, i, e), s.lanes = st(s.lanes, i);
              break;
            }
            f = f.next;
          }
        } else if (a.tag === de)
          o = a.type === e.type ? null : a.child;
        else if (a.tag === Lt) {
          var U = a.return;
          if (U === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          U.lanes = st(U.lanes, i);
          var F = U.alternate;
          F !== null && (F.lanes = st(F.lanes, i)), _g(U, i, e), o = a.sibling;
        } else
          o = a.child;
        if (o !== null)
          o.return = a;
        else
          for (o = a; o !== null; ) {
            if (o === e) {
              o = null;
              break;
            }
            var I = o.sibling;
            if (I !== null) {
              I.return = o.return, o = I;
              break;
            }
            o = o.return;
          }
        a = o;
      }
    }
    function Tf(e, t) {
      Wm = e, Rf = null, Sg = null;
      var i = e.dependencies;
      if (i !== null) {
        var a = i.firstContext;
        a !== null && (li(i.lanes, t) && Fp(), i.firstContext = null);
      }
    }
    function nr(e) {
      Qm && g("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var t = e._currentValue;
      if (Sg !== e) {
        var i = {
          context: e,
          memoizedValue: t,
          next: null
        };
        if (Rf === null) {
          if (Wm === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          Rf = i, Wm.dependencies = {
            lanes: Y,
            firstContext: i
          };
        } else
          Rf = Rf.next = i;
      }
      return t;
    }
    var Gs = null;
    function Eg(e) {
      Gs === null ? Gs = [e] : Gs.push(e);
    }
    function px() {
      if (Gs !== null) {
        for (var e = 0; e < Gs.length; e++) {
          var t = Gs[e], i = t.interleaved;
          if (i !== null) {
            t.interleaved = null;
            var a = i.next, o = t.pending;
            if (o !== null) {
              var s = o.next;
              o.next = a, i.next = s;
            }
            t.pending = i;
          }
        }
        Gs = null;
      }
    }
    function AS(e, t, i, a) {
      var o = t.interleaved;
      return o === null ? (i.next = i, Eg(t)) : (i.next = o.next, o.next = i), t.interleaved = i, qm(e, a);
    }
    function vx(e, t, i, a) {
      var o = t.interleaved;
      o === null ? (i.next = i, Eg(t)) : (i.next = o.next, o.next = i), t.interleaved = i;
    }
    function mx(e, t, i, a) {
      var o = t.interleaved;
      return o === null ? (i.next = i, Eg(t)) : (i.next = o.next, o.next = i), t.interleaved = i, qm(e, a);
    }
    function $i(e, t) {
      return qm(e, t);
    }
    var hx = qm;
    function qm(e, t) {
      e.lanes = st(e.lanes, t);
      var i = e.alternate;
      i !== null && (i.lanes = st(i.lanes, t)), i === null && (e.flags & (sn | Ai)) !== $e && z_(e);
      for (var a = e, o = e.return; o !== null; )
        o.childLanes = st(o.childLanes, t), i = o.alternate, i !== null ? i.childLanes = st(i.childLanes, t) : (o.flags & (sn | Ai)) !== $e && z_(e), a = o, o = o.return;
      if (a.tag === W) {
        var s = a.stateNode;
        return s;
      } else
        return null;
    }
    var zS = 0, VS = 1, Xm = 2, Cg = 3, Km = false, kg, Zm;
    kg = false, Zm = null;
    function xg(e) {
      var t = {
        baseState: e.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: Y
        },
        effects: null
      };
      e.updateQueue = t;
    }
    function US(e, t) {
      var i = t.updateQueue, a = e.updateQueue;
      if (i === a) {
        var o = {
          baseState: a.baseState,
          firstBaseUpdate: a.firstBaseUpdate,
          lastBaseUpdate: a.lastBaseUpdate,
          shared: a.shared,
          effects: a.effects
        };
        t.updateQueue = o;
      }
    }
    function Fo(e, t) {
      var i = {
        eventTime: e,
        lane: t,
        tag: zS,
        payload: null,
        callback: null,
        next: null
      };
      return i;
    }
    function Pu(e, t, i) {
      var a = e.updateQueue;
      if (a === null)
        return null;
      var o = a.shared;
      if (Zm === o && !kg && (g("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), kg = true), hT()) {
        var s = o.pending;
        return s === null ? t.next = t : (t.next = s.next, s.next = t), o.pending = t, hx(e, i);
      } else
        return mx(e, o, t, i);
    }
    function Jm(e, t, i) {
      var a = t.updateQueue;
      if (a !== null) {
        var o = a.shared;
        if (zd(i)) {
          var s = o.lanes;
          s = Ud(s, e.pendingLanes);
          var f = st(s, i);
          o.lanes = f, _u(e, f);
        }
      }
    }
    function Rg(e, t) {
      var i = e.updateQueue, a = e.alternate;
      if (a !== null) {
        var o = a.updateQueue;
        if (i === o) {
          var s = null, f = null, p = i.firstBaseUpdate;
          if (p !== null) {
            var v = p;
            do {
              var y = {
                eventTime: v.eventTime,
                lane: v.lane,
                tag: v.tag,
                payload: v.payload,
                callback: v.callback,
                next: null
              };
              f === null ? s = f = y : (f.next = y, f = y), v = v.next;
            } while (v !== null);
            f === null ? s = f = t : (f.next = t, f = t);
          } else
            s = f = t;
          i = {
            baseState: o.baseState,
            firstBaseUpdate: s,
            lastBaseUpdate: f,
            shared: o.shared,
            effects: o.effects
          }, e.updateQueue = i;
          return;
        }
      }
      var S = i.lastBaseUpdate;
      S === null ? i.firstBaseUpdate = t : S.next = t, i.lastBaseUpdate = t;
    }
    function yx(e, t, i, a, o, s) {
      switch (i.tag) {
        case VS: {
          var f = i.payload;
          if (typeof f == "function") {
            OS();
            var p = f.call(s, a, o);
            {
              if (e.mode & Cn) {
                Pn(true);
                try {
                  f.call(s, a, o);
                } finally {
                  Pn(false);
                }
              }
              LS();
            }
            return p;
          }
          return f;
        }
        case Cg:
          e.flags = e.flags & ~Kn | tt;
        case zS: {
          var v = i.payload, y;
          if (typeof v == "function") {
            OS(), y = v.call(s, a, o);
            {
              if (e.mode & Cn) {
                Pn(true);
                try {
                  v.call(s, a, o);
                } finally {
                  Pn(false);
                }
              }
              LS();
            }
          } else
            y = v;
          return y == null ? a : pt({}, a, y);
        }
        case Xm:
          return Km = true, a;
      }
      return a;
    }
    function eh(e, t, i, a) {
      var o = e.updateQueue;
      Km = false, Zm = o.shared;
      var s = o.firstBaseUpdate, f = o.lastBaseUpdate, p = o.shared.pending;
      if (p !== null) {
        o.shared.pending = null;
        var v = p, y = v.next;
        v.next = null, f === null ? s = y : f.next = y, f = v;
        var S = e.alternate;
        if (S !== null) {
          var O = S.updateQueue, N = O.lastBaseUpdate;
          N !== f && (N === null ? O.firstBaseUpdate = y : N.next = y, O.lastBaseUpdate = v);
        }
      }
      if (s !== null) {
        var U = o.baseState, F = Y, I = null, Re = null, Ye = null, Ue = s;
        do {
          var Dt = Ue.lane, Et = Ue.eventTime;
          if (Co(a, Dt)) {
            if (Ye !== null) {
              var $ = {
                eventTime: Et,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: wt,
                tag: Ue.tag,
                payload: Ue.payload,
                callback: Ue.callback,
                next: null
              };
              Ye = Ye.next = $;
            }
            U = yx(e, o, Ue, U, t, i);
            var z = Ue.callback;
            if (z !== null && // If the update was already committed, we should not queue its
            // callback again.
            Ue.lane !== wt) {
              e.flags |= Sa;
              var le = o.effects;
              le === null ? o.effects = [Ue] : le.push(Ue);
            }
          } else {
            var A = {
              eventTime: Et,
              lane: Dt,
              tag: Ue.tag,
              payload: Ue.payload,
              callback: Ue.callback,
              next: null
            };
            Ye === null ? (Re = Ye = A, I = U) : Ye = Ye.next = A, F = st(F, Dt);
          }
          if (Ue = Ue.next, Ue === null) {
            if (p = o.shared.pending, p === null)
              break;
            var Te = p, Ee = Te.next;
            Te.next = null, Ue = Ee, o.lastBaseUpdate = Te, o.shared.pending = null;
          }
        } while (true);
        Ye === null && (I = U), o.baseState = I, o.firstBaseUpdate = Re, o.lastBaseUpdate = Ye;
        var et = o.shared.interleaved;
        if (et !== null) {
          var ot = et;
          do
            F = st(F, ot.lane), ot = ot.next;
          while (ot !== et);
        } else
          s === null && (o.shared.lanes = Y);
        Kp(F), e.lanes = F, e.memoizedState = U;
      }
      Zm = null;
    }
    function gx(e, t) {
      if (typeof e != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + e));
      e.call(t);
    }
    function jS() {
      Km = false;
    }
    function th() {
      return Km;
    }
    function FS(e, t, i) {
      var a = t.effects;
      if (t.effects = null, a !== null)
        for (var o = 0; o < a.length; o++) {
          var s = a[o], f = s.callback;
          f !== null && (s.callback = null, gx(f, i));
        }
    }
    var Tg = {}, HS = new E.Component().refs, wg, Ng, Dg, Og, Lg, PS, nh, Mg, Ag, zg;
    {
      wg = /* @__PURE__ */ new Set(), Ng = /* @__PURE__ */ new Set(), Dg = /* @__PURE__ */ new Set(), Og = /* @__PURE__ */ new Set(), Mg = /* @__PURE__ */ new Set(), Lg = /* @__PURE__ */ new Set(), Ag = /* @__PURE__ */ new Set(), zg = /* @__PURE__ */ new Set();
      var BS = /* @__PURE__ */ new Set();
      nh = function(e, t) {
        if (!(e === null || typeof e == "function")) {
          var i = t + "_" + e;
          BS.has(i) || (BS.add(i), g("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", t, e));
        }
      }, PS = function(e, t) {
        if (t === void 0) {
          var i = Mt(e) || "Component";
          Lg.has(i) || (Lg.add(i), g("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", i));
        }
      }, Object.defineProperty(Tg, "_processChildContext", {
        enumerable: false,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(Tg);
    }
    function Vg(e, t, i, a) {
      var o = e.memoizedState, s = i(a, o);
      {
        if (e.mode & Cn) {
          Pn(true);
          try {
            s = i(a, o);
          } finally {
            Pn(false);
          }
        }
        PS(t, s);
      }
      var f = s == null ? o : pt({}, o, s);
      if (e.memoizedState = f, e.lanes === Y) {
        var p = e.updateQueue;
        p.baseState = f;
      }
    }
    var Ug = {
      isMounted: gi,
      enqueueSetState: function(e, t, i) {
        var a = Li(e), o = ki(), s = qu(a), f = Fo(o, s);
        f.payload = t, i != null && (nh(i, "setState"), f.callback = i);
        var p = Pu(a, f, s);
        p !== null && (mr(p, a, s, o), Jm(p, a, s)), Al(a, s);
      },
      enqueueReplaceState: function(e, t, i) {
        var a = Li(e), o = ki(), s = qu(a), f = Fo(o, s);
        f.tag = VS, f.payload = t, i != null && (nh(i, "replaceState"), f.callback = i);
        var p = Pu(a, f, s);
        p !== null && (mr(p, a, s, o), Jm(p, a, s)), Al(a, s);
      },
      enqueueForceUpdate: function(e, t) {
        var i = Li(e), a = ki(), o = qu(i), s = Fo(a, o);
        s.tag = Xm, t != null && (nh(t, "forceUpdate"), s.callback = t);
        var f = Pu(i, s, o);
        f !== null && (mr(f, i, o, a), Jm(f, i, o)), Od(i, o);
      }
    };
    function IS(e, t, i, a, o, s, f) {
      var p = e.stateNode;
      if (typeof p.shouldComponentUpdate == "function") {
        var v = p.shouldComponentUpdate(a, s, f);
        {
          if (e.mode & Cn) {
            Pn(true);
            try {
              v = p.shouldComponentUpdate(a, s, f);
            } finally {
              Pn(false);
            }
          }
          v === void 0 && g("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", Mt(t) || "Component");
        }
        return v;
      }
      return t.prototype && t.prototype.isPureReactComponent ? !Pe(i, a) || !Pe(o, s) : true;
    }
    function Sx(e, t, i) {
      var a = e.stateNode;
      {
        var o = Mt(t) || "Component", s = a.render;
        s || (t.prototype && typeof t.prototype.render == "function" ? g("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", o) : g("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", o)), a.getInitialState && !a.getInitialState.isReactClassApproved && !a.state && g("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", o), a.getDefaultProps && !a.getDefaultProps.isReactClassApproved && g("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", o), a.propTypes && g("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", o), a.contextType && g("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", o), a.contextTypes && g("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", o), t.contextType && t.contextTypes && !Ag.has(t) && (Ag.add(t), g("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", o)), typeof a.componentShouldUpdate == "function" && g("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", o), t.prototype && t.prototype.isPureReactComponent && typeof a.shouldComponentUpdate < "u" && g("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", Mt(t) || "A pure component"), typeof a.componentDidUnmount == "function" && g("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", o), typeof a.componentDidReceiveProps == "function" && g("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", o), typeof a.componentWillRecieveProps == "function" && g("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", o), typeof a.UNSAFE_componentWillRecieveProps == "function" && g("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", o);
        var f = a.props !== i;
        a.props !== void 0 && f && g("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", o, o), a.defaultProps && g("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", o, o), typeof a.getSnapshotBeforeUpdate == "function" && typeof a.componentDidUpdate != "function" && !Dg.has(t) && (Dg.add(t), g("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", Mt(t))), typeof a.getDerivedStateFromProps == "function" && g("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", o), typeof a.getDerivedStateFromError == "function" && g("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", o), typeof t.getSnapshotBeforeUpdate == "function" && g("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", o);
        var p = a.state;
        p && (typeof p != "object" || kt(p)) && g("%s.state: must be set to an object or null", o), typeof a.getChildContext == "function" && typeof t.childContextTypes != "object" && g("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", o);
      }
    }
    function $S(e, t) {
      t.updater = Ug, e.stateNode = t, fu(t, e), t._reactInternalInstance = Tg;
    }
    function YS(e, t, i) {
      var a = false, o = sa, s = sa, f = t.contextType;
      if ("contextType" in t) {
        var p = (
          // Allow null for conditional declaration
          f === null || f !== void 0 && f.$$typeof === zt && f._context === void 0
        );
        if (!p && !zg.has(t)) {
          zg.add(t);
          var v = "";
          f === void 0 ? v = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof f != "object" ? v = " However, it is set to a " + typeof f + "." : f.$$typeof === yt ? v = " Did you accidentally pass the Context.Provider instead?" : f._context !== void 0 ? v = " Did you accidentally pass the Context.Consumer instead?" : v = " However, it is set to an object with keys {" + Object.keys(f).join(", ") + "}.", g("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", Mt(t) || "Component", v);
        }
      }
      if (typeof f == "object" && f !== null)
        s = nr(f);
      else {
        o = _f(e, t, true);
        var y = t.contextTypes;
        a = y != null, s = a ? Ef(e, o) : sa;
      }
      var S = new t(i, s);
      if (e.mode & Cn) {
        Pn(true);
        try {
          S = new t(i, s);
        } finally {
          Pn(false);
        }
      }
      var O = e.memoizedState = S.state !== null && S.state !== void 0 ? S.state : null;
      $S(e, S);
      {
        if (typeof t.getDerivedStateFromProps == "function" && O === null) {
          var N = Mt(t) || "Component";
          Ng.has(N) || (Ng.add(N), g("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", N, S.state === null ? "null" : "undefined", N));
        }
        if (typeof t.getDerivedStateFromProps == "function" || typeof S.getSnapshotBeforeUpdate == "function") {
          var U = null, F = null, I = null;
          if (typeof S.componentWillMount == "function" && S.componentWillMount.__suppressDeprecationWarning !== true ? U = "componentWillMount" : typeof S.UNSAFE_componentWillMount == "function" && (U = "UNSAFE_componentWillMount"), typeof S.componentWillReceiveProps == "function" && S.componentWillReceiveProps.__suppressDeprecationWarning !== true ? F = "componentWillReceiveProps" : typeof S.UNSAFE_componentWillReceiveProps == "function" && (F = "UNSAFE_componentWillReceiveProps"), typeof S.componentWillUpdate == "function" && S.componentWillUpdate.__suppressDeprecationWarning !== true ? I = "componentWillUpdate" : typeof S.UNSAFE_componentWillUpdate == "function" && (I = "UNSAFE_componentWillUpdate"), U !== null || F !== null || I !== null) {
            var Re = Mt(t) || "Component", Ye = typeof t.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            Og.has(Re) || (Og.add(Re), g(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, Re, Ye, U !== null ? `
  ` + U : "", F !== null ? `
  ` + F : "", I !== null ? `
  ` + I : ""));
          }
        }
      }
      return a && mS(e, o, s), S;
    }
    function bx(e, t) {
      var i = t.state;
      typeof t.componentWillMount == "function" && t.componentWillMount(), typeof t.UNSAFE_componentWillMount == "function" && t.UNSAFE_componentWillMount(), i !== t.state && (g("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", at(e) || "Component"), Ug.enqueueReplaceState(t, t.state, null));
    }
    function WS(e, t, i, a) {
      var o = t.state;
      if (typeof t.componentWillReceiveProps == "function" && t.componentWillReceiveProps(i, a), typeof t.UNSAFE_componentWillReceiveProps == "function" && t.UNSAFE_componentWillReceiveProps(i, a), t.state !== o) {
        {
          var s = at(e) || "Component";
          wg.has(s) || (wg.add(s), g("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", s));
        }
        Ug.enqueueReplaceState(t, t.state, null);
      }
    }
    function jg(e, t, i, a) {
      Sx(e, t, i);
      var o = e.stateNode;
      o.props = i, o.state = e.memoizedState, o.refs = HS, xg(e);
      var s = t.contextType;
      if (typeof s == "object" && s !== null)
        o.context = nr(s);
      else {
        var f = _f(e, t, true);
        o.context = Ef(e, f);
      }
      {
        if (o.state === i) {
          var p = Mt(t) || "Component";
          Mg.has(p) || (Mg.add(p), g("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", p));
        }
        e.mode & Cn && Ja.recordLegacyContextWarning(e, o), Ja.recordUnsafeLifecycleWarnings(e, o);
      }
      o.state = e.memoizedState;
      var v = t.getDerivedStateFromProps;
      if (typeof v == "function" && (Vg(e, t, v, i), o.state = e.memoizedState), typeof t.getDerivedStateFromProps != "function" && typeof o.getSnapshotBeforeUpdate != "function" && (typeof o.UNSAFE_componentWillMount == "function" || typeof o.componentWillMount == "function") && (bx(e, o), eh(e, i, o, a), o.state = e.memoizedState), typeof o.componentDidMount == "function") {
        var y = ut;
        y |= ei, (e.mode & Ui) !== Qe && (y |= ti), e.flags |= y;
      }
    }
    function _x(e, t, i, a) {
      var o = e.stateNode, s = e.memoizedProps;
      o.props = s;
      var f = o.context, p = t.contextType, v = sa;
      if (typeof p == "object" && p !== null)
        v = nr(p);
      else {
        var y = _f(e, t, true);
        v = Ef(e, y);
      }
      var S = t.getDerivedStateFromProps, O = typeof S == "function" || typeof o.getSnapshotBeforeUpdate == "function";
      !O && (typeof o.UNSAFE_componentWillReceiveProps == "function" || typeof o.componentWillReceiveProps == "function") && (s !== i || f !== v) && WS(e, o, i, v), jS();
      var N = e.memoizedState, U = o.state = N;
      if (eh(e, i, o, a), U = e.memoizedState, s === i && N === U && !Um() && !th()) {
        if (typeof o.componentDidMount == "function") {
          var F = ut;
          F |= ei, (e.mode & Ui) !== Qe && (F |= ti), e.flags |= F;
        }
        return false;
      }
      typeof S == "function" && (Vg(e, t, S, i), U = e.memoizedState);
      var I = th() || IS(e, t, s, i, N, U, v);
      if (I) {
        if (!O && (typeof o.UNSAFE_componentWillMount == "function" || typeof o.componentWillMount == "function") && (typeof o.componentWillMount == "function" && o.componentWillMount(), typeof o.UNSAFE_componentWillMount == "function" && o.UNSAFE_componentWillMount()), typeof o.componentDidMount == "function") {
          var Re = ut;
          Re |= ei, (e.mode & Ui) !== Qe && (Re |= ti), e.flags |= Re;
        }
      } else {
        if (typeof o.componentDidMount == "function") {
          var Ye = ut;
          Ye |= ei, (e.mode & Ui) !== Qe && (Ye |= ti), e.flags |= Ye;
        }
        e.memoizedProps = i, e.memoizedState = U;
      }
      return o.props = i, o.state = U, o.context = v, I;
    }
    function Ex(e, t, i, a, o) {
      var s = t.stateNode;
      US(e, t);
      var f = t.memoizedProps, p = t.type === t.elementType ? f : el(t.type, f);
      s.props = p;
      var v = t.pendingProps, y = s.context, S = i.contextType, O = sa;
      if (typeof S == "object" && S !== null)
        O = nr(S);
      else {
        var N = _f(t, i, true);
        O = Ef(t, N);
      }
      var U = i.getDerivedStateFromProps, F = typeof U == "function" || typeof s.getSnapshotBeforeUpdate == "function";
      !F && (typeof s.UNSAFE_componentWillReceiveProps == "function" || typeof s.componentWillReceiveProps == "function") && (f !== v || y !== O) && WS(t, s, a, O), jS();
      var I = t.memoizedState, Re = s.state = I;
      if (eh(t, a, s, o), Re = t.memoizedState, f === v && I === Re && !Um() && !th() && !je)
        return typeof s.componentDidUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= ut), typeof s.getSnapshotBeforeUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= Mi), false;
      typeof U == "function" && (Vg(t, i, U, a), Re = t.memoizedState);
      var Ye = th() || IS(t, i, p, a, I, Re, O) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      je;
      return Ye ? (!F && (typeof s.UNSAFE_componentWillUpdate == "function" || typeof s.componentWillUpdate == "function") && (typeof s.componentWillUpdate == "function" && s.componentWillUpdate(a, Re, O), typeof s.UNSAFE_componentWillUpdate == "function" && s.UNSAFE_componentWillUpdate(a, Re, O)), typeof s.componentDidUpdate == "function" && (t.flags |= ut), typeof s.getSnapshotBeforeUpdate == "function" && (t.flags |= Mi)) : (typeof s.componentDidUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= ut), typeof s.getSnapshotBeforeUpdate == "function" && (f !== e.memoizedProps || I !== e.memoizedState) && (t.flags |= Mi), t.memoizedProps = a, t.memoizedState = Re), s.props = a, s.state = Re, s.context = O, Ye;
    }
    var Fg, Hg, Pg, Bg, Ig, QS = function(e, t) {
    };
    Fg = false, Hg = false, Pg = {}, Bg = {}, Ig = {}, QS = function(e, t) {
      if (!(e === null || typeof e != "object") && !(!e._store || e._store.validated || e.key != null)) {
        if (typeof e._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        e._store.validated = true;
        var i = at(t) || "Component";
        Bg[i] || (Bg[i] = true, g('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    function Rp(e, t, i) {
      var a = i.ref;
      if (a !== null && typeof a != "function" && typeof a != "object") {
        if ((e.mode & Cn || Ze) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(i._owner && i._self && i._owner.stateNode !== i._self)) {
          var o = at(e) || "Component";
          Pg[o] || (g('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', a), Pg[o] = true);
        }
        if (i._owner) {
          var s = i._owner, f;
          if (s) {
            var p = s;
            if (p.tag !== Q)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            f = p.stateNode;
          }
          if (!f)
            throw new Error("Missing owner for string ref " + a + ". This error is likely caused by a bug in React. Please file an issue.");
          var v = f;
          Gn(a, "ref");
          var y = "" + a;
          if (t !== null && t.ref !== null && typeof t.ref == "function" && t.ref._stringRef === y)
            return t.ref;
          var S = function(O) {
            var N = v.refs;
            N === HS && (N = v.refs = {}), O === null ? delete N[y] : N[y] = O;
          };
          return S._stringRef = y, S;
        } else {
          if (typeof a != "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!i._owner)
            throw new Error("Element ref was specified as a string (" + a + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
      return a;
    }
    function rh(e, t) {
      var i = Object.prototype.toString.call(t);
      throw new Error("Objects are not valid as a React child (found: " + (i === "[object Object]" ? "object with keys {" + Object.keys(t).join(", ") + "}" : i) + "). If you meant to render a collection of children, use an array instead.");
    }
    function ih(e) {
      {
        var t = at(e) || "Component";
        if (Ig[t])
          return;
        Ig[t] = true, g("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function GS(e) {
      var t = e._payload, i = e._init;
      return i(t);
    }
    function qS(e) {
      function t(A, $) {
        if (e) {
          var z = A.deletions;
          z === null ? (A.deletions = [$], A.flags |= Bt) : z.push($);
        }
      }
      function i(A, $) {
        if (!e)
          return null;
        for (var z = $; z !== null; )
          t(A, z), z = z.sibling;
        return null;
      }
      function a(A, $) {
        for (var z = /* @__PURE__ */ new Map(), le = $; le !== null; )
          le.key !== null ? z.set(le.key, le) : z.set(le.index, le), le = le.sibling;
        return z;
      }
      function o(A, $) {
        var z = nc(A, $);
        return z.index = 0, z.sibling = null, z;
      }
      function s(A, $, z) {
        if (A.index = z, !e)
          return A.flags |= Sd, $;
        var le = A.alternate;
        if (le !== null) {
          var Te = le.index;
          return Te < $ ? (A.flags |= sn, $) : Te;
        } else
          return A.flags |= sn, $;
      }
      function f(A) {
        return e && A.alternate === null && (A.flags |= sn), A;
      }
      function p(A, $, z, le) {
        if ($ === null || $.tag !== fe) {
          var Te = h1(z, A.mode, le);
          return Te.return = A, Te;
        } else {
          var Ee = o($, z);
          return Ee.return = A, Ee;
        }
      }
      function v(A, $, z, le) {
        var Te = z.type;
        if (Te === te)
          return S(A, $, z.props.children, le, z.key);
        if ($ !== null && ($.elementType === Te || // Keep this check inline so it only runs on the false path:
        F_($, z) || // Lazy types should reconcile their resolved type.
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
        typeof Te == "object" && Te !== null && Te.$$typeof === gt && GS(Te) === $.type)) {
          var Ee = o($, z.props);
          return Ee.ref = Rp(A, $, z), Ee.return = A, Ee._debugSource = z._source, Ee._debugOwner = z._owner, Ee;
        }
        var et = m1(z, A.mode, le);
        return et.ref = Rp(A, $, z), et.return = A, et;
      }
      function y(A, $, z, le) {
        if ($ === null || $.tag !== J || $.stateNode.containerInfo !== z.containerInfo || $.stateNode.implementation !== z.implementation) {
          var Te = y1(z, A.mode, le);
          return Te.return = A, Te;
        } else {
          var Ee = o($, z.children || []);
          return Ee.return = A, Ee;
        }
      }
      function S(A, $, z, le, Te) {
        if ($ === null || $.tag !== ee) {
          var Ee = Ku(z, A.mode, le, Te);
          return Ee.return = A, Ee;
        } else {
          var et = o($, z);
          return et.return = A, et;
        }
      }
      function O(A, $, z) {
        if (typeof $ == "string" && $ !== "" || typeof $ == "number") {
          var le = h1("" + $, A.mode, z);
          return le.return = A, le;
        }
        if (typeof $ == "object" && $ !== null) {
          switch ($.$$typeof) {
            case va: {
              var Te = m1($, A.mode, z);
              return Te.ref = Rp(A, null, $), Te.return = A, Te;
            }
            case x: {
              var Ee = y1($, A.mode, z);
              return Ee.return = A, Ee;
            }
            case gt: {
              var et = $._payload, ot = $._init;
              return O(A, ot(et), z);
            }
          }
          if (kt($) || ea($)) {
            var nn = Ku($, A.mode, z, null);
            return nn.return = A, nn;
          }
          rh(A, $);
        }
        return typeof $ == "function" && ih(A), null;
      }
      function N(A, $, z, le) {
        var Te = $ !== null ? $.key : null;
        if (typeof z == "string" && z !== "" || typeof z == "number")
          return Te !== null ? null : p(A, $, "" + z, le);
        if (typeof z == "object" && z !== null) {
          switch (z.$$typeof) {
            case va:
              return z.key === Te ? v(A, $, z, le) : null;
            case x:
              return z.key === Te ? y(A, $, z, le) : null;
            case gt: {
              var Ee = z._payload, et = z._init;
              return N(A, $, et(Ee), le);
            }
          }
          if (kt(z) || ea(z))
            return Te !== null ? null : S(A, $, z, le, null);
          rh(A, z);
        }
        return typeof z == "function" && ih(A), null;
      }
      function U(A, $, z, le, Te) {
        if (typeof le == "string" && le !== "" || typeof le == "number") {
          var Ee = A.get(z) || null;
          return p($, Ee, "" + le, Te);
        }
        if (typeof le == "object" && le !== null) {
          switch (le.$$typeof) {
            case va: {
              var et = A.get(le.key === null ? z : le.key) || null;
              return v($, et, le, Te);
            }
            case x: {
              var ot = A.get(le.key === null ? z : le.key) || null;
              return y($, ot, le, Te);
            }
            case gt:
              var nn = le._payload, Ft = le._init;
              return U(A, $, z, Ft(nn), Te);
          }
          if (kt(le) || ea(le)) {
            var Wn = A.get(z) || null;
            return S($, Wn, le, Te, null);
          }
          rh($, le);
        }
        return typeof le == "function" && ih($), null;
      }
      function F(A, $, z) {
        {
          if (typeof A != "object" || A === null)
            return $;
          switch (A.$$typeof) {
            case va:
            case x:
              QS(A, z);
              var le = A.key;
              if (typeof le != "string")
                break;
              if ($ === null) {
                $ = /* @__PURE__ */ new Set(), $.add(le);
                break;
              }
              if (!$.has(le)) {
                $.add(le);
                break;
              }
              g("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted â€” the behavior is unsupported and could change in a future version.", le);
              break;
            case gt:
              var Te = A._payload, Ee = A._init;
              F(Ee(Te), $, z);
              break;
          }
        }
        return $;
      }
      function I(A, $, z, le) {
        for (var Te = null, Ee = 0; Ee < z.length; Ee++) {
          var et = z[Ee];
          Te = F(et, Te, A);
        }
        for (var ot = null, nn = null, Ft = $, Wn = 0, Ht = 0, jn = null; Ft !== null && Ht < z.length; Ht++) {
          Ft.index > Ht ? (jn = Ft, Ft = null) : jn = Ft.sibling;
          var ci = N(A, Ft, z[Ht], le);
          if (ci === null) {
            Ft === null && (Ft = jn);
            break;
          }
          e && Ft && ci.alternate === null && t(A, Ft), Wn = s(ci, Wn, Ht), nn === null ? ot = ci : nn.sibling = ci, nn = ci, Ft = jn;
        }
        if (Ht === z.length) {
          if (i(A, Ft), Ar()) {
            var Pr = Ht;
            Is(A, Pr);
          }
          return ot;
        }
        if (Ft === null) {
          for (; Ht < z.length; Ht++) {
            var fa = O(A, z[Ht], le);
            fa !== null && (Wn = s(fa, Wn, Ht), nn === null ? ot = fa : nn.sibling = fa, nn = fa);
          }
          if (Ar()) {
            var xi = Ht;
            Is(A, xi);
          }
          return ot;
        }
        for (var Ri = a(A, Ft); Ht < z.length; Ht++) {
          var fi = U(Ri, A, Ht, z[Ht], le);
          fi !== null && (e && fi.alternate !== null && Ri.delete(fi.key === null ? Ht : fi.key), Wn = s(fi, Wn, Ht), nn === null ? ot = fi : nn.sibling = fi, nn = fi);
        }
        if (e && Ri.forEach(function($f) {
          return t(A, $f);
        }), Ar()) {
          var Yo = Ht;
          Is(A, Yo);
        }
        return ot;
      }
      function Re(A, $, z, le) {
        var Te = ea(z);
        if (typeof Te != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          z[Symbol.toStringTag] === "Generator" && (Hg || g("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), Hg = true), z.entries === Te && (Fg || g("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), Fg = true);
          var Ee = Te.call(z);
          if (Ee)
            for (var et = null, ot = Ee.next(); !ot.done; ot = Ee.next()) {
              var nn = ot.value;
              et = F(nn, et, A);
            }
        }
        var Ft = Te.call(z);
        if (Ft == null)
          throw new Error("An iterable object provided no iterator.");
        for (var Wn = null, Ht = null, jn = $, ci = 0, Pr = 0, fa = null, xi = Ft.next(); jn !== null && !xi.done; Pr++, xi = Ft.next()) {
          jn.index > Pr ? (fa = jn, jn = null) : fa = jn.sibling;
          var Ri = N(A, jn, xi.value, le);
          if (Ri === null) {
            jn === null && (jn = fa);
            break;
          }
          e && jn && Ri.alternate === null && t(A, jn), ci = s(Ri, ci, Pr), Ht === null ? Wn = Ri : Ht.sibling = Ri, Ht = Ri, jn = fa;
        }
        if (xi.done) {
          if (i(A, jn), Ar()) {
            var fi = Pr;
            Is(A, fi);
          }
          return Wn;
        }
        if (jn === null) {
          for (; !xi.done; Pr++, xi = Ft.next()) {
            var Yo = O(A, xi.value, le);
            Yo !== null && (ci = s(Yo, ci, Pr), Ht === null ? Wn = Yo : Ht.sibling = Yo, Ht = Yo);
          }
          if (Ar()) {
            var $f = Pr;
            Is(A, $f);
          }
          return Wn;
        }
        for (var nv = a(A, jn); !xi.done; Pr++, xi = Ft.next()) {
          var Zl = U(nv, A, Pr, xi.value, le);
          Zl !== null && (e && Zl.alternate !== null && nv.delete(Zl.key === null ? Pr : Zl.key), ci = s(Zl, ci, Pr), Ht === null ? Wn = Zl : Ht.sibling = Zl, Ht = Zl);
        }
        if (e && nv.forEach(function(Vw) {
          return t(A, Vw);
        }), Ar()) {
          var zw = Pr;
          Is(A, zw);
        }
        return Wn;
      }
      function Ye(A, $, z, le) {
        if ($ !== null && $.tag === fe) {
          i(A, $.sibling);
          var Te = o($, z);
          return Te.return = A, Te;
        }
        i(A, $);
        var Ee = h1(z, A.mode, le);
        return Ee.return = A, Ee;
      }
      function Ue(A, $, z, le) {
        for (var Te = z.key, Ee = $; Ee !== null; ) {
          if (Ee.key === Te) {
            var et = z.type;
            if (et === te) {
              if (Ee.tag === ee) {
                i(A, Ee.sibling);
                var ot = o(Ee, z.props.children);
                return ot.return = A, ot._debugSource = z._source, ot._debugOwner = z._owner, ot;
              }
            } else if (Ee.elementType === et || // Keep this check inline so it only runs on the false path:
            F_(Ee, z) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof et == "object" && et !== null && et.$$typeof === gt && GS(et) === Ee.type) {
              i(A, Ee.sibling);
              var nn = o(Ee, z.props);
              return nn.ref = Rp(A, Ee, z), nn.return = A, nn._debugSource = z._source, nn._debugOwner = z._owner, nn;
            }
            i(A, Ee);
            break;
          } else
            t(A, Ee);
          Ee = Ee.sibling;
        }
        if (z.type === te) {
          var Ft = Ku(z.props.children, A.mode, le, z.key);
          return Ft.return = A, Ft;
        } else {
          var Wn = m1(z, A.mode, le);
          return Wn.ref = Rp(A, $, z), Wn.return = A, Wn;
        }
      }
      function Dt(A, $, z, le) {
        for (var Te = z.key, Ee = $; Ee !== null; ) {
          if (Ee.key === Te)
            if (Ee.tag === J && Ee.stateNode.containerInfo === z.containerInfo && Ee.stateNode.implementation === z.implementation) {
              i(A, Ee.sibling);
              var et = o(Ee, z.children || []);
              return et.return = A, et;
            } else {
              i(A, Ee);
              break;
            }
          else
            t(A, Ee);
          Ee = Ee.sibling;
        }
        var ot = y1(z, A.mode, le);
        return ot.return = A, ot;
      }
      function Et(A, $, z, le) {
        var Te = typeof z == "object" && z !== null && z.type === te && z.key === null;
        if (Te && (z = z.props.children), typeof z == "object" && z !== null) {
          switch (z.$$typeof) {
            case va:
              return f(Ue(A, $, z, le));
            case x:
              return f(Dt(A, $, z, le));
            case gt:
              var Ee = z._payload, et = z._init;
              return Et(A, $, et(Ee), le);
          }
          if (kt(z))
            return I(A, $, z, le);
          if (ea(z))
            return Re(A, $, z, le);
          rh(A, z);
        }
        return typeof z == "string" && z !== "" || typeof z == "number" ? f(Ye(A, $, "" + z, le)) : (typeof z == "function" && ih(A), i(A, $));
      }
      return Et;
    }
    var wf = qS(true), XS = qS(false);
    function Cx(e, t) {
      if (e !== null && t.child !== e.child)
        throw new Error("Resuming work not yet implemented.");
      if (t.child !== null) {
        var i = t.child, a = nc(i, i.pendingProps);
        for (t.child = a, a.return = t; i.sibling !== null; )
          i = i.sibling, a = a.sibling = nc(i, i.pendingProps), a.return = t;
        a.sibling = null;
      }
    }
    function kx(e, t) {
      for (var i = e.child; i !== null; )
        JT(i, t), i = i.sibling;
    }
    var Tp = {}, Bu = Uu(Tp), wp = Uu(Tp), ah = Uu(Tp);
    function lh(e) {
      if (e === Tp)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return e;
    }
    function KS() {
      var e = lh(ah.current);
      return e;
    }
    function $g(e, t) {
      ui(ah, t, e), ui(wp, e, e), ui(Bu, Tp, e);
      var i = jC(t);
      oi(Bu, e), ui(Bu, i, e);
    }
    function Nf(e) {
      oi(Bu, e), oi(wp, e), oi(ah, e);
    }
    function Yg() {
      var e = lh(Bu.current);
      return e;
    }
    function ZS(e) {
      lh(ah.current);
      var t = lh(Bu.current), i = FC(t, e.type);
      t !== i && (ui(wp, e, e), ui(Bu, i, e));
    }
    function Wg(e) {
      wp.current === e && (oi(Bu, e), oi(wp, e));
    }
    var xx = 0, JS = 1, eb = 1, Np = 2, tl = Uu(xx);
    function Qg(e, t) {
      return (e & t) !== 0;
    }
    function Df(e) {
      return e & JS;
    }
    function Gg(e, t) {
      return e & JS | t;
    }
    function Rx(e, t) {
      return e | t;
    }
    function Iu(e, t) {
      ui(tl, t, e);
    }
    function Of(e) {
      oi(tl, e);
    }
    function Tx(e, t) {
      var i = e.memoizedState;
      return i !== null ? i.dehydrated !== null : (e.memoizedProps, true);
    }
    function oh(e) {
      for (var t = e; t !== null; ) {
        if (t.tag === be) {
          var i = t.memoizedState;
          if (i !== null) {
            var a = i.dehydrated;
            if (a === null || cS(a) || eg(a))
              return t;
          }
        } else if (t.tag === Ct && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        t.memoizedProps.revealOrder !== void 0) {
          var o = (t.flags & tt) !== $e;
          if (o)
            return t;
        } else if (t.child !== null) {
          t.child.return = t, t = t.child;
          continue;
        }
        if (t === e)
          return null;
        for (; t.sibling === null; ) {
          if (t.return === null || t.return === e)
            return null;
          t = t.return;
        }
        t.sibling.return = t.return, t = t.sibling;
      }
      return null;
    }
    var Yi = (
      /*   */
      0
    ), ur = (
      /* */
      1
    ), Yl = (
      /*  */
      2
    ), sr = (
      /*    */
      4
    ), zr = (
      /*   */
      8
    ), qg = [];
    function Xg() {
      for (var e = 0; e < qg.length; e++) {
        var t = qg[e];
        t._workInProgressVersionPrimary = null;
      }
      qg.length = 0;
    }
    function wx(e, t) {
      var i = t._getVersion, a = i(t._source);
      e.mutableSourceEagerHydrationData == null ? e.mutableSourceEagerHydrationData = [t, a] : e.mutableSourceEagerHydrationData.push(t, a);
    }
    var ke = b.ReactCurrentDispatcher, Dp = b.ReactCurrentBatchConfig, Kg, Lf;
    Kg = /* @__PURE__ */ new Set();
    var qs = Y, tn = null, cr = null, fr = null, uh = false, Op = false, Lp = 0, Nx = 0, Dx = 25, G = null, wa = null, $u = -1, Zg = false;
    function Xt() {
      {
        var e = G;
        wa === null ? wa = [e] : wa.push(e);
      }
    }
    function ye() {
      {
        var e = G;
        wa !== null && ($u++, wa[$u] !== e && Ox(e));
      }
    }
    function Mf(e) {
      e != null && !kt(e) && g("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", G, typeof e);
    }
    function Ox(e) {
      {
        var t = at(tn);
        if (!Kg.has(t) && (Kg.add(t), wa !== null)) {
          for (var i = "", a = 30, o = 0; o <= $u; o++) {
            for (var s = wa[o], f = o === $u ? e : s, p = o + 1 + ". " + s; p.length < a; )
              p += " ";
            p += f + `
`, i += p;
          }
          g(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, t, i);
        }
      }
    }
    function si() {
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function Jg(e, t) {
      if (Zg)
        return false;
      if (t === null)
        return g("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", G), false;
      e.length !== t.length && g(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, G, "[" + t.join(", ") + "]", "[" + e.join(", ") + "]");
      for (var i = 0; i < t.length && i < e.length; i++)
        if (!Me(e[i], t[i]))
          return false;
      return true;
    }
    function Af(e, t, i, a, o, s) {
      qs = s, tn = t, wa = e !== null ? e._debugHookTypes : null, $u = -1, Zg = e !== null && e.type !== t.type, t.memoizedState = null, t.updateQueue = null, t.lanes = Y, e !== null && e.memoizedState !== null ? ke.current = Eb : wa !== null ? ke.current = _b : ke.current = bb;
      var f = i(a, o);
      if (Op) {
        var p = 0;
        do {
          if (Op = false, Lp = 0, p >= Dx)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          p += 1, Zg = false, cr = null, fr = null, t.updateQueue = null, $u = -1, ke.current = Cb, f = i(a, o);
        } while (Op);
      }
      ke.current = _h, t._debugHookTypes = wa;
      var v = cr !== null && cr.next !== null;
      if (qs = Y, tn = null, cr = null, fr = null, G = null, wa = null, $u = -1, e !== null && (e.flags & ar) !== (t.flags & ar) && // Disable this warning in legacy mode, because legacy Suspense is weird
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
      (e.mode & mt) !== Qe && g("Internal React error: Expected static flag was missing. Please notify the React team."), uh = false, v)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return f;
    }
    function zf() {
      var e = Lp !== 0;
      return Lp = 0, e;
    }
    function tb(e, t, i) {
      t.updateQueue = e.updateQueue, (t.mode & Ui) !== Qe ? t.flags &= ~(po | ti | mn | ut) : t.flags &= ~(mn | ut), e.lanes = bu(e.lanes, i);
    }
    function nb() {
      if (ke.current = _h, uh) {
        for (var e = tn.memoizedState; e !== null; ) {
          var t = e.queue;
          t !== null && (t.pending = null), e = e.next;
        }
        uh = false;
      }
      qs = Y, tn = null, cr = null, fr = null, wa = null, $u = -1, G = null, mb = false, Op = false, Lp = 0;
    }
    function Wl() {
      var e = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return fr === null ? tn.memoizedState = fr = e : fr = fr.next = e, fr;
    }
    function Na() {
      var e;
      if (cr === null) {
        var t = tn.alternate;
        t !== null ? e = t.memoizedState : e = null;
      } else
        e = cr.next;
      var i;
      if (fr === null ? i = tn.memoizedState : i = fr.next, i !== null)
        fr = i, i = fr.next, cr = e;
      else {
        if (e === null)
          throw new Error("Rendered more hooks than during the previous render.");
        cr = e;
        var a = {
          memoizedState: cr.memoizedState,
          baseState: cr.baseState,
          baseQueue: cr.baseQueue,
          queue: cr.queue,
          next: null
        };
        fr === null ? tn.memoizedState = fr = a : fr = fr.next = a;
      }
      return fr;
    }
    function rb() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function e0(e, t) {
      return typeof t == "function" ? t(e) : t;
    }
    function t0(e, t, i) {
      var a = Wl(), o;
      i !== void 0 ? o = i(t) : o = t, a.memoizedState = a.baseState = o;
      var s = {
        pending: null,
        interleaved: null,
        lanes: Y,
        dispatch: null,
        lastRenderedReducer: e,
        lastRenderedState: o
      };
      a.queue = s;
      var f = s.dispatch = zx.bind(null, tn, s);
      return [a.memoizedState, f];
    }
    function n0(e, t, i) {
      var a = Na(), o = a.queue;
      if (o === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      o.lastRenderedReducer = e;
      var s = cr, f = s.baseQueue, p = o.pending;
      if (p !== null) {
        if (f !== null) {
          var v = f.next, y = p.next;
          f.next = y, p.next = v;
        }
        s.baseQueue !== f && g("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), s.baseQueue = f = p, o.pending = null;
      }
      if (f !== null) {
        var S = f.next, O = s.baseState, N = null, U = null, F = null, I = S;
        do {
          var Re = I.lane;
          if (Co(qs, Re)) {
            if (F !== null) {
              var Ue = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: wt,
                action: I.action,
                hasEagerState: I.hasEagerState,
                eagerState: I.eagerState,
                next: null
              };
              F = F.next = Ue;
            }
            if (I.hasEagerState)
              O = I.eagerState;
            else {
              var Dt = I.action;
              O = e(O, Dt);
            }
          } else {
            var Ye = {
              lane: Re,
              action: I.action,
              hasEagerState: I.hasEagerState,
              eagerState: I.eagerState,
              next: null
            };
            F === null ? (U = F = Ye, N = O) : F = F.next = Ye, tn.lanes = st(tn.lanes, Re), Kp(Re);
          }
          I = I.next;
        } while (I !== null && I !== S);
        F === null ? N = O : F.next = U, Me(O, a.memoizedState) || Fp(), a.memoizedState = O, a.baseState = N, a.baseQueue = F, o.lastRenderedState = O;
      }
      var Et = o.interleaved;
      if (Et !== null) {
        var A = Et;
        do {
          var $ = A.lane;
          tn.lanes = st(tn.lanes, $), Kp($), A = A.next;
        } while (A !== Et);
      } else
        f === null && (o.lanes = Y);
      var z = o.dispatch;
      return [a.memoizedState, z];
    }
    function r0(e, t, i) {
      var a = Na(), o = a.queue;
      if (o === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      o.lastRenderedReducer = e;
      var s = o.dispatch, f = o.pending, p = a.memoizedState;
      if (f !== null) {
        o.pending = null;
        var v = f.next, y = v;
        do {
          var S = y.action;
          p = e(p, S), y = y.next;
        } while (y !== v);
        Me(p, a.memoizedState) || Fp(), a.memoizedState = p, a.baseQueue === null && (a.baseState = p), o.lastRenderedState = p;
      }
      return [p, s];
    }
    function E2(e, t, i) {
    }
    function C2(e, t, i) {
    }
    function i0(e, t, i) {
      var a = tn, o = Wl(), s, f = Ar();
      if (f) {
        if (i === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        s = i(), Lf || s !== i() && (g("The result of getServerSnapshot should be cached to avoid an infinite loop"), Lf = true);
      } else {
        if (s = t(), !Lf) {
          var p = t();
          Me(s, p) || (g("The result of getSnapshot should be cached to avoid an infinite loop"), Lf = true);
        }
        var v = Fh();
        if (v === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        Rs(v, qs) || ib(a, t, s);
      }
      o.memoizedState = s;
      var y = {
        value: s,
        getSnapshot: t
      };
      return o.queue = y, ph(lb.bind(null, a, y, e), [e]), a.flags |= mn, Mp(ur | zr, ab.bind(null, a, y, s, t), void 0, null), s;
    }
    function sh(e, t, i) {
      var a = tn, o = Na(), s = t();
      if (!Lf) {
        var f = t();
        Me(s, f) || (g("The result of getSnapshot should be cached to avoid an infinite loop"), Lf = true);
      }
      var p = o.memoizedState, v = !Me(p, s);
      v && (o.memoizedState = s, Fp());
      var y = o.queue;
      if (zp(lb.bind(null, a, y, e), [e]), y.getSnapshot !== t || v || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      fr !== null && fr.memoizedState.tag & ur) {
        a.flags |= mn, Mp(ur | zr, ab.bind(null, a, y, s, t), void 0, null);
        var S = Fh();
        if (S === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        Rs(S, qs) || ib(a, t, s);
      }
      return s;
    }
    function ib(e, t, i) {
      e.flags |= ys;
      var a = {
        getSnapshot: t,
        value: i
      }, o = tn.updateQueue;
      if (o === null)
        o = rb(), tn.updateQueue = o, o.stores = [a];
      else {
        var s = o.stores;
        s === null ? o.stores = [a] : s.push(a);
      }
    }
    function ab(e, t, i, a) {
      t.value = i, t.getSnapshot = a, ob(t) && ub(e);
    }
    function lb(e, t, i) {
      var a = function() {
        ob(t) && ub(e);
      };
      return i(a);
    }
    function ob(e) {
      var t = e.getSnapshot, i = e.value;
      try {
        var a = t();
        return !Me(i, a);
      } catch {
        return true;
      }
    }
    function ub(e) {
      var t = $i(e, Ke);
      t !== null && mr(t, e, Ke, on);
    }
    function ch(e) {
      var t = Wl();
      typeof e == "function" && (e = e()), t.memoizedState = t.baseState = e;
      var i = {
        pending: null,
        interleaved: null,
        lanes: Y,
        dispatch: null,
        lastRenderedReducer: e0,
        lastRenderedState: e
      };
      t.queue = i;
      var a = i.dispatch = Vx.bind(null, tn, i);
      return [t.memoizedState, a];
    }
    function a0(e) {
      return n0(e0);
    }
    function l0(e) {
      return r0(e0);
    }
    function Mp(e, t, i, a) {
      var o = {
        tag: e,
        create: t,
        destroy: i,
        deps: a,
        // Circular
        next: null
      }, s = tn.updateQueue;
      if (s === null)
        s = rb(), tn.updateQueue = s, s.lastEffect = o.next = o;
      else {
        var f = s.lastEffect;
        if (f === null)
          s.lastEffect = o.next = o;
        else {
          var p = f.next;
          f.next = o, o.next = p, s.lastEffect = o;
        }
      }
      return o;
    }
    function o0(e) {
      var t = Wl();
      {
        var i = {
          current: e
        };
        return t.memoizedState = i, i;
      }
    }
    function fh(e) {
      var t = Na();
      return t.memoizedState;
    }
    function Ap(e, t, i, a) {
      var o = Wl(), s = a === void 0 ? null : a;
      tn.flags |= e, o.memoizedState = Mp(ur | t, i, void 0, s);
    }
    function dh(e, t, i, a) {
      var o = Na(), s = a === void 0 ? null : a, f = void 0;
      if (cr !== null) {
        var p = cr.memoizedState;
        if (f = p.destroy, s !== null) {
          var v = p.deps;
          if (Jg(s, v)) {
            o.memoizedState = Mp(t, i, f, s);
            return;
          }
        }
      }
      tn.flags |= e, o.memoizedState = Mp(ur | t, i, f, s);
    }
    function ph(e, t) {
      return (tn.mode & Ui) !== Qe ? Ap(po | mn | wl, zr, e, t) : Ap(mn | wl, zr, e, t);
    }
    function zp(e, t) {
      return dh(mn, zr, e, t);
    }
    function u0(e, t) {
      return Ap(ut, Yl, e, t);
    }
    function vh(e, t) {
      return dh(ut, Yl, e, t);
    }
    function s0(e, t) {
      var i = ut;
      return i |= ei, (tn.mode & Ui) !== Qe && (i |= ti), Ap(i, sr, e, t);
    }
    function mh(e, t) {
      return dh(ut, sr, e, t);
    }
    function sb(e, t) {
      if (typeof t == "function") {
        var i = t, a = e();
        return i(a), function() {
          i(null);
        };
      } else if (t != null) {
        var o = t;
        o.hasOwnProperty("current") || g("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(o).join(", ") + "}");
        var s = e();
        return o.current = s, function() {
          o.current = null;
        };
      }
    }
    function c0(e, t, i) {
      typeof t != "function" && g("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", t !== null ? typeof t : "null");
      var a = i != null ? i.concat([e]) : null, o = ut;
      return o |= ei, (tn.mode & Ui) !== Qe && (o |= ti), Ap(o, sr, sb.bind(null, t, e), a);
    }
    function hh(e, t, i) {
      typeof t != "function" && g("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", t !== null ? typeof t : "null");
      var a = i != null ? i.concat([e]) : null;
      return dh(ut, sr, sb.bind(null, t, e), a);
    }
    function Lx(e, t) {
    }
    var yh = Lx;
    function f0(e, t) {
      var i = Wl(), a = t === void 0 ? null : t;
      return i.memoizedState = [e, a], e;
    }
    function gh(e, t) {
      var i = Na(), a = t === void 0 ? null : t, o = i.memoizedState;
      if (o !== null && a !== null) {
        var s = o[1];
        if (Jg(a, s))
          return o[0];
      }
      return i.memoizedState = [e, a], e;
    }
    function d0(e, t) {
      var i = Wl(), a = t === void 0 ? null : t, o = e();
      return i.memoizedState = [o, a], o;
    }
    function Sh(e, t) {
      var i = Na(), a = t === void 0 ? null : t, o = i.memoizedState;
      if (o !== null && a !== null) {
        var s = o[1];
        if (Jg(a, s))
          return o[0];
      }
      var f = e();
      return i.memoizedState = [f, a], f;
    }
    function p0(e) {
      var t = Wl();
      return t.memoizedState = e, e;
    }
    function cb(e) {
      var t = Na(), i = cr, a = i.memoizedState;
      return db(t, a, e);
    }
    function fb(e) {
      var t = Na();
      if (cr === null)
        return t.memoizedState = e, e;
      var i = cr.memoizedState;
      return db(t, i, e);
    }
    function db(e, t, i) {
      var a = !Sy(qs);
      if (a) {
        if (!Me(i, t)) {
          var o = Vd();
          tn.lanes = st(tn.lanes, o), Kp(o), e.baseState = true;
        }
        return t;
      } else
        return e.baseState && (e.baseState = false, Fp()), e.memoizedState = i, i;
    }
    function Mx(e, t, i) {
      var a = Fi();
      In(Er(a, or)), e(true);
      var o = Dp.transition;
      Dp.transition = {};
      var s = Dp.transition;
      Dp.transition._updatedFibers = /* @__PURE__ */ new Set();
      try {
        e(false), t();
      } finally {
        if (In(a), Dp.transition = o, o === null && s._updatedFibers) {
          var f = s._updatedFibers.size;
          f > 10 && P("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), s._updatedFibers.clear();
        }
      }
    }
    function v0() {
      var e = ch(false), t = e[0], i = e[1], a = Mx.bind(null, i), o = Wl();
      return o.memoizedState = a, [t, a];
    }
    function pb() {
      var e = a0(), t = e[0], i = Na(), a = i.memoizedState;
      return [t, a];
    }
    function vb() {
      var e = l0(), t = e[0], i = Na(), a = i.memoizedState;
      return [t, a];
    }
    var mb = false;
    function Ax() {
      return mb;
    }
    function m0() {
      var e = Wl(), t = Fh(), i = t.identifierPrefix, a;
      if (Ar()) {
        var o = Gk();
        a = ":" + i + "R" + o;
        var s = Lp++;
        s > 0 && (a += "H" + s.toString(32)), a += ":";
      } else {
        var f = Nx++;
        a = ":" + i + "r" + f.toString(32) + ":";
      }
      return e.memoizedState = a, a;
    }
    function bh() {
      var e = Na(), t = e.memoizedState;
      return t;
    }
    function zx(e, t, i) {
      typeof arguments[3] == "function" && g("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var a = qu(e), o = {
        lane: a,
        action: i,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (hb(e))
        yb(t, o);
      else {
        var s = AS(e, t, o, a);
        if (s !== null) {
          var f = ki();
          mr(s, e, a, f), gb(s, t, a);
        }
      }
      Sb(e, a);
    }
    function Vx(e, t, i) {
      typeof arguments[3] == "function" && g("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var a = qu(e), o = {
        lane: a,
        action: i,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (hb(e))
        yb(t, o);
      else {
        var s = e.alternate;
        if (e.lanes === Y && (s === null || s.lanes === Y)) {
          var f = t.lastRenderedReducer;
          if (f !== null) {
            var p;
            p = ke.current, ke.current = nl;
            try {
              var v = t.lastRenderedState, y = f(v, i);
              if (o.hasEagerState = true, o.eagerState = y, Me(y, v)) {
                vx(e, t, o, a);
                return;
              }
            } catch {
            } finally {
              ke.current = p;
            }
          }
        }
        var S = AS(e, t, o, a);
        if (S !== null) {
          var O = ki();
          mr(S, e, a, O), gb(S, t, a);
        }
      }
      Sb(e, a);
    }
    function hb(e) {
      var t = e.alternate;
      return e === tn || t !== null && t === tn;
    }
    function yb(e, t) {
      Op = uh = true;
      var i = e.pending;
      i === null ? t.next = t : (t.next = i.next, i.next = t), e.pending = t;
    }
    function gb(e, t, i) {
      if (zd(i)) {
        var a = t.lanes;
        a = Ud(a, e.pendingLanes);
        var o = st(a, i);
        t.lanes = o, _u(e, o);
      }
    }
    function Sb(e, t, i) {
      Al(e, t);
    }
    var _h = {
      readContext: nr,
      useCallback: si,
      useContext: si,
      useEffect: si,
      useImperativeHandle: si,
      useInsertionEffect: si,
      useLayoutEffect: si,
      useMemo: si,
      useReducer: si,
      useRef: si,
      useState: si,
      useDebugValue: si,
      useDeferredValue: si,
      useTransition: si,
      useMutableSource: si,
      useSyncExternalStore: si,
      useId: si,
      unstable_isNewReconciler: ce
    }, bb = null, _b = null, Eb = null, Cb = null, Ql = null, nl = null, Eh = null;
    {
      var h0 = function() {
        g("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, lt = function() {
        g("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      bb = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", Xt(), Mf(t), f0(e, t);
        },
        useContext: function(e) {
          return G = "useContext", Xt(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", Xt(), Mf(t), ph(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", Xt(), Mf(i), c0(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", Xt(), Mf(t), u0(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", Xt(), Mf(t), s0(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", Xt(), Mf(t);
          var i = ke.current;
          ke.current = Ql;
          try {
            return d0(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", Xt();
          var a = ke.current;
          ke.current = Ql;
          try {
            return t0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", Xt(), o0(e);
        },
        useState: function(e) {
          G = "useState", Xt();
          var t = ke.current;
          ke.current = Ql;
          try {
            return ch(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", Xt(), void 0;
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", Xt(), p0(e);
        },
        useTransition: function() {
          return G = "useTransition", Xt(), v0();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", Xt(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", Xt(), i0(e, t, i);
        },
        useId: function() {
          return G = "useId", Xt(), m0();
        },
        unstable_isNewReconciler: ce
      }, _b = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", ye(), f0(e, t);
        },
        useContext: function(e) {
          return G = "useContext", ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", ye(), ph(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", ye(), c0(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", ye(), u0(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", ye(), s0(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", ye();
          var i = ke.current;
          ke.current = Ql;
          try {
            return d0(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", ye();
          var a = ke.current;
          ke.current = Ql;
          try {
            return t0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", ye(), o0(e);
        },
        useState: function(e) {
          G = "useState", ye();
          var t = ke.current;
          ke.current = Ql;
          try {
            return ch(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", ye(), void 0;
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", ye(), p0(e);
        },
        useTransition: function() {
          return G = "useTransition", ye(), v0();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", ye(), i0(e, t, i);
        },
        useId: function() {
          return G = "useId", ye(), m0();
        },
        unstable_isNewReconciler: ce
      }, Eb = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", ye();
          var i = ke.current;
          ke.current = nl;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", ye();
          var a = ke.current;
          ke.current = nl;
          try {
            return n0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", ye(), fh();
        },
        useState: function(e) {
          G = "useState", ye();
          var t = ke.current;
          ke.current = nl;
          try {
            return a0(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", ye(), cb(e);
        },
        useTransition: function() {
          return G = "useTransition", ye(), pb();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", ye(), bh();
        },
        unstable_isNewReconciler: ce
      }, Cb = {
        readContext: function(e) {
          return nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", ye();
          var i = ke.current;
          ke.current = Eh;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", ye();
          var a = ke.current;
          ke.current = Eh;
          try {
            return r0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", ye(), fh();
        },
        useState: function(e) {
          G = "useState", ye();
          var t = ke.current;
          ke.current = Eh;
          try {
            return l0(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", ye(), fb(e);
        },
        useTransition: function() {
          return G = "useTransition", ye(), vb();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", ye(), bh();
        },
        unstable_isNewReconciler: ce
      }, Ql = {
        readContext: function(e) {
          return h0(), nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", lt(), Xt(), f0(e, t);
        },
        useContext: function(e) {
          return G = "useContext", lt(), Xt(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", lt(), Xt(), ph(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", lt(), Xt(), c0(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", lt(), Xt(), u0(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", lt(), Xt(), s0(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", lt(), Xt();
          var i = ke.current;
          ke.current = Ql;
          try {
            return d0(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", lt(), Xt();
          var a = ke.current;
          ke.current = Ql;
          try {
            return t0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", lt(), Xt(), o0(e);
        },
        useState: function(e) {
          G = "useState", lt(), Xt();
          var t = ke.current;
          ke.current = Ql;
          try {
            return ch(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", lt(), Xt(), void 0;
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", lt(), Xt(), p0(e);
        },
        useTransition: function() {
          return G = "useTransition", lt(), Xt(), v0();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", lt(), Xt(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", lt(), Xt(), i0(e, t, i);
        },
        useId: function() {
          return G = "useId", lt(), Xt(), m0();
        },
        unstable_isNewReconciler: ce
      }, nl = {
        readContext: function(e) {
          return h0(), nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", lt(), ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", lt(), ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", lt(), ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", lt(), ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", lt(), ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", lt(), ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", lt(), ye();
          var i = ke.current;
          ke.current = nl;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", lt(), ye();
          var a = ke.current;
          ke.current = nl;
          try {
            return n0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", lt(), ye(), fh();
        },
        useState: function(e) {
          G = "useState", lt(), ye();
          var t = ke.current;
          ke.current = nl;
          try {
            return a0(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", lt(), ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", lt(), ye(), cb(e);
        },
        useTransition: function() {
          return G = "useTransition", lt(), ye(), pb();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", lt(), ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", lt(), ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", lt(), ye(), bh();
        },
        unstable_isNewReconciler: ce
      }, Eh = {
        readContext: function(e) {
          return h0(), nr(e);
        },
        useCallback: function(e, t) {
          return G = "useCallback", lt(), ye(), gh(e, t);
        },
        useContext: function(e) {
          return G = "useContext", lt(), ye(), nr(e);
        },
        useEffect: function(e, t) {
          return G = "useEffect", lt(), ye(), zp(e, t);
        },
        useImperativeHandle: function(e, t, i) {
          return G = "useImperativeHandle", lt(), ye(), hh(e, t, i);
        },
        useInsertionEffect: function(e, t) {
          return G = "useInsertionEffect", lt(), ye(), vh(e, t);
        },
        useLayoutEffect: function(e, t) {
          return G = "useLayoutEffect", lt(), ye(), mh(e, t);
        },
        useMemo: function(e, t) {
          G = "useMemo", lt(), ye();
          var i = ke.current;
          ke.current = nl;
          try {
            return Sh(e, t);
          } finally {
            ke.current = i;
          }
        },
        useReducer: function(e, t, i) {
          G = "useReducer", lt(), ye();
          var a = ke.current;
          ke.current = nl;
          try {
            return r0(e, t, i);
          } finally {
            ke.current = a;
          }
        },
        useRef: function(e) {
          return G = "useRef", lt(), ye(), fh();
        },
        useState: function(e) {
          G = "useState", lt(), ye();
          var t = ke.current;
          ke.current = nl;
          try {
            return l0(e);
          } finally {
            ke.current = t;
          }
        },
        useDebugValue: function(e, t) {
          return G = "useDebugValue", lt(), ye(), yh();
        },
        useDeferredValue: function(e) {
          return G = "useDeferredValue", lt(), ye(), fb(e);
        },
        useTransition: function() {
          return G = "useTransition", lt(), ye(), vb();
        },
        useMutableSource: function(e, t, i) {
          return G = "useMutableSource", lt(), ye(), void 0;
        },
        useSyncExternalStore: function(e, t, i) {
          return G = "useSyncExternalStore", lt(), ye(), sh(e, t);
        },
        useId: function() {
          return G = "useId", lt(), ye(), bh();
        },
        unstable_isNewReconciler: ce
      };
    }
    var Yu = _.unstable_now, kb = 0, Ch = -1, Vp = -1, kh = -1, y0 = false, xh = false;
    function xb() {
      return y0;
    }
    function Ux() {
      xh = true;
    }
    function jx() {
      y0 = false, xh = false;
    }
    function Fx() {
      y0 = xh, xh = false;
    }
    function Rb() {
      return kb;
    }
    function Tb() {
      kb = Yu();
    }
    function g0(e) {
      Vp = Yu(), e.actualStartTime < 0 && (e.actualStartTime = Yu());
    }
    function wb(e) {
      Vp = -1;
    }
    function Rh(e, t) {
      if (Vp >= 0) {
        var i = Yu() - Vp;
        e.actualDuration += i, t && (e.selfBaseDuration = i), Vp = -1;
      }
    }
    function Gl(e) {
      if (Ch >= 0) {
        var t = Yu() - Ch;
        Ch = -1;
        for (var i = e.return; i !== null; ) {
          switch (i.tag) {
            case W:
              var a = i.stateNode;
              a.effectDuration += t;
              return;
            case xe:
              var o = i.stateNode;
              o.effectDuration += t;
              return;
          }
          i = i.return;
        }
      }
    }
    function S0(e) {
      if (kh >= 0) {
        var t = Yu() - kh;
        kh = -1;
        for (var i = e.return; i !== null; ) {
          switch (i.tag) {
            case W:
              var a = i.stateNode;
              a !== null && (a.passiveEffectDuration += t);
              return;
            case xe:
              var o = i.stateNode;
              o !== null && (o.passiveEffectDuration += t);
              return;
          }
          i = i.return;
        }
      }
    }
    function ql() {
      Ch = Yu();
    }
    function b0() {
      kh = Yu();
    }
    function _0(e) {
      for (var t = e.child; t; )
        e.actualDuration += t.actualDuration, t = t.sibling;
    }
    function Xs(e, t) {
      return {
        value: e,
        source: t,
        stack: Zo(t),
        digest: null
      };
    }
    function E0(e, t, i) {
      return {
        value: e,
        source: null,
        stack: i ?? null,
        digest: t ?? null
      };
    }
    function Hx(e, t) {
      return true;
    }
    function C0(e, t) {
      try {
        var i = Hx(e, t);
        if (i === false)
          return;
        var a = t.value, o = t.source, s = t.stack, f = s !== null ? s : "";
        if (a != null && a._suppressLogging) {
          if (e.tag === Q)
            return;
          console.error(a);
        }
        var p = o ? at(o) : null, v = p ? "The above error occurred in the <" + p + "> component:" : "The above error occurred in one of your React components:", y;
        if (e.tag === W)
          y = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          var S = at(e) || "Anonymous";
          y = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + S + ".");
        }
        var O = v + `
` + f + `

` + ("" + y);
        console.error(O);
      } catch (N) {
        setTimeout(function() {
          throw N;
        });
      }
    }
    var Px = typeof WeakMap == "function" ? WeakMap : Map;
    function Nb(e, t, i) {
      var a = Fo(on, i);
      a.tag = Cg, a.payload = {
        element: null
      };
      var o = t.value;
      return a.callback = function() {
        MT(o), C0(e, t);
      }, a;
    }
    function k0(e, t, i) {
      var a = Fo(on, i);
      a.tag = Cg;
      var o = e.type.getDerivedStateFromError;
      if (typeof o == "function") {
        var s = t.value;
        a.payload = function() {
          return o(s);
        }, a.callback = function() {
          H_(e), C0(e, t);
        };
      }
      var f = e.stateNode;
      return f !== null && typeof f.componentDidCatch == "function" && (a.callback = function() {
        H_(e), C0(e, t), typeof o != "function" && OT(this);
        var v = t.value, y = t.stack;
        this.componentDidCatch(v, {
          componentStack: y !== null ? y : ""
        }), typeof o != "function" && (li(e.lanes, Ke) || g("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", at(e) || "Unknown"));
      }), a;
    }
    function Db(e, t, i) {
      var a = e.pingCache, o;
      if (a === null ? (a = e.pingCache = new Px(), o = /* @__PURE__ */ new Set(), a.set(t, o)) : (o = a.get(t), o === void 0 && (o = /* @__PURE__ */ new Set(), a.set(t, o))), !o.has(i)) {
        o.add(i);
        var s = AT.bind(null, e, t, i);
        lr && Zp(e, i), t.then(s, s);
      }
    }
    function Bx(e, t, i, a) {
      var o = e.updateQueue;
      if (o === null) {
        var s = /* @__PURE__ */ new Set();
        s.add(i), e.updateQueue = s;
      } else
        o.add(i);
    }
    function Ix(e, t) {
      var i = e.tag;
      if ((e.mode & mt) === Qe && (i === Z || i === oe || i === De)) {
        var a = e.alternate;
        a ? (e.updateQueue = a.updateQueue, e.memoizedState = a.memoizedState, e.lanes = a.lanes) : (e.updateQueue = null, e.memoizedState = null);
      }
    }
    function Ob(e) {
      var t = e;
      do {
        if (t.tag === be && Tx(t))
          return t;
        t = t.return;
      } while (t !== null);
      return null;
    }
    function Lb(e, t, i, a, o) {
      if ((e.mode & mt) === Qe) {
        if (e === t)
          e.flags |= Kn;
        else {
          if (e.flags |= tt, i.flags |= gs, i.flags &= ~(Sc | hi), i.tag === Q) {
            var s = i.alternate;
            if (s === null)
              i.tag = Rt;
            else {
              var f = Fo(on, Ke);
              f.tag = Xm, Pu(i, f, Ke);
            }
          }
          i.lanes = st(i.lanes, Ke);
        }
        return e;
      }
      return e.flags |= Kn, e.lanes = o, e;
    }
    function $x(e, t, i, a, o) {
      if (i.flags |= hi, lr && Zp(e, o), a !== null && typeof a == "object" && typeof a.then == "function") {
        var s = a;
        Ix(i), Ar() && i.mode & mt && ES();
        var f = Ob(t);
        if (f !== null) {
          f.flags &= ~Tn, Lb(f, t, i, e, o), f.mode & mt && Db(e, s, o), Bx(f, e, s);
          return;
        } else {
          if (!Su(o)) {
            Db(e, s, o), r1();
            return;
          }
          var p = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          a = p;
        }
      } else if (Ar() && i.mode & mt) {
        ES();
        var v = Ob(t);
        if (v !== null) {
          (v.flags & Kn) === $e && (v.flags |= Tn), Lb(v, t, i, e, o), hg(Xs(a, i));
          return;
        }
      }
      a = Xs(a, i), CT(a);
      var y = t;
      do {
        switch (y.tag) {
          case W: {
            var S = a;
            y.flags |= Kn;
            var O = Bn(o);
            y.lanes = st(y.lanes, O);
            var N = Nb(y, S, O);
            Rg(y, N);
            return;
          }
          case Q:
            var U = a, F = y.type, I = y.stateNode;
            if ((y.flags & tt) === $e && (typeof F.getDerivedStateFromError == "function" || I !== null && typeof I.componentDidCatch == "function" && !O_(I))) {
              y.flags |= Kn;
              var Re = Bn(o);
              y.lanes = st(y.lanes, Re);
              var Ye = k0(y, U, Re);
              Rg(y, Ye);
              return;
            }
            break;
        }
        y = y.return;
      } while (y !== null);
    }
    function Yx() {
      return null;
    }
    var Up = b.ReactCurrentOwner, rl = false, x0, jp, R0, T0, w0, Ks, N0, Th;
    x0 = {}, jp = {}, R0 = {}, T0 = {}, w0 = {}, Ks = false, N0 = {}, Th = {};
    function Ei(e, t, i, a) {
      e === null ? t.child = XS(t, null, i, a) : t.child = wf(t, e.child, i, a);
    }
    function Wx(e, t, i, a) {
      t.child = wf(t, e.child, null, a), t.child = wf(t, null, i, a);
    }
    function Mb(e, t, i, a, o) {
      if (t.type !== t.elementType) {
        var s = i.propTypes;
        s && Ka(
          s,
          a,
          // Resolved props
          "prop",
          Mt(i)
        );
      }
      var f = i.render, p = t.ref, v, y;
      Tf(t, o), Ml(t);
      {
        if (Up.current = t, Kr(true), v = Af(e, t, f, a, p, o), y = zf(), t.mode & Cn) {
          Pn(true);
          try {
            v = Af(e, t, f, a, p, o), y = zf();
          } finally {
            Pn(false);
          }
        }
        Kr(false);
      }
      return vo(), e !== null && !rl ? (tb(e, t, o), Ho(e, t, o)) : (Ar() && y && cg(t), t.flags |= Rl, Ei(e, t, v, o), t.child);
    }
    function Ab(e, t, i, a, o) {
      if (e === null) {
        var s = i.type;
        if (KT(s) && i.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        i.defaultProps === void 0) {
          var f = s;
          return f = If(s), t.tag = De, t.type = f, L0(t, s), zb(e, t, f, a, o);
        }
        {
          var p = s.propTypes;
          p && Ka(
            p,
            a,
            // Resolved props
            "prop",
            Mt(s)
          );
        }
        var v = v1(i.type, null, a, t, t.mode, o);
        return v.ref = t.ref, v.return = t, t.child = v, v;
      }
      {
        var y = i.type, S = y.propTypes;
        S && Ka(
          S,
          a,
          // Resolved props
          "prop",
          Mt(y)
        );
      }
      var O = e.child, N = j0(e, o);
      if (!N) {
        var U = O.memoizedProps, F = i.compare;
        if (F = F !== null ? F : Pe, F(U, a) && e.ref === t.ref)
          return Ho(e, t, o);
      }
      t.flags |= Rl;
      var I = nc(O, a);
      return I.ref = t.ref, I.return = t, t.child = I, I;
    }
    function zb(e, t, i, a, o) {
      if (t.type !== t.elementType) {
        var s = t.elementType;
        if (s.$$typeof === gt) {
          var f = s, p = f._payload, v = f._init;
          try {
            s = v(p);
          } catch {
            s = null;
          }
          var y = s && s.propTypes;
          y && Ka(
            y,
            a,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
            Mt(s)
          );
        }
      }
      if (e !== null) {
        var S = e.memoizedProps;
        if (Pe(S, a) && e.ref === t.ref && // Prevent bailout if the implementation changed due to hot reload.
        t.type === e.type)
          if (rl = false, t.pendingProps = a = S, j0(e, o))
            (e.flags & gs) !== $e && (rl = true);
          else
            return t.lanes = e.lanes, Ho(e, t, o);
      }
      return D0(e, t, i, a, o);
    }
    function Vb(e, t, i) {
      var a = t.pendingProps, o = a.children, s = e !== null ? e.memoizedState : null;
      if (a.mode === "hidden" || R)
        if ((t.mode & mt) === Qe) {
          var f = {
            baseLanes: Y,
            cachePool: null,
            transitions: null
          };
          t.memoizedState = f, Hh(t, i);
        } else if (li(i, ai)) {
          var O = {
            baseLanes: Y,
            cachePool: null,
            transitions: null
          };
          t.memoizedState = O;
          var N = s !== null ? s.baseLanes : i;
          Hh(t, N);
        } else {
          var p = null, v;
          if (s !== null) {
            var y = s.baseLanes;
            v = st(y, i);
          } else
            v = i;
          t.lanes = t.childLanes = ai;
          var S = {
            baseLanes: v,
            cachePool: p,
            transitions: null
          };
          return t.memoizedState = S, t.updateQueue = null, Hh(t, v), null;
        }
      else {
        var U;
        s !== null ? (U = st(s.baseLanes, i), t.memoizedState = null) : U = i, Hh(t, U);
      }
      return Ei(e, t, o, i), t.child;
    }
    function Qx(e, t, i) {
      var a = t.pendingProps;
      return Ei(e, t, a, i), t.child;
    }
    function Gx(e, t, i) {
      var a = t.pendingProps.children;
      return Ei(e, t, a, i), t.child;
    }
    function qx(e, t, i) {
      {
        t.flags |= ut;
        {
          var a = t.stateNode;
          a.effectDuration = 0, a.passiveEffectDuration = 0;
        }
      }
      var o = t.pendingProps, s = o.children;
      return Ei(e, t, s, i), t.child;
    }
    function Ub(e, t) {
      var i = t.ref;
      (e === null && i !== null || e !== null && e.ref !== i) && (t.flags |= Jr, t.flags |= bd);
    }
    function D0(e, t, i, a, o) {
      if (t.type !== t.elementType) {
        var s = i.propTypes;
        s && Ka(
          s,
          a,
          // Resolved props
          "prop",
          Mt(i)
        );
      }
      var f;
      {
        var p = _f(t, i, true);
        f = Ef(t, p);
      }
      var v, y;
      Tf(t, o), Ml(t);
      {
        if (Up.current = t, Kr(true), v = Af(e, t, i, a, f, o), y = zf(), t.mode & Cn) {
          Pn(true);
          try {
            v = Af(e, t, i, a, f, o), y = zf();
          } finally {
            Pn(false);
          }
        }
        Kr(false);
      }
      return vo(), e !== null && !rl ? (tb(e, t, o), Ho(e, t, o)) : (Ar() && y && cg(t), t.flags |= Rl, Ei(e, t, v, o), t.child);
    }
    function jb(e, t, i, a, o) {
      {
        switch (dw(t)) {
          case false: {
            var s = t.stateNode, f = t.type, p = new f(t.memoizedProps, s.context), v = p.state;
            s.updater.enqueueSetState(s, v, null);
            break;
          }
          case true: {
            t.flags |= tt, t.flags |= Kn;
            var y = new Error("Simulated error coming from DevTools"), S = Bn(o);
            t.lanes = st(t.lanes, S);
            var O = k0(t, Xs(y, t), S);
            Rg(t, O);
            break;
          }
        }
        if (t.type !== t.elementType) {
          var N = i.propTypes;
          N && Ka(
            N,
            a,
            // Resolved props
            "prop",
            Mt(i)
          );
        }
      }
      var U;
      $l(i) ? (U = true, Fm(t)) : U = false, Tf(t, o);
      var F = t.stateNode, I;
      F === null ? (Nh(e, t), YS(t, i, a), jg(t, i, a, o), I = true) : e === null ? I = _x(t, i, a, o) : I = Ex(e, t, i, a, o);
      var Re = O0(e, t, i, I, U, o);
      {
        var Ye = t.stateNode;
        I && Ye.props !== a && (Ks || g("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", at(t) || "a component"), Ks = true);
      }
      return Re;
    }
    function O0(e, t, i, a, o, s) {
      Ub(e, t);
      var f = (t.flags & tt) !== $e;
      if (!a && !f)
        return o && gS(t, i, false), Ho(e, t, s);
      var p = t.stateNode;
      Up.current = t;
      var v;
      if (f && typeof i.getDerivedStateFromError != "function")
        v = null, wb();
      else {
        Ml(t);
        {
          if (Kr(true), v = p.render(), t.mode & Cn) {
            Pn(true);
            try {
              p.render();
            } finally {
              Pn(false);
            }
          }
          Kr(false);
        }
        vo();
      }
      return t.flags |= Rl, e !== null && f ? Wx(e, t, v, s) : Ei(e, t, v, s), t.memoizedState = p.state, o && gS(t, i, true), t.child;
    }
    function Fb(e) {
      var t = e.stateNode;
      t.pendingContext ? hS(e, t.pendingContext, t.pendingContext !== t.context) : t.context && hS(e, t.context, false), $g(e, t.containerInfo);
    }
    function Xx(e, t, i) {
      if (Fb(t), e === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var a = t.pendingProps, o = t.memoizedState, s = o.element;
      US(e, t), eh(t, a, null, i);
      var f = t.memoizedState;
      t.stateNode;
      var p = f.element;
      if (o.isDehydrated) {
        var v = {
          element: p,
          isDehydrated: false,
          cache: f.cache,
          pendingSuspenseBoundaries: f.pendingSuspenseBoundaries,
          transitions: f.transitions
        }, y = t.updateQueue;
        if (y.baseState = v, t.memoizedState = v, t.flags & Tn) {
          var S = Xs(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), t);
          return Hb(e, t, p, i, S);
        } else if (p !== s) {
          var O = Xs(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), t);
          return Hb(e, t, p, i, O);
        } else {
          ex(t);
          var N = XS(t, null, p, i);
          t.child = N;
          for (var U = N; U; )
            U.flags = U.flags & ~sn | Ai, U = U.sibling;
        }
      } else {
        if (xf(), p === s)
          return Ho(e, t, i);
        Ei(e, t, p, i);
      }
      return t.child;
    }
    function Hb(e, t, i, a, o) {
      return xf(), hg(o), t.flags |= Tn, Ei(e, t, i, a), t.child;
    }
    function Kx(e, t, i) {
      ZS(t), e === null && mg(t);
      var a = t.type, o = t.pendingProps, s = e !== null ? e.memoizedProps : null, f = o.children, p = Xy(a, o);
      return p ? f = null : s !== null && Xy(a, s) && (t.flags |= qt), Ub(e, t), Ei(e, t, f, i), t.child;
    }
    function Zx(e, t) {
      return e === null && mg(t), null;
    }
    function Jx(e, t, i, a) {
      Nh(e, t);
      var o = t.pendingProps, s = i, f = s._payload, p = s._init, v = p(f);
      t.type = v;
      var y = t.tag = ZT(v), S = el(v, o), O;
      switch (y) {
        case Z:
          return L0(t, v), t.type = v = If(v), O = D0(null, t, v, S, a), O;
        case Q:
          return t.type = v = u1(v), O = jb(null, t, v, S, a), O;
        case oe:
          return t.type = v = s1(v), O = Mb(null, t, v, S, a), O;
        case we: {
          if (t.type !== t.elementType) {
            var N = v.propTypes;
            N && Ka(
              N,
              S,
              // Resolved for outer only
              "prop",
              Mt(v)
            );
          }
          return O = Ab(
            null,
            t,
            v,
            el(v.type, S),
            // The inner type can have defaults too
            a
          ), O;
        }
      }
      var U = "";
      throw v !== null && typeof v == "object" && v.$$typeof === gt && (U = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + v + ". " + ("Lazy element type must resolve to a class or function." + U));
    }
    function eR(e, t, i, a, o) {
      Nh(e, t), t.tag = Q;
      var s;
      return $l(i) ? (s = true, Fm(t)) : s = false, Tf(t, o), YS(t, i, a), jg(t, i, a, o), O0(null, t, i, true, s, o);
    }
    function tR(e, t, i, a) {
      Nh(e, t);
      var o = t.pendingProps, s;
      {
        var f = _f(t, i, false);
        s = Ef(t, f);
      }
      Tf(t, a);
      var p, v;
      Ml(t);
      {
        if (i.prototype && typeof i.prototype.render == "function") {
          var y = Mt(i) || "Unknown";
          x0[y] || (g("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", y, y), x0[y] = true);
        }
        t.mode & Cn && Ja.recordLegacyContextWarning(t, null), Kr(true), Up.current = t, p = Af(null, t, i, o, s, a), v = zf(), Kr(false);
      }
      if (vo(), t.flags |= Rl, typeof p == "object" && p !== null && typeof p.render == "function" && p.$$typeof === void 0) {
        var S = Mt(i) || "Unknown";
        jp[S] || (g("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", S, S, S), jp[S] = true);
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof p == "object" && p !== null && typeof p.render == "function" && p.$$typeof === void 0
      ) {
        {
          var O = Mt(i) || "Unknown";
          jp[O] || (g("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", O, O, O), jp[O] = true);
        }
        t.tag = Q, t.memoizedState = null, t.updateQueue = null;
        var N = false;
        return $l(i) ? (N = true, Fm(t)) : N = false, t.memoizedState = p.state !== null && p.state !== void 0 ? p.state : null, xg(t), $S(t, p), jg(t, i, o, a), O0(null, t, i, true, N, a);
      } else {
        if (t.tag = Z, t.mode & Cn) {
          Pn(true);
          try {
            p = Af(null, t, i, o, s, a), v = zf();
          } finally {
            Pn(false);
          }
        }
        return Ar() && v && cg(t), Ei(null, t, p, a), L0(t, i), t.child;
      }
    }
    function L0(e, t) {
      {
        if (t && t.childContextTypes && g("%s(...): childContextTypes cannot be defined on a function component.", t.displayName || t.name || "Component"), e.ref !== null) {
          var i = "", a = Or();
          a && (i += `

Check the render method of \`` + a + "`.");
          var o = a || "", s = e._debugSource;
          s && (o = s.fileName + ":" + s.lineNumber), w0[o] || (w0[o] = true, g("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", i));
        }
        if (typeof t.getDerivedStateFromProps == "function") {
          var f = Mt(t) || "Unknown";
          T0[f] || (g("%s: Function components do not support getDerivedStateFromProps.", f), T0[f] = true);
        }
        if (typeof t.contextType == "object" && t.contextType !== null) {
          var p = Mt(t) || "Unknown";
          R0[p] || (g("%s: Function components do not support contextType.", p), R0[p] = true);
        }
      }
    }
    var M0 = {
      dehydrated: null,
      treeContext: null,
      retryLane: wt
    };
    function A0(e) {
      return {
        baseLanes: e,
        cachePool: Yx(),
        transitions: null
      };
    }
    function nR(e, t) {
      var i = null;
      return {
        baseLanes: st(e.baseLanes, t),
        cachePool: i,
        transitions: e.transitions
      };
    }
    function rR(e, t, i, a) {
      if (t !== null) {
        var o = t.memoizedState;
        if (o === null)
          return false;
      }
      return Qg(e, Np);
    }
    function iR(e, t) {
      return bu(e.childLanes, t);
    }
    function Pb(e, t, i) {
      var a = t.pendingProps;
      pw(t) && (t.flags |= tt);
      var o = tl.current, s = false, f = (t.flags & tt) !== $e;
      if (f || rR(o, e) ? (s = true, t.flags &= ~tt) : (e === null || e.memoizedState !== null) && (o = Rx(o, eb)), o = Df(o), Iu(t, o), e === null) {
        mg(t);
        var p = t.memoizedState;
        if (p !== null) {
          var v = p.dehydrated;
          if (v !== null)
            return sR(t, v);
        }
        var y = a.children, S = a.fallback;
        if (s) {
          var O = aR(t, y, S, i), N = t.child;
          return N.memoizedState = A0(i), t.memoizedState = M0, O;
        } else
          return z0(t, y);
      } else {
        var U = e.memoizedState;
        if (U !== null) {
          var F = U.dehydrated;
          if (F !== null)
            return cR(e, t, f, a, F, U, i);
        }
        if (s) {
          var I = a.fallback, Re = a.children, Ye = oR(e, t, Re, I, i), Ue = t.child, Dt = e.child.memoizedState;
          return Ue.memoizedState = Dt === null ? A0(i) : nR(Dt, i), Ue.childLanes = iR(e, i), t.memoizedState = M0, Ye;
        } else {
          var Et = a.children, A = lR(e, t, Et, i);
          return t.memoizedState = null, A;
        }
      }
    }
    function z0(e, t, i) {
      var a = e.mode, o = {
        mode: "visible",
        children: t
      }, s = V0(o, a);
      return s.return = e, e.child = s, s;
    }
    function aR(e, t, i, a) {
      var o = e.mode, s = e.child, f = {
        mode: "hidden",
        children: t
      }, p, v;
      return (o & mt) === Qe && s !== null ? (p = s, p.childLanes = Y, p.pendingProps = f, e.mode & qe && (p.actualDuration = 0, p.actualStartTime = -1, p.selfBaseDuration = 0, p.treeBaseDuration = 0), v = Ku(i, o, a, null)) : (p = V0(f, o), v = Ku(i, o, a, null)), p.return = e, v.return = e, p.sibling = v, e.child = p, v;
    }
    function V0(e, t, i) {
      return B_(e, t, Y, null);
    }
    function Bb(e, t) {
      return nc(e, t);
    }
    function lR(e, t, i, a) {
      var o = e.child, s = o.sibling, f = Bb(o, {
        mode: "visible",
        children: i
      });
      if ((t.mode & mt) === Qe && (f.lanes = a), f.return = t, f.sibling = null, s !== null) {
        var p = t.deletions;
        p === null ? (t.deletions = [s], t.flags |= Bt) : p.push(s);
      }
      return t.child = f, f;
    }
    function oR(e, t, i, a, o) {
      var s = t.mode, f = e.child, p = f.sibling, v = {
        mode: "hidden",
        children: i
      }, y;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (s & mt) === Qe && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        t.child !== f
      ) {
        var S = t.child;
        y = S, y.childLanes = Y, y.pendingProps = v, t.mode & qe && (y.actualDuration = 0, y.actualStartTime = -1, y.selfBaseDuration = f.selfBaseDuration, y.treeBaseDuration = f.treeBaseDuration), t.deletions = null;
      } else
        y = Bb(f, v), y.subtreeFlags = f.subtreeFlags & ar;
      var O;
      return p !== null ? O = nc(p, a) : (O = Ku(a, s, o, null), O.flags |= sn), O.return = t, y.return = t, y.sibling = O, t.child = y, O;
    }
    function wh(e, t, i, a) {
      a !== null && hg(a), wf(t, e.child, null, i);
      var o = t.pendingProps, s = o.children, f = z0(t, s);
      return f.flags |= sn, t.memoizedState = null, f;
    }
    function uR(e, t, i, a, o) {
      var s = t.mode, f = {
        mode: "visible",
        children: i
      }, p = V0(f, s), v = Ku(a, s, o, null);
      return v.flags |= sn, p.return = t, v.return = t, p.sibling = v, t.child = p, (t.mode & mt) !== Qe && wf(t, e.child, null, o), v;
    }
    function sR(e, t, i) {
      return (e.mode & mt) === Qe ? (g("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), e.lanes = Ke) : eg(t) ? e.lanes = yo : e.lanes = ai, null;
    }
    function cR(e, t, i, a, o, s, f) {
      if (i)
        if (t.flags & Tn) {
          t.flags &= ~Tn;
          var A = E0(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return wh(e, t, f, A);
        } else {
          if (t.memoizedState !== null)
            return t.child = e.child, t.flags |= tt, null;
          var $ = a.children, z = a.fallback, le = uR(e, t, $, z, f), Te = t.child;
          return Te.memoizedState = A0(f), t.memoizedState = M0, le;
        }
      else {
        if (Zk(), (t.mode & mt) === Qe)
          return wh(
            e,
            t,
            f,
            // TODO: When we delete legacy mode, we should make this error argument
            // required â€” every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
        if (eg(o)) {
          var p, v, y;
          {
            var S = mk(o);
            p = S.digest, v = S.message, y = S.stack;
          }
          var O;
          v ? O = new Error(v) : O = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          var N = E0(O, p, y);
          return wh(e, t, f, N);
        }
        var U = li(f, e.childLanes);
        if (rl || U) {
          var F = Fh();
          if (F !== null) {
            var I = _y(F, f);
            if (I !== wt && I !== s.retryLane) {
              s.retryLane = I;
              var Re = on;
              $i(e, I), mr(F, e, I, Re);
            }
          }
          r1();
          var Ye = E0(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return wh(e, t, f, Ye);
        } else if (cS(o)) {
          t.flags |= tt, t.child = e.child;
          var Ue = zT.bind(null, e);
          return hk(o, Ue), null;
        } else {
          tx(t, o, s.treeContext);
          var Dt = a.children, Et = z0(t, Dt);
          return Et.flags |= Ai, Et;
        }
      }
    }
    function Ib(e, t, i) {
      e.lanes = st(e.lanes, t);
      var a = e.alternate;
      a !== null && (a.lanes = st(a.lanes, t)), _g(e.return, t, i);
    }
    function fR(e, t, i) {
      for (var a = t; a !== null; ) {
        if (a.tag === be) {
          var o = a.memoizedState;
          o !== null && Ib(a, i, e);
        } else if (a.tag === Ct)
          Ib(a, i, e);
        else if (a.child !== null) {
          a.child.return = a, a = a.child;
          continue;
        }
        if (a === e)
          return;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === e)
            return;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
    }
    function dR(e) {
      for (var t = e, i = null; t !== null; ) {
        var a = t.alternate;
        a !== null && oh(a) === null && (i = t), t = t.sibling;
      }
      return i;
    }
    function pR(e) {
      if (e !== void 0 && e !== "forwards" && e !== "backwards" && e !== "together" && !N0[e])
        if (N0[e] = true, typeof e == "string")
          switch (e.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              g('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', e, e.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              g('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', e, e.toLowerCase());
              break;
            }
            default:
              g('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', e);
              break;
          }
        else
          g('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', e);
    }
    function vR(e, t) {
      e !== void 0 && !Th[e] && (e !== "collapsed" && e !== "hidden" ? (Th[e] = true, g('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', e)) : t !== "forwards" && t !== "backwards" && (Th[e] = true, g('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', e)));
    }
    function $b(e, t) {
      {
        var i = kt(e), a = !i && typeof ea(e) == "function";
        if (i || a) {
          var o = i ? "array" : "iterable";
          return g("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", o, t, o), false;
        }
      }
      return true;
    }
    function mR(e, t) {
      if ((t === "forwards" || t === "backwards") && e !== void 0 && e !== null && e !== false)
        if (kt(e)) {
          for (var i = 0; i < e.length; i++)
            if (!$b(e[i], i))
              return;
        } else {
          var a = ea(e);
          if (typeof a == "function") {
            var o = a.call(e);
            if (o)
              for (var s = o.next(), f = 0; !s.done; s = o.next()) {
                if (!$b(s.value, f))
                  return;
                f++;
              }
          } else
            g('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', t);
        }
    }
    function U0(e, t, i, a, o) {
      var s = e.memoizedState;
      s === null ? e.memoizedState = {
        isBackwards: t,
        rendering: null,
        renderingStartTime: 0,
        last: a,
        tail: i,
        tailMode: o
      } : (s.isBackwards = t, s.rendering = null, s.renderingStartTime = 0, s.last = a, s.tail = i, s.tailMode = o);
    }
    function Yb(e, t, i) {
      var a = t.pendingProps, o = a.revealOrder, s = a.tail, f = a.children;
      pR(o), vR(s, o), mR(f, o), Ei(e, t, f, i);
      var p = tl.current, v = Qg(p, Np);
      if (v)
        p = Gg(p, Np), t.flags |= tt;
      else {
        var y = e !== null && (e.flags & tt) !== $e;
        y && fR(t, t.child, i), p = Df(p);
      }
      if (Iu(t, p), (t.mode & mt) === Qe)
        t.memoizedState = null;
      else
        switch (o) {
          case "forwards": {
            var S = dR(t.child), O;
            S === null ? (O = t.child, t.child = null) : (O = S.sibling, S.sibling = null), U0(
              t,
              false,
              // isBackwards
              O,
              S,
              s
            );
            break;
          }
          case "backwards": {
            var N = null, U = t.child;
            for (t.child = null; U !== null; ) {
              var F = U.alternate;
              if (F !== null && oh(F) === null) {
                t.child = U;
                break;
              }
              var I = U.sibling;
              U.sibling = N, N = U, U = I;
            }
            U0(
              t,
              true,
              // isBackwards
              N,
              null,
              // last
              s
            );
            break;
          }
          case "together": {
            U0(
              t,
              false,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            t.memoizedState = null;
        }
      return t.child;
    }
    function hR(e, t, i) {
      $g(t, t.stateNode.containerInfo);
      var a = t.pendingProps;
      return e === null ? t.child = wf(t, null, a, i) : Ei(e, t, a, i), t.child;
    }
    var Wb = false;
    function yR(e, t, i) {
      var a = t.type, o = a._context, s = t.pendingProps, f = t.memoizedProps, p = s.value;
      {
        "value" in s || Wb || (Wb = true, g("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
        var v = t.type.propTypes;
        v && Ka(v, s, "prop", "Context.Provider");
      }
      if (MS(t, o, p), f !== null) {
        var y = f.value;
        if (Me(y, p)) {
          if (f.children === s.children && !Um())
            return Ho(e, t, i);
        } else
          fx(t, o, i);
      }
      var S = s.children;
      return Ei(e, t, S, i), t.child;
    }
    var Qb = false;
    function gR(e, t, i) {
      var a = t.type;
      a._context === void 0 ? a !== a.Consumer && (Qb || (Qb = true, g("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : a = a._context;
      var o = t.pendingProps, s = o.children;
      typeof s != "function" && g("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), Tf(t, i);
      var f = nr(a);
      Ml(t);
      var p;
      return Up.current = t, Kr(true), p = s(f), Kr(false), vo(), t.flags |= Rl, Ei(e, t, p, i), t.child;
    }
    function Fp() {
      rl = true;
    }
    function Nh(e, t) {
      (t.mode & mt) === Qe && e !== null && (e.alternate = null, t.alternate = null, t.flags |= sn);
    }
    function Ho(e, t, i) {
      return e !== null && (t.dependencies = e.dependencies), wb(), Kp(t.lanes), li(i, t.childLanes) ? (Cx(e, t), t.child) : null;
    }
    function SR(e, t, i) {
      {
        var a = t.return;
        if (a === null)
          throw new Error("Cannot swap the root fiber.");
        if (e.alternate = null, t.alternate = null, i.index = t.index, i.sibling = t.sibling, i.return = t.return, i.ref = t.ref, t === a.child)
          a.child = i;
        else {
          var o = a.child;
          if (o === null)
            throw new Error("Expected parent to have a child.");
          for (; o.sibling !== t; )
            if (o = o.sibling, o === null)
              throw new Error("Expected to find the previous sibling.");
          o.sibling = i;
        }
        var s = a.deletions;
        return s === null ? (a.deletions = [e], a.flags |= Bt) : s.push(e), i.flags |= sn, i;
      }
    }
    function j0(e, t) {
      var i = e.lanes;
      return !!li(i, t);
    }
    function bR(e, t, i) {
      switch (t.tag) {
        case W:
          Fb(t), t.stateNode, xf();
          break;
        case q:
          ZS(t);
          break;
        case Q: {
          var a = t.type;
          $l(a) && Fm(t);
          break;
        }
        case J:
          $g(t, t.stateNode.containerInfo);
          break;
        case de: {
          var o = t.memoizedProps.value, s = t.type._context;
          MS(t, s, o);
          break;
        }
        case xe:
          {
            var f = li(i, t.childLanes);
            f && (t.flags |= ut);
            {
              var p = t.stateNode;
              p.effectDuration = 0, p.passiveEffectDuration = 0;
            }
          }
          break;
        case be: {
          var v = t.memoizedState;
          if (v !== null) {
            if (v.dehydrated !== null)
              return Iu(t, Df(tl.current)), t.flags |= tt, null;
            var y = t.child, S = y.childLanes;
            if (li(i, S))
              return Pb(e, t, i);
            Iu(t, Df(tl.current));
            var O = Ho(e, t, i);
            return O !== null ? O.sibling : null;
          } else
            Iu(t, Df(tl.current));
          break;
        }
        case Ct: {
          var N = (e.flags & tt) !== $e, U = li(i, t.childLanes);
          if (N) {
            if (U)
              return Yb(e, t, i);
            t.flags |= tt;
          }
          var F = t.memoizedState;
          if (F !== null && (F.rendering = null, F.tail = null, F.lastEffect = null), Iu(t, tl.current), U)
            break;
          return null;
        }
        case Be:
        case rt:
          return t.lanes = Y, Vb(e, t, i);
      }
      return Ho(e, t, i);
    }
    function Gb(e, t, i) {
      if (t._debugNeedsRemount && e !== null)
        return SR(e, t, v1(t.type, t.key, t.pendingProps, t._debugOwner || null, t.mode, t.lanes));
      if (e !== null) {
        var a = e.memoizedProps, o = t.pendingProps;
        if (a !== o || Um() || // Force a re-render if the implementation changed due to hot reload:
        t.type !== e.type)
          rl = true;
        else {
          var s = j0(e, i);
          if (!s && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (t.flags & tt) === $e)
            return rl = false, bR(e, t, i);
          (e.flags & gs) !== $e ? rl = true : rl = false;
        }
      } else if (rl = false, Ar() && Wk(t)) {
        var f = t.index, p = Qk();
        _S(t, p, f);
      }
      switch (t.lanes = Y, t.tag) {
        case ve:
          return tR(e, t, t.type, i);
        case St: {
          var v = t.elementType;
          return Jx(e, t, v, i);
        }
        case Z: {
          var y = t.type, S = t.pendingProps, O = t.elementType === y ? S : el(y, S);
          return D0(e, t, y, O, i);
        }
        case Q: {
          var N = t.type, U = t.pendingProps, F = t.elementType === N ? U : el(N, U);
          return jb(e, t, N, F, i);
        }
        case W:
          return Xx(e, t, i);
        case q:
          return Kx(e, t, i);
        case fe:
          return Zx(e, t);
        case be:
          return Pb(e, t, i);
        case J:
          return hR(e, t, i);
        case oe: {
          var I = t.type, Re = t.pendingProps, Ye = t.elementType === I ? Re : el(I, Re);
          return Mb(e, t, I, Ye, i);
        }
        case ee:
          return Qx(e, t, i);
        case ie:
          return Gx(e, t, i);
        case xe:
          return qx(e, t, i);
        case de:
          return yR(e, t, i);
        case Xe:
          return gR(e, t, i);
        case we: {
          var Ue = t.type, Dt = t.pendingProps, Et = el(Ue, Dt);
          if (t.type !== t.elementType) {
            var A = Ue.propTypes;
            A && Ka(
              A,
              Et,
              // Resolved for outer only
              "prop",
              Mt(Ue)
            );
          }
          return Et = el(Ue.type, Et), Ab(e, t, Ue, Et, i);
        }
        case De:
          return zb(e, t, t.type, t.pendingProps, i);
        case Rt: {
          var $ = t.type, z = t.pendingProps, le = t.elementType === $ ? z : el($, z);
          return eR(e, t, $, le, i);
        }
        case Ct:
          return Yb(e, t, i);
        case en:
          break;
        case Be:
          return Vb(e, t, i);
      }
      throw new Error("Unknown unit of work tag (" + t.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function Vf(e) {
      e.flags |= ut;
    }
    function qb(e) {
      e.flags |= Jr, e.flags |= bd;
    }
    var Xb, F0, Kb, Zb;
    Xb = function(e, t, i, a) {
      for (var o = t.child; o !== null; ) {
        if (o.tag === q || o.tag === fe)
          IC(e, o.stateNode);
        else if (o.tag !== J) {
          if (o.child !== null) {
            o.child.return = o, o = o.child;
            continue;
          }
        }
        if (o === t)
          return;
        for (; o.sibling === null; ) {
          if (o.return === null || o.return === t)
            return;
          o = o.return;
        }
        o.sibling.return = o.return, o = o.sibling;
      }
    }, F0 = function(e, t) {
    }, Kb = function(e, t, i, a, o) {
      var s = e.memoizedProps;
      if (s !== a) {
        var f = t.stateNode, p = Yg(), v = YC(f, i, s, a, o, p);
        t.updateQueue = v, v && Vf(t);
      }
    }, Zb = function(e, t, i, a) {
      i !== a && Vf(t);
    };
    function Hp(e, t) {
      if (!Ar())
        switch (e.tailMode) {
          case "hidden": {
            for (var i = e.tail, a = null; i !== null; )
              i.alternate !== null && (a = i), i = i.sibling;
            a === null ? e.tail = null : a.sibling = null;
            break;
          }
          case "collapsed": {
            for (var o = e.tail, s = null; o !== null; )
              o.alternate !== null && (s = o), o = o.sibling;
            s === null ? !t && e.tail !== null ? e.tail.sibling = null : e.tail = null : s.sibling = null;
            break;
          }
        }
    }
    function Vr(e) {
      var t = e.alternate !== null && e.alternate.child === e.child, i = Y, a = $e;
      if (t) {
        if ((e.mode & qe) !== Qe) {
          for (var v = e.selfBaseDuration, y = e.child; y !== null; )
            i = st(i, st(y.lanes, y.childLanes)), a |= y.subtreeFlags & ar, a |= y.flags & ar, v += y.treeBaseDuration, y = y.sibling;
          e.treeBaseDuration = v;
        } else
          for (var S = e.child; S !== null; )
            i = st(i, st(S.lanes, S.childLanes)), a |= S.subtreeFlags & ar, a |= S.flags & ar, S.return = e, S = S.sibling;
        e.subtreeFlags |= a;
      } else {
        if ((e.mode & qe) !== Qe) {
          for (var o = e.actualDuration, s = e.selfBaseDuration, f = e.child; f !== null; )
            i = st(i, st(f.lanes, f.childLanes)), a |= f.subtreeFlags, a |= f.flags, o += f.actualDuration, s += f.treeBaseDuration, f = f.sibling;
          e.actualDuration = o, e.treeBaseDuration = s;
        } else
          for (var p = e.child; p !== null; )
            i = st(i, st(p.lanes, p.childLanes)), a |= p.subtreeFlags, a |= p.flags, p.return = e, p = p.sibling;
        e.subtreeFlags |= a;
      }
      return e.childLanes = i, t;
    }
    function _R(e, t, i) {
      if (lx() && (t.mode & mt) !== Qe && (t.flags & tt) === $e)
        return wS(t), xf(), t.flags |= Tn | hi | Kn, false;
      var a = $m(t);
      if (i !== null && i.dehydrated !== null)
        if (e === null) {
          if (!a)
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          if (ix(t), Vr(t), (t.mode & qe) !== Qe) {
            var o = i !== null;
            if (o) {
              var s = t.child;
              s !== null && (t.treeBaseDuration -= s.treeBaseDuration);
            }
          }
          return false;
        } else {
          if (xf(), (t.flags & tt) === $e && (t.memoizedState = null), t.flags |= ut, Vr(t), (t.mode & qe) !== Qe) {
            var f = i !== null;
            if (f) {
              var p = t.child;
              p !== null && (t.treeBaseDuration -= p.treeBaseDuration);
            }
          }
          return false;
        }
      else
        return NS(), true;
    }
    function Jb(e, t, i) {
      var a = t.pendingProps;
      switch (fg(t), t.tag) {
        case ve:
        case St:
        case De:
        case Z:
        case oe:
        case ee:
        case ie:
        case xe:
        case Xe:
        case we:
          return Vr(t), null;
        case Q: {
          var o = t.type;
          return $l(o) && jm(t), Vr(t), null;
        }
        case W: {
          var s = t.stateNode;
          if (Nf(t), og(t), Xg(), s.pendingContext && (s.context = s.pendingContext, s.pendingContext = null), e === null || e.child === null) {
            var f = $m(t);
            if (f)
              Vf(t);
            else if (e !== null) {
              var p = e.memoizedState;
              (!p.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (t.flags & Tn) !== $e) && (t.flags |= Mi, NS());
            }
          }
          return F0(e, t), Vr(t), null;
        }
        case q: {
          Wg(t);
          var v = KS(), y = t.type;
          if (e !== null && t.stateNode != null)
            Kb(e, t, y, a, v), e.ref !== t.ref && qb(t);
          else {
            if (!a) {
              if (t.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return Vr(t), null;
            }
            var S = Yg(), O = $m(t);
            if (O)
              nx(t, v, S) && Vf(t);
            else {
              var N = BC(y, a, v, S, t);
              Xb(N, t, false, false), t.stateNode = N, $C(N, y, a, v) && Vf(t);
            }
            t.ref !== null && qb(t);
          }
          return Vr(t), null;
        }
        case fe: {
          var U = a;
          if (e && t.stateNode != null) {
            var F = e.memoizedProps;
            Zb(e, t, F, U);
          } else {
            if (typeof U != "string" && t.stateNode === null)
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            var I = KS(), Re = Yg(), Ye = $m(t);
            Ye ? rx(t) && Vf(t) : t.stateNode = WC(U, I, Re, t);
          }
          return Vr(t), null;
        }
        case be: {
          Of(t);
          var Ue = t.memoizedState;
          if (e === null || e.memoizedState !== null && e.memoizedState.dehydrated !== null) {
            var Dt = _R(e, t, Ue);
            if (!Dt)
              return t.flags & Kn ? t : null;
          }
          if ((t.flags & tt) !== $e)
            return t.lanes = i, (t.mode & qe) !== Qe && _0(t), t;
          var Et = Ue !== null, A = e !== null && e.memoizedState !== null;
          if (Et !== A && Et) {
            var $ = t.child;
            if ($.flags |= Tl, (t.mode & mt) !== Qe) {
              var z = e === null && (t.memoizedProps.unstable_avoidThisFallback !== true || !K);
              z || Qg(tl.current, eb) ? ET() : r1();
            }
          }
          var le = t.updateQueue;
          if (le !== null && (t.flags |= ut), Vr(t), (t.mode & qe) !== Qe && Et) {
            var Te = t.child;
            Te !== null && (t.treeBaseDuration -= Te.treeBaseDuration);
          }
          return null;
        }
        case J:
          return Nf(t), F0(e, t), e === null && Fk(t.stateNode.containerInfo), Vr(t), null;
        case de:
          var Ee = t.type._context;
          return bg(Ee, t), Vr(t), null;
        case Rt: {
          var et = t.type;
          return $l(et) && jm(t), Vr(t), null;
        }
        case Ct: {
          Of(t);
          var ot = t.memoizedState;
          if (ot === null)
            return Vr(t), null;
          var nn = (t.flags & tt) !== $e, Ft = ot.rendering;
          if (Ft === null)
            if (nn)
              Hp(ot, false);
            else {
              var Wn = kT() && (e === null || (e.flags & tt) === $e);
              if (!Wn)
                for (var Ht = t.child; Ht !== null; ) {
                  var jn = oh(Ht);
                  if (jn !== null) {
                    nn = true, t.flags |= tt, Hp(ot, false);
                    var ci = jn.updateQueue;
                    return ci !== null && (t.updateQueue = ci, t.flags |= ut), t.subtreeFlags = $e, kx(t, i), Iu(t, Gg(tl.current, Np)), t.child;
                  }
                  Ht = Ht.sibling;
                }
              ot.tail !== null && En() > b_() && (t.flags |= tt, nn = true, Hp(ot, false), t.lanes = Md);
            }
          else {
            if (!nn) {
              var Pr = oh(Ft);
              if (Pr !== null) {
                t.flags |= tt, nn = true;
                var fa = Pr.updateQueue;
                if (fa !== null && (t.updateQueue = fa, t.flags |= ut), Hp(ot, true), ot.tail === null && ot.tailMode === "hidden" && !Ft.alternate && !Ar())
                  return Vr(t), null;
              } else
                En() * 2 - ot.renderingStartTime > b_() && i !== ai && (t.flags |= tt, nn = true, Hp(ot, false), t.lanes = Md);
            }
            if (ot.isBackwards)
              Ft.sibling = t.child, t.child = Ft;
            else {
              var xi = ot.last;
              xi !== null ? xi.sibling = Ft : t.child = Ft, ot.last = Ft;
            }
          }
          if (ot.tail !== null) {
            var Ri = ot.tail;
            ot.rendering = Ri, ot.tail = Ri.sibling, ot.renderingStartTime = En(), Ri.sibling = null;
            var fi = tl.current;
            return nn ? fi = Gg(fi, Np) : fi = Df(fi), Iu(t, fi), Ri;
          }
          return Vr(t), null;
        }
        case en:
          break;
        case Be:
        case rt: {
          n1(t);
          var Yo = t.memoizedState, $f = Yo !== null;
          if (e !== null) {
            var nv = e.memoizedState, Zl = nv !== null;
            Zl !== $f && // LegacyHidden doesn't do any hiding â€” it only pre-renders.
            !R && (t.flags |= Tl);
          }
          return !$f || (t.mode & mt) === Qe ? Vr(t) : li(Kl, ai) && (Vr(t), t.subtreeFlags & (sn | ut) && (t.flags |= Tl)), null;
        }
        case Ut:
          return null;
        case ht:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + t.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function ER(e, t, i) {
      switch (fg(t), t.tag) {
        case Q: {
          var a = t.type;
          $l(a) && jm(t);
          var o = t.flags;
          return o & Kn ? (t.flags = o & ~Kn | tt, (t.mode & qe) !== Qe && _0(t), t) : null;
        }
        case W: {
          t.stateNode, Nf(t), og(t), Xg();
          var s = t.flags;
          return (s & Kn) !== $e && (s & tt) === $e ? (t.flags = s & ~Kn | tt, t) : null;
        }
        case q:
          return Wg(t), null;
        case be: {
          Of(t);
          var f = t.memoizedState;
          if (f !== null && f.dehydrated !== null) {
            if (t.alternate === null)
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            xf();
          }
          var p = t.flags;
          return p & Kn ? (t.flags = p & ~Kn | tt, (t.mode & qe) !== Qe && _0(t), t) : null;
        }
        case Ct:
          return Of(t), null;
        case J:
          return Nf(t), null;
        case de:
          var v = t.type._context;
          return bg(v, t), null;
        case Be:
        case rt:
          return n1(t), null;
        case Ut:
          return null;
        default:
          return null;
      }
    }
    function e_(e, t, i) {
      switch (fg(t), t.tag) {
        case Q: {
          var a = t.type.childContextTypes;
          a != null && jm(t);
          break;
        }
        case W: {
          t.stateNode, Nf(t), og(t), Xg();
          break;
        }
        case q: {
          Wg(t);
          break;
        }
        case J:
          Nf(t);
          break;
        case be:
          Of(t);
          break;
        case Ct:
          Of(t);
          break;
        case de:
          var o = t.type._context;
          bg(o, t);
          break;
        case Be:
        case rt:
          n1(t);
          break;
      }
    }
    var t_ = null;
    t_ = /* @__PURE__ */ new Set();
    var Dh = false, Ur = false, CR = typeof WeakSet == "function" ? WeakSet : Set, Ae = null, Uf = null, jf = null;
    function kR(e) {
      fo(null, function() {
        throw e;
      }), gd();
    }
    var xR = function(e, t) {
      if (t.props = e.memoizedProps, t.state = e.memoizedState, e.mode & qe)
        try {
          ql(), t.componentWillUnmount();
        } finally {
          Gl(e);
        }
      else
        t.componentWillUnmount();
    };
    function n_(e, t) {
      try {
        Wu(sr, e);
      } catch (i) {
        pn(e, t, i);
      }
    }
    function H0(e, t, i) {
      try {
        xR(e, i);
      } catch (a) {
        pn(e, t, a);
      }
    }
    function RR(e, t, i) {
      try {
        i.componentDidMount();
      } catch (a) {
        pn(e, t, a);
      }
    }
    function r_(e, t) {
      try {
        a_(e);
      } catch (i) {
        pn(e, t, i);
      }
    }
    function Ff(e, t) {
      var i = e.ref;
      if (i !== null)
        if (typeof i == "function") {
          var a;
          try {
            if (ct && bt && e.mode & qe)
              try {
                ql(), a = i(null);
              } finally {
                Gl(e);
              }
            else
              a = i(null);
          } catch (o) {
            pn(e, t, o);
          }
          typeof a == "function" && g("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", at(e));
        } else
          i.current = null;
    }
    function Oh(e, t, i) {
      try {
        i();
      } catch (a) {
        pn(e, t, a);
      }
    }
    var i_ = false;
    function TR(e, t) {
      HC(e.containerInfo), Ae = t, wR();
      var i = i_;
      return i_ = false, i;
    }
    function wR() {
      for (; Ae !== null; ) {
        var e = Ae, t = e.child;
        (e.subtreeFlags & du) !== $e && t !== null ? (t.return = e, Ae = t) : NR();
      }
    }
    function NR() {
      for (; Ae !== null; ) {
        var e = Ae;
        Gt(e);
        try {
          DR(e);
        } catch (i) {
          pn(e, e.return, i);
        }
        Rn();
        var t = e.sibling;
        if (t !== null) {
          t.return = e.return, Ae = t;
          return;
        }
        Ae = e.return;
      }
    }
    function DR(e) {
      var t = e.alternate, i = e.flags;
      if ((i & Mi) !== $e) {
        switch (Gt(e), e.tag) {
          case Z:
          case oe:
          case De:
            break;
          case Q: {
            if (t !== null) {
              var a = t.memoizedProps, o = t.memoizedState, s = e.stateNode;
              e.type === e.elementType && !Ks && (s.props !== e.memoizedProps && g("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(e) || "instance"), s.state !== e.memoizedState && g("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(e) || "instance"));
              var f = s.getSnapshotBeforeUpdate(e.elementType === e.type ? a : el(e.type, a), o);
              {
                var p = t_;
                f === void 0 && !p.has(e.type) && (p.add(e.type), g("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", at(e)));
              }
              s.__reactInternalSnapshotBeforeUpdate = f;
            }
            break;
          }
          case W: {
            {
              var v = e.stateNode;
              fk(v.containerInfo);
            }
            break;
          }
          case q:
          case fe:
          case J:
          case Rt:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        Rn();
      }
    }
    function il(e, t, i) {
      var a = t.updateQueue, o = a !== null ? a.lastEffect : null;
      if (o !== null) {
        var s = o.next, f = s;
        do {
          if ((f.tag & e) === e) {
            var p = f.destroy;
            f.destroy = void 0, p !== void 0 && ((e & zr) !== Yi ? Tc(t) : (e & sr) !== Yi && wc(t), (e & Yl) !== Yi && Jp(true), Oh(t, i, p), (e & Yl) !== Yi && Jp(false), (e & zr) !== Yi ? Iv() : (e & sr) !== Yi && pu());
          }
          f = f.next;
        } while (f !== s);
      }
    }
    function Wu(e, t) {
      var i = t.updateQueue, a = i !== null ? i.lastEffect : null;
      if (a !== null) {
        var o = a.next, s = o;
        do {
          if ((s.tag & e) === e) {
            (e & zr) !== Yi ? Bv(t) : (e & sr) !== Yi && $v(t);
            var f = s.create;
            (e & Yl) !== Yi && Jp(true), s.destroy = f(), (e & Yl) !== Yi && Jp(false), (e & zr) !== Yi ? Dd() : (e & sr) !== Yi && Yv();
            {
              var p = s.destroy;
              if (p !== void 0 && typeof p != "function") {
                var v = void 0;
                (s.tag & sr) !== $e ? v = "useLayoutEffect" : (s.tag & Yl) !== $e ? v = "useInsertionEffect" : v = "useEffect";
                var y = void 0;
                p === null ? y = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof p.then == "function" ? y = `

It looks like you wrote ` + v + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + v + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : y = " You returned: " + p, g("%s must not return anything besides a function, which is used for clean-up.%s", v, y);
              }
            }
          }
          s = s.next;
        } while (s !== o);
      }
    }
    function OR(e, t) {
      if ((t.flags & ut) !== $e)
        switch (t.tag) {
          case xe: {
            var i = t.stateNode.passiveEffectDuration, a = t.memoizedProps, o = a.id, s = a.onPostCommit, f = Rb(), p = t.alternate === null ? "mount" : "update";
            xb() && (p = "nested-update"), typeof s == "function" && s(o, p, i, f);
            var v = t.return;
            e:
              for (; v !== null; ) {
                switch (v.tag) {
                  case W:
                    var y = v.stateNode;
                    y.passiveEffectDuration += i;
                    break e;
                  case xe:
                    var S = v.stateNode;
                    S.passiveEffectDuration += i;
                    break e;
                }
                v = v.return;
              }
            break;
          }
        }
    }
    function LR(e, t, i, a) {
      if ((i.flags & br) !== $e)
        switch (i.tag) {
          case Z:
          case oe:
          case De: {
            if (!Ur)
              if (i.mode & qe)
                try {
                  ql(), Wu(sr | ur, i);
                } finally {
                  Gl(i);
                }
              else
                Wu(sr | ur, i);
            break;
          }
          case Q: {
            var o = i.stateNode;
            if (i.flags & ut && !Ur)
              if (t === null)
                if (i.type === i.elementType && !Ks && (o.props !== i.memoizedProps && g("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(i) || "instance"), o.state !== i.memoizedState && g("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(i) || "instance")), i.mode & qe)
                  try {
                    ql(), o.componentDidMount();
                  } finally {
                    Gl(i);
                  }
                else
                  o.componentDidMount();
              else {
                var s = i.elementType === i.type ? t.memoizedProps : el(i.type, t.memoizedProps), f = t.memoizedState;
                if (i.type === i.elementType && !Ks && (o.props !== i.memoizedProps && g("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(i) || "instance"), o.state !== i.memoizedState && g("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(i) || "instance")), i.mode & qe)
                  try {
                    ql(), o.componentDidUpdate(s, f, o.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    Gl(i);
                  }
                else
                  o.componentDidUpdate(s, f, o.__reactInternalSnapshotBeforeUpdate);
              }
            var p = i.updateQueue;
            p !== null && (i.type === i.elementType && !Ks && (o.props !== i.memoizedProps && g("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", at(i) || "instance"), o.state !== i.memoizedState && g("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", at(i) || "instance")), FS(i, p, o));
            break;
          }
          case W: {
            var v = i.updateQueue;
            if (v !== null) {
              var y = null;
              if (i.child !== null)
                switch (i.child.tag) {
                  case q:
                    y = i.child.stateNode;
                    break;
                  case Q:
                    y = i.child.stateNode;
                    break;
                }
              FS(i, v, y);
            }
            break;
          }
          case q: {
            var S = i.stateNode;
            if (t === null && i.flags & ut) {
              var O = i.type, N = i.memoizedProps;
              KC(S, O, N);
            }
            break;
          }
          case fe:
            break;
          case J:
            break;
          case xe: {
            {
              var U = i.memoizedProps, F = U.onCommit, I = U.onRender, Re = i.stateNode.effectDuration, Ye = Rb(), Ue = t === null ? "mount" : "update";
              xb() && (Ue = "nested-update"), typeof I == "function" && I(i.memoizedProps.id, Ue, i.actualDuration, i.treeBaseDuration, i.actualStartTime, Ye);
              {
                typeof F == "function" && F(i.memoizedProps.id, Ue, Re, Ye), NT(i);
                var Dt = i.return;
                e:
                  for (; Dt !== null; ) {
                    switch (Dt.tag) {
                      case W:
                        var Et = Dt.stateNode;
                        Et.effectDuration += Re;
                        break e;
                      case xe:
                        var A = Dt.stateNode;
                        A.effectDuration += Re;
                        break e;
                    }
                    Dt = Dt.return;
                  }
              }
            }
            break;
          }
          case be: {
            HR(e, i);
            break;
          }
          case Ct:
          case Rt:
          case en:
          case Be:
          case rt:
          case ht:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      Ur || i.flags & Jr && a_(i);
    }
    function MR(e) {
      switch (e.tag) {
        case Z:
        case oe:
        case De: {
          if (e.mode & qe)
            try {
              ql(), n_(e, e.return);
            } finally {
              Gl(e);
            }
          else
            n_(e, e.return);
          break;
        }
        case Q: {
          var t = e.stateNode;
          typeof t.componentDidMount == "function" && RR(e, e.return, t), r_(e, e.return);
          break;
        }
        case q: {
          r_(e, e.return);
          break;
        }
      }
    }
    function AR(e, t) {
      for (var i = null, a = e; ; ) {
        if (a.tag === q) {
          if (i === null) {
            i = a;
            try {
              var o = a.stateNode;
              t ? ok(o) : sk(a.stateNode, a.memoizedProps);
            } catch (f) {
              pn(e, e.return, f);
            }
          }
        } else if (a.tag === fe) {
          if (i === null)
            try {
              var s = a.stateNode;
              t ? uk(s) : ck(s, a.memoizedProps);
            } catch (f) {
              pn(e, e.return, f);
            }
        } else if (!((a.tag === Be || a.tag === rt) && a.memoizedState !== null && a !== e)) {
          if (a.child !== null) {
            a.child.return = a, a = a.child;
            continue;
          }
        }
        if (a === e)
          return;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === e)
            return;
          i === a && (i = null), a = a.return;
        }
        i === a && (i = null), a.sibling.return = a.return, a = a.sibling;
      }
    }
    function a_(e) {
      var t = e.ref;
      if (t !== null) {
        var i = e.stateNode, a;
        switch (e.tag) {
          case q:
            a = i;
            break;
          default:
            a = i;
        }
        if (typeof t == "function") {
          var o;
          if (e.mode & qe)
            try {
              ql(), o = t(a);
            } finally {
              Gl(e);
            }
          else
            o = t(a);
          typeof o == "function" && g("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", at(e));
        } else
          t.hasOwnProperty("current") || g("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", at(e)), t.current = a;
      }
    }
    function zR(e) {
      var t = e.alternate;
      t !== null && (t.return = null), e.return = null;
    }
    function l_(e) {
      var t = e.alternate;
      t !== null && (e.alternate = null, l_(t));
      {
        if (e.child = null, e.deletions = null, e.sibling = null, e.tag === q) {
          var i = e.stateNode;
          i !== null && Bk(i);
        }
        e.stateNode = null, e._debugOwner = null, e.return = null, e.dependencies = null, e.memoizedProps = null, e.memoizedState = null, e.pendingProps = null, e.stateNode = null, e.updateQueue = null;
      }
    }
    function VR(e) {
      for (var t = e.return; t !== null; ) {
        if (o_(t))
          return t;
        t = t.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function o_(e) {
      return e.tag === q || e.tag === W || e.tag === J;
    }
    function u_(e) {
      var t = e;
      e:
        for (; ; ) {
          for (; t.sibling === null; ) {
            if (t.return === null || o_(t.return))
              return null;
            t = t.return;
          }
          for (t.sibling.return = t.return, t = t.sibling; t.tag !== q && t.tag !== fe && t.tag !== Lt; ) {
            if (t.flags & sn || t.child === null || t.tag === J)
              continue e;
            t.child.return = t, t = t.child;
          }
          if (!(t.flags & sn))
            return t.stateNode;
        }
    }
    function UR(e) {
      var t = VR(e);
      switch (t.tag) {
        case q: {
          var i = t.stateNode;
          t.flags & qt && (sS(i), t.flags &= ~qt);
          var a = u_(e);
          B0(e, a, i);
          break;
        }
        case W:
        case J: {
          var o = t.stateNode.containerInfo, s = u_(e);
          P0(e, s, o);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function P0(e, t, i) {
      var a = e.tag, o = a === q || a === fe;
      if (o) {
        var s = e.stateNode;
        t ? rk(i, s, t) : tk(i, s);
      } else if (a !== J) {
        var f = e.child;
        if (f !== null) {
          P0(f, t, i);
          for (var p = f.sibling; p !== null; )
            P0(p, t, i), p = p.sibling;
        }
      }
    }
    function B0(e, t, i) {
      var a = e.tag, o = a === q || a === fe;
      if (o) {
        var s = e.stateNode;
        t ? nk(i, s, t) : ek(i, s);
      } else if (a !== J) {
        var f = e.child;
        if (f !== null) {
          B0(f, t, i);
          for (var p = f.sibling; p !== null; )
            B0(p, t, i), p = p.sibling;
        }
      }
    }
    var jr = null, al = false;
    function jR(e, t, i) {
      {
        var a = t;
        e:
          for (; a !== null; ) {
            switch (a.tag) {
              case q: {
                jr = a.stateNode, al = false;
                break e;
              }
              case W: {
                jr = a.stateNode.containerInfo, al = true;
                break e;
              }
              case J: {
                jr = a.stateNode.containerInfo, al = true;
                break e;
              }
            }
            a = a.return;
          }
        if (jr === null)
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        s_(e, t, i), jr = null, al = false;
      }
      zR(i);
    }
    function Qu(e, t, i) {
      for (var a = i.child; a !== null; )
        s_(e, t, a), a = a.sibling;
    }
    function s_(e, t, i) {
      switch (wd(i), i.tag) {
        case q:
          Ur || Ff(i, t);
        case fe: {
          {
            var a = jr, o = al;
            jr = null, Qu(e, t, i), jr = a, al = o, jr !== null && (al ? ak(jr, i.stateNode) : ik(jr, i.stateNode));
          }
          return;
        }
        case Lt: {
          jr !== null && (al ? lk(jr, i.stateNode) : Jy(jr, i.stateNode));
          return;
        }
        case J: {
          {
            var s = jr, f = al;
            jr = i.stateNode.containerInfo, al = true, Qu(e, t, i), jr = s, al = f;
          }
          return;
        }
        case Z:
        case oe:
        case we:
        case De: {
          if (!Ur) {
            var p = i.updateQueue;
            if (p !== null) {
              var v = p.lastEffect;
              if (v !== null) {
                var y = v.next, S = y;
                do {
                  var O = S, N = O.destroy, U = O.tag;
                  N !== void 0 && ((U & Yl) !== Yi ? Oh(i, t, N) : (U & sr) !== Yi && (wc(i), i.mode & qe ? (ql(), Oh(i, t, N), Gl(i)) : Oh(i, t, N), pu())), S = S.next;
                } while (S !== y);
              }
            }
          }
          Qu(e, t, i);
          return;
        }
        case Q: {
          if (!Ur) {
            Ff(i, t);
            var F = i.stateNode;
            typeof F.componentWillUnmount == "function" && H0(i, t, F);
          }
          Qu(e, t, i);
          return;
        }
        case en: {
          Qu(e, t, i);
          return;
        }
        case Be: {
          if (
            // TODO: Remove this dead flag
            i.mode & mt
          ) {
            var I = Ur;
            Ur = I || i.memoizedState !== null, Qu(e, t, i), Ur = I;
          } else
            Qu(e, t, i);
          break;
        }
        default: {
          Qu(e, t, i);
          return;
        }
      }
    }
    function FR(e) {
      e.memoizedState;
    }
    function HR(e, t) {
      var i = t.memoizedState;
      if (i === null) {
        var a = t.alternate;
        if (a !== null) {
          var o = a.memoizedState;
          if (o !== null) {
            var s = o.dehydrated;
            s !== null && xk(s);
          }
        }
      }
    }
    function c_(e) {
      var t = e.updateQueue;
      if (t !== null) {
        e.updateQueue = null;
        var i = e.stateNode;
        i === null && (i = e.stateNode = new CR()), t.forEach(function(a) {
          var o = VT.bind(null, e, a);
          if (!i.has(a)) {
            if (i.add(a), lr)
              if (Uf !== null && jf !== null)
                Zp(jf, Uf);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            a.then(o, o);
          }
        });
      }
    }
    function PR(e, t, i) {
      Uf = i, jf = e, Gt(t), f_(t, e), Gt(t), Uf = null, jf = null;
    }
    function ll(e, t, i) {
      var a = t.deletions;
      if (a !== null)
        for (var o = 0; o < a.length; o++) {
          var s = a[o];
          try {
            jR(e, t, s);
          } catch (v) {
            pn(s, t, v);
          }
        }
      var f = ac();
      if (t.subtreeFlags & ni)
        for (var p = t.child; p !== null; )
          Gt(p), f_(p, e), p = p.sibling;
      Gt(f);
    }
    function f_(e, t, i) {
      var a = e.alternate, o = e.flags;
      switch (e.tag) {
        case Z:
        case oe:
        case we:
        case De: {
          if (ll(t, e), Xl(e), o & ut) {
            try {
              il(Yl | ur, e, e.return), Wu(Yl | ur, e);
            } catch (et) {
              pn(e, e.return, et);
            }
            if (e.mode & qe) {
              try {
                ql(), il(sr | ur, e, e.return);
              } catch (et) {
                pn(e, e.return, et);
              }
              Gl(e);
            } else
              try {
                il(sr | ur, e, e.return);
              } catch (et) {
                pn(e, e.return, et);
              }
          }
          return;
        }
        case Q: {
          ll(t, e), Xl(e), o & Jr && a !== null && Ff(a, a.return);
          return;
        }
        case q: {
          ll(t, e), Xl(e), o & Jr && a !== null && Ff(a, a.return);
          {
            if (e.flags & qt) {
              var s = e.stateNode;
              try {
                sS(s);
              } catch (et) {
                pn(e, e.return, et);
              }
            }
            if (o & ut) {
              var f = e.stateNode;
              if (f != null) {
                var p = e.memoizedProps, v = a !== null ? a.memoizedProps : p, y = e.type, S = e.updateQueue;
                if (e.updateQueue = null, S !== null)
                  try {
                    ZC(f, S, y, v, p, e);
                  } catch (et) {
                    pn(e, e.return, et);
                  }
              }
            }
          }
          return;
        }
        case fe: {
          if (ll(t, e), Xl(e), o & ut) {
            if (e.stateNode === null)
              throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            var O = e.stateNode, N = e.memoizedProps, U = a !== null ? a.memoizedProps : N;
            try {
              JC(O, U, N);
            } catch (et) {
              pn(e, e.return, et);
            }
          }
          return;
        }
        case W: {
          if (ll(t, e), Xl(e), o & ut && a !== null) {
            var F = a.memoizedState;
            if (F.isDehydrated)
              try {
                kk(t.containerInfo);
              } catch (et) {
                pn(e, e.return, et);
              }
          }
          return;
        }
        case J: {
          ll(t, e), Xl(e);
          return;
        }
        case be: {
          ll(t, e), Xl(e);
          var I = e.child;
          if (I.flags & Tl) {
            var Re = I.stateNode, Ye = I.memoizedState, Ue = Ye !== null;
            if (Re.isHidden = Ue, Ue) {
              var Dt = I.alternate !== null && I.alternate.memoizedState !== null;
              Dt || _T();
            }
          }
          if (o & ut) {
            try {
              FR(e);
            } catch (et) {
              pn(e, e.return, et);
            }
            c_(e);
          }
          return;
        }
        case Be: {
          var Et = a !== null && a.memoizedState !== null;
          if (
            // TODO: Remove this dead flag
            e.mode & mt
          ) {
            var A = Ur;
            Ur = A || Et, ll(t, e), Ur = A;
          } else
            ll(t, e);
          if (Xl(e), o & Tl) {
            var $ = e.stateNode, z = e.memoizedState, le = z !== null, Te = e;
            if ($.isHidden = le, le && !Et && (Te.mode & mt) !== Qe) {
              Ae = Te;
              for (var Ee = Te.child; Ee !== null; )
                Ae = Ee, IR(Ee), Ee = Ee.sibling;
            }
            AR(Te, le);
          }
          return;
        }
        case Ct: {
          ll(t, e), Xl(e), o & ut && c_(e);
          return;
        }
        case en:
          return;
        default: {
          ll(t, e), Xl(e);
          return;
        }
      }
    }
    function Xl(e) {
      var t = e.flags;
      if (t & sn) {
        try {
          UR(e);
        } catch (i) {
          pn(e, e.return, i);
        }
        e.flags &= ~sn;
      }
      t & Ai && (e.flags &= ~Ai);
    }
    function BR(e, t, i) {
      Uf = i, jf = t, Ae = e, d_(e, t, i), Uf = null, jf = null;
    }
    function d_(e, t, i) {
      for (var a = (e.mode & mt) !== Qe; Ae !== null; ) {
        var o = Ae, s = o.child;
        if (o.tag === Be && a) {
          var f = o.memoizedState !== null, p = f || Dh;
          if (p) {
            I0(e, t, i);
            continue;
          } else {
            var v = o.alternate, y = v !== null && v.memoizedState !== null, S = y || Ur, O = Dh, N = Ur;
            Dh = p, Ur = S, Ur && !N && (Ae = o, $R(o));
            for (var U = s; U !== null; )
              Ae = U, d_(
                U,
                // New root; bubble back up to here and stop.
                t,
                i
              ), U = U.sibling;
            Ae = o, Dh = O, Ur = N, I0(e, t, i);
            continue;
          }
        }
        (o.subtreeFlags & br) !== $e && s !== null ? (s.return = o, Ae = s) : I0(e, t, i);
      }
    }
    function I0(e, t, i) {
      for (; Ae !== null; ) {
        var a = Ae;
        if ((a.flags & br) !== $e) {
          var o = a.alternate;
          Gt(a);
          try {
            LR(t, o, a, i);
          } catch (f) {
            pn(a, a.return, f);
          }
          Rn();
        }
        if (a === e) {
          Ae = null;
          return;
        }
        var s = a.sibling;
        if (s !== null) {
          s.return = a.return, Ae = s;
          return;
        }
        Ae = a.return;
      }
    }
    function IR(e) {
      for (; Ae !== null; ) {
        var t = Ae, i = t.child;
        switch (t.tag) {
          case Z:
          case oe:
          case we:
          case De: {
            if (t.mode & qe)
              try {
                ql(), il(sr, t, t.return);
              } finally {
                Gl(t);
              }
            else
              il(sr, t, t.return);
            break;
          }
          case Q: {
            Ff(t, t.return);
            var a = t.stateNode;
            typeof a.componentWillUnmount == "function" && H0(t, t.return, a);
            break;
          }
          case q: {
            Ff(t, t.return);
            break;
          }
          case Be: {
            var o = t.memoizedState !== null;
            if (o) {
              p_(e);
              continue;
            }
            break;
          }
        }
        i !== null ? (i.return = t, Ae = i) : p_(e);
      }
    }
    function p_(e) {
      for (; Ae !== null; ) {
        var t = Ae;
        if (t === e) {
          Ae = null;
          return;
        }
        var i = t.sibling;
        if (i !== null) {
          i.return = t.return, Ae = i;
          return;
        }
        Ae = t.return;
      }
    }
    function $R(e) {
      for (; Ae !== null; ) {
        var t = Ae, i = t.child;
        if (t.tag === Be) {
          var a = t.memoizedState !== null;
          if (a) {
            v_(e);
            continue;
          }
        }
        i !== null ? (i.return = t, Ae = i) : v_(e);
      }
    }
    function v_(e) {
      for (; Ae !== null; ) {
        var t = Ae;
        Gt(t);
        try {
          MR(t);
        } catch (a) {
          pn(t, t.return, a);
        }
        if (Rn(), t === e) {
          Ae = null;
          return;
        }
        var i = t.sibling;
        if (i !== null) {
          i.return = t.return, Ae = i;
          return;
        }
        Ae = t.return;
      }
    }
    function YR(e, t, i, a) {
      Ae = t, WR(t, e, i, a);
    }
    function WR(e, t, i, a) {
      for (; Ae !== null; ) {
        var o = Ae, s = o.child;
        (o.subtreeFlags & zi) !== $e && s !== null ? (s.return = o, Ae = s) : QR(e, t, i, a);
      }
    }
    function QR(e, t, i, a) {
      for (; Ae !== null; ) {
        var o = Ae;
        if ((o.flags & mn) !== $e) {
          Gt(o);
          try {
            GR(t, o, i, a);
          } catch (f) {
            pn(o, o.return, f);
          }
          Rn();
        }
        if (o === e) {
          Ae = null;
          return;
        }
        var s = o.sibling;
        if (s !== null) {
          s.return = o.return, Ae = s;
          return;
        }
        Ae = o.return;
      }
    }
    function GR(e, t, i, a) {
      switch (t.tag) {
        case Z:
        case oe:
        case De: {
          if (t.mode & qe) {
            b0();
            try {
              Wu(zr | ur, t);
            } finally {
              S0(t);
            }
          } else
            Wu(zr | ur, t);
          break;
        }
      }
    }
    function qR(e) {
      Ae = e, XR();
    }
    function XR() {
      for (; Ae !== null; ) {
        var e = Ae, t = e.child;
        if ((Ae.flags & Bt) !== $e) {
          var i = e.deletions;
          if (i !== null) {
            for (var a = 0; a < i.length; a++) {
              var o = i[a];
              Ae = o, JR(o, e);
            }
            {
              var s = e.alternate;
              if (s !== null) {
                var f = s.child;
                if (f !== null) {
                  s.child = null;
                  do {
                    var p = f.sibling;
                    f.sibling = null, f = p;
                  } while (f !== null);
                }
              }
            }
            Ae = e;
          }
        }
        (e.subtreeFlags & zi) !== $e && t !== null ? (t.return = e, Ae = t) : KR();
      }
    }
    function KR() {
      for (; Ae !== null; ) {
        var e = Ae;
        (e.flags & mn) !== $e && (Gt(e), ZR(e), Rn());
        var t = e.sibling;
        if (t !== null) {
          t.return = e.return, Ae = t;
          return;
        }
        Ae = e.return;
      }
    }
    function ZR(e) {
      switch (e.tag) {
        case Z:
        case oe:
        case De: {
          e.mode & qe ? (b0(), il(zr | ur, e, e.return), S0(e)) : il(zr | ur, e, e.return);
          break;
        }
      }
    }
    function JR(e, t) {
      for (; Ae !== null; ) {
        var i = Ae;
        Gt(i), tT(i, t), Rn();
        var a = i.child;
        a !== null ? (a.return = i, Ae = a) : eT(e);
      }
    }
    function eT(e) {
      for (; Ae !== null; ) {
        var t = Ae, i = t.sibling, a = t.return;
        if (l_(t), t === e) {
          Ae = null;
          return;
        }
        if (i !== null) {
          i.return = a, Ae = i;
          return;
        }
        Ae = a;
      }
    }
    function tT(e, t) {
      switch (e.tag) {
        case Z:
        case oe:
        case De: {
          e.mode & qe ? (b0(), il(zr, e, t), S0(e)) : il(zr, e, t);
          break;
        }
      }
    }
    function nT(e) {
      switch (e.tag) {
        case Z:
        case oe:
        case De: {
          try {
            Wu(sr | ur, e);
          } catch (i) {
            pn(e, e.return, i);
          }
          break;
        }
        case Q: {
          var t = e.stateNode;
          try {
            t.componentDidMount();
          } catch (i) {
            pn(e, e.return, i);
          }
          break;
        }
      }
    }
    function rT(e) {
      switch (e.tag) {
        case Z:
        case oe:
        case De: {
          try {
            Wu(zr | ur, e);
          } catch (t) {
            pn(e, e.return, t);
          }
          break;
        }
      }
    }
    function iT(e) {
      switch (e.tag) {
        case Z:
        case oe:
        case De: {
          try {
            il(sr | ur, e, e.return);
          } catch (i) {
            pn(e, e.return, i);
          }
          break;
        }
        case Q: {
          var t = e.stateNode;
          typeof t.componentWillUnmount == "function" && H0(e, e.return, t);
          break;
        }
      }
    }
    function aT(e) {
      switch (e.tag) {
        case Z:
        case oe:
        case De:
          try {
            il(zr | ur, e, e.return);
          } catch (t) {
            pn(e, e.return, t);
          }
      }
    }
    if (typeof Symbol == "function" && Symbol.for) {
      var Pp = Symbol.for;
      Pp("selector.component"), Pp("selector.has_pseudo_class"), Pp("selector.role"), Pp("selector.test_id"), Pp("selector.text");
    }
    var lT = [];
    function oT() {
      lT.forEach(function(e) {
        return e();
      });
    }
    var uT = b.ReactCurrentActQueue;
    function sT(e) {
      {
        var t = (
          // $FlowExpectedError â€“ Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        ), i = typeof jest < "u";
        return i && t !== false;
      }
    }
    function m_() {
      {
        var e = (
          // $FlowExpectedError â€“ Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        return !e && uT.current !== null && g("The current testing environment is not configured to support act(...)"), e;
      }
    }
    var cT = Math.ceil, $0 = b.ReactCurrentDispatcher, Y0 = b.ReactCurrentOwner, Fr = b.ReactCurrentBatchConfig, ol = b.ReactCurrentActQueue, dr = (
      /*             */
      0
    ), h_ = (
      /*               */
      1
    ), Hr = (
      /*                */
      2
    ), Da = (
      /*                */
      4
    ), Po = 0, Bp = 1, Zs = 2, Lh = 3, Ip = 4, y_ = 5, W0 = 6, Nt = dr, Ci = null, An = null, pr = Y, Kl = Y, Q0 = Uu(Y), vr = Po, $p = null, Mh = Y, Yp = Y, Ah = Y, Wp = null, Wi = null, G0 = 0, g_ = 500, S_ = 1 / 0, fT = 500, Bo = null;
    function Qp() {
      S_ = En() + fT;
    }
    function b_() {
      return S_;
    }
    var zh = false, q0 = null, Hf = null, Js = false, Gu = null, Gp = Y, X0 = [], K0 = null, dT = 50, qp = 0, Z0 = null, J0 = false, Vh = false, pT = 50, Pf = 0, Uh = null, Xp = on, jh = Y, __ = false;
    function Fh() {
      return Ci;
    }
    function ki() {
      return (Nt & (Hr | Da)) !== dr ? En() : (Xp !== on || (Xp = En()), Xp);
    }
    function qu(e) {
      var t = e.mode;
      if ((t & mt) === Qe)
        return Ke;
      if ((Nt & Hr) !== dr && pr !== Y)
        return Bn(pr);
      var i = sx() !== ux;
      if (i) {
        if (Fr.transition !== null) {
          var a = Fr.transition;
          a._updatedFibers || (a._updatedFibers = /* @__PURE__ */ new Set()), a._updatedFibers.add(e);
        }
        return jh === wt && (jh = Vd()), jh;
      }
      var o = Fi();
      if (o !== wt)
        return o;
      var s = QC();
      return s;
    }
    function vT(e) {
      var t = e.mode;
      return (t & mt) === Qe ? Ke : by();
    }
    function mr(e, t, i, a) {
      jT(), __ && g("useInsertionEffect must not schedule updates."), J0 && (Vh = true), ko(e, i, a), (Nt & Hr) !== Y && e === Ci ? PT(t) : (lr && Pd(e, t, i), BT(t), e === Ci && ((Nt & Hr) === dr && (Yp = st(Yp, i)), vr === Ip && Xu(e, pr)), Qi(e, a), i === Ke && Nt === dr && (t.mode & mt) === Qe && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
      !ol.isBatchingLegacy && (Qp(), bS()));
    }
    function mT(e, t, i) {
      var a = e.current;
      a.lanes = t, ko(e, t, i), Qi(e, i);
    }
    function hT(e) {
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
        (Nt & Hr) !== dr
      );
    }
    function Qi(e, t) {
      var i = e.callbackNode;
      yy(e, t);
      var a = ks(e, e === Ci ? pr : Y);
      if (a === Y) {
        i !== null && U_(i), e.callbackNode = null, e.callbackPriority = wt;
        return;
      }
      var o = Vn(a), s = e.callbackPriority;
      if (s === o && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(ol.current !== null && i !== l1)) {
        i == null && s !== Ke && g("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      i != null && U_(i);
      var f;
      if (o === Ke)
        e.tag === ju ? (ol.isBatchingLegacy !== null && (ol.didScheduleLegacyUpdate = true), Yk(k_.bind(null, e))) : SS(k_.bind(null, e)), ol.current !== null ? ol.current.push(Fu) : qC(function() {
          (Nt & (Hr | Da)) === dr && Fu();
        }), f = null;
      else {
        var p;
        switch (Ns(a)) {
          case _r:
            p = kc;
            break;
          case or:
            p = Si;
            break;
          case Wa:
            p = ba;
            break;
          case Ts:
            p = Nl;
            break;
          default:
            p = ba;
            break;
        }
        f = o1(p, E_.bind(null, e));
      }
      e.callbackPriority = o, e.callbackNode = f;
    }
    function E_(e, t) {
      if (jx(), Xp = on, jh = Y, (Nt & (Hr | Da)) !== dr)
        throw new Error("Should not already be working.");
      var i = e.callbackNode, a = $o();
      if (a && e.callbackNode !== i)
        return null;
      var o = ks(e, e === Ci ? pr : Y);
      if (o === Y)
        return null;
      var s = !Rs(e, o) && !Kv(e, o) && !t, f = s ? RT(e, o) : Ph(e, o);
      if (f !== Po) {
        if (f === Zs) {
          var p = Ad(e);
          p !== Y && (o = p, f = e1(e, p));
        }
        if (f === Bp) {
          var v = $p;
          throw ec(e, Y), Xu(e, o), Qi(e, En()), v;
        }
        if (f === W0)
          Xu(e, o);
        else {
          var y = !Rs(e, o), S = e.current.alternate;
          if (y && !gT(S)) {
            if (f = Ph(e, o), f === Zs) {
              var O = Ad(e);
              O !== Y && (o = O, f = e1(e, O));
            }
            if (f === Bp) {
              var N = $p;
              throw ec(e, Y), Xu(e, o), Qi(e, En()), N;
            }
          }
          e.finishedWork = S, e.finishedLanes = o, yT(e, f, o);
        }
      }
      return Qi(e, En()), e.callbackNode === i ? E_.bind(null, e) : null;
    }
    function e1(e, t) {
      var i = Wp;
      if ($n(e)) {
        var a = ec(e, t);
        a.flags |= Tn, jk(e.containerInfo);
      }
      var o = Ph(e, t);
      if (o !== Zs) {
        var s = Wi;
        Wi = i, s !== null && C_(s);
      }
      return o;
    }
    function C_(e) {
      Wi === null ? Wi = e : Wi.push.apply(Wi, e);
    }
    function yT(e, t, i) {
      switch (t) {
        case Po:
        case Bp:
          throw new Error("Root did not complete. This is a bug in React.");
        case Zs: {
          tc(e, Wi, Bo);
          break;
        }
        case Lh: {
          if (Xu(e, i), Gc(i) && // do not delay if we're inside an act() scope
          !j_()) {
            var a = G0 + g_ - En();
            if (a > 10) {
              var o = ks(e, Y);
              if (o !== Y)
                break;
              var s = e.suspendedLanes;
              if (!Co(s, i)) {
                ki(), Fd(e, s);
                break;
              }
              e.timeoutHandle = Ky(tc.bind(null, e, Wi, Bo), a);
              break;
            }
          }
          tc(e, Wi, Bo);
          break;
        }
        case Ip: {
          if (Xu(e, i), Xv(i))
            break;
          if (!j_()) {
            var f = qv(e, i), p = f, v = En() - p, y = UT(v) - v;
            if (y > 10) {
              e.timeoutHandle = Ky(tc.bind(null, e, Wi, Bo), y);
              break;
            }
          }
          tc(e, Wi, Bo);
          break;
        }
        case y_: {
          tc(e, Wi, Bo);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function gT(e) {
      for (var t = e; ; ) {
        if (t.flags & ys) {
          var i = t.updateQueue;
          if (i !== null) {
            var a = i.stores;
            if (a !== null)
              for (var o = 0; o < a.length; o++) {
                var s = a[o], f = s.getSnapshot, p = s.value;
                try {
                  if (!Me(f(), p))
                    return false;
                } catch {
                  return false;
                }
              }
          }
        }
        var v = t.child;
        if (t.subtreeFlags & ys && v !== null) {
          v.return = t, t = v;
          continue;
        }
        if (t === e)
          return true;
        for (; t.sibling === null; ) {
          if (t.return === null || t.return === e)
            return true;
          t = t.return;
        }
        t.sibling.return = t.return, t = t.sibling;
      }
      return true;
    }
    function Xu(e, t) {
      t = bu(t, Ah), t = bu(t, Yp), jd(e, t);
    }
    function k_(e) {
      if (Fx(), (Nt & (Hr | Da)) !== dr)
        throw new Error("Should not already be working.");
      $o();
      var t = ks(e, Y);
      if (!li(t, Ke))
        return Qi(e, En()), null;
      var i = Ph(e, t);
      if (e.tag !== ju && i === Zs) {
        var a = Ad(e);
        a !== Y && (t = a, i = e1(e, a));
      }
      if (i === Bp) {
        var o = $p;
        throw ec(e, Y), Xu(e, t), Qi(e, En()), o;
      }
      if (i === W0)
        throw new Error("Root did not complete. This is a bug in React.");
      var s = e.current.alternate;
      return e.finishedWork = s, e.finishedLanes = t, tc(e, Wi, Bo), Qi(e, En()), null;
    }
    function ST(e, t) {
      t !== Y && (_u(e, st(t, Ke)), Qi(e, En()), (Nt & (Hr | Da)) === dr && (Qp(), Fu()));
    }
    function t1(e, t) {
      var i = Nt;
      Nt |= h_;
      try {
        return e(t);
      } finally {
        Nt = i, Nt === dr && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ol.isBatchingLegacy && (Qp(), bS());
      }
    }
    function bT(e, t, i, a, o) {
      var s = Fi(), f = Fr.transition;
      try {
        return Fr.transition = null, In(_r), e(t, i, a, o);
      } finally {
        In(s), Fr.transition = f, Nt === dr && Qp();
      }
    }
    function Io(e) {
      Gu !== null && Gu.tag === ju && (Nt & (Hr | Da)) === dr && $o();
      var t = Nt;
      Nt |= h_;
      var i = Fr.transition, a = Fi();
      try {
        return Fr.transition = null, In(_r), e ? e() : void 0;
      } finally {
        In(a), Fr.transition = i, Nt = t, (Nt & (Hr | Da)) === dr && Fu();
      }
    }
    function x_() {
      return (Nt & (Hr | Da)) !== dr;
    }
    function Hh(e, t) {
      ui(Q0, Kl, e), Kl = st(Kl, t);
    }
    function n1(e) {
      Kl = Q0.current, oi(Q0, e);
    }
    function ec(e, t) {
      e.finishedWork = null, e.finishedLanes = Y;
      var i = e.timeoutHandle;
      if (i !== Zy && (e.timeoutHandle = Zy, GC(i)), An !== null)
        for (var a = An.return; a !== null; ) {
          var o = a.alternate;
          e_(o, a), a = a.return;
        }
      Ci = e;
      var s = nc(e.current, null);
      return An = s, pr = Kl = t, vr = Po, $p = null, Mh = Y, Yp = Y, Ah = Y, Wp = null, Wi = null, px(), Ja.discardPendingWarnings(), s;
    }
    function R_(e, t) {
      do {
        var i = An;
        try {
          if (Gm(), nb(), Rn(), Y0.current = null, i === null || i.return === null) {
            vr = Bp, $p = t, An = null;
            return;
          }
          if (ct && i.mode & qe && Rh(i, true), Tt)
            if (vo(), t !== null && typeof t == "object" && typeof t.then == "function") {
              var a = t;
              Wv(i, a, pr);
            } else
              Nc(i, t, pr);
          $x(e, i.return, i, t, pr), D_(i);
        } catch (o) {
          t = o, An === i && i !== null ? (i = i.return, An = i) : i = An;
          continue;
        }
        return;
      } while (true);
    }
    function T_() {
      var e = $0.current;
      return $0.current = _h, e === null ? _h : e;
    }
    function w_(e) {
      $0.current = e;
    }
    function _T() {
      G0 = En();
    }
    function Kp(e) {
      Mh = st(e, Mh);
    }
    function ET() {
      vr === Po && (vr = Lh);
    }
    function r1() {
      (vr === Po || vr === Lh || vr === Zs) && (vr = Ip), Ci !== null && (xs(Mh) || xs(Yp)) && Xu(Ci, pr);
    }
    function CT(e) {
      vr !== Ip && (vr = Zs), Wp === null ? Wp = [e] : Wp.push(e);
    }
    function kT() {
      return vr === Po;
    }
    function Ph(e, t) {
      var i = Nt;
      Nt |= Hr;
      var a = T_();
      if (Ci !== e || pr !== t) {
        if (lr) {
          var o = e.memoizedUpdaters;
          o.size > 0 && (Zp(e, pr), o.clear()), Kc(e, t);
        }
        Bo = Bd(), ec(e, t);
      }
      oa(t);
      do
        try {
          xT();
          break;
        } catch (s) {
          R_(e, s);
        }
      while (true);
      if (Gm(), Nt = i, w_(a), An !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return mu(), Ci = null, pr = Y, vr;
    }
    function xT() {
      for (; An !== null; )
        N_(An);
    }
    function RT(e, t) {
      var i = Nt;
      Nt |= Hr;
      var a = T_();
      if (Ci !== e || pr !== t) {
        if (lr) {
          var o = e.memoizedUpdaters;
          o.size > 0 && (Zp(e, pr), o.clear()), Kc(e, t);
        }
        Bo = Bd(), Qp(), ec(e, t);
      }
      oa(t);
      do
        try {
          TT();
          break;
        } catch (s) {
          R_(e, s);
        }
      while (true);
      return Gm(), w_(a), Nt = i, An !== null ? (bs(), Po) : (mu(), Ci = null, pr = Y, vr);
    }
    function TT() {
      for (; An !== null && !Cc(); )
        N_(An);
    }
    function N_(e) {
      var t = e.alternate;
      Gt(e);
      var i;
      (e.mode & qe) !== Qe ? (g0(e), i = i1(t, e, Kl), Rh(e, true)) : i = i1(t, e, Kl), Rn(), e.memoizedProps = e.pendingProps, i === null ? D_(e) : An = i, Y0.current = null;
    }
    function D_(e) {
      var t = e;
      do {
        var i = t.alternate, a = t.return;
        if ((t.flags & hi) === $e) {
          Gt(t);
          var o = void 0;
          if ((t.mode & qe) === Qe ? o = Jb(i, t, Kl) : (g0(t), o = Jb(i, t, Kl), Rh(t, false)), Rn(), o !== null) {
            An = o;
            return;
          }
        } else {
          var s = ER(i, t);
          if (s !== null) {
            s.flags &= Uv, An = s;
            return;
          }
          if ((t.mode & qe) !== Qe) {
            Rh(t, false);
            for (var f = t.actualDuration, p = t.child; p !== null; )
              f += p.actualDuration, p = p.sibling;
            t.actualDuration = f;
          }
          if (a !== null)
            a.flags |= hi, a.subtreeFlags = $e, a.deletions = null;
          else {
            vr = W0, An = null;
            return;
          }
        }
        var v = t.sibling;
        if (v !== null) {
          An = v;
          return;
        }
        t = a, An = t;
      } while (t !== null);
      vr === Po && (vr = y_);
    }
    function tc(e, t, i) {
      var a = Fi(), o = Fr.transition;
      try {
        Fr.transition = null, In(_r), wT(e, t, i, a);
      } finally {
        Fr.transition = o, In(a);
      }
      return null;
    }
    function wT(e, t, i, a) {
      do
        $o();
      while (Gu !== null);
      if (FT(), (Nt & (Hr | Da)) !== dr)
        throw new Error("Should not already be working.");
      var o = e.finishedWork, s = e.finishedLanes;
      if (Rc(s), o === null)
        return Nd(), null;
      if (s === Y && g("root.finishedLanes should not be empty during a commit. This is a bug in React."), e.finishedWork = null, e.finishedLanes = Y, o === e.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      e.callbackNode = null, e.callbackPriority = wt;
      var f = st(o.lanes, o.childLanes);
      Hd(e, f), e === Ci && (Ci = null, An = null, pr = Y), ((o.subtreeFlags & zi) !== $e || (o.flags & zi) !== $e) && (Js || (Js = true, K0 = i, o1(ba, function() {
        return $o(), null;
      })));
      var p = (o.subtreeFlags & (du | ni | br | zi)) !== $e, v = (o.flags & (du | ni | br | zi)) !== $e;
      if (p || v) {
        var y = Fr.transition;
        Fr.transition = null;
        var S = Fi();
        In(_r);
        var O = Nt;
        Nt |= Da, Y0.current = null, TR(e, o), Tb(), PR(e, o, s), PC(e.containerInfo), e.current = o, Qv(s), BR(o, e, s), vu(), Hv(), Nt = O, In(S), Fr.transition = y;
      } else
        e.current = o, Tb();
      var N = Js;
      if (Js ? (Js = false, Gu = e, Gp = s) : (Pf = 0, Uh = null), f = e.pendingLanes, f === Y && (Hf = null), N || A_(e.current, false), Ia(o.stateNode, a), lr && e.memoizedUpdaters.clear(), oT(), Qi(e, En()), t !== null)
        for (var U = e.onRecoverableError, F = 0; F < t.length; F++) {
          var I = t[F], Re = I.stack, Ye = I.digest;
          U(I.value, {
            componentStack: Re,
            digest: Ye
          });
        }
      if (zh) {
        zh = false;
        var Ue = q0;
        throw q0 = null, Ue;
      }
      return li(Gp, Ke) && e.tag !== ju && $o(), f = e.pendingLanes, li(f, Ke) ? (Ux(), e === Z0 ? qp++ : (qp = 0, Z0 = e)) : qp = 0, Fu(), Nd(), null;
    }
    function $o() {
      if (Gu !== null) {
        var e = Ns(Gp), t = Ey(Wa, e), i = Fr.transition, a = Fi();
        try {
          return Fr.transition = null, In(t), DT();
        } finally {
          In(a), Fr.transition = i;
        }
      }
      return false;
    }
    function NT(e) {
      X0.push(e), Js || (Js = true, o1(ba, function() {
        return $o(), null;
      }));
    }
    function DT() {
      if (Gu === null)
        return false;
      var e = K0;
      K0 = null;
      var t = Gu, i = Gp;
      if (Gu = null, Gp = Y, (Nt & (Hr | Da)) !== dr)
        throw new Error("Cannot flush passive effects while already rendering.");
      J0 = true, Vh = false, Gv(i);
      var a = Nt;
      Nt |= Da, qR(t.current), YR(t, t.current, i, e);
      {
        var o = X0;
        X0 = [];
        for (var s = 0; s < o.length; s++) {
          var f = o[s];
          OR(t, f);
        }
      }
      Ss(), A_(t.current, true), Nt = a, Fu(), Vh ? t === Uh ? Pf++ : (Pf = 0, Uh = t) : Pf = 0, J0 = false, Vh = false, Ol(t);
      {
        var p = t.current.stateNode;
        p.effectDuration = 0, p.passiveEffectDuration = 0;
      }
      return true;
    }
    function O_(e) {
      return Hf !== null && Hf.has(e);
    }
    function OT(e) {
      Hf === null ? Hf = /* @__PURE__ */ new Set([e]) : Hf.add(e);
    }
    function LT(e) {
      zh || (zh = true, q0 = e);
    }
    var MT = LT;
    function L_(e, t, i) {
      var a = Xs(i, t), o = Nb(e, a, Ke), s = Pu(e, o, Ke), f = ki();
      s !== null && (ko(s, Ke, f), Qi(s, f));
    }
    function pn(e, t, i) {
      if (kR(i), Jp(false), e.tag === W) {
        L_(e, e, i);
        return;
      }
      var a = null;
      for (a = t; a !== null; ) {
        if (a.tag === W) {
          L_(a, e, i);
          return;
        } else if (a.tag === Q) {
          var o = a.type, s = a.stateNode;
          if (typeof o.getDerivedStateFromError == "function" || typeof s.componentDidCatch == "function" && !O_(s)) {
            var f = Xs(i, e), p = k0(a, f, Ke), v = Pu(a, p, Ke), y = ki();
            v !== null && (ko(v, Ke, y), Qi(v, y));
            return;
          }
        }
        a = a.return;
      }
      g(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, i);
    }
    function AT(e, t, i) {
      var a = e.pingCache;
      a !== null && a.delete(t);
      var o = ki();
      Fd(e, i), IT(e), Ci === e && Co(pr, i) && (vr === Ip || vr === Lh && Gc(pr) && En() - G0 < g_ ? ec(e, Y) : Ah = st(Ah, i)), Qi(e, o);
    }
    function M_(e, t) {
      t === wt && (t = vT(e));
      var i = ki(), a = $i(e, t);
      a !== null && (ko(a, t, i), Qi(a, i));
    }
    function zT(e) {
      var t = e.memoizedState, i = wt;
      t !== null && (i = t.retryLane), M_(e, i);
    }
    function VT(e, t) {
      var i = wt, a;
      switch (e.tag) {
        case be:
          a = e.stateNode;
          var o = e.memoizedState;
          o !== null && (i = o.retryLane);
          break;
        case Ct:
          a = e.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      a !== null && a.delete(t), M_(e, i);
    }
    function UT(e) {
      return e < 120 ? 120 : e < 480 ? 480 : e < 1080 ? 1080 : e < 1920 ? 1920 : e < 3e3 ? 3e3 : e < 4320 ? 4320 : cT(e / 1960) * 1960;
    }
    function jT() {
      if (qp > dT)
        throw qp = 0, Z0 = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      Pf > pT && (Pf = 0, Uh = null, g("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
    }
    function FT() {
      Ja.flushLegacyContextWarning(), Ja.flushPendingUnsafeLifecycleWarnings();
    }
    function A_(e, t) {
      Gt(e), Bh(e, ti, iT), t && Bh(e, po, aT), Bh(e, ti, nT), t && Bh(e, po, rT), Rn();
    }
    function Bh(e, t, i) {
      for (var a = e, o = null; a !== null; ) {
        var s = a.subtreeFlags & t;
        a !== o && a.child !== null && s !== $e ? a = a.child : ((a.flags & t) !== $e && i(a), a.sibling !== null ? a = a.sibling : a = o = a.return);
      }
    }
    var Ih = null;
    function z_(e) {
      {
        if ((Nt & Hr) !== dr || !(e.mode & mt))
          return;
        var t = e.tag;
        if (t !== ve && t !== W && t !== Q && t !== Z && t !== oe && t !== we && t !== De)
          return;
        var i = at(e) || "ReactComponent";
        if (Ih !== null) {
          if (Ih.has(i))
            return;
          Ih.add(i);
        } else
          Ih = /* @__PURE__ */ new Set([i]);
        var a = _n;
        try {
          Gt(e), g("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          a ? Gt(e) : Rn();
        }
      }
    }
    var i1;
    {
      var HT = null;
      i1 = function(e, t, i) {
        var a = I_(HT, t);
        try {
          return Gb(e, t, i);
        } catch (s) {
          if (Jk() || s !== null && typeof s == "object" && typeof s.then == "function")
            throw s;
          if (Gm(), nb(), e_(e, t), I_(t, a), t.mode & qe && g0(t), fo(null, Gb, null, e, t, i), my()) {
            var o = gd();
            typeof o == "object" && o !== null && o._suppressLogging && typeof s == "object" && s !== null && !s._suppressLogging && (s._suppressLogging = true);
          }
          throw s;
        }
      };
    }
    var V_ = false, a1;
    a1 = /* @__PURE__ */ new Set();
    function PT(e) {
      if (Xr && !Ax())
        switch (e.tag) {
          case Z:
          case oe:
          case De: {
            var t = An && at(An) || "Unknown", i = t;
            if (!a1.has(i)) {
              a1.add(i);
              var a = at(e) || "Unknown";
              g("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", a, t, t);
            }
            break;
          }
          case Q: {
            V_ || (g("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), V_ = true);
            break;
          }
        }
    }
    function Zp(e, t) {
      if (lr) {
        var i = e.memoizedUpdaters;
        i.forEach(function(a) {
          Pd(e, a, t);
        });
      }
    }
    var l1 = {};
    function o1(e, t) {
      {
        var i = ol.current;
        return i !== null ? (i.push(t), l1) : Ec(e, t);
      }
    }
    function U_(e) {
      if (e !== l1)
        return Fv(e);
    }
    function j_() {
      return ol.current !== null;
    }
    function BT(e) {
      {
        if (e.mode & mt) {
          if (!m_())
            return;
        } else if (!sT() || Nt !== dr || e.tag !== Z && e.tag !== oe && e.tag !== De)
          return;
        if (ol.current === null) {
          var t = _n;
          try {
            Gt(e), g(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, at(e));
          } finally {
            t ? Gt(e) : Rn();
          }
        }
      }
    }
    function IT(e) {
      e.tag !== ju && m_() && ol.current === null && g(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    function Jp(e) {
      __ = e;
    }
    var Oa = null, Bf = null, $T = function(e) {
      Oa = e;
    };
    function If(e) {
      {
        if (Oa === null)
          return e;
        var t = Oa(e);
        return t === void 0 ? e : t.current;
      }
    }
    function u1(e) {
      return If(e);
    }
    function s1(e) {
      {
        if (Oa === null)
          return e;
        var t = Oa(e);
        if (t === void 0) {
          if (e != null && typeof e.render == "function") {
            var i = If(e.render);
            if (e.render !== i) {
              var a = {
                $$typeof: He,
                render: i
              };
              return e.displayName !== void 0 && (a.displayName = e.displayName), a;
            }
          }
          return e;
        }
        return t.current;
      }
    }
    function F_(e, t) {
      {
        if (Oa === null)
          return false;
        var i = e.elementType, a = t.type, o = false, s = typeof a == "object" && a !== null ? a.$$typeof : null;
        switch (e.tag) {
          case Q: {
            typeof a == "function" && (o = true);
            break;
          }
          case Z: {
            (typeof a == "function" || s === gt) && (o = true);
            break;
          }
          case oe: {
            (s === He || s === gt) && (o = true);
            break;
          }
          case we:
          case De: {
            (s === Qt || s === gt) && (o = true);
            break;
          }
          default:
            return false;
        }
        if (o) {
          var f = Oa(i);
          if (f !== void 0 && f === Oa(a))
            return true;
        }
        return false;
      }
    }
    function H_(e) {
      {
        if (Oa === null || typeof WeakSet != "function")
          return;
        Bf === null && (Bf = /* @__PURE__ */ new WeakSet()), Bf.add(e);
      }
    }
    var YT = function(e, t) {
      {
        if (Oa === null)
          return;
        var i = t.staleFamilies, a = t.updatedFamilies;
        $o(), Io(function() {
          c1(e.current, a, i);
        });
      }
    }, WT = function(e, t) {
      {
        if (e.context !== sa)
          return;
        $o(), Io(function() {
          ev(t, e, null, null);
        });
      }
    };
    function c1(e, t, i) {
      {
        var a = e.alternate, o = e.child, s = e.sibling, f = e.tag, p = e.type, v = null;
        switch (f) {
          case Z:
          case De:
          case Q:
            v = p;
            break;
          case oe:
            v = p.render;
            break;
        }
        if (Oa === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var y = false, S = false;
        if (v !== null) {
          var O = Oa(v);
          O !== void 0 && (i.has(O) ? S = true : t.has(O) && (f === Q ? S = true : y = true));
        }
        if (Bf !== null && (Bf.has(e) || a !== null && Bf.has(a)) && (S = true), S && (e._debugNeedsRemount = true), S || y) {
          var N = $i(e, Ke);
          N !== null && mr(N, e, Ke, on);
        }
        o !== null && !S && c1(o, t, i), s !== null && c1(s, t, i);
      }
    }
    var QT = function(e, t) {
      {
        var i = /* @__PURE__ */ new Set(), a = new Set(t.map(function(o) {
          return o.current;
        }));
        return f1(e.current, a, i), i;
      }
    };
    function f1(e, t, i) {
      {
        var a = e.child, o = e.sibling, s = e.tag, f = e.type, p = null;
        switch (s) {
          case Z:
          case De:
          case Q:
            p = f;
            break;
          case oe:
            p = f.render;
            break;
        }
        var v = false;
        p !== null && t.has(p) && (v = true), v ? GT(e, i) : a !== null && f1(a, t, i), o !== null && f1(o, t, i);
      }
    }
    function GT(e, t) {
      {
        var i = qT(e, t);
        if (i)
          return;
        for (var a = e; ; ) {
          switch (a.tag) {
            case q:
              t.add(a.stateNode);
              return;
            case J:
              t.add(a.stateNode.containerInfo);
              return;
            case W:
              t.add(a.stateNode.containerInfo);
              return;
          }
          if (a.return === null)
            throw new Error("Expected to reach root first.");
          a = a.return;
        }
      }
    }
    function qT(e, t) {
      for (var i = e, a = false; ; ) {
        if (i.tag === q)
          a = true, t.add(i.stateNode);
        else if (i.child !== null) {
          i.child.return = i, i = i.child;
          continue;
        }
        if (i === e)
          return a;
        for (; i.sibling === null; ) {
          if (i.return === null || i.return === e)
            return a;
          i = i.return;
        }
        i.sibling.return = i.return, i = i.sibling;
      }
      return false;
    }
    var d1;
    {
      d1 = false;
      try {
        var P_ = Object.preventExtensions({});
      } catch {
        d1 = true;
      }
    }
    function XT(e, t, i, a) {
      this.tag = e, this.key = i, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = t, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = a, this.flags = $e, this.subtreeFlags = $e, this.deletions = null, this.lanes = Y, this.childLanes = Y, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = false, this._debugHookTypes = null, !d1 && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
    }
    var ca = function(e, t, i, a) {
      return new XT(e, t, i, a);
    };
    function p1(e) {
      var t = e.prototype;
      return !!(t && t.isReactComponent);
    }
    function KT(e) {
      return typeof e == "function" && !p1(e) && e.defaultProps === void 0;
    }
    function ZT(e) {
      if (typeof e == "function")
        return p1(e) ? Q : Z;
      if (e != null) {
        var t = e.$$typeof;
        if (t === He)
          return oe;
        if (t === Qt)
          return we;
      }
      return ve;
    }
    function nc(e, t) {
      var i = e.alternate;
      i === null ? (i = ca(e.tag, t, e.key, e.mode), i.elementType = e.elementType, i.type = e.type, i.stateNode = e.stateNode, i._debugSource = e._debugSource, i._debugOwner = e._debugOwner, i._debugHookTypes = e._debugHookTypes, i.alternate = e, e.alternate = i) : (i.pendingProps = t, i.type = e.type, i.flags = $e, i.subtreeFlags = $e, i.deletions = null, i.actualDuration = 0, i.actualStartTime = -1), i.flags = e.flags & ar, i.childLanes = e.childLanes, i.lanes = e.lanes, i.child = e.child, i.memoizedProps = e.memoizedProps, i.memoizedState = e.memoizedState, i.updateQueue = e.updateQueue;
      var a = e.dependencies;
      switch (i.dependencies = a === null ? null : {
        lanes: a.lanes,
        firstContext: a.firstContext
      }, i.sibling = e.sibling, i.index = e.index, i.ref = e.ref, i.selfBaseDuration = e.selfBaseDuration, i.treeBaseDuration = e.treeBaseDuration, i._debugNeedsRemount = e._debugNeedsRemount, i.tag) {
        case ve:
        case Z:
        case De:
          i.type = If(e.type);
          break;
        case Q:
          i.type = u1(e.type);
          break;
        case oe:
          i.type = s1(e.type);
          break;
      }
      return i;
    }
    function JT(e, t) {
      e.flags &= ar | sn;
      var i = e.alternate;
      if (i === null)
        e.childLanes = Y, e.lanes = t, e.child = null, e.subtreeFlags = $e, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null, e.stateNode = null, e.selfBaseDuration = 0, e.treeBaseDuration = 0;
      else {
        e.childLanes = i.childLanes, e.lanes = i.lanes, e.child = i.child, e.subtreeFlags = $e, e.deletions = null, e.memoizedProps = i.memoizedProps, e.memoizedState = i.memoizedState, e.updateQueue = i.updateQueue, e.type = i.type;
        var a = i.dependencies;
        e.dependencies = a === null ? null : {
          lanes: a.lanes,
          firstContext: a.firstContext
        }, e.selfBaseDuration = i.selfBaseDuration, e.treeBaseDuration = i.treeBaseDuration;
      }
      return e;
    }
    function ew(e, t, i) {
      var a;
      return e === Hm ? (a = mt, t === true && (a |= Cn, a |= Ui)) : a = Qe, lr && (a |= qe), ca(W, null, null, a);
    }
    function v1(e, t, i, a, o, s) {
      var f = ve, p = e;
      if (typeof e == "function")
        p1(e) ? (f = Q, p = u1(p)) : p = If(p);
      else if (typeof e == "string")
        f = q;
      else
        e:
          switch (e) {
            case te:
              return Ku(i.children, o, s, t);
            case me:
              f = ie, o |= Cn, (o & mt) !== Qe && (o |= Ui);
              break;
            case Ie:
              return tw(i, o, s, t);
            case Je:
              return nw(i, o, s, t);
            case bn:
              return rw(i, o, s, t);
            case cl:
              return B_(i, o, s, t);
            case Gr:
            case ir:
            case Wf:
            case Qf:
            case Ji:
            default: {
              if (typeof e == "object" && e !== null)
                switch (e.$$typeof) {
                  case yt:
                    f = de;
                    break e;
                  case zt:
                    f = Xe;
                    break e;
                  case He:
                    f = oe, p = s1(p);
                    break e;
                  case Qt:
                    f = we;
                    break e;
                  case gt:
                    f = St, p = null;
                    break e;
                }
              var v = "";
              {
                (e === void 0 || typeof e == "object" && e !== null && Object.keys(e).length === 0) && (v += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                var y = a ? at(a) : null;
                y && (v += `

Check the render method of \`` + y + "`.");
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (e == null ? e : typeof e) + "." + v));
            }
          }
      var S = ca(f, i, t, o);
      return S.elementType = e, S.type = p, S.lanes = s, S._debugOwner = a, S;
    }
    function m1(e, t, i) {
      var a = null;
      a = e._owner;
      var o = e.type, s = e.key, f = e.props, p = v1(o, s, f, a, t, i);
      return p._debugSource = e._source, p._debugOwner = e._owner, p;
    }
    function Ku(e, t, i, a) {
      var o = ca(ee, e, a, t);
      return o.lanes = i, o;
    }
    function tw(e, t, i, a) {
      typeof e.id != "string" && g('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof e.id);
      var o = ca(xe, e, a, t | qe);
      return o.elementType = Ie, o.lanes = i, o.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, o;
    }
    function nw(e, t, i, a) {
      var o = ca(be, e, a, t);
      return o.elementType = Je, o.lanes = i, o;
    }
    function rw(e, t, i, a) {
      var o = ca(Ct, e, a, t);
      return o.elementType = bn, o.lanes = i, o;
    }
    function B_(e, t, i, a) {
      var o = ca(Be, e, a, t);
      o.elementType = cl, o.lanes = i;
      var s = {
        isHidden: false
      };
      return o.stateNode = s, o;
    }
    function h1(e, t, i) {
      var a = ca(fe, e, null, t);
      return a.lanes = i, a;
    }
    function iw() {
      var e = ca(q, null, null, Qe);
      return e.elementType = "DELETED", e;
    }
    function aw(e) {
      var t = ca(Lt, null, null, Qe);
      return t.stateNode = e, t;
    }
    function y1(e, t, i) {
      var a = e.children !== null ? e.children : [], o = ca(J, a, e.key, t);
      return o.lanes = i, o.stateNode = {
        containerInfo: e.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: e.implementation
      }, o;
    }
    function I_(e, t) {
      return e === null && (e = ca(ve, null, null, Qe)), e.tag = t.tag, e.key = t.key, e.elementType = t.elementType, e.type = t.type, e.stateNode = t.stateNode, e.return = t.return, e.child = t.child, e.sibling = t.sibling, e.index = t.index, e.ref = t.ref, e.pendingProps = t.pendingProps, e.memoizedProps = t.memoizedProps, e.updateQueue = t.updateQueue, e.memoizedState = t.memoizedState, e.dependencies = t.dependencies, e.mode = t.mode, e.flags = t.flags, e.subtreeFlags = t.subtreeFlags, e.deletions = t.deletions, e.lanes = t.lanes, e.childLanes = t.childLanes, e.alternate = t.alternate, e.actualDuration = t.actualDuration, e.actualStartTime = t.actualStartTime, e.selfBaseDuration = t.selfBaseDuration, e.treeBaseDuration = t.treeBaseDuration, e._debugSource = t._debugSource, e._debugOwner = t._debugOwner, e._debugNeedsRemount = t._debugNeedsRemount, e._debugHookTypes = t._debugHookTypes, e;
    }
    function lw(e, t, i, a, o) {
      this.tag = t, this.containerInfo = e, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = Zy, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = wt, this.eventTimes = Xc(Y), this.expirationTimes = Xc(on), this.pendingLanes = Y, this.suspendedLanes = Y, this.pingedLanes = Y, this.expiredLanes = Y, this.mutableReadLanes = Y, this.finishedLanes = Y, this.entangledLanes = Y, this.entanglements = Xc(Y), this.identifierPrefix = a, this.onRecoverableError = o, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        for (var s = this.pendingUpdatersLaneMap = [], f = 0; f < fn; f++)
          s.push(/* @__PURE__ */ new Set());
      }
      switch (t) {
        case Hm:
          this._debugRootType = i ? "hydrateRoot()" : "createRoot()";
          break;
        case ju:
          this._debugRootType = i ? "hydrate()" : "render()";
          break;
      }
    }
    function $_(e, t, i, a, o, s, f, p, v, y) {
      var S = new lw(e, t, i, p, v), O = ew(t, s);
      S.current = O, O.stateNode = S;
      {
        var N = {
          element: a,
          isDehydrated: i,
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        O.memoizedState = N;
      }
      return xg(O), S;
    }
    var g1 = "18.2.0";
    function ow(e, t, i) {
      var a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return Yr(a), {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: x,
        key: a == null ? null : "" + a,
        children: e,
        containerInfo: t,
        implementation: i
      };
    }
    var S1, b1;
    S1 = false, b1 = {};
    function Y_(e) {
      if (!e)
        return sa;
      var t = Li(e), i = $k(t);
      if (t.tag === Q) {
        var a = t.type;
        if ($l(a))
          return yS(t, a, i);
      }
      return i;
    }
    function uw(e, t) {
      {
        var i = Li(e);
        if (i === void 0) {
          if (typeof e.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
          var a = Object.keys(e).join(",");
          throw new Error("Argument appears to not be a ReactComponent. Keys: " + a);
        }
        var o = Vi(i);
        if (o === null)
          return null;
        if (o.mode & Cn) {
          var s = at(i) || "Component";
          if (!b1[s]) {
            b1[s] = true;
            var f = _n;
            try {
              Gt(o), i.mode & Cn ? g("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", t, t, s) : g("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", t, t, s);
            } finally {
              f ? Gt(f) : Rn();
            }
          }
        }
        return o.stateNode;
      }
    }
    function W_(e, t, i, a, o, s, f, p) {
      var v = false, y = null;
      return $_(e, t, v, y, i, a, o, s, f);
    }
    function Q_(e, t, i, a, o, s, f, p, v, y) {
      var S = true, O = $_(i, a, S, e, o, s, f, p, v);
      O.context = Y_(null);
      var N = O.current, U = ki(), F = qu(N), I = Fo(U, F);
      return I.callback = t ?? null, Pu(N, I, F), mT(O, F, U), O;
    }
    function ev(e, t, i, a) {
      Pv(t, e);
      var o = t.current, s = ki(), f = qu(o);
      mo(f);
      var p = Y_(i);
      t.context === null ? t.context = p : t.pendingContext = p, Xr && _n !== null && !S1 && (S1 = true, g(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, at(_n) || "Unknown"));
      var v = Fo(s, f);
      v.payload = {
        element: e
      }, a = a === void 0 ? null : a, a !== null && (typeof a != "function" && g("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", a), v.callback = a);
      var y = Pu(o, v, f);
      return y !== null && (mr(y, o, f, s), Jm(y, o, f)), f;
    }
    function $h(e) {
      var t = e.current;
      if (!t.child)
        return null;
      switch (t.child.tag) {
        case q:
          return t.child.stateNode;
        default:
          return t.child.stateNode;
      }
    }
    function sw(e) {
      switch (e.tag) {
        case W: {
          var t = e.stateNode;
          if ($n(t)) {
            var i = gy(t);
            ST(t, i);
          }
          break;
        }
        case be: {
          Io(function() {
            var o = $i(e, Ke);
            if (o !== null) {
              var s = ki();
              mr(o, e, Ke, s);
            }
          });
          var a = Ke;
          _1(e, a);
          break;
        }
      }
    }
    function G_(e, t) {
      var i = e.memoizedState;
      i !== null && i.dehydrated !== null && (i.retryLane = Jv(i.retryLane, t));
    }
    function _1(e, t) {
      G_(e, t);
      var i = e.alternate;
      i && G_(i, t);
    }
    function cw(e) {
      if (e.tag === be) {
        var t = hu, i = $i(e, t);
        if (i !== null) {
          var a = ki();
          mr(i, e, t, a);
        }
        _1(e, t);
      }
    }
    function fw(e) {
      if (e.tag === be) {
        var t = qu(e), i = $i(e, t);
        if (i !== null) {
          var a = ki();
          mr(i, e, t, a);
        }
        _1(e, t);
      }
    }
    function q_(e) {
      var t = jv(e);
      return t === null ? null : t.stateNode;
    }
    var X_ = function(e) {
      return null;
    };
    function dw(e) {
      return X_(e);
    }
    var K_ = function(e) {
      return false;
    };
    function pw(e) {
      return K_(e);
    }
    var Z_ = null, J_ = null, eE = null, tE = null, nE = null, rE = null, iE = null, aE = null, lE = null;
    {
      var oE = function(e, t, i) {
        var a = t[i], o = kt(e) ? e.slice() : pt({}, e);
        return i + 1 === t.length ? (kt(o) ? o.splice(a, 1) : delete o[a], o) : (o[a] = oE(e[a], t, i + 1), o);
      }, uE = function(e, t) {
        return oE(e, t, 0);
      }, sE = function(e, t, i, a) {
        var o = t[a], s = kt(e) ? e.slice() : pt({}, e);
        if (a + 1 === t.length) {
          var f = i[a];
          s[f] = s[o], kt(s) ? s.splice(o, 1) : delete s[o];
        } else
          s[o] = sE(
            // $FlowFixMe number or string is fine here
            e[o],
            t,
            i,
            a + 1
          );
        return s;
      }, cE = function(e, t, i) {
        if (t.length !== i.length) {
          P("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var a = 0; a < i.length - 1; a++)
            if (t[a] !== i[a]) {
              P("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return sE(e, t, i, 0);
      }, fE = function(e, t, i, a) {
        if (i >= t.length)
          return a;
        var o = t[i], s = kt(e) ? e.slice() : pt({}, e);
        return s[o] = fE(e[o], t, i + 1, a), s;
      }, dE = function(e, t, i) {
        return fE(e, t, 0, i);
      }, E1 = function(e, t) {
        for (var i = e.memoizedState; i !== null && t > 0; )
          i = i.next, t--;
        return i;
      };
      Z_ = function(e, t, i, a) {
        var o = E1(e, t);
        if (o !== null) {
          var s = dE(o.memoizedState, i, a);
          o.memoizedState = s, o.baseState = s, e.memoizedProps = pt({}, e.memoizedProps);
          var f = $i(e, Ke);
          f !== null && mr(f, e, Ke, on);
        }
      }, J_ = function(e, t, i) {
        var a = E1(e, t);
        if (a !== null) {
          var o = uE(a.memoizedState, i);
          a.memoizedState = o, a.baseState = o, e.memoizedProps = pt({}, e.memoizedProps);
          var s = $i(e, Ke);
          s !== null && mr(s, e, Ke, on);
        }
      }, eE = function(e, t, i, a) {
        var o = E1(e, t);
        if (o !== null) {
          var s = cE(o.memoizedState, i, a);
          o.memoizedState = s, o.baseState = s, e.memoizedProps = pt({}, e.memoizedProps);
          var f = $i(e, Ke);
          f !== null && mr(f, e, Ke, on);
        }
      }, tE = function(e, t, i) {
        e.pendingProps = dE(e.memoizedProps, t, i), e.alternate && (e.alternate.pendingProps = e.pendingProps);
        var a = $i(e, Ke);
        a !== null && mr(a, e, Ke, on);
      }, nE = function(e, t) {
        e.pendingProps = uE(e.memoizedProps, t), e.alternate && (e.alternate.pendingProps = e.pendingProps);
        var i = $i(e, Ke);
        i !== null && mr(i, e, Ke, on);
      }, rE = function(e, t, i) {
        e.pendingProps = cE(e.memoizedProps, t, i), e.alternate && (e.alternate.pendingProps = e.pendingProps);
        var a = $i(e, Ke);
        a !== null && mr(a, e, Ke, on);
      }, iE = function(e) {
        var t = $i(e, Ke);
        t !== null && mr(t, e, Ke, on);
      }, aE = function(e) {
        X_ = e;
      }, lE = function(e) {
        K_ = e;
      };
    }
    function vw(e) {
      var t = Vi(e);
      return t === null ? null : t.stateNode;
    }
    function mw(e) {
      return null;
    }
    function hw() {
      return _n;
    }
    function yw(e) {
      var t = e.findFiberByHostInstance, i = b.ReactCurrentDispatcher;
      return Td({
        bundleType: e.bundleType,
        version: e.version,
        rendererPackageName: e.rendererPackageName,
        rendererConfig: e.rendererConfig,
        overrideHookState: Z_,
        overrideHookStateDeletePath: J_,
        overrideHookStateRenamePath: eE,
        overrideProps: tE,
        overridePropsDeletePath: nE,
        overridePropsRenamePath: rE,
        setErrorHandler: aE,
        setSuspenseHandler: lE,
        scheduleUpdate: iE,
        currentDispatcherRef: i,
        findHostInstanceByFiber: vw,
        findFiberByHostInstance: t || mw,
        // React Refresh
        findHostInstancesForRefresh: QT,
        scheduleRefresh: YT,
        scheduleRoot: WT,
        setRefreshHandler: $T,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: hw,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: g1
      });
    }
    var pE = typeof reportError == "function" ? (
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(e) {
      console.error(e);
    };
    function C1(e) {
      this._internalRoot = e;
    }
    Yh.prototype.render = C1.prototype.render = function(e) {
      var t = this._internalRoot;
      if (t === null)
        throw new Error("Cannot update an unmounted root.");
      {
        typeof arguments[1] == "function" ? g("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : Wh(arguments[1]) ? g("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && g("You passed a second argument to root.render(...) but it only accepts one argument.");
        var i = t.containerInfo;
        if (i.nodeType !== zn) {
          var a = q_(t.current);
          a && a.parentNode !== i && g("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
        }
      }
      ev(e, t, null, null);
    }, Yh.prototype.unmount = C1.prototype.unmount = function() {
      typeof arguments[0] == "function" && g("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      var e = this._internalRoot;
      if (e !== null) {
        this._internalRoot = null;
        var t = e.containerInfo;
        x_() && g("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), Io(function() {
          ev(null, e, null, null);
        }), dS(t);
      }
    };
    function gw(e, t) {
      if (!Wh(e))
        throw new Error("createRoot(...): Target container is not a DOM element.");
      vE(e);
      var i = false, a = false, o = "", s = pE;
      t != null && (t.hydrate ? P("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof t == "object" && t !== null && t.$$typeof === va && g(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), t.unstable_strictMode === true && (i = true), t.identifierPrefix !== void 0 && (o = t.identifierPrefix), t.onRecoverableError !== void 0 && (s = t.onRecoverableError), t.transitionCallbacks !== void 0 && t.transitionCallbacks);
      var f = W_(e, Hm, null, i, a, o, s);
      Mm(f.current, e);
      var p = e.nodeType === zn ? e.parentNode : e;
      return up(p), new C1(f);
    }
    function Yh(e) {
      this._internalRoot = e;
    }
    function Sw(e) {
      e && om(e);
    }
    Yh.prototype.unstable_scheduleHydration = Sw;
    function bw(e, t, i) {
      if (!Wh(e))
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      vE(e), t === void 0 && g("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
      var a = i ?? null, o = i != null && i.hydratedSources || null, s = false, f = false, p = "", v = pE;
      i != null && (i.unstable_strictMode === true && (s = true), i.identifierPrefix !== void 0 && (p = i.identifierPrefix), i.onRecoverableError !== void 0 && (v = i.onRecoverableError));
      var y = Q_(t, null, e, Hm, a, s, f, p, v);
      if (Mm(y.current, e), up(e), o)
        for (var S = 0; S < o.length; S++) {
          var O = o[S];
          wx(y, O);
        }
      return new Yh(y);
    }
    function Wh(e) {
      return !!(e && (e.nodeType === Zr || e.nodeType === ia || e.nodeType === ao || !_e));
    }
    function tv(e) {
      return !!(e && (e.nodeType === Zr || e.nodeType === ia || e.nodeType === ao || e.nodeType === zn && e.nodeValue === " react-mount-point-unstable "));
    }
    function vE(e) {
      e.nodeType === Zr && e.tagName && e.tagName.toUpperCase() === "BODY" && g("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), Sp(e) && (e._reactRootContainer ? g("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : g("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
    }
    var _w = b.ReactCurrentOwner, mE;
    mE = function(e) {
      if (e._reactRootContainer && e.nodeType !== zn) {
        var t = q_(e._reactRootContainer.current);
        t && t.parentNode !== e && g("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
      }
      var i = !!e._reactRootContainer, a = k1(e), o = !!(a && Vu(a));
      o && !i && g("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), e.nodeType === Zr && e.tagName && e.tagName.toUpperCase() === "BODY" && g("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function k1(e) {
      return e ? e.nodeType === ia ? e.documentElement : e.firstChild : null;
    }
    function hE() {
    }
    function Ew(e, t, i, a, o) {
      if (o) {
        if (typeof a == "function") {
          var s = a;
          a = function() {
            var N = $h(f);
            s.call(N);
          };
        }
        var f = Q_(
          t,
          a,
          e,
          ju,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          hE
        );
        e._reactRootContainer = f, Mm(f.current, e);
        var p = e.nodeType === zn ? e.parentNode : e;
        return up(p), Io(), f;
      } else {
        for (var v; v = e.lastChild; )
          e.removeChild(v);
        if (typeof a == "function") {
          var y = a;
          a = function() {
            var N = $h(S);
            y.call(N);
          };
        }
        var S = W_(
          e,
          ju,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          hE
        );
        e._reactRootContainer = S, Mm(S.current, e);
        var O = e.nodeType === zn ? e.parentNode : e;
        return up(O), Io(function() {
          ev(t, S, i, a);
        }), S;
      }
    }
    function Cw(e, t) {
      e !== null && typeof e != "function" && g("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", t, e);
    }
    function Qh(e, t, i, a, o) {
      mE(i), Cw(o === void 0 ? null : o, "render");
      var s = i._reactRootContainer, f;
      if (!s)
        f = Ew(i, t, e, o, a);
      else {
        if (f = s, typeof o == "function") {
          var p = o;
          o = function() {
            var v = $h(f);
            p.call(v);
          };
        }
        ev(t, f, e, o);
      }
      return $h(f);
    }
    function kw(e) {
      {
        var t = _w.current;
        if (t !== null && t.stateNode !== null) {
          var i = t.stateNode._warnedAboutRefsInRender;
          i || g("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", Mt(t.type) || "A component"), t.stateNode._warnedAboutRefsInRender = true;
        }
      }
      return e == null ? null : e.nodeType === Zr ? e : uw(e, "findDOMNode");
    }
    function xw(e, t, i) {
      if (g("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !tv(t))
        throw new Error("Target container is not a DOM element.");
      {
        var a = Sp(t) && t._reactRootContainer === void 0;
        a && g("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
      }
      return Qh(null, e, t, true, i);
    }
    function Rw(e, t, i) {
      if (g("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !tv(t))
        throw new Error("Target container is not a DOM element.");
      {
        var a = Sp(t) && t._reactRootContainer === void 0;
        a && g("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
      }
      return Qh(null, e, t, false, i);
    }
    function Tw(e, t, i, a) {
      if (g("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !tv(i))
        throw new Error("Target container is not a DOM element.");
      if (e == null || !hs(e))
        throw new Error("parentComponent must be a valid React Component");
      return Qh(e, t, i, false, a);
    }
    function ww(e) {
      if (!tv(e))
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      {
        var t = Sp(e) && e._reactRootContainer === void 0;
        t && g("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
      }
      if (e._reactRootContainer) {
        {
          var i = k1(e), a = i && !Vu(i);
          a && g("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
        }
        return Io(function() {
          Qh(null, null, e, false, function() {
            e._reactRootContainer = null, dS(e);
          });
        }), true;
      } else {
        {
          var o = k1(e), s = !!(o && Vu(o)), f = e.nodeType === Zr && tv(e.parentNode) && !!e.parentNode._reactRootContainer;
          s && g("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", f ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
        }
        return false;
      }
    }
    Oe(sw), tm(cw), Os(fw), $d(Fi), rm(ws), (typeof Map != "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && g("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), zv(OC), yc(t1, bT, Io);
    function Nw(e, t) {
      var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!Wh(t))
        throw new Error("Target container is not a DOM element.");
      return ow(e, t, null, i);
    }
    function Dw(e, t, i, a) {
      return Tw(e, t, i, a);
    }
    var x1 = {
      usingClientEntryPoint: false,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
      Events: [Vu, bf, Am, hc, ps, t1]
    };
    function Ow(e, t) {
      return x1.usingClientEntryPoint || g('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), gw(e, t);
    }
    function Lw(e, t, i) {
      return x1.usingClientEntryPoint || g('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), bw(e, t, i);
    }
    function Mw(e) {
      return x_() && g("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), Io(e);
    }
    var Aw = yw({
      findFiberByHostInstance: Ps,
      bundleType: 1,
      version: g1,
      rendererPackageName: "react-dom"
    });
    if (!Aw && yn && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
      var yE = window.location.protocol;
      /^(https?|file):$/.test(yE) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (yE === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
    }
    qi.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = x1, qi.createPortal = Nw, qi.createRoot = Ow, qi.findDOMNode = kw, qi.flushSync = Mw, qi.hydrate = xw, qi.hydrateRoot = Lw, qi.render = Rw, qi.unmountComponentAtNode = ww, qi.unstable_batchedUpdates = t1, qi.unstable_renderSubtreeIntoContainer = Dw, qi.version = g1, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), qi;
}
function $E() {
  if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function")) {
    if (true)
      throw new Error("^_^");
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE($E);
    } catch (E) {
      console.error(E);
    }
  }
}
false ? ($E(), M1.exports = Yw()) : M1.exports = Ww();
var Qw = M1.exports, rv = Qw;
if (false)
  av.createRoot = rv.createRoot, av.hydrateRoot = rv.hydrateRoot;
else {
  var Zh = rv.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  av.createRoot = function(E, _) {
    Zh.usingClientEntryPoint = true;
    try {
      return rv.createRoot(E, _);
    } finally {
      Zh.usingClientEntryPoint = false;
    }
  }, av.hydrateRoot = function(E, _, b) {
    Zh.usingClientEntryPoint = true;
    try {
      return rv.hydrateRoot(E, _, b);
    } finally {
      Zh.usingClientEntryPoint = false;
    }
  };
}
var Kt = Zu();
const Gw = /* @__PURE__ */ BE(Kt);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
var qw = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Xw = (E) => E.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const xt = (E, _) => {
  const b = Kt.forwardRef(
    ({
      color: w = "currentColor",
      size: X = 24,
      strokeWidth: P = 2,
      absoluteStrokeWidth: g,
      className: ge = "",
      children: Z,
      ...Q
    }, ve) => Kt.createElement(
      "svg",
      {
        ref: ve,
        ...qw,
        width: X,
        height: X,
        stroke: w,
        strokeWidth: g ? Number(P) * 24 / Number(X) : P,
        className: ["lucide", `lucide-${Xw(E)}`, ge].join(" "),
        ...Q
      },
      [
        ..._.map(([W, J]) => Kt.createElement(W, J)),
        ...Array.isArray(Z) ? Z : [Z]
      ]
    )
  );
  return b.displayName = `${E}`, b;
};
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Kw = xt("AArrowUp", [
  ["path", { d: "M3.5 13h6", key: "p1my2r" }],
  ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
  ["path", { d: "M18 16V7", key: "ty0viw" }],
  ["path", { d: "m14 11 4-4 4 4", key: "1pu57t" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Zw = xt("Accessibility", [
  ["circle", { cx: "16", cy: "4", r: "1", key: "1grugj" }],
  ["path", { d: "m18 19 1-7-6 1", key: "r0i19z" }],
  ["path", { d: "m5 8 3-3 5.5 3-2.36 3.5", key: "9ptxx2" }],
  ["path", { d: "M4.24 14.5a5 5 0 0 0 6.88 6", key: "10kmtu" }],
  ["path", { d: "M13.76 17.5a5 5 0 0 0-6.88-6", key: "2qq6rc" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Jw = xt("AlignCenter", [
  ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
  ["line", { x1: "17", x2: "7", y1: "12", y2: "12", key: "rsh8ii" }],
  ["line", { x1: "19", x2: "5", y1: "18", y2: "18", key: "1t0tuv" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const eN = xt("AlignJustify", [
  ["line", { x1: "3", x2: "21", y1: "6", y2: "6", key: "4m8b97" }],
  ["line", { x1: "3", x2: "21", y1: "12", y2: "12", key: "10d38w" }],
  ["line", { x1: "3", x2: "21", y1: "18", y2: "18", key: "kwyyxn" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const tN = xt("AlignLeft", [
  ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
  ["line", { x1: "15", x2: "3", y1: "12", y2: "12", key: "v6grx8" }],
  ["line", { x1: "17", x2: "3", y1: "18", y2: "18", key: "1awlsn" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const nN = xt("AlignRight", [
  ["line", { x1: "21", x2: "3", y1: "6", y2: "6", key: "1fp77t" }],
  ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }],
  ["line", { x1: "21", x2: "7", y1: "18", y2: "18", key: "1g9eri" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const rN = xt("ArrowLeft", [
  ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
  ["path", { d: "M19 12H5", key: "x3x0zl" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const iN = xt("ArrowRightLeft", [
  ["path", { d: "m16 3 4 4-4 4", key: "1x1c3m" }],
  ["path", { d: "M20 7H4", key: "zbl0bi" }],
  ["path", { d: "m8 21-4-4 4-4", key: "h9nckh" }],
  ["path", { d: "M4 17h16", key: "g4d7ey" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const aN = xt("ArrowRight", [
  ["path", { d: "M5 12h14", key: "1ays0h" }],
  ["path", { d: "m12 5 7 7-7 7", key: "xquz4c" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const lN = xt("AudioWaveform", [
  [
    "path",
    {
      d: "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2",
      key: "57tc96"
    }
  ]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const oN = xt("Brain", [
  [
    "path",
    {
      d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
      key: "l5xja"
    }
  ],
  [
    "path",
    {
      d: "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z",
      key: "ep3f8r"
    }
  ],
  ["path", { d: "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4", key: "1p4c4q" }],
  ["path", { d: "M17.599 6.5a3 3 0 0 0 .399-1.375", key: "tmeiqw" }],
  ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
  ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
  ["path", { d: "M19.938 10.5a4 4 0 0 1 .585.396", key: "1qfode" }],
  ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
  ["path", { d: "M19.967 17.484A4 4 0 0 1 18 18", key: "159ez6" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const uN = xt("CaseSensitive", [
  ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
  ["path", { d: "M4 13h6", key: "1r9ots" }],
  ["circle", { cx: "18", cy: "12", r: "3", key: "1kchzo" }],
  ["path", { d: "M21 9v6", key: "anns31" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const sN = xt("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const cN = xt("ChevronRight", [
  ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const fN = xt("ChevronsLeftRight", [
  ["path", { d: "m9 7-5 5 5 5", key: "j5w590" }],
  ["path", { d: "m15 7 5 5-5 5", key: "1bl6da" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const dN = xt("ChevronsUpDown", [
  ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
  ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const pN = xt("CircleDotDashed", [
  ["path", { d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0", key: "1qdqn0" }],
  ["path", { d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7", key: "1bq7p6" }],
  ["path", { d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8", key: "1rlaqf" }],
  ["path", { d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69", key: "1xk03u" }],
  ["path", { d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0", key: "l7re25" }],
  ["path", { d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7", key: "1v18p6" }],
  ["path", { d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8", key: "xdo6bj" }],
  ["path", { d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69", key: "1jjmaz" }],
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const vN = xt("CircleDot", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const wE = xt("Droplet", [
  [
    "path",
    {
      d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
      key: "c7niix"
    }
  ]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const mN = xt("Eclipse", [
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
  ["path", { d: "M12 2a7 7 0 1 0 10 10", key: "1yuj32" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const hN = xt("Eye", [
  ["path", { d: "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z", key: "rwhkz3" }],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const yN = xt("Highlighter", [
  ["path", { d: "m9 11-6 6v3h9l3-3", key: "1a3l36" }],
  ["path", { d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4", key: "14a9rk" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const gN = xt("ImageOff", [
  ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
  ["path", { d: "M10.41 10.41a2 2 0 1 1-2.83-2.83", key: "1bzlo9" }],
  ["line", { x1: "13.5", x2: "6", y1: "13.5", y2: "21", key: "1q0aeu" }],
  ["line", { x1: "18", x2: "21", y1: "12", y2: "15", key: "5mozeu" }],
  [
    "path",
    {
      d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
      key: "mmje98"
    }
  ],
  ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const SN = xt("Lamp", [
  ["path", { d: "M8 2h8l4 10H4L8 2Z", key: "9dma5w" }],
  ["path", { d: "M12 12v6", key: "3ahymv" }],
  ["path", { d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z", key: "mwf4oh" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const bN = xt("Ligature", [
  ["path", { d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2", key: "1rtphz" }],
  ["path", { d: "M6 12h4", key: "a4o3ry" }],
  ["path", { d: "M14 12h2v8", key: "c1fccl" }],
  ["path", { d: "M6 20h4", key: "1i6q5t" }],
  ["path", { d: "M14 20h4", key: "lzx1xo" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const _N = xt("Lightbulb", [
  [
    "path",
    {
      d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5",
      key: "1gvzjb"
    }
  ],
  ["path", { d: "M9 18h6", key: "x1upvd" }],
  ["path", { d: "M10 22h4", key: "ceow96" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const EN = xt("Link2", [
  ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
  ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
  ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const CN = xt("MousePointer", [
  ["path", { d: "m3 3 7.07 16.97 2.51-7.39 7.39-2.51L3 3z", key: "y2ucgo" }],
  ["path", { d: "m13 13 6 6", key: "1nhxnf" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const kN = xt("PanelRight", [
  ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
  ["path", { d: "M15 3v18", key: "14nvp0" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const xN = xt("PersonStanding", [
  ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
  ["path", { d: "m9 20 3-6 3 6", key: "se2kox" }],
  ["path", { d: "m6 8 6 2 6-2", key: "4o3us4" }],
  ["path", { d: "M12 10v4", key: "1kjpxc" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const RN = xt("RefreshCcw", [
  ["path", { d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "14sxne" }],
  ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
  ["path", { d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16", key: "1hlbsb" }],
  ["path", { d: "M16 16h5v5", key: "ccwih5" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const TN = xt("ScanLine", [
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
  ["path", { d: "M7 12h10", key: "b7w52i" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const wN = xt("Settings", [
  [
    "path",
    {
      d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
      key: "1qme2f"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const NN = xt("Shapes", [
  [
    "path",
    {
      d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z",
      key: "1bo67w"
    }
  ],
  ["rect", { x: "3", y: "14", width: "7", height: "7", rx: "1", key: "1bkyp8" }],
  ["circle", { cx: "17.5", cy: "17.5", r: "3.5", key: "w3z12y" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const DN = xt("Text", [
  ["path", { d: "M17 6.1H3", key: "wptmhv" }],
  ["path", { d: "M21 12.1H3", key: "1j38uz" }],
  ["path", { d: "M15.1 18H3", key: "1nb16a" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const NE = xt("Type", [
  ["polyline", { points: "4 7 4 4 20 4 20 7", key: "1nosan" }],
  ["line", { x1: "9", x2: "15", y1: "20", y2: "20", key: "swin9y" }],
  ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const YE = xt("User", [
  ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
  ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
]);
/**
 * @license lucide-react v0.363.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const ON = xt("X", [
  ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
  ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
]);
var LN = { VITE_USER_NODE_ENV: "development", BASE_URL: "/", MODE: "production", DEV: true, PROD: false, SSR: false };
const DE = (E) => {
  let _;
  const b = /* @__PURE__ */ new Set(), w = (ve, W) => {
    const J = typeof ve == "function" ? ve(_) : ve;
    if (!Object.is(J, _)) {
      const q = _;
      _ = W ?? (typeof J != "object" || J === null) ? J : Object.assign({}, _, J), b.forEach((fe) => fe(_, q));
    }
  }, X = () => _, Z = { setState: w, getState: X, getInitialState: () => Q, subscribe: (ve) => (b.add(ve), () => b.delete(ve)), destroy: () => {
    (LN ? "production" : void 0) !== "production" && console.warn(
      "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
    ), b.clear();
  } }, Q = _ = E(w, X, Z);
  return Z;
}, MN = (E) => E ? DE(E) : DE;
var A1 = { exports: {} }, w1 = {}, Jh = { exports: {} }, N1 = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var OE;
function AN() {
  if (OE)
    return N1;
  OE = 1;
  var E = Zu();
  function _(W, J) {
    return W === J && (W !== 0 || 1 / W === 1 / J) || W !== W && J !== J;
  }
  var b = typeof Object.is == "function" ? Object.is : _, w = E.useState, X = E.useEffect, P = E.useLayoutEffect, g = E.useDebugValue;
  function ge(W, J) {
    var q = J(), fe = w({ inst: { value: q, getSnapshot: J } }), ee = fe[0].inst, ie = fe[1];
    return P(function() {
      ee.value = q, ee.getSnapshot = J, Z(ee) && ie({ inst: ee });
    }, [W, q, J]), X(function() {
      return Z(ee) && ie({ inst: ee }), W(function() {
        Z(ee) && ie({ inst: ee });
      });
    }, [W]), g(q), q;
  }
  function Z(W) {
    var J = W.getSnapshot;
    W = W.value;
    try {
      var q = J();
      return !b(W, q);
    } catch {
      return true;
    }
  }
  function Q(W, J) {
    return J();
  }
  var ve = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? Q : ge;
  return N1.useSyncExternalStore = E.useSyncExternalStore !== void 0 ? E.useSyncExternalStore : ve, N1;
}
var D1 = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var LE;
function zN() {
  return LE || (LE = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var E = Zu(), _ = E.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function b(oe) {
      {
        for (var xe = arguments.length, be = new Array(xe > 1 ? xe - 1 : 0), we = 1; we < xe; we++)
          be[we - 1] = arguments[we];
        w("error", oe, be);
      }
    }
    function w(oe, xe, be) {
      {
        var we = _.ReactDebugCurrentFrame, De = we.getStackAddendum();
        De !== "" && (xe += "%s", be = be.concat([De]));
        var St = be.map(function(Rt) {
          return String(Rt);
        });
        St.unshift("Warning: " + xe), Function.prototype.apply.call(console[oe], console, St);
      }
    }
    function X(oe, xe) {
      return oe === xe && (oe !== 0 || 1 / oe === 1 / xe) || oe !== oe && xe !== xe;
    }
    var P = typeof Object.is == "function" ? Object.is : X, g = E.useState, ge = E.useEffect, Z = E.useLayoutEffect, Q = E.useDebugValue, ve = false, W = false;
    function J(oe, xe, be) {
      ve || E.startTransition !== void 0 && (ve = true, b("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var we = xe();
      if (!W) {
        var De = xe();
        P(we, De) || (b("The result of getSnapshot should be cached to avoid an infinite loop"), W = true);
      }
      var St = g({
        inst: {
          value: we,
          getSnapshot: xe
        }
      }), Rt = St[0].inst, Lt = St[1];
      return Z(function() {
        Rt.value = we, Rt.getSnapshot = xe, q(Rt) && Lt({
          inst: Rt
        });
      }, [oe, we, xe]), ge(function() {
        q(Rt) && Lt({
          inst: Rt
        });
        var Ct = function() {
          q(Rt) && Lt({
            inst: Rt
          });
        };
        return oe(Ct);
      }, [oe]), Q(we), we;
    }
    function q(oe) {
      var xe = oe.getSnapshot, be = oe.value;
      try {
        var we = xe();
        return !P(be, we);
      } catch {
        return true;
      }
    }
    function fe(oe, xe, be) {
      return xe();
    }
    var ee = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", ie = !ee, Xe = ie ? fe : J, de = E.useSyncExternalStore !== void 0 ? E.useSyncExternalStore : Xe;
    D1.useSyncExternalStore = de, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), D1;
}
var ME;
function WE() {
  return ME || (ME = 1, false ? Jh.exports = AN() : Jh.exports = zN()), Jh.exports;
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var AE;
function VN() {
  if (AE)
    return w1;
  AE = 1;
  var E = Zu(), _ = WE();
  function b(Q, ve) {
    return Q === ve && (Q !== 0 || 1 / Q === 1 / ve) || Q !== Q && ve !== ve;
  }
  var w = typeof Object.is == "function" ? Object.is : b, X = _.useSyncExternalStore, P = E.useRef, g = E.useEffect, ge = E.useMemo, Z = E.useDebugValue;
  return w1.useSyncExternalStoreWithSelector = function(Q, ve, W, J, q) {
    var fe = P(null);
    if (fe.current === null) {
      var ee = { hasValue: false, value: null };
      fe.current = ee;
    } else
      ee = fe.current;
    fe = ge(function() {
      function Xe(we) {
        if (!de) {
          if (de = true, oe = we, we = J(we), q !== void 0 && ee.hasValue) {
            var De = ee.value;
            if (q(De, we))
              return xe = De;
          }
          return xe = we;
        }
        if (De = xe, w(oe, we))
          return De;
        var St = J(we);
        return q !== void 0 && q(De, St) ? De : (oe = we, xe = St);
      }
      var de = false, oe, xe, be = W === void 0 ? null : W;
      return [function() {
        return Xe(ve());
      }, be === null ? void 0 : function() {
        return Xe(be());
      }];
    }, [ve, W, J, q]);
    var ie = X(Q, fe[0], fe[1]);
    return g(function() {
      ee.hasValue = true, ee.value = ie;
    }, [ie]), Z(ie), ie;
  }, w1;
}
var O1 = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var zE;
function UN() {
  return zE || (zE = 1, function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var E = Zu(), _ = WE();
    function b(ve, W) {
      return ve === W && (ve !== 0 || 1 / ve === 1 / W) || ve !== ve && W !== W;
    }
    var w = typeof Object.is == "function" ? Object.is : b, X = _.useSyncExternalStore, P = E.useRef, g = E.useEffect, ge = E.useMemo, Z = E.useDebugValue;
    function Q(ve, W, J, q, fe) {
      var ee = P(null), ie;
      ee.current === null ? (ie = {
        hasValue: false,
        value: null
      }, ee.current = ie) : ie = ee.current;
      var Xe = ge(function() {
        var be = false, we, De, St = function(en) {
          if (!be) {
            be = true, we = en;
            var Be = q(en);
            if (fe !== void 0 && ie.hasValue) {
              var rt = ie.value;
              if (fe(rt, Be))
                return De = rt, rt;
            }
            return De = Be, Be;
          }
          var Ut = we, ht = De;
          if (w(Ut, en))
            return ht;
          var Ne = q(en);
          return fe !== void 0 && fe(ht, Ne) ? ht : (we = en, De = Ne, Ne);
        }, Rt = J === void 0 ? null : J, Lt = function() {
          return St(W());
        }, Ct = Rt === null ? void 0 : function() {
          return St(Rt());
        };
        return [Lt, Ct];
      }, [W, J, q, fe]), de = Xe[0], oe = Xe[1], xe = X(ve, de, oe);
      return g(function() {
        ie.hasValue = true, ie.value = xe;
      }, [xe]), Z(xe), xe;
    }
    O1.useSyncExternalStoreWithSelector = Q, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), O1;
}
false ? A1.exports = VN() : A1.exports = UN();
var jN = A1.exports;
const FN = /* @__PURE__ */ BE(jN);
var QE = { VITE_USER_NODE_ENV: "development", BASE_URL: "/", MODE: "production", DEV: true, PROD: false, SSR: false };
const { useDebugValue: HN } = Gw, { useSyncExternalStoreWithSelector: PN } = FN;
let VE = false;
const BN = (E) => E;
function IN(E, _ = BN, b) {
  (QE ? "production" : void 0) !== "production" && b && !VE && (console.warn(
    "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
  ), VE = true);
  const w = PN(
    E.subscribe,
    E.getState,
    E.getServerState || E.getInitialState,
    _,
    b
  );
  return HN(w), w;
}
const UE = (E) => {
  (QE ? "production" : void 0) !== "production" && typeof E != "function" && console.warn(
    "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
  );
  const _ = typeof E == "function" ? MN(E) : E, b = (w, X) => IN(_, w, X);
  return Object.assign(b, _), b;
}, z1 = (E) => E ? UE(E) : UE;
var $N = { VITE_USER_NODE_ENV: "development", BASE_URL: "/", MODE: "production", DEV: true, PROD: false, SSR: false };
function YN(E, _) {
  let b;
  try {
    b = E();
  } catch {
    return;
  }
  return {
    getItem: (X) => {
      var P;
      const g = (Z) => Z === null ? null : JSON.parse(Z, void 0), ge = (P = b.getItem(X)) != null ? P : null;
      return ge instanceof Promise ? ge.then(g) : g(ge);
    },
    setItem: (X, P) => b.setItem(
      X,
      JSON.stringify(P, void 0)
    ),
    removeItem: (X) => b.removeItem(X)
  };
}
const lv = (E) => (_) => {
  try {
    const b = E(_);
    return b instanceof Promise ? b : {
      then(w) {
        return lv(w)(b);
      },
      catch(w) {
        return this;
      }
    };
  } catch (b) {
    return {
      then(w) {
        return this;
      },
      catch(w) {
        return lv(w)(b);
      }
    };
  }
}, WN = (E, _) => (b, w, X) => {
  let P = {
    getStorage: () => localStorage,
    serialize: JSON.stringify,
    deserialize: JSON.parse,
    partialize: (ie) => ie,
    version: 0,
    merge: (ie, Xe) => ({
      ...Xe,
      ...ie
    }),
    ..._
  }, g = false;
  const ge = /* @__PURE__ */ new Set(), Z = /* @__PURE__ */ new Set();
  let Q;
  try {
    Q = P.getStorage();
  } catch {
  }
  if (!Q)
    return E(
      (...ie) => {
        console.warn(
          `[zustand persist middleware] Unable to update item '${P.name}', the given storage is currently unavailable.`
        ), b(...ie);
      },
      w,
      X
    );
  const ve = lv(P.serialize), W = () => {
    const ie = P.partialize({ ...w() });
    let Xe;
    const de = ve({ state: ie, version: P.version }).then(
      (oe) => Q.setItem(P.name, oe)
    ).catch((oe) => {
      Xe = oe;
    });
    if (Xe)
      throw Xe;
    return de;
  }, J = X.setState;
  X.setState = (ie, Xe) => {
    J(ie, Xe), W();
  };
  const q = E(
    (...ie) => {
      b(...ie), W();
    },
    w,
    X
  );
  let fe;
  const ee = () => {
    var ie;
    if (!Q)
      return;
    g = false, ge.forEach((de) => de(w()));
    const Xe = ((ie = P.onRehydrateStorage) == null ? void 0 : ie.call(P, w())) || void 0;
    return lv(Q.getItem.bind(Q))(P.name).then((de) => {
      if (de)
        return P.deserialize(de);
    }).then((de) => {
      if (de)
        if (typeof de.version == "number" && de.version !== P.version) {
          if (P.migrate)
            return P.migrate(
              de.state,
              de.version
            );
          console.error(
            "State loaded from storage couldn't be migrated since no migrate function was provided"
          );
        } else
          return de.state;
    }).then((de) => {
      var oe;
      return fe = P.merge(
        de,
        (oe = w()) != null ? oe : q
      ), b(fe, true), W();
    }).then(() => {
      Xe == null || Xe(fe, void 0), g = true, Z.forEach((de) => de(fe));
    }).catch((de) => {
      Xe == null || Xe(void 0, de);
    });
  };
  return X.persist = {
    setOptions: (ie) => {
      P = {
        ...P,
        ...ie
      }, ie.getStorage && (Q = ie.getStorage());
    },
    clearStorage: () => {
      Q == null || Q.removeItem(P.name);
    },
    getOptions: () => P,
    rehydrate: () => ee(),
    hasHydrated: () => g,
    onHydrate: (ie) => (ge.add(ie), () => {
      ge.delete(ie);
    }),
    onFinishHydration: (ie) => (Z.add(ie), () => {
      Z.delete(ie);
    })
  }, ee(), fe || q;
}, QN = (E, _) => (b, w, X) => {
  let P = {
    storage: YN(() => localStorage),
    partialize: (ee) => ee,
    version: 0,
    merge: (ee, ie) => ({
      ...ie,
      ...ee
    }),
    ..._
  }, g = false;
  const ge = /* @__PURE__ */ new Set(), Z = /* @__PURE__ */ new Set();
  let Q = P.storage;
  if (!Q)
    return E(
      (...ee) => {
        console.warn(
          `[zustand persist middleware] Unable to update item '${P.name}', the given storage is currently unavailable.`
        ), b(...ee);
      },
      w,
      X
    );
  const ve = () => {
    const ee = P.partialize({ ...w() });
    return Q.setItem(P.name, {
      state: ee,
      version: P.version
    });
  }, W = X.setState;
  X.setState = (ee, ie) => {
    W(ee, ie), ve();
  };
  const J = E(
    (...ee) => {
      b(...ee), ve();
    },
    w,
    X
  );
  X.getInitialState = () => J;
  let q;
  const fe = () => {
    var ee, ie;
    if (!Q)
      return;
    g = false, ge.forEach((de) => {
      var oe;
      return de((oe = w()) != null ? oe : J);
    });
    const Xe = ((ie = P.onRehydrateStorage) == null ? void 0 : ie.call(P, (ee = w()) != null ? ee : J)) || void 0;
    return lv(Q.getItem.bind(Q))(P.name).then((de) => {
      if (de)
        if (typeof de.version == "number" && de.version !== P.version) {
          if (P.migrate)
            return P.migrate(
              de.state,
              de.version
            );
          console.error(
            "State loaded from storage couldn't be migrated since no migrate function was provided"
          );
        } else
          return de.state;
    }).then((de) => {
      var oe;
      return q = P.merge(
        de,
        (oe = w()) != null ? oe : J
      ), b(q, true), ve();
    }).then(() => {
      Xe == null || Xe(q, void 0), q = w(), g = true, Z.forEach((de) => de(q));
    }).catch((de) => {
      Xe == null || Xe(void 0, de);
    });
  };
  return X.persist = {
    setOptions: (ee) => {
      P = {
        ...P,
        ...ee
      }, ee.storage && (Q = ee.storage);
    },
    clearStorage: () => {
      Q == null || Q.removeItem(P.name);
    },
    getOptions: () => P,
    rehydrate: () => fe(),
    hasHydrated: () => g,
    onHydrate: (ee) => (ge.add(ee), () => {
      ge.delete(ee);
    }),
    onFinishHydration: (ee) => (Z.add(ee), () => {
      Z.delete(ee);
    })
  }, P.skipHydration || fe(), q || J;
}, GN = (E, _) => "getStorage" in _ || "serialize" in _ || "deserialize" in _ ? (($N ? "production" : void 0) !== "production" && console.warn(
  "[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."
), WN(E, _)) : QN(E, _), V1 = GN, ey = {
  textSize: 0,
  lineHeight: 0,
  wordSpacing: 0,
  textAlign: null,
  highlightTitles: false,
  highlightLinks: false,
  hiddenImages: false,
  invertColors: false,
  saturation: null,
  noTransitions: false,
  monochrome: false,
  readingGuide: false,
  bigCursor: false,
  fonts: null
}, ov = z1(
  V1(
    (E, _) => ({
      features: { ...ey },
      getFeature: (b) => _().features[b],
      setFeatures: (b) => E((w) => ({
        features: { ...w.features, ...b }
      })),
      isSomeFeaturesSelected: () => {
        const { features: b } = _();
        return Object.keys(b).some((w) => b[w] !== ey[w]);
      },
      applyProfileFeatures: (b) => E(() => ({
        features: { ...ey, ...b }
      })),
      isProfileChecked: (b) => {
        const { features: w } = _();
        return Object.entries(b).every(([X, P]) => w[X] === P);
      },
      reset: () => E({ features: { ...ey } }),
      set: (b) => E((w) => ({ ...w, ...b }))
    }),
    { name: "tkFeaturesStore" }
  )
), qN = {
  en: {
    "global.back": "Back",
    "global.title": "Accessibility Turnkey",
    "global.description": "Adapt this site according to your preferences.",
    "global.resetAllSettings": "Reset all settings",
    "feature.textSize": "Text size",
    "feature.lineHeight": "Line height",
    "feature.wordSpacing": "Word spacing",
    "feature.invertColors": "Invert colors",
    "feature.textAlign": "Text align",
    "feature.highlightTitles": "Highlight titles",
    "feature.highlightLinks": "Highlight links",
    "feature.hiddenImages": "Hide images",
    "feature.noTransitions": "Stop Animations",
    "feature.monochrome": "Monochrome mode",
    "feature.saturation": "Saturation",
    "feature.readingGuide": "Reading guide",
    "feature.bigCursor": "Big Cursor",
    "feature.modeDyslexie": "Dyslexia mode",
    "feature.fonts": "Readable Font",
    "profile.section.title": "Accessibility Profiles",
    "settings.option.display": "Aside display",
    "settings.option.oversized": "Oversized widget",
    "settings.option.font": "Widget font",
    "view.about.title": "Our accessibility statement",
    "view.about.subtitle": "Turnkey",
    "view.settings.title": "Widget Settings",
    "view.settings.subtitle": "Activate keyboard shortcuts, Dark theme, and Other settings",
    "view.settings.interface.title": "Interface",
    "view.translater.title": "Choose your Preferred Language",
    "view.translater.subtitle": "This will change the widget language only."
  },
  ar: {
    "global.back": "Back",
    "global.title": "Accessibility Turnkey",
    "global.description": "Ù‚Ù… Ø¨ØªÙƒÙŠÙŠÙ Ù‡Ø°Ø§ Ø§Ù„Ù…ÙˆÙ‚Ø¹ ÙˆÙÙ‚Ù‹Ø§ Ù„ØªÙØ¶ÙŠÙ„Ø§ØªÙƒ.",
    "global.resetAllSettings": "Ø§Ù…Ø³Ø­ ÙƒÙ„ Ø§Ù„Ø§Ø¹Ø¯Ø§Ø¯Øª",
    "feature.textSize": "Ø­Ø¬Ù… Ø§Ù„Ø®Ø·",
    "feature.lineHeight": "Ø§Ø±ØªÙØ§Ø¹ Ø®Ø·",
    "feature.wordSpacing": "ØªØ¨Ø§Ø¹Ø¯ Ø§Ù„ÙƒÙ„Ù…Ø§Øª",
    "feature.invertColors": "Ø¹ÙƒØ³ Ø§Ù„Ø£Ù„ÙˆØ§Ù†",
    "feature.textAlign": "Ù…Ø­Ø§Ø°Ø§Ø© Ø§Ù„Ù†Øµ",
    "feature.highlightTitles": "ØªØ³Ù„ÙŠØ· Ø§Ù„Ø¶ÙˆØ¡ Ø¹Ù„Ù‰ Ø§Ù„Ø¹Ù†Ø§ÙˆÙŠÙ†",
    "feature.highlightLinks": "ØªØ³Ù„ÙŠØ· Ø§Ù„Ø¶ÙˆØ¡ Ø¹Ù„Ù‰ Ø§Ù„Ø±ÙˆØ§Ø¨Ø·",
    "feature.hiddenImages": "Ø¥Ø®ÙØ§Ø¡ Ø§Ù„ØµÙˆØ±",
    "feature.noTransitions": "ÙˆÙ‚Ù Ø§Ù„ØªØ­Ø±Ùƒ",
    "feature.monochrome": "ÙˆØ¶Ø¹ Ø£Ø­Ø§Ø¯ÙŠ Ø§Ù„Ù„ÙˆÙ†",
    "feature.saturation": "Ø§Ù„ØªØ´Ø¨Ø¹",
    "feature.readingGuide": "Ø¯Ù„ÙŠÙ„ Ø§Ù„Ù‚Ø±Ø§Ø¡Ø©",
    "feature.bigCursor": "Ø§Ù„Ù…Ø¤Ø´Ø± Ø§Ù„ÙƒØ¨ÙŠØ±",
    "feature.modeDyslexie": "ÙˆØ¶Ø¹ Ø¹Ø³Ø± Ø§Ù„Ù‚Ø±Ø§Ø¡Ø©",
    "feature.fonts": "Ø®Ø· Ù‚Ø§Ø¨Ù„ Ù„Ù„Ù‚Ø±Ø§Ø¡Ø©",
    "profile.section.title": "Ø¥Ø¹Ø¯Ø§Ø¯Øª Ù…Ø³Ø¨Ù‚Ø© Ù„Ù„Ø§Ø®ØªÙŠØ§Ø±",
    "settings.option.display": "Ø¹Ø±Ø¶ Ø¬Ø§Ù†Ø¨Ø§",
    "settings.option.oversized": "Ø§Ù„Ù‚Ø·Ø¹Ø© Ø§Ù„Ù…ØªØ¶Ø®Ù…",
    "settings.option.font": "Ø®Ø· Ø§Ù„Ù‚Ø·Ø¹Ø©",
    "view.about.title": "Ø¨ÙŠØ§Ù† Ø¥Ù…ÙƒØ§Ù†ÙŠØ© Ø§Ù„ÙˆØµÙˆÙ„ Ù„Ø¯ÙŠÙ†Ø§",
    "view.about.subtitle": "Ø¬Ø§Ù‡Ø²Ø© Ù„Ù„Ø§Ø³ØªØºÙ„Ø§Ù„",
    "view.settings.title": "Ø¥Ø¹Ø¯Ø§Ø¯Ø§Øª",
    "view.settings.subtitle": "Ù‚Ù… Ø¨ØªÙ†Ø´ÙŠØ· Ø§Ø®ØªØµØ§Ø±Ø§Øª Ù„ÙˆØ­Ø© Ø§Ù„Ù…ÙØ§ØªÙŠØ­ ÙˆØ§Ù„Ù…Ø¸Ù‡Ø± Ø§Ù„Ø¯Ø§ÙƒÙ† ÙˆØ§Ù„Ø¥Ø¹Ø¯Ø§Ø¯Ø§Øª Ø§Ù„Ø£Ø®Ø±Ù‰",
    "view.settings.interface.title": "ÙˆØ§Ø¬Ù‡Ù‡ Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…",
    "view.translater.title": "Ø§Ø®ØªØ± Ù„ØºØªÙƒ Ø§Ù„Ù…ÙØ¶Ù„Ø©",
    "view.translater.subtitle": "Ø³ÙŠØ¤Ø¯ÙŠ Ù‡Ø°Ø§ Ø¥Ù„Ù‰ ØªØºÙŠÙŠØ± Ù„ØºØ© Ø§Ù„Ù‚Ø·Ø¹Ø© ÙÙ‚Ø·."
  },
  fr: {
    "global.back": "Retour",
    "global.title": "AccessibilitÃ© clÃ© en main",
    "global.description": "Adaptez ce site selon vos prÃ©fÃ©rences.",
    "global.resetAllSettings": "RÃ©initialiser tous les rÃ©glages",
    "feature.textSize": "Taille du texte",
    "feature.lineHeight": "Hauteur de la ligne",
    "feature.wordSpacing": "Espacement des mots",
    "feature.invertColors": "Invert colors",
    "feature.textAlign": "Aligner le texte",
    "feature.highlightTitles": "Mettre en surbrillance les titres",
    "feature.highlightLinks": "Mettre en surbrillance les liens",
    "feature.hiddenImages": "Masquer les images",
    "feature.noTransitions": "ArrÃªter les animations",
    "feature.monochrome": "Mode monochrome",
    "feature.saturation": "Saturation",
    "feature.readingGuide": "Guide de lecture",
    "feature.bigCursor": "Gros curseur",
    "feature.modeDyslexie": "Mode dyslexie",
    "feature.fonts": "Police lisible",
    "profile.section.title": "Profils d'accessibilitÃ©",
    "settings.option.display": "Affichage latÃ©ral",
    "settings.option.oversized": "Widget surdimensionnÃ©",
    "settings.option.font": "Police du widget",
    "view.about.title": "Notre dÃ©claration d'accessibilitÃ©",
    "view.about.subtitle": "ClÃ© en main",
    "view.settings.title": "ParamÃ¨tres du widget",
    "view.settings.subtitle": "Activer les raccourcis clavier, le thÃ¨me sombre et d'autres paramÃ¨tres",
    "view.settings.interface.title": "Interface",
    "view.translater.title": "Choisissez votre langue prÃ©fÃ©rÃ©e",
    "view.translater.subtitle": "Cela modifiera uniquement la langue du widget."
  }
}, XN = (E) => /* @__PURE__ */ L.jsxDEV("svg", { xmlns: "http://www.w3.org/2000/svg", width: "1.25em", height: "1.25em", viewBox: "0 0 512 512", ...E, children: [
  /* @__PURE__ */ L.jsxDEV("mask", { id: "circleFlagsFr0", children: /* @__PURE__ */ L.jsxDEV("circle", { cx: "256", cy: "256", r: "256", fill: "#fff" }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
    lineNumber: 6,
    columnNumber: 33
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
    lineNumber: 6,
    columnNumber: 7
  }, void 0),
  /* @__PURE__ */ L.jsxDEV("g", { mask: "url(#circleFlagsFr0)", children: [
    /* @__PURE__ */ L.jsxDEV("path", { fill: "#eee", d: "M167 0h178l25.9 252.3L345 512H167l-29.8-253.4z" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
      lineNumber: 8,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { fill: "#0052b4", d: "M0 0h167v512H0z" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
      lineNumber: 9,
      columnNumber: 9
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("path", { fill: "#d80027", d: "M345 0h167v512H345z" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
      lineNumber: 10,
      columnNumber: 9
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
    lineNumber: 7,
    columnNumber: 7
  }, void 0)
] }, void 0, true, {
  fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/France.tsx",
  lineNumber: 5,
  columnNumber: 5
}, void 0);
function KN(E) {
  return /* @__PURE__ */ L.jsxDEV("svg", { width: "1.25em", height: "1.25em", viewBox: "0 0 512 512", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...E, children: [
    /* @__PURE__ */ L.jsxDEV("g", { clipPath: "url(#clip0_582_5480)", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z", fill: "#F0F0F0" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
        lineNumber: 7,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M512 256C512 114.616 397.384 0 256 0C205.92 0 159.206 14.395 119.748 39.251L175.861 63.092L100.174 95.25L175.861 127.407L100.174 159.563L175.861 191.718L100.174 223.869L175.861 256.018L100.174 288.174L175.861 320.328L100.174 352.479L175.861 384.633L100.174 416.789L175.861 448.94L119.773 472.768C159.226 497.612 205.93 512 256 512C397.384 512 512 397.384 512 256Z", fill: "#751A46" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
        lineNumber: 8,
        columnNumber: 7
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 6,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ L.jsxDEV("defs", { children: /* @__PURE__ */ L.jsxDEV("clipPath", { id: "clip0_582_5480", children: /* @__PURE__ */ L.jsxDEV("rect", { width: "512", height: "512", fill: "white" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 12,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 11,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
      lineNumber: 10,
      columnNumber: 5
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/Qatar.tsx",
    lineNumber: 5,
    columnNumber: 5
  }, this);
}
function ZN(E) {
  return /* @__PURE__ */ L.jsxDEV("svg", { width: "1.25em", height: "1.25em", viewBox: "0 0 512 512", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...E, children: [
    /* @__PURE__ */ L.jsxDEV("g", { clipPath: "url(#clip0_582_5992)", children: [
      /* @__PURE__ */ L.jsxDEV("path", { d: "M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z", fill: "#F0F0F0" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 7,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M244.87 255.999H512C512 232.893 508.92 210.509 503.181 189.216H244.87V255.999Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 8,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M244.87 122.434H474.426C458.755 96.8619 438.718 74.2589 415.356 55.6509H244.87V122.434Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 9,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M256 511.999C316.249 511.999 371.626 491.175 415.356 456.347H96.644C140.374 491.175 195.751 511.999 256 511.999Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 10,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M37.574 389.564H474.426C487.007 369.035 496.764 346.595 503.181 322.781H8.819C15.236 346.595 24.993 369.035 37.574 389.564Z", fill: "#D80027" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 11,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ L.jsxDEV("path", { d: "M118.584 39.977H141.913L120.213 55.742L128.502 81.251L106.803 65.486L85.104 81.251L92.264 59.214C73.158 75.129 56.412 93.775 42.612 114.551H50.087L36.274 124.586C34.122 128.176 32.058 131.823 30.08 135.524L36.676 155.825L24.37 146.884C21.311 153.365 18.513 159.992 15.998 166.757L23.265 189.125H50.087L28.387 204.89L36.676 230.399L14.977 214.634L1.979 224.078C0.678 234.536 0 245.188 0 255.999H256C256 114.615 256 97.947 256 -0.000976562C205.428 -0.000976562 158.285 14.669 118.584 39.977ZM128.502 230.399L106.803 214.634L85.104 230.399L93.393 204.89L71.693 189.125H98.515L106.803 163.616L115.091 189.125H141.913L120.213 204.89L128.502 230.399ZM120.213 130.316L128.502 155.825L106.803 140.06L85.104 155.825L93.393 130.316L71.693 114.551H98.515L106.803 89.042L115.091 114.551H141.913L120.213 130.316ZM220.328 230.399L198.629 214.634L176.93 230.399L185.219 204.89L163.519 189.125H190.341L198.629 163.616L206.917 189.125H233.739L212.039 204.89L220.328 230.399ZM212.039 130.316L220.328 155.825L198.629 140.06L176.93 155.825L185.219 130.316L163.519 114.551H190.341L198.629 89.042L206.917 114.551H233.739L212.039 130.316ZM212.039 55.742L220.328 81.251L198.629 65.486L176.93 81.251L185.219 55.742L163.519 39.977H190.341L198.629 14.468L206.917 39.977H233.739L212.039 55.742Z", fill: "#0052B4" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
        lineNumber: 12,
        columnNumber: 7
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 6,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ L.jsxDEV("defs", { children: /* @__PURE__ */ L.jsxDEV("clipPath", { id: "clip0_582_5992", children: /* @__PURE__ */ L.jsxDEV("rect", { y: "-0.000976562", width: "512", height: "512", fill: "white" }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 16,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 15,
      columnNumber: 7
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
      lineNumber: 14,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/icons/flags/UnitedStates.tsx",
    lineNumber: 5,
    columnNumber: 5
  }, this);
}
const U1 = [
  {
    name: "English",
    key: "en",
    Flag: ZN
  },
  {
    name: "Arabic",
    key: "ar",
    direction: "rtl",
    Flag: KN
  },
  {
    name: "FranÃ§ais",
    key: "fr",
    Flag: XN
  }
], JN = "en", eo = z1(
  V1(
    (E, _) => ({
      locale: JN,
      setLocale: (b) => E((w) => ({ ...w, locale: b })),
      isRTL: () => {
        const b = _(), w = U1.find((X) => X.key === b.locale);
        return w != null && w.direction ? w.direction === "rtl" : false;
      },
      t: (b) => {
        const w = _();
        return qN[w.locale][b] || b;
      }
    }),
    { name: "tkTransStore" }
  )
);
function GE(E) {
  var _, b, w = "";
  if (typeof E == "string" || typeof E == "number")
    w += E;
  else if (typeof E == "object")
    if (Array.isArray(E)) {
      var X = E.length;
      for (_ = 0; _ < X; _++)
        E[_] && (b = GE(E[_])) && (w && (w += " "), w += b);
    } else
      for (b in E)
        E[b] && (w && (w += " "), w += b);
  return w;
}
function di() {
  for (var E, _, b = 0, w = "", X = arguments.length; b < X; b++)
    (E = arguments[b]) && (_ = GE(E)) && (w && (w += " "), w += _);
  return w;
}
const e2 = () => {
  const { t: E, locale: _, setLocale: b } = eo();
  return /* @__PURE__ */ L.jsxDEV("div", { id: "translaterView", className: "view-container", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { children: E("view.translater.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
        lineNumber: 10,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: E("view.translater.subtitle") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
        lineNumber: 11,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
      lineNumber: 9,
      columnNumber: 7
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("div", { className: "tk-languages", children: /* @__PURE__ */ L.jsxDEV("ul", { children: U1.map(
      (w) => /* @__PURE__ */ L.jsxDEV("li", { children: /* @__PURE__ */ L.jsxDEV(
        "button",
        {
          className: di("tk-languages-item", w.key === _ && "selected"),
          onClick: () => b(w.key),
          children: [
            w.Flag && /* @__PURE__ */ L.jsxDEV(w.Flag, {}, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
              lineNumber: 22,
              columnNumber: 35
            }, void 0),
            w.name
          ]
        },
        void 0,
        true,
        {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
          lineNumber: 18,
          columnNumber: 15
        },
        void 0
      ) }, w.key, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
        lineNumber: 17,
        columnNumber: 13
      }, void 0)
    ) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
      lineNumber: 15,
      columnNumber: 9
    }, void 0) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
      lineNumber: 14,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/TranslaterView.tsx",
    lineNumber: 8,
    columnNumber: 5
  }, void 0);
}, t2 = () => {
  const { t: E } = eo();
  return /* @__PURE__ */ L.jsxDEV("div", { id: "aboutView", className: "view-container", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { children: E("view.about.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 10,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: E("view.about.subtitle") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 11,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
      lineNumber: 9,
      columnNumber: 7
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-content", children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: "Introduction" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 18,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 17,
          columnNumber: 11
        }, void 0),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body", children: /* @__PURE__ */ L.jsxDEV("p", { children: "We understand that the internet should be accessible to anyone and weâ€™re committed to maintaining standards that enable accessibility for everyone, in spite of their situation or ability.In line with our vision to make the web accessible for everyone, we strive to maintain the best possible accessibility standards by using the Web Content Accessibility Guidelines 2.1 (WCAG 2.1) level AA success criteria as our model.The WCAG is a set of guidelines that were established by the World Wide Web Consortiumâ€™s (W3C) Web Accessibility Initiative, that describe how to make all web content accessible to a broad range of people with disabilities.We use a web accessibility interface that helps people with disabilities to adjust our websiteâ€™s UI and design to meet their specific needs." }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 21,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 20,
          columnNumber: 11
        }, void 0)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 16,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: "Disclaimer" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 27,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 26,
          columnNumber: 11
        }, void 0),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body", children: /* @__PURE__ */ L.jsxDEV("p", { children: "We aim to provide the highest standards of accessibility on our website, because we understand the moral and practical importance of being compliant with the WCAG 2.1 AA standards. We perform regular scans to identify and fix any accessibility issues that may arise. Despite our best efforts to uphold the highest possible accessibility standards on our website, you may find that there may be some pages or components of our website that may fall short of accessibility standards. This may be because we have not yet identified, or are currently in the process of identifying the best possible solution for such a problem." }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 30,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 29,
          columnNumber: 11
        }, void 0)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 25,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: "Accessibility Assistant" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 36,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 35,
          columnNumber: 11
        }, void 0),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body", children: /* @__PURE__ */ L.jsxDEV("p", { children: "To enable the accessibility assistant on our website, navigate to the accessibility icon at the corner of the page and click it. The menu will appear. You can then interact with the icons and options to suit your specific needs.We are able to make websites accessible to people with disabilities by providing specialized profiles through the Accessibility Assistant. The disability profiles supported on our website are:Blind (screen reader/braille):This profile enables people who are blind to use the website by eliminating non-essential elements from the accessibility tree. It also adjusts the website to be compatible with screen-readers such as JAWS, NVDA, and VoiceOver.Vision Impaired Profile:This profile adjusts the website so that it is accessible to people who have visual impairments by making the onscreen features more prominent and easy to read. It helps people with Glaucoma, age-related eyesight degradation, etc.Seizure secure:This profile provides various assistive features to help users with seizure disorders including pausing/stopping all animations, flashes, and multimedia.Motor Impaired:This profile significantly reduces the hassle involved in navigating a website with a keyboard. Your customers can easily use the keyboard Tab, Shift+Tab, and the Enter keys to access website elements.Focus (ADHD):This profile reduces distractions and noise, so people with ADHD and neurodevelopmental disorders can browse, read, and focus on the essential elements of a website.Dyslexia:This profile makes it easier for people with learning difficulties like Dyslexia can easily understand the content of web pages." }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 39,
          columnNumber: 13
        }, void 0) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
          lineNumber: 38,
          columnNumber: 11
        }, void 0)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
        lineNumber: 34,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
      lineNumber: 14,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/AboutView.tsx",
    lineNumber: 8,
    columnNumber: 5
  }, void 0);
}, jE = {
  displayAsAside: false,
  oversizedWidget: false,
  widgetFamilyFont: null
}, uv = z1(
  V1(
    (E, _) => ({
      settings: { ...jE },
      getSetting: (b) => _().settings[b],
      setSettings: (b) => E((w) => ({
        settings: { ...w.settings, ...b }
      })),
      reset: () => E({ settings: { ...jE } }),
      set: (b) => E((w) => ({ ...w, ...b }))
    }),
    { name: "tkSettingsStore" }
  )
);
function qE({
  Icon: E,
  iconSize: _ = 16,
  label: b,
  steps: w,
  selectedStep: X,
  isActive: P,
  next: g,
  className: ge,
  children: Z
}) {
  const Q = Kt.useId(), ve = (X == null ? void 0 : X.Icon) || E, W = (X == null ? void 0 : X.iconSize) || _;
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-steps-controller", P && "tk-steps-controller--active", ge), onClick: g, children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__container", children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__icon", children: ve && /* @__PURE__ */ L.jsxDEV(ve, { size: W }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
        lineNumber: 46,
        columnNumber: 24
      }, this) }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
        lineNumber: 45,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__content tk-steps-controller__content", children: b }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
        lineNumber: 49,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 44,
      columnNumber: 7
    }, this),
    Z && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__more", children: Z }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 54,
      columnNumber: 20
    }, this),
    w.length && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__steps", children: w.map((J, q) => /* @__PURE__ */ L.jsxDEV("div", { className: di("step-item", X && X.value === J.value && "step-item--selected"), children: /* @__PURE__ */ L.jsxDEV("span", { className: "step-item__name", children: J.name }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 59,
      columnNumber: 13
    }, this) }, `step-${Q}-${q}`, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 58,
      columnNumber: 11
    }, this)) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 56,
      columnNumber: 25
    }, this),
    X && P && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-steps-controller__selected-item", children: X.name }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
      lineNumber: 63,
      columnNumber: 38
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/StepsController.tsx",
    lineNumber: 42,
    columnNumber: 5
  }, this);
}
const Ki = {
  global: {
    layoutIconSize: 18,
    featuresIconSize: 24,
    settingsIconSize: 24
  },
  features: {
    textSize: {
      label: "feature.textSize",
      Icon: NE
    },
    lineHeight: {
      label: "feature.lineHeight",
      Icon: dN
    },
    wordSpacing: {
      label: "feature.wordSpacing",
      Icon: fN
    },
    textAlign: {
      label: "feature.textAlign",
      Icon: DN
    },
    highlightTitles: {
      label: "feature.highlightTitles",
      Icon: yN
    },
    highlightLinks: {
      label: "feature.highlightLinks",
      Icon: EN
    },
    saturation: {
      label: "feature.saturation",
      Icon: wE
    },
    noTransitions: {
      label: "feature.noTransitions",
      Icon: pN
    },
    hiddenImages: {
      label: "feature.hiddenImages",
      Icon: gN
    },
    invertColors: {
      label: "feature.invertColors",
      Icon: SN
    },
    monochrome: {
      label: "feature.monochrome",
      Icon: wE
    },
    readingGuide: {
      label: "feature.readingGuide",
      Icon: TN
    },
    bigCursor: {
      label: "feature.bigCursor",
      Icon: CN
    },
    fonts: {
      label: "feature.fonts",
      Icon: uN
    }
  },
  settings: {
    displayAsAside: {
      label: "settings.option.display",
      Icon: kN
    },
    oversizedWidget: {
      label: "settings.option.oversized",
      Icon: Kw
    },
    widgetFamilyFont: {
      label: "settings.option.font",
      Icon: NE
    }
  }
};
function n2({
  settingKey: E,
  steps: _,
  initValue: b = null,
  className: w = null
}) {
  const { t: X } = eo(), { getSetting: P, setSettings: g } = uv();
  Kt.useEffect(() => {
    g({ [E]: b });
  }, [b]);
  const ge = _.find((ee) => ee.value === P(E)) || null, Z = Ki.settings[E].label, Q = Ki.settings[E].Icon, ve = Ki.global.settingsIconSize, W = (ee) => ee < _.length - 1 ? _[ee + 1] : _[0], J = (ee) => _.findIndex((ie) => ie.value === ee), q = b && ge ? ge.value == b : false, fe = () => {
    const ee = P(E);
    if ((ee ?? null) === null)
      g({ [E]: _[0].value });
    else {
      const ie = J(ee);
      g({ [E]: W(ie).value });
    }
  };
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-cell", w), children: /* @__PURE__ */ L.jsxDEV(
    qE,
    {
      Icon: Q,
      iconSize: ve,
      label: X(Z),
      steps: _,
      selectedStep: ge,
      isActive: q,
      next: fe,
      className: "tk-steps-controller--inline"
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/SettingsStepsController.tsx",
      lineNumber: 58,
      columnNumber: 7
    },
    this
  ) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/SettingsStepsController.tsx",
    lineNumber: 57,
    columnNumber: 5
  }, this);
}
function XE({
  Icon: E,
  iconSize: _ = 16,
  label: b,
  isChecked: w,
  handleToggleChange: X,
  className: P = null,
  children: g
}) {
  const ge = Kt.useId();
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-toggle-controller", w && "tk-toggle-controller--active", P), onClick: (Z) => Z.stopPropagation(), children: [
    /* @__PURE__ */ L.jsxDEV("input", { type: "checkbox", id: ge, checked: w, onChange: X }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
      lineNumber: 28,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ L.jsxDEV("label", { htmlFor: ge, children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-toggle-controller__container", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__icon", children: E && /* @__PURE__ */ L.jsxDEV(E, { size: _ }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 33,
          columnNumber: 20
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 32,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-feature-cell__content tk-toggle-controller__content", children: b }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 36,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "indicator", children: /* @__PURE__ */ L.jsxDEV("div", { className: "indicator__puce" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 41,
          columnNumber: 11
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
          lineNumber: 40,
          columnNumber: 9
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
        lineNumber: 31,
        columnNumber: 7
      }, this),
      g && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-toggle-controller__more", children: g }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
        lineNumber: 45,
        columnNumber: 20
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
      lineNumber: 29,
      columnNumber: 5
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/ToggleController.tsx",
    lineNumber: 27,
    columnNumber: 10
  }, this);
}
function FE({
  settingKey: E,
  initValue: _ = false,
  className: b = null
}) {
  const { t: w } = eo(), { getSetting: X, setSettings: P } = uv(), g = Ki.settings[E].label, ge = Ki.settings[E].Icon, Z = Ki.global.settingsIconSize;
  Kt.useEffect(() => {
    P({ [E]: _ });
  }, [_]);
  const Q = () => P({ [E]: !X(E) });
  return /* @__PURE__ */ L.jsxDEV(
    XE,
    {
      Icon: ge,
      iconSize: Z,
      label: w(g),
      isChecked: X(E),
      handleToggleChange: Q,
      className: di("tk-cell", b)
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/SettingsToggleController.tsx",
      lineNumber: 35,
      columnNumber: 5
    },
    this
  );
}
const r2 = () => {
  const { t: E } = eo(), { settings: _ } = uv(), b = [
    { name: "System", value: "" },
    { name: "Roboto", value: "roboto" },
    { name: "Montserrat", value: "montserrat" }
  ];
  return /* @__PURE__ */ L.jsxDEV("div", { id: "settingsView", className: "view-container", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { children: E("view.settings.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 21,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: E("view.settings.subtitle") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 22,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
      lineNumber: 20,
      columnNumber: 7
    }, void 0),
    /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content", children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__head", children: /* @__PURE__ */ L.jsxDEV("h2", { children: E("view.settings.interface.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 27,
        columnNumber: 11
      }, void 0) }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 26,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-content__body tk-cells-column", children: [
        /* @__PURE__ */ L.jsxDEV(
          FE,
          {
            settingKey: "displayAsAside",
            initValue: _.displayAsAside
          },
          void 0,
          false,
          {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
            lineNumber: 31,
            columnNumber: 11
          },
          void 0
        ),
        /* @__PURE__ */ L.jsxDEV(
          FE,
          {
            settingKey: "oversizedWidget",
            initValue: _.oversizedWidget
          },
          void 0,
          false,
          {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
            lineNumber: 35,
            columnNumber: 11
          },
          void 0
        ),
        /* @__PURE__ */ L.jsxDEV(
          n2,
          {
            settingKey: "widgetFamilyFont",
            steps: b,
            initValue: _.widgetFamilyFont
          },
          void 0,
          false,
          {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
            lineNumber: 39,
            columnNumber: 11
          },
          void 0
        )
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
        lineNumber: 30,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
      lineNumber: 25,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/SettingsView.tsx",
    lineNumber: 19,
    columnNumber: 5
  }, void 0);
};
function i2({
  profile: E,
  className: _ = null
}) {
  const { applyProfileFeatures: b, isProfileChecked: w, reset: X } = ov(), P = Kt.useId(), g = Ki.global.featuresIconSize, ge = w(E.features), Z = () => ge ? X() : b(E.features);
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-cell tk-profile-switch highlight-if-has-checked", _), onClick: (Q) => Q.stopPropagation(), children: [
    /* @__PURE__ */ L.jsxDEV("input", { type: "checkbox", id: P, checked: ge, onChange: Z }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
      lineNumber: 29,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ L.jsxDEV("label", { htmlFor: P, children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__container", children: [
        E.Icon ? /* @__PURE__ */ L.jsxDEV(E.Icon, { size: g }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 32,
          columnNumber: 25
        }, this) : /* @__PURE__ */ L.jsxDEV(YE, { size: g }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 32,
          columnNumber: 60
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__content tk-flex tk-flex-col tk-gap-1", children: [
          /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__title tk-font-semibold", children: E.title }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
            lineNumber: 34,
            columnNumber: 11
          }, this),
          /* @__PURE__ */ L.jsxDEV("div", { children: E.shortDescription }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
            lineNumber: 35,
            columnNumber: 11
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 33,
          columnNumber: 9
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "indicator", children: /* @__PURE__ */ L.jsxDEV("div", { className: "indicator__puce" }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 38,
          columnNumber: 11
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
          lineNumber: 37,
          columnNumber: 9
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
        lineNumber: 31,
        columnNumber: 7
      }, this),
      ge && E.description && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-profile-switch__more", children: E.description }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
        lineNumber: 41,
        columnNumber: 45
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
      lineNumber: 30,
      columnNumber: 5
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfileSwitchController.tsx",
    lineNumber: 28,
    columnNumber: 10
  }, this);
}
const a2 = ({ title: E, Icon: _, className: b, children: w }) => {
  const [X, P] = Kt.useState(false);
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-accordion", "rounded-md p-2 mb-1", b), children: [
    /* @__PURE__ */ L.jsxDEV(
      "div",
      {
        className: "tk-accordion__head tk-text-lg tk-p-2 tk-flex tk-items-center tk-justify-between",
        onClick: () => P(!X),
        children: [
          /* @__PURE__ */ L.jsxDEV("h3", { className: "tk-accordion__head__title", children: [
            _ && /* @__PURE__ */ L.jsxDEV(_, { size: 18 }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
              lineNumber: 23,
              columnNumber: 23
            }, void 0),
            E
          ] }, void 0, true, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
            lineNumber: 22,
            columnNumber: 11
          }, void 0),
          /* @__PURE__ */ L.jsxDEV(cN, { className: di("tk-origin-center", X && "tk-rotate-90") }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
            lineNumber: 26,
            columnNumber: 11
          }, void 0)
        ]
      },
      void 0,
      true,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
        lineNumber: 18,
        columnNumber: 7
      },
      void 0
    ),
    X && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-accordion__content tk-mt-2", children: w }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
      lineNumber: 28,
      columnNumber: 20
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ui/Accordion.tsx",
    lineNumber: 17,
    columnNumber: 5
  }, void 0);
}, l2 = [
  {
    id: 1,
    title: "Motor Impaired",
    shortDescription: "Manipulating a mouse and keyboard to navigate sites",
    description: "Manipulating a mouse and keyboard to navigate sites isnâ€™t always easy for people with motor impairments. UserWay consults with motor-impaired individuals to develop tools that can help. This profile provides options that can make site navigation much less complicated.",
    Icon: Zw,
    checked: false,
    enable: true,
    // Play Animation | Tooltips!
    features: { noTransitions: true }
  },
  {
    id: 2,
    title: "Blind",
    shortDescription: "Optimize website for screen-readers",
    description: "When a website isnâ€™t structured properly, the assistive technologies the blind rely upon arenâ€™t effective. And if navigation and shopping carts present barriers to access, these visitors have no choice but to abandon inaccessible sites.",
    Icon: lN,
    checked: false,
    enable: true,
    // Read Normal!
    features: { readingGuide: true }
  },
  {
    id: 3,
    title: "Color Blind",
    shortDescription: "",
    description: "Since everyone doesnâ€™t see colors the same way, UserWay works with color blind individuals to determine what features they find helpful, then groups them together in this profile to provide relevant suggestions.",
    Icon: mN,
    checked: false,
    enable: true,
    // Smart Contrast! | High Saturation
    features: { textSize: -1, wordSpacing: 1, saturation: "high", fonts: "dyslexia" }
  },
  {
    id: 4,
    title: "Dyslexia",
    shortDescription: "",
    description: "It is estimated that 1 in 5 people worldwide have dyslexia, but many have not been diagnosed. This profile provides customization options that can help improve reading comprehension and fluency.",
    Icon: bN,
    checked: false,
    enable: true,
    features: { noTransitions: true, fonts: "dyslexia" }
  },
  {
    id: 5,
    title: "Visually-impaired",
    shortDescription: "",
    description: "There are a number of adjustments that can make websites easier to navigate and read for people with impaired vision. This profile provides suggestions that can be helpful for a variety of conditions.",
    Icon: hN,
    checked: false,
    enable: true,
    // Bigger Text | Play animation | Legible font | Big Cursor | Tooltips! | High Saturation
    features: { bigCursor: true, noTransitions: true, textSize: 2, saturation: "high", fonts: "legible" }
  },
  {
    id: 6,
    title: "Cognitive & Learning",
    shortDescription: "Assists with reading & focusing",
    description: "Cognitive impairments and learning disabilities can have a profound effect on reading comprehension. The tools included in this profile can help improve reading experiences and help viewers identify relevant information.",
    Icon: NN,
    checked: false,
    enable: true,
    // Smart Contrast! | Bigger Text | Play Animation | Reading Guide | Tooltips!
    features: { textSize: 2, noTransitions: true, readingGuide: true }
  },
  {
    id: 7,
    title: "Seizure & Epileptic",
    shortDescription: "Clear flashes & reduces color",
    description: "Flashing page elements, animations, and videos can sometimes trigger seizures in people with epilepsy and similar conditions. This profile provides a way to pause animations and other helpful customizations.",
    Icon: oN,
    checked: false,
    enable: true,
    // Play Animation | Low Saturation!
    features: { monochrome: true, noTransitions: true }
  },
  {
    id: 8,
    title: "ADHD Friendly Profile",
    shortDescription: "More focus & fewer distractions",
    description: "A number of tools are available that can help visitors stay focused as they move through a webpage. The recommendations included in this profile may help alleviate distractions to improve reading comprehension.",
    Icon: vN,
    checked: false,
    enable: true,
    // Play Animation | Reading Mask | Low saturation!
    features: { monochrome: true, noTransitions: true, readingGuide: true }
  }
], o2 = ({ className: E }) => {
  const { t: _ } = eo(), b = l2.filter((w) => w.enable);
  return /* @__PURE__ */ L.jsxDEV(a2, { className: di("widget-section", E), title: _("profile.section.title"), Icon: YE, children: /* @__PURE__ */ L.jsxDEV("div", { className: "tk-cells-column", children: b.map(
    (w) => /* @__PURE__ */ L.jsxDEV(i2, { profile: w }, w.id, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfilesSection.tsx",
      lineNumber: 34,
      columnNumber: 22
    }, void 0)
  ) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfilesSection.tsx",
    lineNumber: 32,
    columnNumber: 7
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/ProfilesSection.tsx",
    lineNumber: 31,
    columnNumber: 5
  }, void 0);
};
function rc({
  featureKey: E,
  initValue: _ = false,
  className: b = null
}) {
  const { t: w } = eo(), { getFeature: X, setFeatures: P } = ov(), g = Ki.features[E].label, ge = Ki.features[E].Icon, Z = Ki.global.featuresIconSize;
  Kt.useEffect(() => {
    P({ [E]: _ });
  }, [_]);
  const Q = X(E), ve = () => P({ [E]: !X(E) });
  return /* @__PURE__ */ L.jsxDEV(
    XE,
    {
      Icon: ge,
      iconSize: Z,
      label: w(g),
      isChecked: Q,
      handleToggleChange: ve,
      className: di("tk-feature-cell", Q && "tk-active", b)
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeatureToggleController.tsx",
      lineNumber: 35,
      columnNumber: 8
    },
    this
  );
}
class u2 {
  warn(_) {
    const b = "Accessibility: ";
    console.warn ? console.warn(b + _) : console.log(b + _);
  }
  getDataInitAttr(_) {
    return `data-init-${_.toLowerCase()}`;
  }
  // return height in percentage
  getElementLineHeightInPercent(_) {
    const b = getComputedStyle(_).fontSize, X = getComputedStyle(_).lineHeight.replace("px", ""), P = b.replace("px", "");
    return parseInt(X) * 100 / parseInt(P);
  }
  getFormattedDim(_) {
    _ = String(_);
    const b = function(w, X) {
      return {
        size: w.substring(0, w.indexOf(X)),
        suffix: X
      };
    };
    if (_.indexOf("%") > -1)
      return b(_, "%");
    if (_.indexOf("px") > -1)
      return b(_, "px");
    if (_.indexOf("em") > -1)
      return b(_, "em");
    if (_.indexOf("rem") > -1)
      return b(_, "rem");
    if (_.indexOf("pt") > -1)
      return b(_, "pt");
    if (_ === "auto")
      return b(_, "");
    throw Error(`Invalid dimension format ${_}`);
  }
}
class s2 {
  constructor(_ = {}) {
    Jl(this, "_html");
    Jl(this, "_body");
    Jl(this, "_allElms");
    Jl(this, "_options");
    Jl(this, "options");
    Jl(this, "_initValues");
    Jl(this, "_defaultStateValues");
    Jl(this, "_sessionState");
    Jl(this, "_common");
    this._html = document.documentElement || document.getElementsByTagName("html")[0], this._body = document.body || document.getElementsByTagName("body")[0], this._allElms = document.querySelectorAll("body :not(#a11yRoot, #a11yRoot *, script, style)"), this._common = new u2(), this._options = this.defaultOptions, this.options = { ...this._options, ..._ }, this._initValues = {
      html: {},
      body: {}
    }, this._defaultStateValues = {
      textSize: 0,
      textSpace: 0,
      lineHeight: 0,
      filter: {
        saturation: "default",
        invertColors: false,
        grayscale: false
      },
      underlineLinks: false,
      bigCursor: false,
      readingGuide: false
    }, this._sessionState = {
      textSize: 0,
      textSpace: 0,
      lineHeight: 0,
      filter: {
        saturation: "default",
        invertColors: false,
        grayscale: false
      },
      underlineLinks: false,
      bigCursor: false,
      readingGuide: false
    }, this.initData();
  }
  get defaultOptions() {
    return {
      textSizeMode: "PIXEL"
    };
  }
  get sessionState() {
    return this._sessionState;
  }
  set sessionState(_) {
    this._sessionState = _;
  }
  initData() {
    this.initFontSize(), this.initLineHeight(), this.initBg();
  }
  initFontSize() {
    if (this.options.textSizeMode === "EM") {
      const _ = this._common.getFormattedDim(getComputedStyle(this._html).fontSize), b = this._common.getFormattedDim(getComputedStyle(this._body).fontSize);
      if (_ && b) {
        const w = String(_.size / 16 * 100);
        this._initValues.html && (this._initValues.html.fontSize = `${w}%`), this._html.style.fontSize = `${w}%`;
      }
    }
  }
  initLineHeight() {
    const _ = this._common.getElementLineHeightInPercent(this._html);
    this.options.textSizeMode === "EM" && _ && (this._html.style.lineHeight = `${_}%`, this._initValues.html && (this._initValues.html.lineHeight = `${_}%`));
  }
  initBg() {
    this._html.style.backgroundColor = "rgba(255, 255, 255, 100)";
  }
  // fontSize | lineHeight | wordSpacing...........................................
  alterProperty(_, b = 0) {
    var X;
    const w = {
      fontSize: { PIXEL: { factor: 2, default: 100 }, EM: { factor: 10, default: 100 } },
      lineHeight: { PIXEL: { factor: 2, default: 100 }, EM: { factor: 10, default: 150 } },
      wordSpacing: { PIXEL: { factor: 1, default: 0 }, EM: { factor: 1, default: 0 } }
    };
    if (this.options.textSizeMode === "PIXEL" || ["wordSpacing"].includes(_))
      for (let P = 0; P < this._allElms.length; P++) {
        const g = getComputedStyle(this._allElms[P])[_];
        if (g && g.indexOf("px") > -1) {
          const ge = this._common.getDataInitAttr(_);
          this._allElms[P].getAttribute(ge) || this._allElms[P].setAttribute(ge, g);
          const Z = ((X = this._allElms[P].getAttribute(ge)) == null ? void 0 : X.replace("px", "")) || g, Q = parseInt(Z) + b * w[_].PIXEL.factor;
          this._allElms[P].style[_] = `${String(Q)}px`;
        }
      }
    else if (this.options.textSizeMode === "EM") {
      const g = 1 * w[_].EM.default + b * w[_].EM.factor;
      this._html.style[_] = `${g}%`;
    }
  }
  alterFilter(_, b) {
    this._sessionState.filter[_] = b;
    const w = this.getFilterValues();
    this.rootElementToggleClass(w.filters !== "", "tk-no-trans"), this._html.style.filter = w.filters, document.querySelector(".a11y-turnkey") && (document.querySelector(".a11y-turnkey").style.filter = w.invertFilter);
  }
  getFilterValues() {
    const _ = [], b = [], w = {
      default: 1,
      low: 0.5,
      high: 3,
      desaturate: 0
    };
    return this._sessionState.filter.saturation !== this._defaultStateValues.filter.saturation && _.push(`saturate(${w[this._sessionState.filter.saturation]})`), this._sessionState.filter.invertColors !== this._defaultStateValues.filter.invertColors && (_.push(`invert(${this._sessionState.filter.invertColors ? "1" : "0"})`), b.push(`invert(${this._sessionState.filter.invertColors ? "1" : "0"})`)), this._sessionState.filter.grayscale !== this._defaultStateValues.filter.grayscale && _.push(`grayscale(${this._sessionState.filter.grayscale ? "1" : "0"})`), {
      filters: _.join(" "),
      invertFilter: b.join(" ")
    };
  }
  enableReadingGuide(_ = false) {
    let b = document.querySelector(".access-read-guide-bar");
    b || (b = document.createElement("div"), b.classList.add("access-read-guide-bar"), document.body.appendChild(b)), b.style.display = _ ? "block" : "none";
    const w = (X) => {
      if (b) {
        const P = X.pageY + 2;
        b.style.top = P + "px";
      }
    };
    _ ? document.addEventListener("mousemove", w) : document.removeEventListener("mousemove", w);
  }
  enableBigCursor(_ = false) {
    this.rootElementToggleClass(_, "_access_cursor");
  }
  enableEnableDyslexie(_ = false) {
    this.rootElementToggleClass(_, "tk-dy");
  }
  enableHighlightTitles(_ = false) {
    this.rootElementToggleClass(_, "tk-hltl");
  }
  enableHighlightLinks(_ = false) {
    this.rootElementToggleClass(_, "tk-hllk");
  }
  enableHiddenImages(_ = false) {
    this.rootElementToggleClass(_, "tk-hidden-img");
  }
  enableNoTransitions(_ = false) {
    this.rootElementToggleClass(_, "tk-no-trans");
  }
  rootElementToggleClass(_ = false, b) {
    _ ? this._html.classList.add(b) : this._html.classList.remove(b);
  }
  alterFonts(_) {
    const b = ["tk-fonts--dyslexia", "tk-fonts--legible"];
    this.useOneOfClassList(`tk-fonts--${_}`, b);
  }
  textAlignSwitchClass(_) {
    const b = ["tk-align-initial", "tk-align-justify", "tk-align-left", "tk-align-right", "tk-align-center"];
    this.useOneOfClassList(`tk-align-${_}`, b);
  }
  useOneOfClassList(_, b) {
    this._html.classList.remove(...b), _ && this._html.classList.add(_);
  }
}
function Yf({
  featureKey: E,
  steps: _,
  initValue: b = null,
  className: w = null
}) {
  const { t: X } = eo(), { getFeature: P, setFeatures: g } = ov(), ge = Ki.features[E].label, Z = Ki.features[E].Icon, Q = Ki.global.featuresIconSize;
  Kt.useEffect(() => {
    g({ [E]: b });
  }, [b]);
  const ve = _.find((ee) => ee.value === P(E)) || null, W = (ee) => ee < _.length - 1 ? _[ee + 1] : _[0], J = (ee) => _.findIndex((ie) => ie.value === ee), q = b && ve ? ve.value == b : false, fe = () => {
    const ee = P(E);
    if ((ee ?? null) === null)
      g({ [E]: _[0].value });
    else {
      const ie = J(ee);
      g({ [E]: W(ie).value });
    }
  };
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-feature-cell", q && "tk-active", w), children: /* @__PURE__ */ L.jsxDEV(
    qE,
    {
      Icon: Z,
      iconSize: Q,
      label: X(ge),
      steps: _,
      selectedStep: ve,
      isActive: q,
      next: fe,
      className: "tk-steps-controller--vertical-demo"
    },
    void 0,
    false,
    {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeatureStepsController.tsx",
      lineNumber: 57,
      columnNumber: 5
    },
    this
  ) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeatureStepsController.tsx",
    lineNumber: 56,
    columnNumber: 10
  }, this);
}
const c2 = (window == null ? void 0 : window.AccessibilityTurnkeyOptions) || {}, Xi = new s2(c2), f2 = () => {
  const { settings: E } = uv(), [_, b] = Kt.useState(false);
  Kt.useEffect(() => {
    b(E.oversizedWidget);
  }, [E.oversizedWidget]);
  const { features: w } = ov();
  Kt.useEffect(() => {
    Xi.alterProperty("fontSize", w.textSize);
  }, [w.textSize]), Kt.useEffect(() => {
    Xi.alterProperty("lineHeight", w.lineHeight);
  }, [w.lineHeight]), Kt.useEffect(() => {
    Xi.alterProperty("wordSpacing", w.wordSpacing);
  }, [w.wordSpacing]), Kt.useEffect(() => {
    Xi.enableHighlightTitles(w.highlightTitles);
  }, [w.highlightTitles]), Kt.useEffect(() => {
    Xi.enableHighlightLinks(w.highlightLinks);
  }, [w.highlightLinks]), Kt.useEffect(() => {
    Xi.textAlignSwitchClass(w.textAlign);
  }, [w.textAlign]), Kt.useEffect(() => {
    Xi.enableHiddenImages(w.hiddenImages);
  }, [w.hiddenImages]), Kt.useEffect(() => {
    Xi.alterFilter("invertColors", w.invertColors);
  }, [w.invertColors]), Kt.useEffect(() => {
    Xi.alterFilter("grayscale", w.monochrome);
  }, [w.monochrome]), Kt.useEffect(() => {
    Xi.alterFilter("saturation", w.saturation || "default");
  }, [w.saturation]), Kt.useEffect(() => {
    Xi.enableReadingGuide(w.readingGuide);
  }, [w.readingGuide]), Kt.useEffect(() => {
    Xi.alterFonts(w.fonts);
  }, [w.fonts]), Kt.useEffect(() => {
    Xi.enableNoTransitions(w.noTransitions);
  }, [w.noTransitions]), Kt.useEffect(() => {
    Xi.enableBigCursor(w.bigCursor);
  }, [w.bigCursor]);
  const X = [
    { name: "Small", value: -2, iconSize: 14 },
    { name: "", value: 0, iconSize: 16 },
    { name: "Big", value: 2, iconSize: 18 },
    { name: "Bigger", value: 4, iconSize: 20 }
  ], P = [
    { name: "Small", value: -2, iconSize: 14 },
    { name: "", value: 0, iconSize: 16 },
    { name: "Big", value: 2, iconSize: 18 },
    { name: "Bigger", value: 4, iconSize: 20 }
  ], g = [
    { name: "Small", value: -2, iconSize: 14 },
    { name: "", value: 0, iconSize: 16 },
    { name: "Big", value: 2, iconSize: 18 },
    { name: "Bigger", value: 4, iconSize: 20 }
  ], ge = [
    { name: "Left", value: "left", Icon: tN },
    { name: "Right", value: "right", Icon: nN },
    { name: "Center", value: "center", Icon: Jw },
    { name: "Justify", value: "justify", Icon: eN }
  ], Z = [
    { name: "Low", value: "low" },
    { name: "High", value: "high" },
    { name: "Desaturate", value: "desaturate" },
    { name: "Default", value: "default" }
  ], Q = [
    { name: "Dyslexia", value: "dyslexia" },
    { name: "Legible", value: "legible" }
  ];
  return /* @__PURE__ */ L.jsxDEV("div", { className: "widget-section", children: /* @__PURE__ */ L.jsxDEV("div", { className: di("tk-grid", _ && "tk-grid--xl"), children: [
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "textSize",
        steps: X,
        initValue: w.textSize
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 138,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "lineHeight",
        steps: P,
        initValue: w.lineHeight
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 144,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "wordSpacing",
        steps: g,
        initValue: w.wordSpacing
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 150,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "highlightTitles",
        initValue: w.highlightTitles,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 156,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "textAlign",
        steps: ge,
        initValue: w.textAlign
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 162,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "highlightLinks",
        initValue: w.highlightLinks,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 168,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "invertColors",
        initValue: w.invertColors,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 174,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "saturation",
        initValue: w.saturation,
        steps: Z,
        className: "tk-span-2"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 180,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "noTransitions",
        initValue: w.noTransitions,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 187,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      Yf,
      {
        featureKey: "fonts",
        initValue: w.fonts,
        steps: Q
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 193,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "hiddenImages",
        initValue: w.hiddenImages,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 199,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "bigCursor",
        initValue: w.bigCursor,
        className: "compact tk-span-2"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 205,
        columnNumber: 9
      },
      void 0
    ),
    /* @__PURE__ */ L.jsxDEV(
      rc,
      {
        featureKey: "readingGuide",
        initValue: w.readingGuide,
        className: "compact"
      },
      void 0,
      false,
      {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
        lineNumber: 211,
        columnNumber: 9
      },
      void 0
    )
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
    lineNumber: 137,
    columnNumber: 7
  }, void 0) }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/FeaturesSection.tsx",
    lineNumber: 136,
    columnNumber: 5
  }, void 0);
}, d2 = ({ enableProfiles: E = true }) => {
  const { t: _ } = eo();
  return /* @__PURE__ */ L.jsxDEV("div", { id: "mainView", className: "view-container view-container--full", children: [
    /* @__PURE__ */ L.jsxDEV("div", { className: "view-container__head", children: [
      /* @__PURE__ */ L.jsxDEV("h2", { className: "widget__body__title", children: _("global.title") }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
        lineNumber: 16,
        columnNumber: 9
      }, void 0),
      /* @__PURE__ */ L.jsxDEV("p", { children: "Adapt this site according to your preferences." }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
        lineNumber: 17,
        columnNumber: 9
      }, void 0)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
      lineNumber: 15,
      columnNumber: 7
    }, void 0),
    E && /* @__PURE__ */ L.jsxDEV(o2, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
      lineNumber: 20,
      columnNumber: 26
    }, void 0),
    /* @__PURE__ */ L.jsxDEV(f2, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
      lineNumber: 22,
      columnNumber: 7
    }, void 0)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/components/views/MainView.tsx",
    lineNumber: 14,
    columnNumber: 5
  }, void 0);
}, p2 = "#1e74e9", v2 = "#f2f7fa", m2 = "#EFEFEF", h2 = "#FFFFFF", y2 = "#100F0F", Wo = {
  primaryColor: p2,
  secondaryColor: v2,
  tertiaryColor: m2,
  quaternaryColor: h2,
  textColor: y2,
  xPosEntrypoint: 12,
  yPosEntrypoint: 12
}, g2 = ({
  primaryColor: E = Wo.primaryColor,
  secondaryColor: _ = Wo.secondaryColor,
  tertiaryColor: b = Wo.tertiaryColor,
  quaternaryColor: w = Wo.quaternaryColor,
  textColor: X = Wo.textColor,
  xPosEntrypoint: P = Wo.xPosEntrypoint,
  yPosEntrypoint: g = Wo.yPosEntrypoint
}) => {
  document.documentElement.style.setProperty("--tk-primary-color", E), document.documentElement.style.setProperty("--tk-secondary-color", _), document.documentElement.style.setProperty("--tk-tertiary-color", b), document.documentElement.style.setProperty("--tk-quaternary-color", w), document.documentElement.style.setProperty("--tk-text-color", X), document.documentElement.style.setProperty("--tk-entrypoint-x", `${P}px`), document.documentElement.style.setProperty("--tk-entrypoint-y", `${g}px`);
};
function S2({
  enableProfiles: E = true,
  enableAboutView: _ = true,
  theme: b = Wo
}) {
  Kt.useLayoutEffect(() => g2(b), [b]);
  const { locale: w, t: X, isRTL: P } = eo(), g = U1.find((oe) => oe.key === w), { settings: ge } = uv(), Z = Ki.global.layoutIconSize, [Q, ve] = Kt.useState(false), [W, J] = Kt.useState(false), [q, fe] = Kt.useState("main"), { isSomeFeaturesSelected: ee, reset: ie } = ov(), Xe = () => {
    ie();
  }, de = () => ({
    main: /* @__PURE__ */ L.jsxDEV(d2, { enableProfiles: E }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 47,
      columnNumber: 13
    }, this),
    translater: /* @__PURE__ */ L.jsxDEV(e2, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 48,
      columnNumber: 19
    }, this),
    settings: /* @__PURE__ */ L.jsxDEV(r2, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 49,
      columnNumber: 17
    }, this),
    about: /* @__PURE__ */ L.jsxDEV(t2, {}, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 50,
      columnNumber: 14
    }, this)
  })[q];
  return /* @__PURE__ */ L.jsxDEV("div", { className: di("a11y-turnkey", W && "left-display", P() && "tk-rtl"), children: [
    /* @__PURE__ */ L.jsxDEV("button", { className: "a11y-turnkey__entrypoint", onClick: () => ve((oe) => !oe), children: [
      /* @__PURE__ */ L.jsxDEV(xN, { color: "white", size: 32 }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 59,
        columnNumber: 9
      }, this),
      ee() && /* @__PURE__ */ L.jsxDEV("span", { className: "a11y-turnkey__entrypoint__ischeck", children: /* @__PURE__ */ L.jsxDEV(sN, { size: 12, color: "#1e74e9" }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 61,
        columnNumber: 11
      }, this) }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 60,
        columnNumber: 38
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 58,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ L.jsxDEV("div", { className: di("overlay", ge.displayAsAside && "overlay--aside", Q && "overlay--active"), children: /* @__PURE__ */ L.jsxDEV("div", { className: di("widget", ge.oversizedWidget && "widget--xl", ge.widgetFamilyFont && `use-${ge.widgetFamilyFont}`, Q && "widget--active"), children: [
      /* @__PURE__ */ L.jsxDEV("div", { className: "widget__header", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-left", children: [
          q !== "main" && /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => fe("main"), children: [
            (g == null ? void 0 : g.direction) === "rtl" ? /* @__PURE__ */ L.jsxDEV(aN, { size: Z }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 71,
              columnNumber: 61
            }, this) : /* @__PURE__ */ L.jsxDEV(rN, { size: Z }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 71,
              columnNumber: 94
            }, this),
            /* @__PURE__ */ L.jsxDEV("span", { children: X("global.back") }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 72,
              columnNumber: 19
            }, this)
          ] }, void 0, true, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 70,
            columnNumber: 17
          }, this),
          q !== "translater" && g && /* @__PURE__ */ L.jsxDEV("div", { className: "tk-btn", onClick: () => fe("translater"), children: [
            g.Flag && /* @__PURE__ */ L.jsxDEV(g.Flag, {}, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 76,
              columnNumber: 45
            }, this),
            /* @__PURE__ */ L.jsxDEV("span", { children: g.name }, void 0, false, {
              fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
              lineNumber: 77,
              columnNumber: 19
            }, this)
          ] }, void 0, true, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 75,
            columnNumber: 17
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 68,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-right", children: [
          /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => J((oe) => !oe), children: /* @__PURE__ */ L.jsxDEV(iN, { size: Z }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 82,
            columnNumber: 17
          }, this) }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 81,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => fe("settings"), children: /* @__PURE__ */ L.jsxDEV(wN, { size: Z }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 85,
            columnNumber: 17
          }, this) }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 84,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => ve((oe) => !oe), children: /* @__PURE__ */ L.jsxDEV(ON, { size: Z }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 88,
            columnNumber: 17
          }, this) }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 87,
            columnNumber: 15
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 80,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 67,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ L.jsxDEV("div", { className: "widget__body", children: de() }, void 0, false, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 93,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ L.jsxDEV("div", { className: "widget__footer", children: [
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-left", children: q === "main" && /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: Xe, children: [
          /* @__PURE__ */ L.jsxDEV(RN, { size: Z }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 100,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ L.jsxDEV("span", { children: X("global.resetAllSettings") }, void 0, false, {
            fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
            lineNumber: 101,
            columnNumber: 17
          }, this)
        ] }, void 0, true, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 99,
          columnNumber: 37
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 98,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ L.jsxDEV("div", { className: "tk-center-align jc-right", children: _ && /* @__PURE__ */ L.jsxDEV("button", { className: "tk-btn", onClick: () => fe("about"), children: /* @__PURE__ */ L.jsxDEV(_N, { size: Z }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 106,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 105,
          columnNumber: 35
        }, this) }, void 0, false, {
          fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
          lineNumber: 104,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
        lineNumber: 97,
        columnNumber: 11
      }, this)
    ] }, void 0, true, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 65,
      columnNumber: 9
    }, this) }, void 0, false, {
      fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
      lineNumber: 64,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/AccessibilityTurnkey.tsx",
    lineNumber: 57,
    columnNumber: 5
  }, this);
}
const HE = "a11yRoot", PE = {
  appSettings: {
    enableProfiles: true,
    enableAboutView: true,
    theme: {
      ...Wo
    }
  }
}, b2 = (E) => {
  const _ = document.querySelector(`#${HE}`);
  _ && _.remove();
  const b = {
    appSettings: {
      ...PE.appSettings,
      ...E && E.appSettings,
      theme: {
        ...PE.appSettings.theme,
        ...E && E.appSettings.theme
      }
    }
  };
  b && (window.AccessibilityTurnkeyOptions = b);
  const w = document.createElement("div");
  w.setAttribute("id", HE), w.setAttribute("style", "position:relative; z-index:99999;"), document.body.appendChild(w), av.createRoot(w).render(/* @__PURE__ */ L.jsxDEV(S2, { ...b.appSettings }, void 0, false, {
    fileName: "C:/__develop/__React/accessibility-turnkey/packages/accessibility-turnkey/src/main.tsx",
    lineNumber: 71,
    columnNumber: 47
  }, void 0));
};
export {
  S2 as default,
  b2 as loadAccessibilityTurnkey
};

//# sourceMappingURL=data:application/json;base64,